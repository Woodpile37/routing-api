diff --git a/bin/stacks/routing-api-stack.ts b/bin/stacks/routing-api-stack.ts
index 2159c46..4d8b568 100644
--- a/bin/stacks/routing-api-stack.ts
+++ b/bin/stacks/routing-api-stack.ts
@@ -1,4 +1,3 @@
-import { SUPPORTED_CHAINS } from '@uniswap/smart-order-router'
 import * as cdk from 'aws-cdk-lib'
 import { ChainId } from '@uniswap/sdk-core'
 import { CfnOutput, Duration } from 'aws-cdk-lib'
@@ -16,6 +15,7 @@ import { RoutingCachingStack } from './routing-caching-stack'
 import { RoutingDashboardStack } from './routing-dashboard-stack'
 import { RoutingLambdaStack } from './routing-lambda-stack'
 import { RoutingDatabaseStack } from './routing-database-stack'
+import { SUPPORTED_CHAINS } from '../../lib/sor'
 
 export const CHAINS_NOT_MONITORED: ChainId[] = [ChainId.GOERLI, ChainId.POLYGON_MUMBAI]
 
@@ -151,7 +151,7 @@ export class RoutingAPIStack extends cdk.Stack {
           statement: {
             rateBasedStatement: {
               // Limit is per 5 mins, i.e. 120 requests every 5 mins
-              limit: throttlingOverride ? parseInt(throttlingOverride) : 120,
+              limit: throttlingOverride ? parseInt(throttlingOverride) : 120000,
               // API is of type EDGE so is fronted by Cloudfront as a proxy.
               // Use the ip set in X-Forwarded-For by Cloudfront, not the regular IP
               // which would just resolve to Cloudfronts IP.
diff --git a/bin/stacks/routing-dashboard-stack.ts b/bin/stacks/routing-dashboard-stack.ts
index d52b4e6..d492298 100644
--- a/bin/stacks/routing-dashboard-stack.ts
+++ b/bin/stacks/routing-dashboard-stack.ts
@@ -6,7 +6,7 @@ import _ from 'lodash'
 import { QuoteAmountsWidgetsFactory } from '../../lib/dashboards/quote-amounts-widgets-factory'
 import { SUPPORTED_CHAINS } from '../../lib/handlers/injector-sor'
 import { CachedRoutesWidgetsFactory } from '../../lib/dashboards/cached-routes-widgets-factory'
-import { ID_TO_NETWORK_NAME } from '@uniswap/smart-order-router/build/main/util/chains'
+import { ID_TO_NETWORK_NAME } from '../../lib/sor'
 import { RpcProvidersWidgetsFactory } from '../../lib/dashboards/rpc-providers-widgets-factory'
 
 export const NAMESPACE = 'Uniswap'
diff --git a/lib/cron/cache-config.ts b/lib/cron/cache-config.ts
index da6a4d4..77b8cee 100644
--- a/lib/cron/cache-config.ts
+++ b/lib/cron/cache-config.ts
@@ -1,6 +1,6 @@
 import { Protocol } from '@uniswap/router-sdk'
-import { V2SubgraphProvider, V3SubgraphProvider } from '@uniswap/smart-order-router'
 import { ChainId } from '@uniswap/sdk-core'
+import { V3SubgraphProvider, V2SubgraphProvider } from '../sor'
 
 export const chainProtocols = [
   // V3.
diff --git a/lib/cron/cache-pools-ipfs.ts b/lib/cron/cache-pools-ipfs.ts
index d11708a..7179fd0 100644
--- a/lib/cron/cache-pools-ipfs.ts
+++ b/lib/cron/cache-pools-ipfs.ts
@@ -1,5 +1,4 @@
 import pinataSDK from '@pinata/sdk'
-import { ID_TO_NETWORK_NAME } from '@uniswap/smart-order-router'
 import { EventBridgeEvent, ScheduledHandler } from 'aws-lambda'
 import { Route53, STS } from 'aws-sdk'
 import { default as bunyan, default as Logger } from 'bunyan'
@@ -7,6 +6,7 @@ import fs from 'fs'
 import _ from 'lodash'
 import path from 'path'
 import { chainProtocols } from './cache-config'
+import { ID_TO_NETWORK_NAME } from '../sor'
 
 const PARENT = '/tmp/temp/'
 
diff --git a/lib/cron/cache-pools.ts b/lib/cron/cache-pools.ts
index 7b51860..a6ee242 100644
--- a/lib/cron/cache-pools.ts
+++ b/lib/cron/cache-pools.ts
@@ -1,11 +1,11 @@
 import { Protocol } from '@uniswap/router-sdk'
-import { setGlobalLogger } from '@uniswap/smart-order-router'
 import { EventBridgeEvent, ScheduledHandler } from 'aws-lambda'
 import { S3 } from 'aws-sdk'
 import { ChainId } from '@uniswap/sdk-core'
 import { default as bunyan, default as Logger } from 'bunyan'
 import { S3_POOL_CACHE_KEY } from '../util/pool-cache-key'
 import { chainProtocols } from './cache-config'
+import { setGlobalLogger } from '../sor'
 
 const handler: ScheduledHandler = async (event: EventBridgeEvent<string, void>) => {
   const chainId: ChainId = parseInt(process.env.chainId!)
diff --git a/lib/dashboards/quote-amounts-widgets-factory.ts b/lib/dashboards/quote-amounts-widgets-factory.ts
index 4f40d8c..bb8a2d4 100644
--- a/lib/dashboards/quote-amounts-widgets-factory.ts
+++ b/lib/dashboards/quote-amounts-widgets-factory.ts
@@ -1,9 +1,9 @@
 import { ChainId, TradeType } from '@uniswap/sdk-core'
-import { ID_TO_NETWORK_NAME } from '@uniswap/smart-order-router'
 import _ from 'lodash'
 import { PAIRS_TO_TRACK } from '../handlers/quote/util/pairs-to-track'
 import { Widget } from './core/model/widget'
 import { WidgetsFactory } from './core/widgets-factory'
+import { ID_TO_NETWORK_NAME } from '../sor'
 
 export class QuoteAmountsWidgetsFactory implements WidgetsFactory {
   region: string
diff --git a/lib/dashboards/rpc-providers-widgets-factory.ts b/lib/dashboards/rpc-providers-widgets-factory.ts
index 9aafa8e..09a62ac 100644
--- a/lib/dashboards/rpc-providers-widgets-factory.ts
+++ b/lib/dashboards/rpc-providers-widgets-factory.ts
@@ -2,8 +2,8 @@ import { WidgetsFactory } from './core/widgets-factory'
 import { Widget } from './core/model/widget'
 import { ChainId } from '@uniswap/sdk-core'
 import _ from 'lodash'
-import { ID_TO_NETWORK_NAME } from '@uniswap/smart-order-router/build/main/util/chains'
 import { ProviderName } from '../handlers/evm/provider/ProviderName'
+import { ID_TO_NETWORK_NAME } from '../sor'
 
 const ID_TO_PROVIDER = (id: ChainId): string => {
   switch (id) {
diff --git a/lib/handlers/context.ts b/lib/handlers/context.ts
new file mode 100644
index 0000000..761c5e5
--- /dev/null
+++ b/lib/handlers/context.ts
@@ -0,0 +1,5 @@
+export let CONTEXT: any = {}
+
+export const clearContext = () => {
+  CONTEXT = {}
+}
diff --git a/lib/handlers/evm/provider/InstrumentedEVMProvider.ts b/lib/handlers/evm/provider/InstrumentedEVMProvider.ts
index 2507784..a528419 100644
--- a/lib/handlers/evm/provider/InstrumentedEVMProvider.ts
+++ b/lib/handlers/evm/provider/InstrumentedEVMProvider.ts
@@ -10,7 +10,7 @@ import {
   TransactionReceipt,
   TransactionResponse,
 } from '@ethersproject/abstract-provider'
-import { metric, MetricLoggerUnit } from '@uniswap/smart-order-router'
+import { metric, MetricLoggerUnit } from '../../../sor'
 import { BigNumber, BigNumberish } from '@ethersproject/bignumber'
 import { Network, Networkish } from '@ethersproject/networks'
 import { ConnectionInfo } from '@ethersproject/web'
diff --git a/lib/handlers/injector-sor.ts b/lib/handlers/injector-sor.ts
index 8d634e7..5901877 100644
--- a/lib/handlers/injector-sor.ts
+++ b/lib/handlers/injector-sor.ts
@@ -31,7 +31,7 @@ import {
   V3PoolProvider,
   IRouteCachingProvider,
   CachingV2PoolProvider,
-} from '@uniswap/smart-order-router'
+} from '../sor'
 import { TokenList } from '@uniswap/token-lists'
 import { default as bunyan, default as Logger } from 'bunyan'
 import { ethers } from 'ethers'
diff --git a/lib/handlers/marshalling/cached-route-marshaller.ts b/lib/handlers/marshalling/cached-route-marshaller.ts
index ab4591d..9d21ac0 100644
--- a/lib/handlers/marshalling/cached-route-marshaller.ts
+++ b/lib/handlers/marshalling/cached-route-marshaller.ts
@@ -1,5 +1,4 @@
-import { CachedRoute } from '@uniswap/smart-order-router'
-import { MixedRoute, V2Route, V3Route } from '@uniswap/smart-order-router/build/main/routers'
+import { MixedRoute, V2Route, V3Route, CachedRoute } from '../../sor'
 import { MarshalledRoute, RouteMarshaller } from './route-marshaller'
 
 export interface MarshalledCachedRoute {
diff --git a/lib/handlers/marshalling/cached-routes-marshaller.ts b/lib/handlers/marshalling/cached-routes-marshaller.ts
index 3b874e9..2bffb88 100644
--- a/lib/handlers/marshalling/cached-routes-marshaller.ts
+++ b/lib/handlers/marshalling/cached-routes-marshaller.ts
@@ -1,8 +1,8 @@
-import { CachedRoutes } from '@uniswap/smart-order-router'
 import { ChainId, TradeType } from '@uniswap/sdk-core'
 import { Protocol } from '@uniswap/router-sdk'
 import { MarshalledToken, TokenMarshaller } from './token-marshaller'
 import { CachedRouteMarshaller, MarshalledCachedRoute } from './cached-route-marshaller'
+import { CachedRoutes } from '../../sor'
 
 export interface MarshalledCachedRoutes {
   routes: MarshalledCachedRoute[]
diff --git a/lib/handlers/marshalling/route-marshaller.ts b/lib/handlers/marshalling/route-marshaller.ts
index d9bf9f1..48e6ec1 100644
--- a/lib/handlers/marshalling/route-marshaller.ts
+++ b/lib/handlers/marshalling/route-marshaller.ts
@@ -1,4 +1,4 @@
-import { MixedRoute, V2Route, V3Route } from '@uniswap/smart-order-router/build/main/routers'
+import { MixedRoute, V2Route, V3Route } from '../../sor'
 import { Protocol } from '@uniswap/router-sdk'
 import { MarshalledToken, TokenMarshaller } from './token-marshaller'
 import { MarshalledPair, PairMarshaller } from './pair-marshaller'
diff --git a/lib/handlers/pools/pool-caching/v2/v2-debug-caching-pool-provider.ts b/lib/handlers/pools/pool-caching/v2/v2-debug-caching-pool-provider.ts
index 04bf6fe..c8a5513 100644
--- a/lib/handlers/pools/pool-caching/v2/v2-debug-caching-pool-provider.ts
+++ b/lib/handlers/pools/pool-caching/v2/v2-debug-caching-pool-provider.ts
@@ -1,6 +1,6 @@
-import { IV2PoolProvider, V2PoolAccessor } from '@uniswap/smart-order-router'
 import { Token } from '@uniswap/sdk-core'
-import { ProviderConfig } from '@uniswap/smart-order-router/build/main/providers/provider'
+import { ProviderConfig } from '../../../../sor/providers/provider'
+import { IV2PoolProvider, V2PoolAccessor } from '../../../../sor'
 
 export class V2DebugCachingPoolProvider implements IV2PoolProvider {
   cachingPoolProvider: IV2PoolProvider
diff --git a/lib/handlers/pools/pool-caching/v3/cache-dynamo-pool.ts b/lib/handlers/pools/pool-caching/v3/cache-dynamo-pool.ts
index 0167c7e..081e4d6 100644
--- a/lib/handlers/pools/pool-caching/v3/cache-dynamo-pool.ts
+++ b/lib/handlers/pools/pool-caching/v3/cache-dynamo-pool.ts
@@ -1,6 +1,6 @@
 import { DynamoCaching, DynamoCachingProps } from '../cache-dynamo'
 import { Pool } from '@uniswap/v3-sdk'
-import { log, metric, MetricLoggerUnit } from '@uniswap/smart-order-router'
+import { log, metric, MetricLoggerUnit } from '../../../../sor'
 import { PoolMarshaller } from '../../../marshalling/pool-marshaller'
 
 interface DynamoCachingV3PoolProps extends DynamoCachingProps {}
diff --git a/lib/handlers/pools/pool-caching/v3/dynamo-caching-pool-provider.ts b/lib/handlers/pools/pool-caching/v3/dynamo-caching-pool-provider.ts
index e5a7f5f..4916015 100644
--- a/lib/handlers/pools/pool-caching/v3/dynamo-caching-pool-provider.ts
+++ b/lib/handlers/pools/pool-caching/v3/dynamo-caching-pool-provider.ts
@@ -1,9 +1,9 @@
-import { IV3PoolProvider, V3PoolAccessor } from '@uniswap/smart-order-router'
+import { IV3PoolProvider, V3PoolAccessor } from '../../../../sor'
 import { ChainId, Token } from '@uniswap/sdk-core'
-import { ProviderConfig } from '@uniswap/smart-order-router/build/main/providers/provider'
 import { FeeAmount, Pool } from '@uniswap/v3-sdk'
 import { IDynamoCache } from '../cache-dynamo'
 import { DynamoCachingV3Pool } from './cache-dynamo-pool'
+import { ProviderConfig } from '../../../../sor/providers/provider'
 
 export class DynamoDBCachingV3PoolProvider implements IV3PoolProvider {
   private readonly dynamoCache: IDynamoCache<string, number, Pool>
diff --git a/lib/handlers/pools/provider-migration/v3/traffic-switch-v3-pool-provider.ts b/lib/handlers/pools/provider-migration/v3/traffic-switch-v3-pool-provider.ts
index 12ee139..5b93794 100644
--- a/lib/handlers/pools/provider-migration/v3/traffic-switch-v3-pool-provider.ts
+++ b/lib/handlers/pools/provider-migration/v3/traffic-switch-v3-pool-provider.ts
@@ -1,9 +1,9 @@
-import { IV3PoolProvider, log, metric, MetricLoggerUnit, V3PoolAccessor } from '@uniswap/smart-order-router'
+import { IV3PoolProvider, log, metric, MetricLoggerUnit, V3PoolAccessor } from '../../../../sor'
 import { Token } from '@uniswap/sdk-core'
 import { FeeAmount, Pool } from '@uniswap/v3-sdk'
-import { ProviderConfig } from '@uniswap/smart-order-router/build/main/providers/provider'
 import { POOL_PROVIDER_TRAFFIC_SWITCH_CONFIGURATION } from '../../util/pool-provider-traffic-switch-configuration'
 import JSBI from 'jsbi'
+import { ProviderConfig } from '../../../../sor/providers/provider'
 
 export type TrafficSwitchPoolProviderProps = {
   currentPoolProvider: IV3PoolProvider
diff --git a/lib/handlers/quote/injector.ts b/lib/handlers/quote/injector.ts
index f67d2a2..8e7d840 100644
--- a/lib/handlers/quote/injector.ts
+++ b/lib/handlers/quote/injector.ts
@@ -7,7 +7,7 @@ import {
   setGlobalLogger,
   setGlobalMetric,
   V3HeuristicGasModelFactory,
-} from '@uniswap/smart-order-router'
+} from '../../sor'
 import { MetricsLogger } from 'aws-embedded-metrics'
 import { APIGatewayProxyEvent, Context } from 'aws-lambda'
 import { default as bunyan, default as Logger } from 'bunyan'
@@ -16,6 +16,8 @@ import { ContainerInjected, InjectorSOR, RequestInjected } from '../injector-sor
 import { AWSMetricsLogger } from '../router-entities/aws-metrics-logger'
 import { StaticGasPriceProvider } from '../router-entities/static-gas-price-provider'
 import { QuoteQueryParams } from './schema/quote-schema'
+import { clearContext } from '../context'
+
 export class QuoteHandlerInjector extends InjectorSOR<
   IRouter<AlphaRouterConfig | LegacyRoutingConfig>,
   QuoteQueryParams
@@ -29,6 +31,7 @@ export class QuoteHandlerInjector extends InjectorSOR<
     log: Logger,
     metricsLogger: MetricsLogger
   ): Promise<RequestInjected<IRouter<AlphaRouterConfig | LegacyRoutingConfig>>> {
+    clearContext()
     const requestId = context.awsRequestId
     const quoteId = requestId.substring(0, 5)
     // Sample 10% of all requests at the INFO log level for debugging purposes.
diff --git a/lib/handlers/quote/quote.ts b/lib/handlers/quote/quote.ts
index 17f6136..ff59053 100644
--- a/lib/handlers/quote/quote.ts
+++ b/lib/handlers/quote/quote.ts
@@ -14,7 +14,7 @@ import {
   SimulationStatus,
   IMetric,
   ID_TO_NETWORK_NAME,
-} from '@uniswap/smart-order-router'
+} from '../../sor'
 import { Pool } from '@uniswap/v3-sdk'
 import JSBI from 'jsbi'
 import _ from 'lodash'
@@ -36,6 +36,10 @@ import Logger from 'bunyan'
 import { PAIRS_TO_TRACK } from './util/pairs-to-track'
 import { measureDistributionPercentChangeImpact } from '../../util/alpha-config-measurement'
 
+import { Logger as PowertoolsLogger } from '@aws-lambda-powertools/logger'
+import { CONTEXT } from '../context'
+
+const powertoolsLogger = new PowertoolsLogger({ serviceName: 'QuoteHandler' })
 export class QuoteHandler extends APIGLambdaHandler<
   ContainerInjected,
   RequestInjected<IRouter<AlphaRouterConfig>>,
@@ -54,6 +58,10 @@ export class QuoteHandler extends APIGLambdaHandler<
     try {
       result = await this.handleRequestInternal(params)
 
+      powertoolsLogger.info('$$CONTEXT$$', {
+        context: CONTEXT,
+      })
+
       switch (result.statusCode) {
         case 200:
         case 202:
@@ -122,6 +130,7 @@ export class QuoteHandler extends APIGLambdaHandler<
         debugRoutingConfig,
         unicornSecret,
         intent,
+        cannedRoutingConfig,
       },
       requestInjected: {
         router,
@@ -320,6 +329,15 @@ export class QuoteHandler extends APIGLambdaHandler<
       ? [currencyIn.symbol, currencyIn.wrapped.address, currencyOut.symbol, currencyOut.wrapped.address]
       : [currencyOut.symbol, currencyOut.wrapped.address, currencyIn.symbol, currencyIn.wrapped.address]
 
+    let overrideRoutingConfig = {}
+    if (cannedRoutingConfig) {
+      overrideRoutingConfig = JSON.parse(cannedRoutingConfig)
+      powertoolsLogger.info('Using canned routing config', {
+        overrideRoutingConfig,
+      })
+    } else {
+      powertoolsLogger.info('No canned routing config found; using whatever the default is')
+    }
     switch (type) {
       case 'exactIn':
         amount = CurrencyAmount.fromRawAmount(currencyIn, JSBI.BigInt(amountRaw))
@@ -345,7 +363,14 @@ export class QuoteHandler extends APIGLambdaHandler<
           }. Chain: ${chainId}`
         )
 
-        swapRoute = await router.route(amount, currencyOut, TradeType.EXACT_INPUT, swapParams, routingConfig)
+        swapRoute = await router.route(
+          amount,
+          currencyOut,
+          TradeType.EXACT_INPUT,
+          swapParams,
+          routingConfig,
+          overrideRoutingConfig
+        )
         break
       case 'exactOut':
         amount = CurrencyAmount.fromRawAmount(currencyOut, JSBI.BigInt(amountRaw))
diff --git a/lib/handlers/quote/schema/quote-schema.ts b/lib/handlers/quote/schema/quote-schema.ts
index 0766bc7..4b2f7f0 100644
--- a/lib/handlers/quote/schema/quote-schema.ts
+++ b/lib/handlers/quote/schema/quote-schema.ts
@@ -61,6 +61,7 @@ export const QuoteQueryParamsJoi = Joi.object({
   debugRoutingConfig: Joi.string().optional(),
   unicornSecret: Joi.string().optional(),
   intent: Joi.string().valid('quote', 'swap', 'caching').optional().default('quote'),
+  cannedRoutingConfig: Joi.string().optional(),
 }).and('recipient', 'slippageTolerance', 'deadline')
 
 export type QuoteQueryParams = {
@@ -90,4 +91,5 @@ export type QuoteQueryParams = {
   debugRoutingConfig?: string
   unicornSecret?: string
   intent?: string
+  cannedRoutingConfig?: string
 }
diff --git a/lib/handlers/quote/util/simulation.ts b/lib/handlers/quote/util/simulation.ts
index 35bdcf1..d9f4a19 100644
--- a/lib/handlers/quote/util/simulation.ts
+++ b/lib/handlers/quote/util/simulation.ts
@@ -1,5 +1,5 @@
-import { SimulationStatus } from '@uniswap/smart-order-router'
 import Logger from 'bunyan'
+import { SimulationStatus } from '../../../sor'
 
 export const simulationStatusToString = (simulationStatus: SimulationStatus | undefined, log: Logger) => {
   switch (simulationStatus) {
diff --git a/lib/handlers/router-entities/aws-metrics-logger.ts b/lib/handlers/router-entities/aws-metrics-logger.ts
index 32472f6..00df65d 100644
--- a/lib/handlers/router-entities/aws-metrics-logger.ts
+++ b/lib/handlers/router-entities/aws-metrics-logger.ts
@@ -1,5 +1,5 @@
-import { IMetric, MetricLoggerUnit } from '@uniswap/smart-order-router'
 import { MetricsLogger as AWSEmbeddedMetricsLogger } from 'aws-embedded-metrics'
+import { IMetric, MetricLoggerUnit } from '../../sor'
 
 export class AWSMetricsLogger implements IMetric {
   constructor(private awsMetricLogger: AWSEmbeddedMetricsLogger) {}
diff --git a/lib/handlers/router-entities/aws-subgraph-provider.ts b/lib/handlers/router-entities/aws-subgraph-provider.ts
index c633ff6..8e430c5 100644
--- a/lib/handlers/router-entities/aws-subgraph-provider.ts
+++ b/lib/handlers/router-entities/aws-subgraph-provider.ts
@@ -1,11 +1,5 @@
 import { Protocol } from '@uniswap/router-sdk'
-import {
-  IV2SubgraphProvider,
-  IV3SubgraphProvider,
-  log,
-  V2SubgraphPool,
-  V3SubgraphPool,
-} from '@uniswap/smart-order-router'
+import { IV2SubgraphProvider, IV3SubgraphProvider, log, V2SubgraphPool, V3SubgraphPool } from '../../sor'
 import { S3 } from 'aws-sdk'
 import { ChainId } from '@uniswap/sdk-core'
 import NodeCache from 'node-cache'
diff --git a/lib/handlers/router-entities/aws-token-list-provider.ts b/lib/handlers/router-entities/aws-token-list-provider.ts
index 0881943..bbaa073 100644
--- a/lib/handlers/router-entities/aws-token-list-provider.ts
+++ b/lib/handlers/router-entities/aws-token-list-provider.ts
@@ -1,10 +1,4 @@
-import {
-  CachingTokenListProvider,
-  ITokenListProvider,
-  ITokenProvider,
-  log,
-  NodeJSCache,
-} from '@uniswap/smart-order-router'
+import { CachingTokenListProvider, ITokenListProvider, ITokenProvider, log, NodeJSCache } from '../../sor'
 import { ChainId } from '@uniswap/sdk-core'
 import { TokenList } from '@uniswap/token-lists'
 import S3 from 'aws-sdk/clients/s3'
diff --git a/lib/handlers/router-entities/route-caching/cached-routes-configuration.ts b/lib/handlers/router-entities/route-caching/cached-routes-configuration.ts
index 26f588d..24a3fe9 100644
--- a/lib/handlers/router-entities/route-caching/cached-routes-configuration.ts
+++ b/lib/handlers/router-entities/route-caching/cached-routes-configuration.ts
@@ -1,5 +1,5 @@
 import { ChainId, TradeType } from '@uniswap/sdk-core'
-import { CacheMode } from '@uniswap/smart-order-router'
+import { CacheMode } from '../../../sor'
 import { CachedRoutesStrategy } from './model/cached-routes-strategy'
 import { PairTradeTypeChainId } from './model/pair-trade-type-chain-id'
 import { CachedRoutesBucket } from './model/cached-routes-bucket'
diff --git a/lib/handlers/router-entities/route-caching/dynamo-route-caching-provider.ts b/lib/handlers/router-entities/route-caching/dynamo-route-caching-provider.ts
index 6b0241b..6e24700 100644
--- a/lib/handlers/router-entities/route-caching/dynamo-route-caching-provider.ts
+++ b/lib/handlers/router-entities/route-caching/dynamo-route-caching-provider.ts
@@ -8,7 +8,10 @@ import {
   metric,
   MetricLoggerUnit,
   routeToString,
-} from '@uniswap/smart-order-router'
+  MixedRoute,
+  V2Route,
+  V3Route,
+} from '../../../sor'
 import { AWSError, DynamoDB, Lambda } from 'aws-sdk'
 import { ChainId, Currency, CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core'
 import { Protocol } from '@uniswap/router-sdk'
@@ -18,7 +21,6 @@ import { CachedRoutesMarshaller } from '../../marshalling/cached-routes-marshall
 import { CachedRoutesStrategy } from './model/cached-routes-strategy'
 import { ProtocolsBucketBlockNumber } from './model/protocols-bucket-block-number'
 import { CachedRoutesBucket } from './model'
-import { MixedRoute, V2Route, V3Route } from '@uniswap/smart-order-router/build/main/routers'
 import { SECONDS_PER_BLOCK_BY_CHAIN_ID } from '../../shared'
 import { PromiseResult } from 'aws-sdk/lib/request'
 
diff --git a/lib/handlers/router-entities/route-caching/model/cached-routes-bucket.ts b/lib/handlers/router-entities/route-caching/model/cached-routes-bucket.ts
index d789d66..822019b 100644
--- a/lib/handlers/router-entities/route-caching/model/cached-routes-bucket.ts
+++ b/lib/handlers/router-entities/route-caching/model/cached-routes-bucket.ts
@@ -1,4 +1,4 @@
-import { CacheMode } from '@uniswap/smart-order-router'
+import { CacheMode } from '../../../../sor'
 
 interface CachedRoutesBucketsArgs {
   /**
diff --git a/lib/handlers/router-entities/route-caching/model/cached-routes-strategy.ts b/lib/handlers/router-entities/route-caching/model/cached-routes-strategy.ts
index 07dedf5..39e2839 100644
--- a/lib/handlers/router-entities/route-caching/model/cached-routes-strategy.ts
+++ b/lib/handlers/router-entities/route-caching/model/cached-routes-strategy.ts
@@ -1,6 +1,6 @@
 import { ChainId, Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'
 import { CachedRoutesBucket } from './cached-routes-bucket'
-import { CacheMode } from '@uniswap/smart-order-router'
+import { CacheMode } from '../../../../sor'
 
 interface CachedRoutesStrategyArgs {
   pair: string
diff --git a/lib/handlers/router-entities/route-caching/model/pair-trade-type-chain-id.ts b/lib/handlers/router-entities/route-caching/model/pair-trade-type-chain-id.ts
index d843b70..69aca37 100644
--- a/lib/handlers/router-entities/route-caching/model/pair-trade-type-chain-id.ts
+++ b/lib/handlers/router-entities/route-caching/model/pair-trade-type-chain-id.ts
@@ -1,5 +1,5 @@
 import { ChainId, TradeType } from '@uniswap/sdk-core'
-import { CachedRoutes } from '@uniswap/smart-order-router'
+import { CachedRoutes } from '../../../../sor'
 
 interface PairTradeTypeChainIdArgs {
   tokenIn: string
diff --git a/lib/handlers/router-entities/static-gas-price-provider.ts b/lib/handlers/router-entities/static-gas-price-provider.ts
index 1aebb1f..bb3469b 100644
--- a/lib/handlers/router-entities/static-gas-price-provider.ts
+++ b/lib/handlers/router-entities/static-gas-price-provider.ts
@@ -1,5 +1,5 @@
-import { GasPrice, IGasPriceProvider } from '@uniswap/smart-order-router'
 import { BigNumber } from 'ethers'
+import { GasPrice, IGasPriceProvider } from '../../sor'
 
 export class StaticGasPriceProvider implements IGasPriceProvider {
   constructor(private gasPriceWei: BigNumber) {}
diff --git a/lib/handlers/router-entities/v3-aws-subgraph-provider.ts b/lib/handlers/router-entities/v3-aws-subgraph-provider.ts
index 1eb0c17..e6e9313 100644
--- a/lib/handlers/router-entities/v3-aws-subgraph-provider.ts
+++ b/lib/handlers/router-entities/v3-aws-subgraph-provider.ts
@@ -1,4 +1,4 @@
-import { IV3SubgraphProvider, log, V3SubgraphPool, V3SubgraphProvider } from '@uniswap/smart-order-router'
+import { IV3SubgraphProvider, log, V3SubgraphPool, V3SubgraphProvider } from '../../sor'
 import { S3 } from 'aws-sdk'
 import { ChainId } from '@uniswap/sdk-core'
 import _ from 'lodash'
diff --git a/lib/handlers/schema.ts b/lib/handlers/schema.ts
index dbc50dd..d96bca7 100644
--- a/lib/handlers/schema.ts
+++ b/lib/handlers/schema.ts
@@ -1,5 +1,5 @@
 import Joi from '@hapi/joi'
-import { MethodParameters } from '@uniswap/smart-order-router'
+import { MethodParameters } from '../sor'
 
 export type TokenInRoute = {
   address: string
diff --git a/lib/handlers/shared.ts b/lib/handlers/shared.ts
index b30c2af..218dcef 100644
--- a/lib/handlers/shared.ts
+++ b/lib/handlers/shared.ts
@@ -7,7 +7,7 @@ import {
   NATIVE_NAMES_BY_ID,
   nativeOnChain,
   ProtocolPoolSelection,
-} from '@uniswap/smart-order-router'
+} from '../sor'
 import Logger from 'bunyan'
 
 export const SECONDS_PER_BLOCK_BY_CHAIN_ID: { [chainId in ChainId]?: number } = {
diff --git a/lib/sor/abis/Permit2.json b/lib/sor/abis/Permit2.json
new file mode 100644
index 0000000..a689400
--- /dev/null
+++ b/lib/sor/abis/Permit2.json
@@ -0,0 +1,910 @@
+{
+  "_format": "hh-sol-artifact-1",
+  "contractName": "Permit2",
+  "sourceName": "permit2/src/Permit2.sol",
+  "abi": [
+    {
+      "inputs": [
+        {
+          "internalType": "uint256",
+          "name": "deadline",
+          "type": "uint256"
+        }
+      ],
+      "name": "AllowanceExpired",
+      "type": "error"
+    },
+    {
+      "inputs": [],
+      "name": "ExcessiveInvalidation",
+      "type": "error"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "uint256",
+          "name": "amount",
+          "type": "uint256"
+        }
+      ],
+      "name": "InsufficientAllowance",
+      "type": "error"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "uint256",
+          "name": "maxAmount",
+          "type": "uint256"
+        }
+      ],
+      "name": "InvalidAmount",
+      "type": "error"
+    },
+    {
+      "inputs": [],
+      "name": "InvalidContractSignature",
+      "type": "error"
+    },
+    {
+      "inputs": [],
+      "name": "InvalidNonce",
+      "type": "error"
+    },
+    {
+      "inputs": [],
+      "name": "InvalidSignature",
+      "type": "error"
+    },
+    {
+      "inputs": [],
+      "name": "InvalidSignatureLength",
+      "type": "error"
+    },
+    {
+      "inputs": [],
+      "name": "InvalidSigner",
+      "type": "error"
+    },
+    {
+      "inputs": [],
+      "name": "LengthMismatch",
+      "type": "error"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "uint256",
+          "name": "signatureDeadline",
+          "type": "uint256"
+        }
+      ],
+      "name": "SignatureExpired",
+      "type": "error"
+    },
+    {
+      "anonymous": false,
+      "inputs": [
+        {
+          "indexed": true,
+          "internalType": "address",
+          "name": "owner",
+          "type": "address"
+        },
+        {
+          "indexed": true,
+          "internalType": "address",
+          "name": "token",
+          "type": "address"
+        },
+        {
+          "indexed": true,
+          "internalType": "address",
+          "name": "spender",
+          "type": "address"
+        },
+        {
+          "indexed": false,
+          "internalType": "uint160",
+          "name": "amount",
+          "type": "uint160"
+        },
+        {
+          "indexed": false,
+          "internalType": "uint48",
+          "name": "expiration",
+          "type": "uint48"
+        }
+      ],
+      "name": "Approval",
+      "type": "event"
+    },
+    {
+      "anonymous": false,
+      "inputs": [
+        {
+          "indexed": true,
+          "internalType": "address",
+          "name": "owner",
+          "type": "address"
+        },
+        {
+          "indexed": false,
+          "internalType": "address",
+          "name": "token",
+          "type": "address"
+        },
+        {
+          "indexed": false,
+          "internalType": "address",
+          "name": "spender",
+          "type": "address"
+        }
+      ],
+      "name": "Lockdown",
+      "type": "event"
+    },
+    {
+      "anonymous": false,
+      "inputs": [
+        {
+          "indexed": true,
+          "internalType": "address",
+          "name": "owner",
+          "type": "address"
+        },
+        {
+          "indexed": true,
+          "internalType": "address",
+          "name": "token",
+          "type": "address"
+        },
+        {
+          "indexed": true,
+          "internalType": "address",
+          "name": "spender",
+          "type": "address"
+        },
+        {
+          "indexed": false,
+          "internalType": "uint48",
+          "name": "newNonce",
+          "type": "uint48"
+        },
+        {
+          "indexed": false,
+          "internalType": "uint48",
+          "name": "oldNonce",
+          "type": "uint48"
+        }
+      ],
+      "name": "NonceInvalidation",
+      "type": "event"
+    },
+    {
+      "anonymous": false,
+      "inputs": [
+        {
+          "indexed": true,
+          "internalType": "address",
+          "name": "owner",
+          "type": "address"
+        },
+        {
+          "indexed": true,
+          "internalType": "address",
+          "name": "token",
+          "type": "address"
+        },
+        {
+          "indexed": true,
+          "internalType": "address",
+          "name": "spender",
+          "type": "address"
+        },
+        {
+          "indexed": false,
+          "internalType": "uint160",
+          "name": "amount",
+          "type": "uint160"
+        },
+        {
+          "indexed": false,
+          "internalType": "uint48",
+          "name": "expiration",
+          "type": "uint48"
+        },
+        {
+          "indexed": false,
+          "internalType": "uint48",
+          "name": "nonce",
+          "type": "uint48"
+        }
+      ],
+      "name": "Permit",
+      "type": "event"
+    },
+    {
+      "anonymous": false,
+      "inputs": [
+        {
+          "indexed": true,
+          "internalType": "address",
+          "name": "owner",
+          "type": "address"
+        },
+        {
+          "indexed": false,
+          "internalType": "uint256",
+          "name": "word",
+          "type": "uint256"
+        },
+        {
+          "indexed": false,
+          "internalType": "uint256",
+          "name": "mask",
+          "type": "uint256"
+        }
+      ],
+      "name": "UnorderedNonceInvalidation",
+      "type": "event"
+    },
+    {
+      "inputs": [],
+      "name": "DOMAIN_SEPARATOR",
+      "outputs": [
+        {
+          "internalType": "bytes32",
+          "name": "",
+          "type": "bytes32"
+        }
+      ],
+      "stateMutability": "view",
+      "type": "function"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "address",
+          "name": "",
+          "type": "address"
+        },
+        {
+          "internalType": "address",
+          "name": "",
+          "type": "address"
+        },
+        {
+          "internalType": "address",
+          "name": "",
+          "type": "address"
+        }
+      ],
+      "name": "allowance",
+      "outputs": [
+        {
+          "internalType": "uint160",
+          "name": "amount",
+          "type": "uint160"
+        },
+        {
+          "internalType": "uint48",
+          "name": "expiration",
+          "type": "uint48"
+        },
+        {
+          "internalType": "uint48",
+          "name": "nonce",
+          "type": "uint48"
+        }
+      ],
+      "stateMutability": "view",
+      "type": "function"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "address",
+          "name": "token",
+          "type": "address"
+        },
+        {
+          "internalType": "address",
+          "name": "spender",
+          "type": "address"
+        },
+        {
+          "internalType": "uint160",
+          "name": "amount",
+          "type": "uint160"
+        },
+        {
+          "internalType": "uint48",
+          "name": "expiration",
+          "type": "uint48"
+        }
+      ],
+      "name": "approve",
+      "outputs": [],
+      "stateMutability": "nonpayable",
+      "type": "function"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "address",
+          "name": "token",
+          "type": "address"
+        },
+        {
+          "internalType": "address",
+          "name": "spender",
+          "type": "address"
+        },
+        {
+          "internalType": "uint48",
+          "name": "newNonce",
+          "type": "uint48"
+        }
+      ],
+      "name": "invalidateNonces",
+      "outputs": [],
+      "stateMutability": "nonpayable",
+      "type": "function"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "uint256",
+          "name": "wordPos",
+          "type": "uint256"
+        },
+        {
+          "internalType": "uint256",
+          "name": "mask",
+          "type": "uint256"
+        }
+      ],
+      "name": "invalidateUnorderedNonces",
+      "outputs": [],
+      "stateMutability": "nonpayable",
+      "type": "function"
+    },
+    {
+      "inputs": [
+        {
+          "components": [
+            {
+              "internalType": "address",
+              "name": "token",
+              "type": "address"
+            },
+            {
+              "internalType": "address",
+              "name": "spender",
+              "type": "address"
+            }
+          ],
+          "internalType": "struct IAllowanceTransfer.TokenSpenderPair[]",
+          "name": "approvals",
+          "type": "tuple[]"
+        }
+      ],
+      "name": "lockdown",
+      "outputs": [],
+      "stateMutability": "nonpayable",
+      "type": "function"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "address",
+          "name": "",
+          "type": "address"
+        },
+        {
+          "internalType": "uint256",
+          "name": "",
+          "type": "uint256"
+        }
+      ],
+      "name": "nonceBitmap",
+      "outputs": [
+        {
+          "internalType": "uint256",
+          "name": "",
+          "type": "uint256"
+        }
+      ],
+      "stateMutability": "view",
+      "type": "function"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "address",
+          "name": "owner",
+          "type": "address"
+        },
+        {
+          "components": [
+            {
+              "components": [
+                {
+                  "internalType": "address",
+                  "name": "token",
+                  "type": "address"
+                },
+                {
+                  "internalType": "uint160",
+                  "name": "amount",
+                  "type": "uint160"
+                },
+                {
+                  "internalType": "uint48",
+                  "name": "expiration",
+                  "type": "uint48"
+                },
+                {
+                  "internalType": "uint48",
+                  "name": "nonce",
+                  "type": "uint48"
+                }
+              ],
+              "internalType": "struct IAllowanceTransfer.PermitDetails[]",
+              "name": "details",
+              "type": "tuple[]"
+            },
+            {
+              "internalType": "address",
+              "name": "spender",
+              "type": "address"
+            },
+            {
+              "internalType": "uint256",
+              "name": "sigDeadline",
+              "type": "uint256"
+            }
+          ],
+          "internalType": "struct IAllowanceTransfer.PermitBatch",
+          "name": "permitBatch",
+          "type": "tuple"
+        },
+        {
+          "internalType": "bytes",
+          "name": "signature",
+          "type": "bytes"
+        }
+      ],
+      "name": "permit",
+      "outputs": [],
+      "stateMutability": "nonpayable",
+      "type": "function"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "address",
+          "name": "owner",
+          "type": "address"
+        },
+        {
+          "components": [
+            {
+              "components": [
+                {
+                  "internalType": "address",
+                  "name": "token",
+                  "type": "address"
+                },
+                {
+                  "internalType": "uint160",
+                  "name": "amount",
+                  "type": "uint160"
+                },
+                {
+                  "internalType": "uint48",
+                  "name": "expiration",
+                  "type": "uint48"
+                },
+                {
+                  "internalType": "uint48",
+                  "name": "nonce",
+                  "type": "uint48"
+                }
+              ],
+              "internalType": "struct IAllowanceTransfer.PermitDetails",
+              "name": "details",
+              "type": "tuple"
+            },
+            {
+              "internalType": "address",
+              "name": "spender",
+              "type": "address"
+            },
+            {
+              "internalType": "uint256",
+              "name": "sigDeadline",
+              "type": "uint256"
+            }
+          ],
+          "internalType": "struct IAllowanceTransfer.PermitSingle",
+          "name": "permitSingle",
+          "type": "tuple"
+        },
+        {
+          "internalType": "bytes",
+          "name": "signature",
+          "type": "bytes"
+        }
+      ],
+      "name": "permit",
+      "outputs": [],
+      "stateMutability": "nonpayable",
+      "type": "function"
+    },
+    {
+      "inputs": [
+        {
+          "components": [
+            {
+              "components": [
+                {
+                  "internalType": "address",
+                  "name": "token",
+                  "type": "address"
+                },
+                {
+                  "internalType": "uint256",
+                  "name": "amount",
+                  "type": "uint256"
+                }
+              ],
+              "internalType": "struct ISignatureTransfer.TokenPermissions",
+              "name": "permitted",
+              "type": "tuple"
+            },
+            {
+              "internalType": "uint256",
+              "name": "nonce",
+              "type": "uint256"
+            },
+            {
+              "internalType": "uint256",
+              "name": "deadline",
+              "type": "uint256"
+            }
+          ],
+          "internalType": "struct ISignatureTransfer.PermitTransferFrom",
+          "name": "permit",
+          "type": "tuple"
+        },
+        {
+          "components": [
+            {
+              "internalType": "address",
+              "name": "to",
+              "type": "address"
+            },
+            {
+              "internalType": "uint256",
+              "name": "requestedAmount",
+              "type": "uint256"
+            }
+          ],
+          "internalType": "struct ISignatureTransfer.SignatureTransferDetails",
+          "name": "transferDetails",
+          "type": "tuple"
+        },
+        {
+          "internalType": "address",
+          "name": "owner",
+          "type": "address"
+        },
+        {
+          "internalType": "bytes",
+          "name": "signature",
+          "type": "bytes"
+        }
+      ],
+      "name": "permitTransferFrom",
+      "outputs": [],
+      "stateMutability": "nonpayable",
+      "type": "function"
+    },
+    {
+      "inputs": [
+        {
+          "components": [
+            {
+              "components": [
+                {
+                  "internalType": "address",
+                  "name": "token",
+                  "type": "address"
+                },
+                {
+                  "internalType": "uint256",
+                  "name": "amount",
+                  "type": "uint256"
+                }
+              ],
+              "internalType": "struct ISignatureTransfer.TokenPermissions[]",
+              "name": "permitted",
+              "type": "tuple[]"
+            },
+            {
+              "internalType": "uint256",
+              "name": "nonce",
+              "type": "uint256"
+            },
+            {
+              "internalType": "uint256",
+              "name": "deadline",
+              "type": "uint256"
+            }
+          ],
+          "internalType": "struct ISignatureTransfer.PermitBatchTransferFrom",
+          "name": "permit",
+          "type": "tuple"
+        },
+        {
+          "components": [
+            {
+              "internalType": "address",
+              "name": "to",
+              "type": "address"
+            },
+            {
+              "internalType": "uint256",
+              "name": "requestedAmount",
+              "type": "uint256"
+            }
+          ],
+          "internalType": "struct ISignatureTransfer.SignatureTransferDetails[]",
+          "name": "transferDetails",
+          "type": "tuple[]"
+        },
+        {
+          "internalType": "address",
+          "name": "owner",
+          "type": "address"
+        },
+        {
+          "internalType": "bytes",
+          "name": "signature",
+          "type": "bytes"
+        }
+      ],
+      "name": "permitTransferFrom",
+      "outputs": [],
+      "stateMutability": "nonpayable",
+      "type": "function"
+    },
+    {
+      "inputs": [
+        {
+          "components": [
+            {
+              "components": [
+                {
+                  "internalType": "address",
+                  "name": "token",
+                  "type": "address"
+                },
+                {
+                  "internalType": "uint256",
+                  "name": "amount",
+                  "type": "uint256"
+                }
+              ],
+              "internalType": "struct ISignatureTransfer.TokenPermissions",
+              "name": "permitted",
+              "type": "tuple"
+            },
+            {
+              "internalType": "uint256",
+              "name": "nonce",
+              "type": "uint256"
+            },
+            {
+              "internalType": "uint256",
+              "name": "deadline",
+              "type": "uint256"
+            }
+          ],
+          "internalType": "struct ISignatureTransfer.PermitTransferFrom",
+          "name": "permit",
+          "type": "tuple"
+        },
+        {
+          "components": [
+            {
+              "internalType": "address",
+              "name": "to",
+              "type": "address"
+            },
+            {
+              "internalType": "uint256",
+              "name": "requestedAmount",
+              "type": "uint256"
+            }
+          ],
+          "internalType": "struct ISignatureTransfer.SignatureTransferDetails",
+          "name": "transferDetails",
+          "type": "tuple"
+        },
+        {
+          "internalType": "address",
+          "name": "owner",
+          "type": "address"
+        },
+        {
+          "internalType": "bytes32",
+          "name": "witness",
+          "type": "bytes32"
+        },
+        {
+          "internalType": "string",
+          "name": "witnessTypeString",
+          "type": "string"
+        },
+        {
+          "internalType": "bytes",
+          "name": "signature",
+          "type": "bytes"
+        }
+      ],
+      "name": "permitWitnessTransferFrom",
+      "outputs": [],
+      "stateMutability": "nonpayable",
+      "type": "function"
+    },
+    {
+      "inputs": [
+        {
+          "components": [
+            {
+              "components": [
+                {
+                  "internalType": "address",
+                  "name": "token",
+                  "type": "address"
+                },
+                {
+                  "internalType": "uint256",
+                  "name": "amount",
+                  "type": "uint256"
+                }
+              ],
+              "internalType": "struct ISignatureTransfer.TokenPermissions[]",
+              "name": "permitted",
+              "type": "tuple[]"
+            },
+            {
+              "internalType": "uint256",
+              "name": "nonce",
+              "type": "uint256"
+            },
+            {
+              "internalType": "uint256",
+              "name": "deadline",
+              "type": "uint256"
+            }
+          ],
+          "internalType": "struct ISignatureTransfer.PermitBatchTransferFrom",
+          "name": "permit",
+          "type": "tuple"
+        },
+        {
+          "components": [
+            {
+              "internalType": "address",
+              "name": "to",
+              "type": "address"
+            },
+            {
+              "internalType": "uint256",
+              "name": "requestedAmount",
+              "type": "uint256"
+            }
+          ],
+          "internalType": "struct ISignatureTransfer.SignatureTransferDetails[]",
+          "name": "transferDetails",
+          "type": "tuple[]"
+        },
+        {
+          "internalType": "address",
+          "name": "owner",
+          "type": "address"
+        },
+        {
+          "internalType": "bytes32",
+          "name": "witness",
+          "type": "bytes32"
+        },
+        {
+          "internalType": "string",
+          "name": "witnessTypeString",
+          "type": "string"
+        },
+        {
+          "internalType": "bytes",
+          "name": "signature",
+          "type": "bytes"
+        }
+      ],
+      "name": "permitWitnessTransferFrom",
+      "outputs": [],
+      "stateMutability": "nonpayable",
+      "type": "function"
+    },
+    {
+      "inputs": [
+        {
+          "components": [
+            {
+              "internalType": "address",
+              "name": "from",
+              "type": "address"
+            },
+            {
+              "internalType": "address",
+              "name": "to",
+              "type": "address"
+            },
+            {
+              "internalType": "uint160",
+              "name": "amount",
+              "type": "uint160"
+            },
+            {
+              "internalType": "address",
+              "name": "token",
+              "type": "address"
+            }
+          ],
+          "internalType": "struct IAllowanceTransfer.AllowanceTransferDetails[]",
+          "name": "transferDetails",
+          "type": "tuple[]"
+        }
+      ],
+      "name": "transferFrom",
+      "outputs": [],
+      "stateMutability": "nonpayable",
+      "type": "function"
+    },
+    {
+      "inputs": [
+        {
+          "internalType": "address",
+          "name": "from",
+          "type": "address"
+        },
+        {
+          "internalType": "address",
+          "name": "to",
+          "type": "address"
+        },
+        {
+          "internalType": "uint160",
+          "name": "amount",
+          "type": "uint160"
+        },
+        {
+          "internalType": "address",
+          "name": "token",
+          "type": "address"
+        }
+      ],
+      "name": "transferFrom",
+      "outputs": [],
+      "stateMutability": "nonpayable",
+      "type": "function"
+    }
+  ],
+  "bytecode": "0x60c0346100bb574660a052602081017f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681527f9ac997416e8ff9d2ff6bebeb7149f65cdae5e32e2b90440b566bb3044041d36a60408301524660608301523060808301526080825260a082019180831060018060401b038411176100a557826040525190206080526123c090816100c1823960805181611a90015260a05181611a6a0152f35b634e487b7160e01b600052604160045260246000fd5b600080fdfe6040608081526004908136101561001557600080fd5b600090813560e01c80630d58b1db1461126c578063137c29fe146110755780632a2d80d114610db75780632b67b57014610bde57806330f28b7a14610ade5780633644e51514610a9d57806336c7851614610a285780633ff9dcb1146109a85780634fe02b441461093f57806365d9723c146107ac57806387517c451461067a578063927da105146105c3578063cc53287f146104a3578063edd9444b1461033a5763fe8ec1a7146100c657600080fd5b346103365760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103365767ffffffffffffffff833581811161033257610114903690860161164b565b60243582811161032e5761012b903690870161161a565b6101336114e6565b9160843585811161032a5761014b9036908a016115c1565b98909560a43590811161032657610164913691016115c1565b969095815190610173826113ff565b606b82527f5065726d697442617463685769746e6573735472616e7366657246726f6d285460208301527f6f6b656e5065726d697373696f6e735b5d207065726d69747465642c61646472838301527f657373207370656e6465722c75696e74323536206e6f6e63652c75696e74323560608301527f3620646561646c696e652c000000000000000000000000000000000000000000608083015282519a8b9181610222602085018096611edc565b918237018a8152039961025b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09b8c8101835282611437565b5190209085515161026b81611e04565b908a5b8181106102f95750506102f6999a6102ed9183516102a081610294602082018095611eaf565b03848101835282611437565b519020602089810151858b015195519182019687526040820192909252336060820152608081019190915260a081019390935260643560c08401528260e081015b03908101835282611437565b51902093611c40565b80f35b8061031161030b610321938c5161175e565b51611f9d565b61031b828661175e565b52611e53565b61026e565b8880fd5b8780fd5b8480fd5b8380fd5b5080fd5b5091346103365760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103365767ffffffffffffffff9080358281116103325761038b903690830161164b565b60243583811161032e576103a2903690840161161a565b9390926103ad6114e6565b9160643590811161049f576103c4913691016115c1565b949093835151976103d489611e04565b98885b81811061047d5750506102f697988151610425816103f9602082018095611eaf565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282611437565b5190206020860151828701519083519260208401947ffcf35f5ac6a2c28868dc44c302166470266239195f02b0ee408334829333b7668652840152336060840152608083015260a082015260a081526102ed8161141b565b808b61031b8261049461030b61049a968d5161175e565b9261175e565b6103d7565b8680fd5b5082346105bf57602090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325780359067ffffffffffffffff821161032e576104f49136910161161a565b929091845b848110610504578580f35b8061051a61051560019388886118b5565b6118c5565b61052f84610529848a8a6118b5565b016118c5565b3389528385528589209173ffffffffffffffffffffffffffffffffffffffff80911692838b528652868a20911690818a5285528589207fffffffffffffffffffffffff000000000000000000000000000000000000000081541690558551918252848201527f89b1add15eff56b3dfe299ad94e01f2b52fbcb80ae1a3baea6ae8c04cb2b98a4853392a2016104f9565b8280fd5b50346103365760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033657610676816105ff6114a0565b936106086114c3565b6106106114e6565b73ffffffffffffffffffffffffffffffffffffffff968716835260016020908152848420928816845291825283832090871683528152919020549251938316845260a083901c65ffffffffffff169084015260d09190911c604083015281906060820190565b0390f35b50346103365760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610336576106b26114a0565b906106bb6114c3565b916106c46114e6565b65ffffffffffff926064358481169081810361032a5779ffffffffffff0000000000000000000000000000000000000000947fda9fa7c1b00402c17d0161b249b1ab8bbec047c5a52207b9c112deffd817036b94338a5260016020527fffffffffffff0000000000000000000000000000000000000000000000000000858b209873ffffffffffffffffffffffffffffffffffffffff809416998a8d5260205283878d209b169a8b8d52602052868c209486156000146107a457504216925b8454921697889360a01b16911617179055815193845260208401523392a480f35b905092610783565b5082346105bf5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105bf576107e56114a0565b906107ee6114c3565b9265ffffffffffff604435818116939084810361032a57338852602091600183528489209673ffffffffffffffffffffffffffffffffffffffff80911697888b528452858a20981697888a5283528489205460d01c93848711156109175761ffff9085840316116108f05750907f55eb90d810e1700b35a8e7e25395ff7f2b2259abd7415ca2284dfb1c246418f393929133895260018252838920878a528252838920888a5282528389209079ffffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffffffff000000000000000000000000000000000000000000000000000083549260d01b16911617905582519485528401523392a480f35b84517f24d35a26000000000000000000000000000000000000000000000000000000008152fd5b5084517f756688fe000000000000000000000000000000000000000000000000000000008152fd5b503461033657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610336578060209273ffffffffffffffffffffffffffffffffffffffff61098f6114a0565b1681528084528181206024358252845220549051908152f35b5082346105bf57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105bf577f3704902f963766a4e561bbaab6e6cdc1b1dd12f6e9e99648da8843b3f46b918d90359160243533855284602052818520848652602052818520818154179055815193845260208401523392a280f35b8234610a9a5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610a9a57610a606114a0565b610a686114c3565b610a706114e6565b6064359173ffffffffffffffffffffffffffffffffffffffff8316830361032e576102f6936117a1565b80fd5b503461033657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033657602090610ad7611a67565b9051908152f35b508290346105bf576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105bf57610b1a3661152a565b90807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7c36011261033257610b4c611478565b9160e43567ffffffffffffffff8111610bda576102f694610b6f913691016115c1565b939092610b7c8351611f9d565b6020840151828501519083519260208401947f939c21a48a8dbe3a9a2404a1d46691e4d39f6583d6ec6b35714604c986d801068652840152336060840152608083015260a082015260a08152610bd18161141b565b51902091611b6e565b8580fd5b509134610336576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033657610c186114a0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc360160c08112610332576080855191610c51836113e3565b1261033257845190610c6282611398565b73ffffffffffffffffffffffffffffffffffffffff91602435838116810361049f578152604435838116810361049f57602082015265ffffffffffff606435818116810361032a5788830152608435908116810361049f576060820152815260a435938285168503610bda576020820194855260c4359087830182815260e43567ffffffffffffffff811161032657610cfe90369084016115c1565b929093804211610d88575050918591610d786102f6999a610d7e95610d238851611f07565b90898c511690519083519260208401947ff3841cd1ff0085026a6327b620b67997ce40f282c88a8e905a7a5626e310f3d086528401526060830152608082015260808152610d70816113ff565b519020611b22565b91612010565b51925116916118e6565b602492508a51917fcd21db4f000000000000000000000000000000000000000000000000000000008352820152fd5b5091346103365760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc93818536011261033257610df36114a0565b9260249081359267ffffffffffffffff9788851161032a578590853603011261049f578051978589018981108282111761104a578252848301358181116103265785019036602383011215610326578382013591610e50836115ef565b90610e5d85519283611437565b838252602093878584019160071b83010191368311611046578801905b828210610fe9575050508a526044610e93868801611509565b96838c01978852013594838b0191868352604435908111610fe557610ebb90369087016115c1565b959096804211610fba575050508998995151610ed681611e04565b908b5b818110610f9757505092889492610d7892610f6497958351610f02816103f98682018095611eaf565b5190209073ffffffffffffffffffffffffffffffffffffffff9a8b8b51169151928551948501957faf1b0d30d2cab0380e68f0689007e3254993c596f2fdd0aaa7f4d04f794408638752850152830152608082015260808152610d70816113ff565b51169082515192845b848110610f78578580f35b80610f918585610f8b600195875161175e565b516118e6565b01610f6d565b80610311610fac8e9f9e93610fb2945161175e565b51611f07565b9b9a9b610ed9565b8551917fcd21db4f000000000000000000000000000000000000000000000000000000008352820152fd5b8a80fd5b6080823603126110465785608091885161100281611398565b61100b85611509565b8152611018838601611509565b838201526110278a8601611607565b8a8201528d611037818701611607565b90820152815201910190610e7a565b8c80fd5b84896041867f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b5082346105bf576101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105bf576110b03661152a565b91807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7c360112610332576110e2611478565b67ffffffffffffffff93906101043585811161049f5761110590369086016115c1565b90936101243596871161032a57611125610bd1966102f6983691016115c1565b969095825190611134826113ff565b606482527f5065726d69745769746e6573735472616e7366657246726f6d28546f6b656e5060208301527f65726d697373696f6e73207065726d69747465642c6164647265737320737065848301527f6e6465722c75696e74323536206e6f6e63652c75696e7432353620646561646c60608301527f696e652c0000000000000000000000000000000000000000000000000000000060808301528351948591816111e3602085018096611edc565b918237018b8152039361121c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe095868101835282611437565b5190209261122a8651611f9d565b6020878101518589015195519182019687526040820192909252336060820152608081019190915260a081019390935260e43560c08401528260e081016102e1565b5082346105bf576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257813567ffffffffffffffff92838211610bda5736602383011215610bda5781013592831161032e576024906007368386831b8401011161049f57865b8581106112e5578780f35b80821b83019060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc83360301126103265761139288876001946060835161132c81611398565b611368608461133c8d8601611509565b9485845261134c60448201611509565b809785015261135d60648201611509565b809885015201611509565b918291015273ffffffffffffffffffffffffffffffffffffffff80808093169516931691166117a1565b016112da565b6080810190811067ffffffffffffffff8211176113b457604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff8211176113b457604052565b60a0810190811067ffffffffffffffff8211176113b457604052565b60c0810190811067ffffffffffffffff8211176113b457604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176113b457604052565b60c4359073ffffffffffffffffffffffffffffffffffffffff8216820361149b57565b600080fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361149b57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361149b57565b6044359073ffffffffffffffffffffffffffffffffffffffff8216820361149b57565b359073ffffffffffffffffffffffffffffffffffffffff8216820361149b57565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01906080821261149b576040805190611563826113e3565b8082941261149b57805181810181811067ffffffffffffffff8211176113b457825260043573ffffffffffffffffffffffffffffffffffffffff8116810361149b578152602435602082015282526044356020830152606435910152565b9181601f8401121561149b5782359167ffffffffffffffff831161149b576020838186019501011161149b57565b67ffffffffffffffff81116113b45760051b60200190565b359065ffffffffffff8216820361149b57565b9181601f8401121561149b5782359167ffffffffffffffff831161149b576020808501948460061b01011161149b57565b91909160608184031261149b576040805191611666836113e3565b8294813567ffffffffffffffff9081811161149b57830182601f8201121561149b578035611693816115ef565b926116a087519485611437565b818452602094858086019360061b8501019381851161149b579086899897969594939201925b8484106116e3575050505050855280820135908501520135910152565b90919293949596978483031261149b578851908982019082821085831117611730578a928992845261171487611509565b81528287013583820152815201930191908897969594936116c6565b602460007f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b80518210156117725760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b92919273ffffffffffffffffffffffffffffffffffffffff604060008284168152600160205282828220961695868252602052818120338252602052209485549565ffffffffffff8760a01c16804211611884575082871696838803611812575b5050611810955016926122fc565b565b878484161160001461184f57602488604051907ff96fb0710000000000000000000000000000000000000000000000000000000082526004820152fd5b7fffffffffffffffffffffffff000000000000000000000000000000000000000084846118109a031691161790553880611802565b602490604051907fd81b2f2e0000000000000000000000000000000000000000000000000000000082526004820152fd5b91908110156117725760061b0190565b3573ffffffffffffffffffffffffffffffffffffffff8116810361149b5790565b9065ffffffffffff908160608401511673ffffffffffffffffffffffffffffffffffffffff908185511694826020820151169280866040809401511695169560009187835260016020528383208984526020528383209916988983526020528282209184835460d01c03611a3e579185611a1794927fc6a377bfc4eb120024a8ac08eef205be16b817020812c73223e81d1bdb9708ec98979694508715600014611a1c5779ffffffffffff00000000000000000000000000000000000000009042165b60a01b167fffffffffffff00000000000000000000000000000000000000000000000000006001860160d01b1617179055519384938491604091949373ffffffffffffffffffffffffffffffffffffffff606085019616845265ffffffffffff809216602085015216910152565b0390a4565b5079ffffffffffff0000000000000000000000000000000000000000876119a9565b600484517f756688fe000000000000000000000000000000000000000000000000000000008152fd5b467f000000000000000000000000000000000000000000000000000000000000000003611ab2577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86682527f9ac997416e8ff9d2ff6bebeb7149f65cdae5e32e2b90440b566bb3044041d36a604082015246606082015230608082015260808152611b1c816113ff565b51902090565b611b2a611a67565b906040519060208201927f190100000000000000000000000000000000000000000000000000000000000084526022830152604282015260428152611b1c81611398565b9192909360a435936040840151804211611c0f5750602084510151808611611bde5750918591610d78611bae94611ba9602088015186611d90565b611b22565b73ffffffffffffffffffffffffffffffffffffffff809151511692608435918216820361149b57611810936122fc565b602490604051907f3728b83d0000000000000000000000000000000000000000000000000000000082526004820152fd5b602490604051907fcd21db4f0000000000000000000000000000000000000000000000000000000082526004820152fd5b959093958051519560409283830151804211611d605750848803611d3757611c77918691610d7860209b611ba98d88015186611d90565b60005b868110611c8b575050505050505050565b611c9681835161175e565b5188611ca383878a6118b5565b01359089810151808311611d07575091818888886001968596611ccd575b50505050505001611c7a565b611cfc95611cf69273ffffffffffffffffffffffffffffffffffffffff610515935116956118b5565b916122fc565b803888888883611cc1565b6024908651907f3728b83d0000000000000000000000000000000000000000000000000000000082526004820152fd5b600484517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b6024908551907fcd21db4f0000000000000000000000000000000000000000000000000000000082526004820152fd5b9073ffffffffffffffffffffffffffffffffffffffff600160ff83161b9216600052600060205260406000209060081c6000526020526040600020818154188091551615611dda57565b60046040517f756688fe000000000000000000000000000000000000000000000000000000008152fd5b90611e0e826115ef565b611e1b6040519182611437565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0611e4982946115ef565b0190602036910137565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611e805760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b805160208092019160005b828110611ec8575050505090565b835185529381019392810192600101611eba565b9081519160005b838110611ef4575050016000815290565b8060208092840101518185015201611ee3565b60405160208101917f65626cad6cb96493bf6f5ebea28756c966f023ab9e8a83a7101849d5573b3678835273ffffffffffffffffffffffffffffffffffffffff8082511660408401526020820151166060830152606065ffffffffffff9182604082015116608085015201511660a082015260a0815260c0810181811067ffffffffffffffff8211176113b45760405251902090565b6040516020808201927f618358ac3db8dc274f0cd8829da7e234bd48cd73c4a740aede1adec9846d06a1845273ffffffffffffffffffffffffffffffffffffffff81511660408401520151606082015260608152611b1c81611398565b919082604091031261149b576020823592013590565b6000843b6121775750604182036120f55761202d82820182611ffa565b939092604010156117725760209360009360ff6040608095013560f81c5b60405194855216868401526040830152606082015282805260015afa156120e95773ffffffffffffffffffffffffffffffffffffffff80600051169182156120bf57160361209557565b60046040517f815e1d64000000000000000000000000000000000000000000000000000000008152fd5b60046040517f8baa579f000000000000000000000000000000000000000000000000000000008152fd5b6040513d6000823e3d90fd5b6040820361214d5761210991810190611ffa565b91601b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84169360ff1c019060ff8211611e805760209360009360ff60809461204b565b60046040517f4be6321b000000000000000000000000000000000000000000000000000000008152fd5b929391601f928173ffffffffffffffffffffffffffffffffffffffff60646020957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0604051988997889687947f1626ba7e000000000000000000000000000000000000000000000000000000009e8f8752600487015260406024870152816044870152868601378b85828601015201168101030192165afa9081156122f1578291612273575b507fffffffff000000000000000000000000000000000000000000000000000000009150160361224957565b60046040517fb0669cbc000000000000000000000000000000000000000000000000000000008152fd5b90506020813d82116122e9575b8161228d60209383611437565b810103126103365751907fffffffff0000000000000000000000000000000000000000000000000000000082168203610a9a57507fffffffff00000000000000000000000000000000000000000000000000000000903861221d565b3d9150612280565b6040513d84823e3d90fd5b9060006064926020958295604051947f23b872dd0000000000000000000000000000000000000000000000000000000086526004860152602485015260448401525af13d15601f3d116001600051141617161561235557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152fdfea164736f6c6343000811000a",
+  "deployedBytecode": "",
+  "linkReferences": {},
+  "deployedLinkReferences": {}
+}
diff --git a/lib/sor/abis/erc20.json b/lib/sor/abis/erc20.json
new file mode 100644
index 0000000..405d6b3
--- /dev/null
+++ b/lib/sor/abis/erc20.json
@@ -0,0 +1,222 @@
+[
+  {
+    "constant": true,
+    "inputs": [],
+    "name": "name",
+    "outputs": [
+      {
+        "name": "",
+        "type": "string"
+      }
+    ],
+    "payable": false,
+    "stateMutability": "view",
+    "type": "function"
+  },
+  {
+    "constant": false,
+    "inputs": [
+      {
+        "name": "_spender",
+        "type": "address"
+      },
+      {
+        "name": "_value",
+        "type": "uint256"
+      }
+    ],
+    "name": "approve",
+    "outputs": [
+      {
+        "name": "",
+        "type": "bool"
+      }
+    ],
+    "payable": false,
+    "stateMutability": "nonpayable",
+    "type": "function"
+  },
+  {
+    "constant": true,
+    "inputs": [],
+    "name": "totalSupply",
+    "outputs": [
+      {
+        "name": "",
+        "type": "uint256"
+      }
+    ],
+    "payable": false,
+    "stateMutability": "view",
+    "type": "function"
+  },
+  {
+    "constant": false,
+    "inputs": [
+      {
+        "name": "_from",
+        "type": "address"
+      },
+      {
+        "name": "_to",
+        "type": "address"
+      },
+      {
+        "name": "_value",
+        "type": "uint256"
+      }
+    ],
+    "name": "transferFrom",
+    "outputs": [
+      {
+        "name": "",
+        "type": "bool"
+      }
+    ],
+    "payable": false,
+    "stateMutability": "nonpayable",
+    "type": "function"
+  },
+  {
+    "constant": true,
+    "inputs": [],
+    "name": "decimals",
+    "outputs": [
+      {
+        "name": "",
+        "type": "uint8"
+      }
+    ],
+    "payable": false,
+    "stateMutability": "view",
+    "type": "function"
+  },
+  {
+    "constant": true,
+    "inputs": [
+      {
+        "name": "_owner",
+        "type": "address"
+      }
+    ],
+    "name": "balanceOf",
+    "outputs": [
+      {
+        "name": "balance",
+        "type": "uint256"
+      }
+    ],
+    "payable": false,
+    "stateMutability": "view",
+    "type": "function"
+  },
+  {
+    "constant": true,
+    "inputs": [],
+    "name": "symbol",
+    "outputs": [
+      {
+        "name": "",
+        "type": "string"
+      }
+    ],
+    "payable": false,
+    "stateMutability": "view",
+    "type": "function"
+  },
+  {
+    "constant": false,
+    "inputs": [
+      {
+        "name": "_to",
+        "type": "address"
+      },
+      {
+        "name": "_value",
+        "type": "uint256"
+      }
+    ],
+    "name": "transfer",
+    "outputs": [
+      {
+        "name": "",
+        "type": "bool"
+      }
+    ],
+    "payable": false,
+    "stateMutability": "nonpayable",
+    "type": "function"
+  },
+  {
+    "constant": true,
+    "inputs": [
+      {
+        "name": "_owner",
+        "type": "address"
+      },
+      {
+        "name": "_spender",
+        "type": "address"
+      }
+    ],
+    "name": "allowance",
+    "outputs": [
+      {
+        "name": "",
+        "type": "uint256"
+      }
+    ],
+    "payable": false,
+    "stateMutability": "view",
+    "type": "function"
+  },
+  {
+    "payable": true,
+    "stateMutability": "payable",
+    "type": "fallback"
+  },
+  {
+    "anonymous": false,
+    "inputs": [
+      {
+        "indexed": true,
+        "name": "owner",
+        "type": "address"
+      },
+      {
+        "indexed": true,
+        "name": "spender",
+        "type": "address"
+      },
+      {
+        "indexed": false,
+        "name": "value",
+        "type": "uint256"
+      }
+    ],
+    "name": "Approval",
+    "type": "event"
+  },
+  {
+    "anonymous": false,
+    "inputs": [
+      {
+        "indexed": true,
+        "name": "from",
+        "type": "address"
+      },
+      {
+        "indexed": true,
+        "name": "to",
+        "type": "address"
+      },
+      {
+        "indexed": false,
+        "name": "value",
+        "type": "uint256"
+      }
+    ],
+    "name": "Transfer",
+    "type": "event"
+  }
+]
diff --git a/lib/sor/abis/gasDataArbitrum.json b/lib/sor/abis/gasDataArbitrum.json
new file mode 100644
index 0000000..89a12e7
--- /dev/null
+++ b/lib/sor/abis/gasDataArbitrum.json
@@ -0,0 +1,40 @@
+[
+  {
+    "inputs": [],
+    "name": "getPricesInWei",
+    "outputs": [
+      {
+        "internalType": "uint256",
+        "name": "",
+        "type": "uint256"
+      },
+      {
+        "internalType": "uint256",
+        "name": "",
+        "type": "uint256"
+      },
+      {
+        "internalType": "uint256",
+        "name": "",
+        "type": "uint256"
+      },
+      {
+        "internalType": "uint256",
+        "name": "",
+        "type": "uint256"
+      },
+      {
+        "internalType": "uint256",
+        "name": "",
+        "type": "uint256"
+      },
+      {
+        "internalType": "uint256",
+        "name": "",
+        "type": "uint256"
+      }
+    ],
+    "stateMutability": "view",
+    "type": "function"
+  }
+]
diff --git a/lib/sor/abis/gasPriceOracle.json b/lib/sor/abis/gasPriceOracle.json
new file mode 100644
index 0000000..735c1b6
--- /dev/null
+++ b/lib/sor/abis/gasPriceOracle.json
@@ -0,0 +1,298 @@
+[
+  {
+    "inputs": [
+      {
+        "internalType": "address",
+        "name": "_owner",
+        "type": "address"
+      }
+    ],
+    "stateMutability": "nonpayable",
+    "type": "constructor"
+  },
+  {
+    "anonymous": false,
+    "inputs": [
+      {
+        "indexed": false,
+        "internalType": "uint256",
+        "name": "",
+        "type": "uint256"
+      }
+    ],
+    "name": "DecimalsUpdated",
+    "type": "event"
+  },
+  {
+    "anonymous": false,
+    "inputs": [
+      {
+        "indexed": false,
+        "internalType": "uint256",
+        "name": "",
+        "type": "uint256"
+      }
+    ],
+    "name": "GasPriceUpdated",
+    "type": "event"
+  },
+  {
+    "anonymous": false,
+    "inputs": [
+      {
+        "indexed": false,
+        "internalType": "uint256",
+        "name": "",
+        "type": "uint256"
+      }
+    ],
+    "name": "L1BaseFeeUpdated",
+    "type": "event"
+  },
+  {
+    "anonymous": false,
+    "inputs": [
+      {
+        "indexed": false,
+        "internalType": "uint256",
+        "name": "",
+        "type": "uint256"
+      }
+    ],
+    "name": "OverheadUpdated",
+    "type": "event"
+  },
+  {
+    "anonymous": false,
+    "inputs": [
+      {
+        "indexed": true,
+        "internalType": "address",
+        "name": "previousOwner",
+        "type": "address"
+      },
+      {
+        "indexed": true,
+        "internalType": "address",
+        "name": "newOwner",
+        "type": "address"
+      }
+    ],
+    "name": "OwnershipTransferred",
+    "type": "event"
+  },
+  {
+    "anonymous": false,
+    "inputs": [
+      {
+        "indexed": false,
+        "internalType": "uint256",
+        "name": "",
+        "type": "uint256"
+      }
+    ],
+    "name": "ScalarUpdated",
+    "type": "event"
+  },
+  {
+    "inputs": [],
+    "name": "decimals",
+    "outputs": [
+      {
+        "internalType": "uint256",
+        "name": "",
+        "type": "uint256"
+      }
+    ],
+    "stateMutability": "view",
+    "type": "function"
+  },
+  {
+    "inputs": [],
+    "name": "gasPrice",
+    "outputs": [
+      {
+        "internalType": "uint256",
+        "name": "",
+        "type": "uint256"
+      }
+    ],
+    "stateMutability": "view",
+    "type": "function"
+  },
+  {
+    "inputs": [
+      {
+        "internalType": "bytes",
+        "name": "_data",
+        "type": "bytes"
+      }
+    ],
+    "name": "getL1Fee",
+    "outputs": [
+      {
+        "internalType": "uint256",
+        "name": "",
+        "type": "uint256"
+      }
+    ],
+    "stateMutability": "view",
+    "type": "function"
+  },
+  {
+    "inputs": [
+      {
+        "internalType": "bytes",
+        "name": "_data",
+        "type": "bytes"
+      }
+    ],
+    "name": "getL1GasUsed",
+    "outputs": [
+      {
+        "internalType": "uint256",
+        "name": "",
+        "type": "uint256"
+      }
+    ],
+    "stateMutability": "view",
+    "type": "function"
+  },
+  {
+    "inputs": [],
+    "name": "l1BaseFee",
+    "outputs": [
+      {
+        "internalType": "uint256",
+        "name": "",
+        "type": "uint256"
+      }
+    ],
+    "stateMutability": "view",
+    "type": "function"
+  },
+  {
+    "inputs": [],
+    "name": "overhead",
+    "outputs": [
+      {
+        "internalType": "uint256",
+        "name": "",
+        "type": "uint256"
+      }
+    ],
+    "stateMutability": "view",
+    "type": "function"
+  },
+  {
+    "inputs": [],
+    "name": "owner",
+    "outputs": [
+      {
+        "internalType": "address",
+        "name": "",
+        "type": "address"
+      }
+    ],
+    "stateMutability": "view",
+    "type": "function"
+  },
+  {
+    "inputs": [],
+    "name": "renounceOwnership",
+    "outputs": [],
+    "stateMutability": "nonpayable",
+    "type": "function"
+  },
+  {
+    "inputs": [],
+    "name": "scalar",
+    "outputs": [
+      {
+        "internalType": "uint256",
+        "name": "",
+        "type": "uint256"
+      }
+    ],
+    "stateMutability": "view",
+    "type": "function"
+  },
+  {
+    "inputs": [
+      {
+        "internalType": "uint256",
+        "name": "_decimals",
+        "type": "uint256"
+      }
+    ],
+    "name": "setDecimals",
+    "outputs": [],
+    "stateMutability": "nonpayable",
+    "type": "function"
+  },
+  {
+    "inputs": [
+      {
+        "internalType": "uint256",
+        "name": "_gasPrice",
+        "type": "uint256"
+      }
+    ],
+    "name": "setGasPrice",
+    "outputs": [],
+    "stateMutability": "nonpayable",
+    "type": "function"
+  },
+  {
+    "inputs": [
+      {
+        "internalType": "uint256",
+        "name": "_baseFee",
+        "type": "uint256"
+      }
+    ],
+    "name": "setL1BaseFee",
+    "outputs": [],
+    "stateMutability": "nonpayable",
+    "type": "function"
+  },
+  {
+    "inputs": [
+      {
+        "internalType": "uint256",
+        "name": "_overhead",
+        "type": "uint256"
+      }
+    ],
+    "name": "setOverhead",
+    "outputs": [],
+    "stateMutability": "nonpayable",
+    "type": "function"
+  },
+  {
+    "inputs": [
+      {
+        "internalType": "uint256",
+        "name": "_scalar",
+        "type": "uint256"
+      }
+    ],
+    "name": "setScalar",
+    "outputs": [],
+    "stateMutability": "nonpayable",
+    "type": "function"
+  },
+  {
+    "inputs": [
+      {
+        "internalType": "address",
+        "name": "newOwner",
+        "type": "address"
+      }
+    ],
+    "name": "transferOwnership",
+    "outputs": [],
+    "stateMutability": "nonpayable",
+    "type": "function"
+  }
+]
diff --git a/lib/sor/abis/multicall2.json b/lib/sor/abis/multicall2.json
new file mode 100644
index 0000000..261a510
--- /dev/null
+++ b/lib/sor/abis/multicall2.json
@@ -0,0 +1,185 @@
+[
+  {
+    "inputs": [
+      {
+        "components": [
+          { "internalType": "address", "name": "target", "type": "address" },
+          { "internalType": "bytes", "name": "callData", "type": "bytes" }
+        ],
+        "internalType": "struct Multicall2.Call[]",
+        "name": "calls",
+        "type": "tuple[]"
+      }
+    ],
+    "name": "aggregate",
+    "outputs": [
+      { "internalType": "uint256", "name": "blockNumber", "type": "uint256" },
+      { "internalType": "bytes[]", "name": "returnData", "type": "bytes[]" }
+    ],
+    "stateMutability": "nonpayable",
+    "type": "function"
+  },
+  {
+    "inputs": [
+      {
+        "components": [
+          { "internalType": "address", "name": "target", "type": "address" },
+          { "internalType": "bytes", "name": "callData", "type": "bytes" }
+        ],
+        "internalType": "struct Multicall2.Call[]",
+        "name": "calls",
+        "type": "tuple[]"
+      }
+    ],
+    "name": "blockAndAggregate",
+    "outputs": [
+      { "internalType": "uint256", "name": "blockNumber", "type": "uint256" },
+      { "internalType": "bytes32", "name": "blockHash", "type": "bytes32" },
+      {
+        "components": [
+          { "internalType": "bool", "name": "success", "type": "bool" },
+          { "internalType": "bytes", "name": "returnData", "type": "bytes" }
+        ],
+        "internalType": "struct Multicall2.Result[]",
+        "name": "returnData",
+        "type": "tuple[]"
+      }
+    ],
+    "stateMutability": "nonpayable",
+    "type": "function"
+  },
+  {
+    "inputs": [
+      { "internalType": "uint256", "name": "blockNumber", "type": "uint256" }
+    ],
+    "name": "getBlockHash",
+    "outputs": [
+      { "internalType": "bytes32", "name": "blockHash", "type": "bytes32" }
+    ],
+    "stateMutability": "view",
+    "type": "function"
+  },
+  {
+    "inputs": [],
+    "name": "getBlockNumber",
+    "outputs": [
+      { "internalType": "uint256", "name": "blockNumber", "type": "uint256" }
+    ],
+    "stateMutability": "view",
+    "type": "function"
+  },
+  {
+    "inputs": [],
+    "name": "getCurrentBlockCoinbase",
+    "outputs": [
+      { "internalType": "address", "name": "coinbase", "type": "address" }
+    ],
+    "stateMutability": "view",
+    "type": "function"
+  },
+  {
+    "inputs": [],
+    "name": "getCurrentBlockDifficulty",
+    "outputs": [
+      { "internalType": "uint256", "name": "difficulty", "type": "uint256" }
+    ],
+    "stateMutability": "view",
+    "type": "function"
+  },
+  {
+    "inputs": [],
+    "name": "getCurrentBlockGasLimit",
+    "outputs": [
+      { "internalType": "uint256", "name": "gaslimit", "type": "uint256" }
+    ],
+    "stateMutability": "view",
+    "type": "function"
+  },
+  {
+    "inputs": [],
+    "name": "getCurrentBlockTimestamp",
+    "outputs": [
+      { "internalType": "uint256", "name": "timestamp", "type": "uint256" }
+    ],
+    "stateMutability": "view",
+    "type": "function"
+  },
+  {
+    "inputs": [
+      { "internalType": "address", "name": "addr", "type": "address" }
+    ],
+    "name": "getEthBalance",
+    "outputs": [
+      { "internalType": "uint256", "name": "balance", "type": "uint256" }
+    ],
+    "stateMutability": "view",
+    "type": "function"
+  },
+  {
+    "inputs": [],
+    "name": "getLastBlockHash",
+    "outputs": [
+      { "internalType": "bytes32", "name": "blockHash", "type": "bytes32" }
+    ],
+    "stateMutability": "view",
+    "type": "function"
+  },
+  {
+    "inputs": [
+      { "internalType": "bool", "name": "requireSuccess", "type": "bool" },
+      {
+        "components": [
+          { "internalType": "address", "name": "target", "type": "address" },
+          { "internalType": "bytes", "name": "callData", "type": "bytes" }
+        ],
+        "internalType": "struct Multicall2.Call[]",
+        "name": "calls",
+        "type": "tuple[]"
+      }
+    ],
+    "name": "tryAggregate",
+    "outputs": [
+      {
+        "components": [
+          { "internalType": "bool", "name": "success", "type": "bool" },
+          { "internalType": "bytes", "name": "returnData", "type": "bytes" }
+        ],
+        "internalType": "struct Multicall2.Result[]",
+        "name": "returnData",
+        "type": "tuple[]"
+      }
+    ],
+    "stateMutability": "nonpayable",
+    "type": "function"
+  },
+  {
+    "inputs": [
+      { "internalType": "bool", "name": "requireSuccess", "type": "bool" },
+      {
+        "components": [
+          { "internalType": "address", "name": "target", "type": "address" },
+          { "internalType": "bytes", "name": "callData", "type": "bytes" }
+        ],
+        "internalType": "struct Multicall2.Call[]",
+        "name": "calls",
+        "type": "tuple[]"
+      }
+    ],
+    "name": "tryBlockAndAggregate",
+    "outputs": [
+      { "internalType": "uint256", "name": "blockNumber", "type": "uint256" },
+      { "internalType": "bytes32", "name": "blockHash", "type": "bytes32" },
+      {
+        "components": [
+          { "internalType": "bool", "name": "success", "type": "bool" },
+          { "internalType": "bytes", "name": "returnData", "type": "bytes" }
+        ],
+        "internalType": "struct Multicall2.Result[]",
+        "name": "returnData",
+        "type": "tuple[]"
+      }
+    ],
+    "stateMutability": "nonpayable",
+    "type": "function"
+  }
+]
diff --git a/lib/sor/index.ts b/lib/sor/index.ts
new file mode 100644
index 0000000..b2e4b13
--- /dev/null
+++ b/lib/sor/index.ts
@@ -0,0 +1,3 @@
+export * from './providers';
+export * from './routers';
+export * from './util';
diff --git a/lib/sor/providers/cache-node.ts b/lib/sor/providers/cache-node.ts
new file mode 100644
index 0000000..3aed9bf
--- /dev/null
+++ b/lib/sor/providers/cache-node.ts
@@ -0,0 +1,19 @@
+import NodeCache from 'node-cache';
+
+import { ICache } from './cache';
+
+export class NodeJSCache<T> implements ICache<T> {
+  constructor(private nodeCache: NodeCache) {}
+
+  async get(key: string): Promise<T | undefined> {
+    return this.nodeCache.get<T>(key);
+  }
+
+  async set(key: string, value: T): Promise<boolean> {
+    return this.nodeCache.set(key, value);
+  }
+
+  async has(key: string): Promise<boolean> {
+    return this.nodeCache.has(key);
+  }
+}
diff --git a/lib/sor/providers/cache.ts b/lib/sor/providers/cache.ts
new file mode 100644
index 0000000..78193b0
--- /dev/null
+++ b/lib/sor/providers/cache.ts
@@ -0,0 +1,15 @@
+/**
+ * Generic cache used by providers. Allows caching of results to minimize
+ * round trips to external data sources.
+ *
+ * @export
+ * @interface ICache
+ * @template T
+ */
+export interface ICache<T> {
+  get(key: string): Promise<T | undefined>;
+
+  set(key: string, value: T): Promise<boolean>;
+
+  has(key: string): Promise<boolean>;
+}
diff --git a/lib/sor/providers/caching-gas-provider.ts b/lib/sor/providers/caching-gas-provider.ts
new file mode 100644
index 0000000..4c945c4
--- /dev/null
+++ b/lib/sor/providers/caching-gas-provider.ts
@@ -0,0 +1,47 @@
+import { ChainId } from '@uniswap/sdk-core';
+
+import { log } from '../util/log';
+
+import { ICache } from './cache';
+import { GasPrice, IGasPriceProvider } from './gas-price-provider';
+
+/**
+ * Provider for getting gas price, with functionality for caching the results.
+ *
+ * @export
+ * @class CachingV3SubgraphProvider
+ */
+export class CachingGasStationProvider implements IGasPriceProvider {
+  private GAS_KEY = (chainId: ChainId) => `gasPrice-${chainId}`;
+
+  /**
+   * Creates an instance of CachingGasStationProvider.
+   * @param chainId The chain id to use.
+   * @param gasPriceProvider The provider to use to get the gas price when not in the cache.
+   * @param cache Cache instance to hold cached pools.
+   */
+  constructor(
+    protected chainId: ChainId,
+    private gasPriceProvider: IGasPriceProvider,
+    private cache: ICache<GasPrice>
+  ) {}
+
+  public async getGasPrice(): Promise<GasPrice> {
+    const cachedGasPrice = await this.cache.get(this.GAS_KEY(this.chainId));
+
+    if (cachedGasPrice) {
+      log.info(
+        { cachedGasPrice },
+        `Got gas station price from local cache: ${cachedGasPrice.gasPriceWei}.`
+      );
+
+      return cachedGasPrice;
+    }
+
+    log.info('Gas station price local cache miss.');
+    const gasPrice = await this.gasPriceProvider.getGasPrice();
+    await this.cache.set(this.GAS_KEY(this.chainId), gasPrice);
+
+    return gasPrice;
+  }
+}
diff --git a/lib/sor/providers/caching-token-list-provider.ts b/lib/sor/providers/caching-token-list-provider.ts
new file mode 100644
index 0000000..a63cc8d
--- /dev/null
+++ b/lib/sor/providers/caching-token-list-provider.ts
@@ -0,0 +1,239 @@
+/* eslint-disable @typescript-eslint/no-non-null-assertion */
+import { ChainId, Token } from '@uniswap/sdk-core';
+import { TokenInfo, TokenList } from '@uniswap/token-lists';
+import axios from 'axios';
+import _ from 'lodash';
+
+import { log } from '../util/log';
+import { metric, MetricLoggerUnit } from '../util/metric';
+
+import { ICache } from './cache';
+import { ITokenProvider, TokenAccessor } from './token-provider';
+
+type StringToTokenInfo = { [index: string]: TokenInfo };
+
+// Use string for chain id to support unknown chains.
+type ChainToTokenInfoList = { [chainId: string]: TokenInfo[] };
+type TokenInfoMapping = { [chainId: string]: StringToTokenInfo };
+
+/**
+ * Provider for getting token data from a Token List.
+ *
+ * @export
+ * @interface ITokenListProvider
+ */
+export interface ITokenListProvider {
+  getTokenBySymbol(_symbol: string): Promise<Token | undefined>;
+  getTokenByAddress(address: string): Promise<Token | undefined>;
+}
+
+export class CachingTokenListProvider
+  implements ITokenProvider, ITokenListProvider
+{
+  private CACHE_KEY = (tokenInfo: TokenInfo) =>
+    `token-list-token-${this.chainId}/${this.tokenList.name}/${
+      this.tokenList.timestamp
+    }/${this.tokenList.version}/${tokenInfo.address.toLowerCase()}/${
+      tokenInfo.decimals
+    }/${tokenInfo.symbol}/${tokenInfo.name}`;
+
+  private chainId: ChainId;
+  private chainToTokenInfos: ChainToTokenInfoList;
+  private chainSymbolToTokenInfo: TokenInfoMapping;
+  private chainAddressToTokenInfo: TokenInfoMapping;
+  private tokenList: TokenList;
+
+  /**
+   * Creates an instance of CachingTokenListProvider.
+   * Token metadata (e.g. symbol and decimals) generally don't change so can be cached indefinitely.
+   *
+   * @param chainId The chain id to use.
+   * @param tokenList The token list to get the tokens from.
+   * @param tokenCache Cache instance to hold cached tokens.
+   */
+  constructor(
+    chainId: ChainId | number,
+    tokenList: TokenList,
+    private tokenCache: ICache<Token>
+  ) {
+    this.chainId = chainId;
+    this.tokenList = tokenList;
+
+    this.chainToTokenInfos = _.reduce(
+      this.tokenList.tokens,
+      (result: ChainToTokenInfoList, tokenInfo: TokenInfo) => {
+        const chainId = tokenInfo.chainId.toString();
+        if (!result[chainId]) {
+          result[chainId] = [];
+        }
+        result[chainId]!.push(tokenInfo);
+
+        return result;
+      },
+      {}
+    );
+
+    this.chainSymbolToTokenInfo = _.mapValues(
+      this.chainToTokenInfos,
+      (tokenInfos: TokenInfo[]) => _.keyBy(tokenInfos, 'symbol')
+    );
+
+    this.chainAddressToTokenInfo = _.mapValues(
+      this.chainToTokenInfos,
+      (tokenInfos: TokenInfo[]) =>
+        _.keyBy(tokenInfos, (tokenInfo) => tokenInfo.address.toLowerCase())
+    );
+  }
+
+  public static async fromTokenListURI(
+    chainId: ChainId | number,
+    tokenListURI: string,
+    tokenCache: ICache<Token>
+  ) {
+    const now = Date.now();
+    const tokenList = await this.buildTokenList(tokenListURI);
+
+    metric.putMetric(
+      'TokenListLoad',
+      Date.now() - now,
+      MetricLoggerUnit.Milliseconds
+    );
+
+    return new CachingTokenListProvider(chainId, tokenList, tokenCache);
+  }
+
+  private static async buildTokenList(
+    tokenListURI: string
+  ): Promise<TokenList> {
+    log.info(`Getting tokenList from ${tokenListURI}.`);
+    const response = await axios.get(tokenListURI);
+    log.info(`Got tokenList from ${tokenListURI}.`);
+
+    const { data: tokenList, status } = response;
+
+    if (status != 200) {
+      log.error(
+        { response },
+        `Unabled to get token list from ${tokenListURI}.`
+      );
+
+      throw new Error(`Unable to get token list from ${tokenListURI}`);
+    }
+
+    return tokenList;
+  }
+
+  public static async fromTokenList(
+    chainId: ChainId | number,
+    tokenList: TokenList,
+    tokenCache: ICache<Token>
+  ) {
+    const now = Date.now();
+
+    const tokenProvider = new CachingTokenListProvider(
+      chainId,
+      tokenList,
+      tokenCache
+    );
+
+    metric.putMetric(
+      'TokenListLoad',
+      Date.now() - now,
+      MetricLoggerUnit.Milliseconds
+    );
+
+    return tokenProvider;
+  }
+
+  public async getTokens(_addresses: string[]): Promise<TokenAccessor> {
+    const addressToToken: { [address: string]: Token } = {};
+    const symbolToToken: { [symbol: string]: Token } = {};
+
+    for (const address of _addresses) {
+      const token = await this.getTokenByAddress(address);
+      if (!token) {
+        continue;
+      }
+      addressToToken[address.toLowerCase()] = token;
+
+      if (!token.symbol) {
+        continue;
+      }
+      symbolToToken[token.symbol.toLowerCase()] = token;
+    }
+
+    return {
+      getTokenByAddress: (address: string) =>
+        addressToToken[address.toLowerCase()],
+      getTokenBySymbol: (symbol: string) => symbolToToken[symbol.toLowerCase()],
+      getAllTokens: (): Token[] => {
+        return Object.values(addressToToken);
+      },
+    };
+  }
+
+  public async getTokenBySymbol(_symbol: string): Promise<Token | undefined> {
+    let symbol = _symbol;
+
+    // We consider ETH as a regular ERC20 Token throughout this package. We don't use the NativeCurrency object from the sdk.
+    // When we build the calldata for swapping we insert wrapping/unwrapping as needed.
+    if (_symbol == 'ETH') {
+      symbol = 'WETH';
+    }
+
+    if (!this.chainSymbolToTokenInfo[this.chainId.toString()]) {
+      return undefined;
+    }
+
+    const tokenInfo: TokenInfo | undefined =
+      this.chainSymbolToTokenInfo[this.chainId.toString()]![symbol];
+
+    if (!tokenInfo) {
+      return undefined;
+    }
+
+    const token: Token = await this.buildToken(tokenInfo);
+
+    return token;
+  }
+
+  public async getTokenByAddress(address: string): Promise<Token | undefined> {
+    if (!this.chainAddressToTokenInfo[this.chainId.toString()]) {
+      return undefined;
+    }
+
+    const tokenInfo: TokenInfo | undefined =
+      this.chainAddressToTokenInfo[this.chainId.toString()]![
+        address.toLowerCase()
+      ];
+
+    if (!tokenInfo) {
+      return undefined;
+    }
+
+    const token: Token = await this.buildToken(tokenInfo);
+
+    return token;
+  }
+
+  private async buildToken(tokenInfo: TokenInfo): Promise<Token> {
+    const cacheKey = this.CACHE_KEY(tokenInfo);
+    const cachedToken = await this.tokenCache.get(cacheKey);
+
+    if (cachedToken) {
+      return cachedToken;
+    }
+
+    const token = new Token(
+      this.chainId,
+      tokenInfo.address,
+      tokenInfo.decimals,
+      tokenInfo.symbol,
+      tokenInfo.name
+    );
+
+    await this.tokenCache.set(cacheKey, token);
+
+    return token;
+  }
+}
diff --git a/lib/sor/providers/caching-token-provider.ts b/lib/sor/providers/caching-token-provider.ts
new file mode 100644
index 0000000..8a71911
--- /dev/null
+++ b/lib/sor/providers/caching-token-provider.ts
@@ -0,0 +1,279 @@
+import { ChainId, Token } from '@uniswap/sdk-core';
+import _ from 'lodash';
+
+import { log, WRAPPED_NATIVE_CURRENCY } from '../util';
+
+import { ICache } from './cache';
+import {
+  BTC_BNB,
+  BUSD_BNB,
+  CELO,
+  CELO_ALFAJORES,
+  CEUR_CELO,
+  CUSD_CELO,
+  CUSD_CELO_ALFAJORES,
+  DAI_ARBITRUM,
+  DAI_AVAX,
+  DAI_BNB,
+  DAI_CELO,
+  DAI_CELO_ALFAJORES,
+  DAI_MAINNET,
+  DAI_MOONBEAM,
+  DAI_OPTIMISM,
+  DAI_OPTIMISM_GOERLI,
+  DAI_POLYGON_MUMBAI,
+  ETH_BNB,
+  ITokenProvider,
+  TokenAccessor,
+  USDC_ARBITRUM,
+  USDC_ARBITRUM_GOERLI,
+  USDC_AVAX,
+  USDC_BASE,
+  USDC_BNB,
+  USDC_ETHEREUM_GNOSIS,
+  USDC_MAINNET,
+  USDC_MOONBEAM,
+  USDC_OPTIMISM,
+  USDC_OPTIMISM_GOERLI,
+  USDC_POLYGON,
+  USDC_SEPOLIA,
+  USDT_ARBITRUM,
+  USDT_BNB,
+  USDT_MAINNET,
+  USDT_OPTIMISM,
+  USDT_OPTIMISM_GOERLI,
+  WBTC_ARBITRUM,
+  WBTC_MAINNET,
+  WBTC_MOONBEAM,
+  WBTC_OPTIMISM,
+  WBTC_OPTIMISM_GOERLI,
+  WMATIC_POLYGON,
+  WMATIC_POLYGON_MUMBAI,
+} from './token-provider';
+
+// These tokens will added to the Token cache on initialization.
+export const CACHE_SEED_TOKENS: {
+  [chainId in ChainId]?: { [symbol: string]: Token };
+} = {
+  [ChainId.MAINNET]: {
+    WETH: WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET]!,
+    USDC: USDC_MAINNET,
+    USDT: USDT_MAINNET,
+    WBTC: WBTC_MAINNET,
+    DAI: DAI_MAINNET,
+    // This token stores its symbol as bytes32, therefore can not be fetched on-chain using
+    // our token providers.
+    // This workaround adds it to the cache, so we won't try to fetch it on-chain.
+    RING: new Token(
+      ChainId.MAINNET,
+      '0x9469D013805bFfB7D3DEBe5E7839237e535ec483',
+      18,
+      'RING',
+      'RING'
+    ),
+  },
+  [ChainId.SEPOLIA]: {
+    USDC: USDC_SEPOLIA,
+  },
+  [ChainId.OPTIMISM]: {
+    USDC: USDC_OPTIMISM,
+    USDT: USDT_OPTIMISM,
+    WBTC: WBTC_OPTIMISM,
+    DAI: DAI_OPTIMISM,
+  },
+  [ChainId.OPTIMISM_GOERLI]: {
+    USDC: USDC_OPTIMISM_GOERLI,
+    USDT: USDT_OPTIMISM_GOERLI,
+    WBTC: WBTC_OPTIMISM_GOERLI,
+    DAI: DAI_OPTIMISM_GOERLI,
+  },
+  [ChainId.ARBITRUM_ONE]: {
+    USDC: USDC_ARBITRUM,
+    USDT: USDT_ARBITRUM,
+    WBTC: WBTC_ARBITRUM,
+    DAI: DAI_ARBITRUM,
+  },
+  [ChainId.ARBITRUM_GOERLI]: {
+    USDC: USDC_ARBITRUM_GOERLI,
+  },
+  [ChainId.POLYGON]: {
+    WMATIC: WMATIC_POLYGON,
+    USDC: USDC_POLYGON,
+  },
+  [ChainId.POLYGON_MUMBAI]: {
+    WMATIC: WMATIC_POLYGON_MUMBAI,
+    DAI: DAI_POLYGON_MUMBAI,
+  },
+  [ChainId.CELO]: {
+    CELO: CELO,
+    CUSD: CUSD_CELO,
+    CEUR: CEUR_CELO,
+    DAI: DAI_CELO,
+  },
+  [ChainId.CELO_ALFAJORES]: {
+    CELO: CELO_ALFAJORES,
+    CUSD: CUSD_CELO_ALFAJORES,
+    CEUR: CUSD_CELO_ALFAJORES,
+    DAI: DAI_CELO_ALFAJORES,
+  },
+  [ChainId.GNOSIS]: {
+    WXDAI: WRAPPED_NATIVE_CURRENCY[ChainId.GNOSIS],
+    USDC_ETHEREUM_GNOSIS: USDC_ETHEREUM_GNOSIS,
+  },
+  [ChainId.MOONBEAM]: {
+    USDC: USDC_MOONBEAM,
+    DAI: DAI_MOONBEAM,
+    WBTC: WBTC_MOONBEAM,
+    WGLMR: WRAPPED_NATIVE_CURRENCY[ChainId.MOONBEAM],
+  },
+  [ChainId.BNB]: {
+    USDC: USDC_BNB,
+    USDT: USDT_BNB,
+    BUSD: BUSD_BNB,
+    ETH: ETH_BNB,
+    DAI: DAI_BNB,
+    BTC: BTC_BNB,
+    WBNB: WRAPPED_NATIVE_CURRENCY[ChainId.BNB],
+  },
+  [ChainId.AVALANCHE]: {
+    USDC: USDC_AVAX,
+    DAI: DAI_AVAX,
+    WAVAX: WRAPPED_NATIVE_CURRENCY[ChainId.AVALANCHE],
+  },
+  [ChainId.BASE]: {
+    USDC: USDC_BASE,
+    WETH: WRAPPED_NATIVE_CURRENCY[ChainId.BASE],
+  }
+  // Currently we do not have providers for Moonbeam mainnet or Gnosis testnet
+};
+
+/**
+ * Provider for getting token metadata that falls back to a different provider
+ * in the event of failure.
+ *
+ * @export
+ * @class CachingTokenProviderWithFallback
+ */
+export class CachingTokenProviderWithFallback implements ITokenProvider {
+  private CACHE_KEY = (chainId: ChainId, address: string) =>
+    `token-${chainId}-${address}`;
+
+  constructor(
+    protected chainId: ChainId,
+    // Token metadata (e.g. symbol and decimals) don't change so can be cached indefinitely.
+    // Constructing a new token object is slow as sdk-core does checksumming.
+    private tokenCache: ICache<Token>,
+    protected primaryTokenProvider: ITokenProvider,
+    protected fallbackTokenProvider?: ITokenProvider
+  ) {}
+
+  public async getTokens(_addresses: string[]): Promise<TokenAccessor> {
+    const seedTokens = CACHE_SEED_TOKENS[this.chainId];
+
+    if (seedTokens) {
+      for (const token of Object.values(seedTokens)) {
+        await this.tokenCache.set(
+          this.CACHE_KEY(this.chainId, token.address.toLowerCase()),
+          token
+        );
+      }
+    }
+
+    const addressToToken: { [address: string]: Token } = {};
+    const symbolToToken: { [symbol: string]: Token } = {};
+
+    const addresses = _(_addresses)
+      .map((address) => address.toLowerCase())
+      .uniq()
+      .value();
+
+    const addressesToFindInPrimary = [];
+    const addressesToFindInSecondary = [];
+
+    for (const address of addresses) {
+      if (await this.tokenCache.has(this.CACHE_KEY(this.chainId, address))) {
+        addressToToken[address.toLowerCase()] = (await this.tokenCache.get(
+          this.CACHE_KEY(this.chainId, address)
+        ))!;
+        symbolToToken[addressToToken[address]!.symbol!] =
+          (await this.tokenCache.get(this.CACHE_KEY(this.chainId, address)))!;
+      } else {
+        addressesToFindInPrimary.push(address);
+      }
+    }
+
+    log.info(
+      { addressesToFindInPrimary },
+      `Found ${addresses.length - addressesToFindInPrimary.length} out of ${
+        addresses.length
+      } tokens in local cache. ${
+        addressesToFindInPrimary.length > 0
+          ? `Checking primary token provider for ${addressesToFindInPrimary.length} tokens`
+          : ``
+      }
+      `
+    );
+
+    if (addressesToFindInPrimary.length > 0) {
+      const primaryTokenAccessor = await this.primaryTokenProvider.getTokens(
+        addressesToFindInPrimary
+      );
+
+      for (const address of addressesToFindInPrimary) {
+        const token = primaryTokenAccessor.getTokenByAddress(address);
+
+        if (token) {
+          addressToToken[address.toLowerCase()] = token;
+          symbolToToken[addressToToken[address]!.symbol!] = token;
+          await this.tokenCache.set(
+            this.CACHE_KEY(this.chainId, address.toLowerCase()),
+            addressToToken[address]!
+          );
+        } else {
+          addressesToFindInSecondary.push(address);
+        }
+      }
+
+      log.info(
+        { addressesToFindInSecondary },
+        `Found ${
+          addressesToFindInPrimary.length - addressesToFindInSecondary.length
+        } tokens in primary. ${
+          this.fallbackTokenProvider
+            ? `Checking secondary token provider for ${addressesToFindInSecondary.length} tokens`
+            : `No fallback token provider specified. About to return.`
+        }`
+      );
+    }
+
+    if (this.fallbackTokenProvider && addressesToFindInSecondary.length > 0) {
+      const secondaryTokenAccessor = await this.fallbackTokenProvider.getTokens(
+        addressesToFindInSecondary
+      );
+
+      for (const address of addressesToFindInSecondary) {
+        const token = secondaryTokenAccessor.getTokenByAddress(address);
+        if (token) {
+          addressToToken[address.toLowerCase()] = token;
+          symbolToToken[addressToToken[address]!.symbol!] = token;
+          await this.tokenCache.set(
+            this.CACHE_KEY(this.chainId, address.toLowerCase()),
+            addressToToken[address]!
+          );
+        }
+      }
+    }
+
+    return {
+      getTokenByAddress: (address: string): Token | undefined => {
+        return addressToToken[address.toLowerCase()];
+      },
+      getTokenBySymbol: (symbol: string): Token | undefined => {
+        return symbolToToken[symbol.toLowerCase()];
+      },
+      getAllTokens: (): Token[] => {
+        return Object.values(addressToToken);
+      },
+    };
+  }
+}
diff --git a/lib/sor/providers/caching/route/index.ts b/lib/sor/providers/caching/route/index.ts
new file mode 100644
index 0000000..2393f5a
--- /dev/null
+++ b/lib/sor/providers/caching/route/index.ts
@@ -0,0 +1,2 @@
+export * from './route-caching-provider';
+export * from './model/';
diff --git a/lib/sor/providers/caching/route/model/cache-mode.ts b/lib/sor/providers/caching/route/model/cache-mode.ts
new file mode 100644
index 0000000..04f7939
--- /dev/null
+++ b/lib/sor/providers/caching/route/model/cache-mode.ts
@@ -0,0 +1,16 @@
+/**
+ * CacheMode enum that controls the way that the RouteCachingProvider works.
+ * - *Livemode*:   This mode will set materialized routes into cache and fetch routes from cache.
+ *                 If the route exists in cache, it will be quoted and returned, otherwise it will materialized.
+ * - *Darkmode*:   This mode indicates that the cache will not be used, it will not be inserted nor fetched.
+ *                 Routes will always be materialized.
+ * - *Tapcompare*: In this mode we will insert and fetch routes to/from cache, and we will also materialize the route.
+ *                 Ultimately the materialized route will be returned, but we will log some metrics comparing both.
+ *
+ * @enum {string}
+ */
+export enum CacheMode {
+  Livemode = 'livemode',
+  Darkmode = 'darkmode',
+  Tapcompare = 'tapcompare',
+}
diff --git a/lib/sor/providers/caching/route/model/cached-route.ts b/lib/sor/providers/caching/route/model/cached-route.ts
new file mode 100644
index 0000000..a9ac669
--- /dev/null
+++ b/lib/sor/providers/caching/route/model/cached-route.ts
@@ -0,0 +1,41 @@
+import { Protocol } from '@uniswap/router-sdk';
+import { Token } from '@uniswap/sdk-core';
+
+import { MixedRoute, V2Route, V3Route } from '../../../../routers';
+
+interface CachedRouteParams<Route extends V3Route | V2Route | MixedRoute> {
+  route: Route;
+  percent: number;
+}
+
+/**
+ * Class defining the route to cache
+ *
+ * @export
+ * @class CachedRoute
+ */
+export class CachedRoute<Route extends V3Route | V2Route | MixedRoute> {
+  public readonly route: Route;
+  public readonly percent: number;
+
+  /**
+   * @param route
+   * @param percent
+   */
+  constructor({ route, percent }: CachedRouteParams<Route>) {
+    this.route = route;
+    this.percent = percent;
+  }
+
+  public get protocol(): Protocol {
+    return this.route.protocol;
+  }
+
+  public get tokenIn(): Token {
+    return this.route.input;
+  }
+
+  public get tokenOut(): Token {
+    return this.route.output;
+  }
+}
diff --git a/lib/sor/providers/caching/route/model/cached-routes.ts b/lib/sor/providers/caching/route/model/cached-routes.ts
new file mode 100644
index 0000000..6f6f8c5
--- /dev/null
+++ b/lib/sor/providers/caching/route/model/cached-routes.ts
@@ -0,0 +1,129 @@
+import { Protocol } from '@uniswap/router-sdk';
+import { ChainId, Token, TradeType } from '@uniswap/sdk-core';
+import _ from 'lodash';
+
+import { MixedRoute, RouteWithValidQuote, V2Route, V3Route } from '../../../../routers';
+
+import { CachedRoute } from './cached-route';
+
+interface CachedRoutesParams {
+  routes: CachedRoute<V3Route | V2Route | MixedRoute>[];
+  chainId: ChainId;
+  tokenIn: Token;
+  tokenOut: Token;
+  protocolsCovered: Protocol[];
+  blockNumber: number;
+  tradeType: TradeType;
+  originalAmount: string;
+  blocksToLive?: number;
+}
+
+/**
+ * Class defining the route to cache
+ *
+ * @export
+ * @class CachedRoute
+ */
+export class CachedRoutes {
+  public readonly routes: CachedRoute<V3Route | V2Route | MixedRoute>[];
+  public readonly chainId: ChainId;
+  public readonly tokenIn: Token;
+  public readonly tokenOut: Token;
+  public readonly protocolsCovered: Protocol[];
+  public readonly blockNumber: number;
+  public readonly tradeType: TradeType;
+  public readonly originalAmount: string;
+
+  public blocksToLive: number;
+
+  /**
+   * @param routes
+   * @param chainId
+   * @param tokenIn
+   * @param tokenOut
+   * @param protocolsCovered
+   * @param blockNumber
+   * @param tradeType
+   * @param originalAmount
+   * @param blocksToLive
+   */
+  constructor(
+    {
+      routes,
+      chainId,
+      tokenIn,
+      tokenOut,
+      protocolsCovered,
+      blockNumber,
+      tradeType,
+      originalAmount,
+      blocksToLive = 0
+    }: CachedRoutesParams
+  ) {
+    this.routes = routes;
+    this.chainId = chainId;
+    this.tokenIn = tokenIn;
+    this.tokenOut = tokenOut;
+    this.protocolsCovered = protocolsCovered;
+    this.blockNumber = blockNumber;
+    this.tradeType = tradeType;
+    this.originalAmount = originalAmount;
+    this.blocksToLive = blocksToLive;
+  }
+
+  /**
+   * Factory method that creates a `CachedRoutes` object from an array of RouteWithValidQuote.
+   *
+   * @public
+   * @static
+   * @param routes
+   * @param chainId
+   * @param tokenIn
+   * @param tokenOut
+   * @param protocolsCovered
+   * @param blockNumber
+   * @param tradeType
+   * @param originalAmount
+   */
+  public static fromRoutesWithValidQuotes(
+    routes: RouteWithValidQuote[],
+    chainId: ChainId,
+    tokenIn: Token,
+    tokenOut: Token,
+    protocolsCovered: Protocol[],
+    blockNumber: number,
+    tradeType: TradeType,
+    originalAmount: string,
+  ): CachedRoutes | undefined {
+    if (routes.length == 0) return undefined;
+
+    const cachedRoutes = _.map(routes, (route: RouteWithValidQuote) =>
+      new CachedRoute({ route: route.route, percent: route.percent })
+    );
+
+    return new CachedRoutes({
+      routes: cachedRoutes,
+      chainId,
+      tokenIn,
+      tokenOut,
+      protocolsCovered,
+      blockNumber,
+      tradeType,
+      originalAmount
+    });
+  }
+
+  /**
+   * Function to determine if, given a block number, the CachedRoute is expired or not.
+   *
+   * @param currentBlockNumber
+   * @param optimistic
+   */
+  public notExpired(currentBlockNumber: number, optimistic = false): boolean {
+    // When it's not optimistic, we only allow the route of the existing block.
+    const blocksToLive = optimistic ? this.blocksToLive : 0;
+    const blocksDifference = currentBlockNumber - this.blockNumber;
+
+    return blocksDifference <= blocksToLive;
+  }
+}
diff --git a/lib/sor/providers/caching/route/model/index.ts b/lib/sor/providers/caching/route/model/index.ts
new file mode 100644
index 0000000..c8c45df
--- /dev/null
+++ b/lib/sor/providers/caching/route/model/index.ts
@@ -0,0 +1,3 @@
+export * from './cached-route';
+export * from './cached-routes';
+export * from './cache-mode';
diff --git a/lib/sor/providers/caching/route/route-caching-provider.ts b/lib/sor/providers/caching/route/route-caching-provider.ts
new file mode 100644
index 0000000..f475669
--- /dev/null
+++ b/lib/sor/providers/caching/route/route-caching-provider.ts
@@ -0,0 +1,167 @@
+/**
+ * Provider for getting token data from a Token List.
+ *
+ * @export
+ * @interface IRouteCachingProvider
+ */
+import { Protocol } from '@uniswap/router-sdk';
+import { ChainId, Currency, CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core';
+
+import { CacheMode } from './model';
+import { CachedRoutes } from './model/cached-routes';
+
+/**
+ * Abstract class for a RouteCachingProvider.
+ * Defines the base methods of how to interact with this interface, but not the implementation of how to cache.
+ */
+export abstract class IRouteCachingProvider {
+  /**
+   * Final implementation of the public `getCachedRoute` method, this is how code will interact with the implementation
+   *
+   * @public
+   * @readonly
+   * @param chainId
+   * @param amount
+   * @param quoteToken
+   * @param tradeType
+   * @param protocols
+   * @param blockNumber
+   */
+  public readonly getCachedRoute = async ( // Defined as a readonly member instead of a regular function to make it final.
+    chainId: number,
+    amount: CurrencyAmount<Currency>,
+    quoteToken: Token,
+    tradeType: TradeType,
+    protocols: Protocol[],
+    blockNumber: number,
+    optimistic = false
+  ): Promise<CachedRoutes | undefined> => {
+    if (await this.getCacheMode(chainId, amount, quoteToken, tradeType, protocols) == CacheMode.Darkmode) {
+      return undefined;
+    }
+
+    const cachedRoute = await this._getCachedRoute(
+      chainId,
+      amount,
+      quoteToken,
+      tradeType,
+      protocols,
+      blockNumber,
+      optimistic
+    );
+
+    return this.filterExpiredCachedRoutes(cachedRoute, blockNumber, optimistic);
+  };
+
+  /**
+   * Final implementation of the public `setCachedRoute` method.
+   * This method will set the blockToLive in the CachedRoutes object before calling the internal method to insert in cache.
+   *
+   * @public
+   * @readonly
+   * @param cachedRoutes The route to cache.
+   * @returns Promise<boolean> Indicates if the route was inserted into cache.
+   */
+  public readonly setCachedRoute = async ( // Defined as a readonly member instead of a regular function to make it final.
+    cachedRoutes: CachedRoutes,
+    amount: CurrencyAmount<Currency>
+  ): Promise<boolean> => {
+    if (await this.getCacheModeFromCachedRoutes(cachedRoutes, amount) == CacheMode.Darkmode) {
+      return false;
+    }
+
+    cachedRoutes.blocksToLive = await this._getBlocksToLive(cachedRoutes, amount);
+
+    return this._setCachedRoute(cachedRoutes, amount);
+  };
+
+  /**
+   * Returns the CacheMode for the given cachedRoutes and amount
+   *
+   * @param cachedRoutes
+   * @param amount
+   */
+  public getCacheModeFromCachedRoutes(
+    cachedRoutes: CachedRoutes,
+    amount: CurrencyAmount<Currency>
+  ): Promise<CacheMode> {
+    const quoteToken = cachedRoutes.tradeType == TradeType.EXACT_INPUT ? cachedRoutes.tokenOut : cachedRoutes.tokenIn;
+
+    return this.getCacheMode(
+      cachedRoutes.chainId,
+      amount,
+      quoteToken,
+      cachedRoutes.tradeType,
+      cachedRoutes.protocolsCovered
+    );
+  }
+
+  /**
+   * Returns the CacheMode for the given combination of chainId, tokenIn, tokenOut and tradetype
+   *
+   * @public
+   * @abstract
+   * @param chainId
+   * @param tokenIn
+   * @param tokenOut
+   * @param tradeType
+   * @param amount
+   */
+  public abstract getCacheMode(
+    chainId: ChainId,
+    amount: CurrencyAmount<Currency>,
+    quoteToken: Token,
+    tradeType: TradeType,
+    protocols: Protocol[]
+  ): Promise<CacheMode>
+
+  protected filterExpiredCachedRoutes(
+    cachedRoutes: CachedRoutes | undefined,
+    blockNumber: number,
+    optimistic: boolean
+  ): CachedRoutes | undefined {
+    return cachedRoutes?.notExpired(blockNumber, optimistic) ? cachedRoutes : undefined;
+  }
+
+  /**
+   * Internal function to fetch the CachedRoute from the cache.
+   * Must be implemented.
+   *
+   * @param chainId
+   * @param amount
+   * @param quoteToken
+   * @param tradeType
+   * @param protocols
+   * @protected
+   */
+  protected abstract _getCachedRoute(
+    chainId: ChainId,
+    amount: CurrencyAmount<Currency>,
+    quoteToken: Token,
+    tradeType: TradeType,
+    protocols: Protocol[],
+    currentBlockNumber: number,
+    optimistic: boolean
+  ): Promise<CachedRoutes | undefined>
+
+  /**
+   * Internal function to insert the CachedRoute into cache.
+   * Must be implemented.
+   *
+   * @param cachedRoutes
+   * @param amount
+   * @protected
+   */
+  protected abstract _setCachedRoute(cachedRoutes: CachedRoutes, amount: CurrencyAmount<Currency>): Promise<boolean>
+
+  /**
+   * Internal function to getBlocksToLive for a given cachedRoute.
+   * This function is called before attempting to insert the route into cache.
+   * Must be implemented.
+   *
+   * @param cachedRoutes
+   * @param amount
+   * @protected
+   */
+  protected abstract _getBlocksToLive(cachedRoutes: CachedRoutes, amount: CurrencyAmount<Currency>): Promise<number>
+}
diff --git a/lib/sor/providers/eip-1559-gas-price-provider.ts b/lib/sor/providers/eip-1559-gas-price-provider.ts
new file mode 100644
index 0000000..0eae860
--- /dev/null
+++ b/lib/sor/providers/eip-1559-gas-price-provider.ts
@@ -0,0 +1,99 @@
+import { BigNumber } from '@ethersproject/bignumber';
+import { JsonRpcProvider } from '@ethersproject/providers';
+import _ from 'lodash';
+
+import { log } from '../util/log';
+
+import { GasPrice, IGasPriceProvider } from './gas-price-provider';
+
+export type RawFeeHistoryResponse = {
+  baseFeePerGas: string[];
+  gasUsedRatio: number[];
+  oldestBlock: string;
+  reward: string[];
+};
+
+export type FeeHistoryResponse = {
+  baseFeePerGas: BigNumber[];
+  gasUsedRatio: number[];
+  oldestBlock: BigNumber;
+  reward: BigNumber[];
+};
+
+// We get the Xth percentile of priority fees for transactions successfully included in previous blocks.
+const DEFAULT_PRIORITY_FEE_PERCENTILE = 50;
+// Infura docs say only past 4 blocks guaranteed to be available: https://infura.io/docs/ethereum#operation/eth_feeHistory
+const DEFAULT_BLOCKS_TO_LOOK_BACK = 4;
+
+/**
+ * Computes a gas estimate using on-chain data from the eth_feeHistory RPC endpoint.
+ *
+ * Takes the average priority fee from the past `blocksToConsider` blocks, and adds it
+ * to the current base fee.
+ *
+ * @export
+ * @class EIP1559GasPriceProvider
+ */
+export class EIP1559GasPriceProvider extends IGasPriceProvider {
+  constructor(
+    protected provider: JsonRpcProvider,
+    private priorityFeePercentile: number = DEFAULT_PRIORITY_FEE_PERCENTILE,
+    private blocksToConsider: number = DEFAULT_BLOCKS_TO_LOOK_BACK
+  ) {
+    super();
+  }
+
+  public async getGasPrice(): Promise<GasPrice> {
+    const feeHistoryRaw = (await this.provider.send('eth_feeHistory', [
+      /**
+       * @fix Use BigNumber.from(this.blocksToConsider).toHexString() after hardhat adds support
+       * @see https://github.com/NomicFoundation/hardhat/issues/1585 .___.
+       */
+      BigNumber.from(this.blocksToConsider).toHexString().replace('0x0', '0x'),
+      'latest',
+      [this.priorityFeePercentile],
+    ])) as RawFeeHistoryResponse;
+
+    const feeHistory: FeeHistoryResponse = {
+      baseFeePerGas: _.map(feeHistoryRaw.baseFeePerGas, (b) =>
+        BigNumber.from(b)
+      ),
+      gasUsedRatio: feeHistoryRaw.gasUsedRatio,
+      oldestBlock: BigNumber.from(feeHistoryRaw.oldestBlock),
+      reward: _.map(feeHistoryRaw.reward, (b) => BigNumber.from(b[0])),
+    };
+
+    const nextBlockBaseFeePerGas =
+      feeHistory.baseFeePerGas[feeHistory.baseFeePerGas.length - 1]!;
+
+    const averagePriorityFeePerGas = _.reduce(
+      feeHistory.reward,
+      (sum: BigNumber, cur: BigNumber) => sum.add(cur),
+      BigNumber.from(0)
+    ).div(feeHistory.reward.length);
+
+    log.info(
+      {
+        feeHistory,
+        feeHistoryReadable: {
+          baseFeePerGas: _.map(feeHistory.baseFeePerGas, (f) => f.toString()),
+          oldestBlock: feeHistory.oldestBlock.toString(),
+          reward: _.map(feeHistory.reward, (r) => r.toString()),
+        },
+        nextBlockBaseFeePerGas: nextBlockBaseFeePerGas.toString(),
+        averagePriorityFeePerGas: averagePriorityFeePerGas.toString(),
+      },
+      'Got fee history from provider and computed gas estimate'
+    );
+
+    const gasPriceWei = nextBlockBaseFeePerGas.add(averagePriorityFeePerGas);
+
+    const blockNumber = feeHistory.oldestBlock.add(this.blocksToConsider);
+
+    log.info(
+      `Estimated gas price in wei: ${gasPriceWei} as of block ${blockNumber.toString()}`
+    );
+
+    return { gasPriceWei: gasPriceWei };
+  }
+}
diff --git a/lib/sor/providers/eth-estimate-gas-provider.ts b/lib/sor/providers/eth-estimate-gas-provider.ts
new file mode 100644
index 0000000..ad602fc
--- /dev/null
+++ b/lib/sor/providers/eth-estimate-gas-provider.ts
@@ -0,0 +1,171 @@
+import { BigNumber } from '@ethersproject/bignumber';
+import { JsonRpcProvider } from '@ethersproject/providers';
+import { ChainId } from '@uniswap/sdk-core';
+
+import { SwapOptions, SwapRoute, SwapType } from '../routers';
+import { log } from '../util';
+import {
+  calculateGasUsed,
+  initSwapRouteFromExisting,
+} from '../util/gas-factory-helpers';
+
+import { ProviderConfig } from './provider';
+import { SimulationStatus, Simulator } from './simulation-provider';
+import { IV2PoolProvider } from './v2/pool-provider';
+import { ArbitrumGasData, OptimismGasData } from './v3/gas-data-provider';
+import { IV3PoolProvider } from './v3/pool-provider';
+
+// We multiply eth estimate gas by this to add a buffer for gas limits
+const DEFAULT_ESTIMATE_MULTIPLIER = 1.2;
+
+export class EthEstimateGasSimulator extends Simulator {
+  v2PoolProvider: IV2PoolProvider;
+  v3PoolProvider: IV3PoolProvider;
+  private overrideEstimateMultiplier: { [chainId in ChainId]?: number };
+
+  constructor(
+    chainId: ChainId,
+    provider: JsonRpcProvider,
+    v2PoolProvider: IV2PoolProvider,
+    v3PoolProvider: IV3PoolProvider,
+    overrideEstimateMultiplier?: { [chainId in ChainId]?: number }
+  ) {
+    super(provider, chainId);
+    this.v2PoolProvider = v2PoolProvider;
+    this.v3PoolProvider = v3PoolProvider;
+    this.overrideEstimateMultiplier = overrideEstimateMultiplier ?? {};
+  }
+
+  async ethEstimateGas(
+    fromAddress: string,
+    swapOptions: SwapOptions,
+    route: SwapRoute,
+    l2GasData?: ArbitrumGasData | OptimismGasData,
+    providerConfig?: ProviderConfig
+  ): Promise<SwapRoute> {
+    const currencyIn = route.trade.inputAmount.currency;
+    let estimatedGasUsed: BigNumber;
+    if (swapOptions.type == SwapType.UNIVERSAL_ROUTER) {
+      log.info(
+        { methodParameters: route.methodParameters },
+        'Simulating using eth_estimateGas on Universal Router'
+      );
+      try {
+        estimatedGasUsed = await this.provider.estimateGas({
+          data: route.methodParameters!.calldata,
+          to: route.methodParameters!.to,
+          from: fromAddress,
+          value: BigNumber.from(
+            currencyIn.isNative ? route.methodParameters!.value : '0'
+          ),
+        });
+      } catch (e) {
+        log.error({ e }, 'Error estimating gas');
+        return {
+          ...route,
+          simulationStatus: SimulationStatus.Failed,
+        };
+      }
+    } else if (swapOptions.type == SwapType.SWAP_ROUTER_02) {
+      try {
+        estimatedGasUsed = await this.provider.estimateGas({
+          data: route.methodParameters!.calldata,
+          to: route.methodParameters!.to,
+          from: fromAddress,
+          value: BigNumber.from(
+            currencyIn.isNative ? route.methodParameters!.value : '0'
+          ),
+        });
+      } catch (e) {
+        log.error({ e }, 'Error estimating gas');
+        return {
+          ...route,
+          simulationStatus: SimulationStatus.Failed,
+        };
+      }
+    } else {
+      throw new Error(`Unsupported swap type ${swapOptions}`);
+    }
+
+    estimatedGasUsed = this.adjustGasEstimate(estimatedGasUsed);
+    log.info(
+      {
+        methodParameters: route.methodParameters,
+        estimatedGasUsed: estimatedGasUsed.toString(),
+      },
+      'Simulated using eth_estimateGas on SwapRouter02'
+    );
+
+    const {
+      estimatedGasUsedUSD,
+      estimatedGasUsedQuoteToken,
+      quoteGasAdjusted,
+    } = await calculateGasUsed(
+      route.quote.currency.chainId,
+      route,
+      estimatedGasUsed,
+      this.v2PoolProvider,
+      this.v3PoolProvider,
+      l2GasData,
+      providerConfig
+    );
+
+    return {
+      ...initSwapRouteFromExisting(
+        route,
+        this.v2PoolProvider,
+        this.v3PoolProvider,
+        quoteGasAdjusted,
+        estimatedGasUsed,
+        estimatedGasUsedQuoteToken,
+        estimatedGasUsedUSD
+      ),
+      simulationStatus: SimulationStatus.Succeeded,
+    };
+  }
+
+  private adjustGasEstimate(gasLimit: BigNumber): BigNumber {
+    const estimateMultiplier =
+      this.overrideEstimateMultiplier[this.chainId] ??
+      DEFAULT_ESTIMATE_MULTIPLIER;
+
+    const adjustedGasEstimate = BigNumber.from(gasLimit)
+      .mul(estimateMultiplier * 100)
+      .div(100);
+
+    return adjustedGasEstimate;
+  }
+
+  protected async simulateTransaction(
+    fromAddress: string,
+    swapOptions: SwapOptions,
+    swapRoute: SwapRoute,
+    l2GasData?: OptimismGasData | ArbitrumGasData | undefined,
+    // eslint-disable-next-line @typescript-eslint/no-unused-vars
+    _providerConfig?: ProviderConfig | undefined
+  ): Promise<SwapRoute> {
+    const inputAmount = swapRoute.trade.inputAmount;
+    if (
+      inputAmount.currency.isNative ||
+      (await this.checkTokenApproved(
+        fromAddress,
+        inputAmount,
+        swapOptions,
+        this.provider
+      ))
+    ) {
+      return await this.ethEstimateGas(
+        fromAddress,
+        swapOptions,
+        swapRoute,
+        l2GasData
+      );
+    } else {
+      log.info('Token not approved, skipping simulation');
+      return {
+        ...swapRoute,
+        simulationStatus: SimulationStatus.NotApproved,
+      };
+    }
+  }
+}
diff --git a/lib/sor/providers/eth-gas-station-info-gas-price-provider.ts b/lib/sor/providers/eth-gas-station-info-gas-price-provider.ts
new file mode 100644
index 0000000..7eec18a
--- /dev/null
+++ b/lib/sor/providers/eth-gas-station-info-gas-price-provider.ts
@@ -0,0 +1,64 @@
+import { BigNumber } from '@ethersproject/bignumber';
+import retry from 'async-retry';
+import axios from 'axios';
+
+import { log } from '../util/log';
+
+import { GasPrice, IGasPriceProvider } from './gas-price-provider';
+
+// Gas prices from ethgasstation are in x10 Gwei. Must divide by 10 to use.
+export type ETHGasStationResponse = {
+  fast: number;
+  fastest: number;
+  safeLow: number;
+  average: number;
+  block_time: number;
+  blockNum: number;
+  speed: number;
+  safeLowWait: number;
+  avgWait: number;
+  fastWait: number;
+  fastestWait: number;
+};
+
+export class ETHGasStationInfoProvider extends IGasPriceProvider {
+  private url: string;
+  constructor(url: string) {
+    super();
+    this.url = url;
+  }
+
+  public async getGasPrice(): Promise<GasPrice> {
+    log.info(`About to get gas prices from gas station ${this.url}`);
+    const response = await retry(
+      async () => {
+        return axios.get<ETHGasStationResponse>(this.url);
+      },
+      { retries: 1 }
+    );
+
+    const { data: gasPriceResponse, status } = response;
+
+    if (status != 200) {
+      log.error({ response }, `Unabled to get gas price from ${this.url}.`);
+
+      throw new Error(`Unable to get gas price from ${this.url}`);
+    }
+
+    log.info(
+      { gasPriceResponse },
+      'Gas price response from API. About to parse "fast" to big number'
+    );
+
+    // Gas prices from ethgasstation are in GweiX10.
+    const gasPriceWei = BigNumber.from(gasPriceResponse.fast)
+      .div(BigNumber.from(10))
+      .mul(BigNumber.from(10).pow(9));
+
+    log.info(
+      `Gas price in wei: ${gasPriceWei} as of block ${gasPriceResponse.blockNum}`
+    );
+
+    return { gasPriceWei: gasPriceWei };
+  }
+}
diff --git a/lib/sor/providers/gas-price-provider.ts b/lib/sor/providers/gas-price-provider.ts
new file mode 100644
index 0000000..c42db4f
--- /dev/null
+++ b/lib/sor/providers/gas-price-provider.ts
@@ -0,0 +1,12 @@
+import { BigNumber } from '@ethersproject/bignumber';
+
+export type GasPrice = {
+  gasPriceWei: BigNumber;
+};
+
+/**
+ * Provider for getting gas prices.
+ */
+export abstract class IGasPriceProvider {
+  public abstract getGasPrice(): Promise<GasPrice>;
+}
diff --git a/lib/sor/providers/index.ts b/lib/sor/providers/index.ts
new file mode 100644
index 0000000..922a012
--- /dev/null
+++ b/lib/sor/providers/index.ts
@@ -0,0 +1,37 @@
+export * from './cache';
+export * from './cache-node';
+export * from './caching-gas-provider';
+export * from './caching-token-list-provider';
+export * from './caching-token-provider';
+export * from './eip-1559-gas-price-provider';
+export * from './eth-estimate-gas-provider';
+export * from './eth-gas-station-info-gas-price-provider';
+export * from './gas-price-provider';
+export * from './legacy-gas-price-provider';
+export * from './multicall-provider';
+export * from './multicall-uniswap-provider';
+export * from './on-chain-gas-price-provider';
+export * from './on-chain-quote-provider';
+export * from './simulation-provider';
+export * from './static-gas-price-provider';
+export * from './swap-router-provider';
+export * from './tenderly-simulation-provider';
+export * from './token-provider';
+export * from './token-validator-provider';
+export * from './uri-subgraph-provider';
+export * from './caching/route';
+export * from './v2/caching-pool-provider';
+export * from './v2/caching-subgraph-provider';
+export * from './v2/pool-provider';
+export * from './v2/quote-provider';
+export * from './v2/static-subgraph-provider';
+export * from './v2/subgraph-provider';
+export * from './v2/subgraph-provider-with-fallback';
+export * from './v2/uri-subgraph-provider';
+export * from './v3/caching-pool-provider';
+export * from './v3/caching-subgraph-provider';
+export * from './v3/pool-provider';
+export * from './v3/static-subgraph-provider';
+export * from './v3/subgraph-provider';
+export * from './v3/subgraph-provider-with-fallback';
+export * from './v3/uri-subgraph-provider';
diff --git a/lib/sor/providers/legacy-gas-price-provider.ts b/lib/sor/providers/legacy-gas-price-provider.ts
new file mode 100644
index 0000000..fbb7799
--- /dev/null
+++ b/lib/sor/providers/legacy-gas-price-provider.ts
@@ -0,0 +1,23 @@
+import { JsonRpcProvider } from '@ethersproject/providers';
+
+import { log } from '../util';
+
+import { GasPrice, IGasPriceProvider } from './gas-price-provider';
+
+export class LegacyGasPriceProvider extends IGasPriceProvider {
+  constructor(protected provider: JsonRpcProvider) {
+    super();
+  }
+
+  public async getGasPrice(): Promise<GasPrice> {
+    const gasPriceWei = await this.provider.getGasPrice();
+    log.info(
+      { gasPriceWei },
+      `Got gas price ${gasPriceWei} using eth_gasPrice RPC`
+    );
+
+    return {
+      gasPriceWei,
+    };
+  }
+}
diff --git a/lib/sor/providers/multicall-provider.ts b/lib/sor/providers/multicall-provider.ts
new file mode 100644
index 0000000..d10ff56
--- /dev/null
+++ b/lib/sor/providers/multicall-provider.ts
@@ -0,0 +1,125 @@
+import { Interface } from '@ethersproject/abi';
+import { BigNumber } from '@ethersproject/bignumber';
+
+import { ProviderConfig } from './provider';
+
+export type CallSameFunctionOnMultipleContractsParams<
+  TFunctionParams,
+  TAdditionalConfig = any
+> = {
+  addresses: string[];
+  contractInterface: Interface;
+  functionName: string;
+  functionParams?: TFunctionParams;
+  providerConfig?: ProviderConfig;
+  additionalConfig?: TAdditionalConfig;
+};
+
+export type CallSameFunctionOnContractWithMultipleParams<
+  TFunctionParams,
+  TAdditionalConfig = any
+> = {
+  address: string;
+  contractInterface: Interface;
+  functionName: string;
+  functionParams: TFunctionParams[];
+  providerConfig?: ProviderConfig;
+  additionalConfig?: TAdditionalConfig;
+};
+
+export type CallMultipleFunctionsOnSameContractParams<
+  TFunctionParams,
+  TAdditionalConfig = any
+> = {
+  address: string;
+  contractInterface: Interface;
+  functionNames: string[];
+  functionParams?: TFunctionParams[];
+  providerConfig?: ProviderConfig;
+  additionalConfig?: TAdditionalConfig;
+};
+
+export type SuccessResult<TReturn> = {
+  success: true;
+  result: TReturn;
+};
+
+export type FailResult = {
+  success: false;
+  returnData: string;
+};
+
+export type Result<TReturn> = SuccessResult<TReturn> | FailResult;
+
+/**
+ * Provider for fetching data on chain using multicall contracts.
+ *
+ * @export
+ * @abstract
+ * @class IMulticallProvider
+ * @template TMulticallConfig
+ */
+export abstract class IMulticallProvider<TMulticallConfig = any> {
+  /**
+   * Calls the same function on multiple contracts.
+   *
+   * For example, if you wanted to get the ERC-20 balance of 10 different tokens
+   * this can be used to call balance on the 10 contracts in a single multicall.
+   *
+   * @abstract
+   * @template TFunctionParams
+   * @template TReturn
+   * @param params
+   * @returns {*}
+   */
+  public abstract callSameFunctionOnMultipleContracts<
+    TFunctionParams extends any[] | undefined,
+    TReturn = any
+  >(
+    params: CallSameFunctionOnMultipleContractsParams<
+      TFunctionParams,
+      TMulticallConfig
+    >
+  ): Promise<{
+    blockNumber: BigNumber;
+    results: Result<TReturn>[];
+  }>;
+
+  /**
+   * Calls a function on a single contract with different parameters.
+   *
+   * For example, if you wanted to call the Uniswap V3 Quoter with 10 different
+   * swap amounts this can be used to make the calls in a single multicall.
+   *
+   * @abstract
+   * @template TFunctionParams
+   * @template TReturn
+   * @param params
+   * @returns {*}
+   */
+  public abstract callSameFunctionOnContractWithMultipleParams<
+    TFunctionParams extends any[] | undefined,
+    TReturn = any
+  >(
+    params: CallSameFunctionOnContractWithMultipleParams<
+      TFunctionParams,
+      TMulticallConfig
+    >
+  ): Promise<{
+    blockNumber: BigNumber;
+    results: Result<TReturn>[];
+  }>;
+
+  public abstract callMultipleFunctionsOnSameContract<
+    TFunctionParams extends any[] | undefined,
+    TReturn = any
+  >(
+    params: CallMultipleFunctionsOnSameContractParams<
+      TFunctionParams,
+      TMulticallConfig
+    >
+  ): Promise<{
+    blockNumber: BigNumber;
+    results: Result<TReturn>[];
+  }>;
+}
diff --git a/lib/sor/providers/multicall-uniswap-provider.ts b/lib/sor/providers/multicall-uniswap-provider.ts
new file mode 100644
index 0000000..12edec0
--- /dev/null
+++ b/lib/sor/providers/multicall-uniswap-provider.ts
@@ -0,0 +1,319 @@
+import { BigNumber } from '@ethersproject/bignumber';
+import { BaseProvider } from '@ethersproject/providers';
+import { ChainId } from '@uniswap/sdk-core';
+import _ from 'lodash';
+import stats from 'stats-lite';
+
+import { UniswapInterfaceMulticall } from '../types/v3/UniswapInterfaceMulticall';
+import { UniswapInterfaceMulticall__factory } from '../types/v3/factories/UniswapInterfaceMulticall__factory';
+import { UNISWAP_MULTICALL_ADDRESSES } from '../util/addresses';
+import { log } from '../util/log';
+
+import {
+  CallMultipleFunctionsOnSameContractParams,
+  CallSameFunctionOnContractWithMultipleParams,
+  CallSameFunctionOnMultipleContractsParams,
+  IMulticallProvider,
+  Result,
+} from './multicall-provider';
+
+export type UniswapMulticallConfig = {
+  gasLimitPerCallOverride?: number;
+};
+
+/**
+ * The UniswapMulticall contract has added functionality for limiting the amount of gas
+ * that each call within the multicall can consume. This is useful for operations where
+ * a call could consume such a large amount of gas that it causes the node to error out
+ * with an out of gas error.
+ *
+ * @export
+ * @class UniswapMulticallProvider
+ */
+export class UniswapMulticallProvider extends IMulticallProvider<UniswapMulticallConfig> {
+  private multicallContract: UniswapInterfaceMulticall;
+
+  constructor(
+    protected chainId: ChainId,
+    protected provider: BaseProvider,
+    protected gasLimitPerCall = 1_000_000
+  ) {
+    super();
+    const multicallAddress = UNISWAP_MULTICALL_ADDRESSES[this.chainId];
+
+    if (!multicallAddress) {
+      throw new Error(
+        `No address for Uniswap Multicall Contract on chain id: ${chainId}`
+      );
+    }
+
+    this.multicallContract = UniswapInterfaceMulticall__factory.connect(
+      multicallAddress,
+      this.provider
+    );
+  }
+
+  public async callSameFunctionOnMultipleContracts<
+    TFunctionParams extends any[] | undefined,
+    TReturn = any
+  >(
+    params: CallSameFunctionOnMultipleContractsParams<TFunctionParams>
+  ): Promise<{
+    blockNumber: BigNumber;
+    results: Result<TReturn>[];
+  }> {
+    const {
+      addresses,
+      contractInterface,
+      functionName,
+      functionParams,
+      providerConfig,
+    } = params;
+
+    const blockNumberOverride = providerConfig?.blockNumber ?? undefined;
+
+    const fragment = contractInterface.getFunction(functionName);
+    const callData = contractInterface.encodeFunctionData(
+      fragment,
+      functionParams
+    );
+
+    const calls = _.map(addresses, (address) => {
+      return {
+        target: address,
+        callData,
+        gasLimit: this.gasLimitPerCall,
+      };
+    });
+
+    log.debug(
+      { calls },
+      `About to multicall for ${functionName} across ${addresses.length} addresses`
+    );
+
+    const { blockNumber, returnData: aggregateResults } =
+      await this.multicallContract.callStatic.multicall(calls, {
+        blockTag: blockNumberOverride,
+      });
+
+    const results: Result<TReturn>[] = [];
+
+    for (let i = 0; i < aggregateResults.length; i++) {
+      const { success, returnData } = aggregateResults[i]!;
+
+      // Return data "0x" is sometimes returned for invalid calls.
+      if (!success || returnData.length <= 2) {
+        log.debug(
+          { result: aggregateResults[i] },
+          `Invalid result calling ${functionName} on address ${addresses[i]}`
+        );
+        results.push({
+          success: false,
+          returnData,
+        });
+        continue;
+      }
+
+      results.push({
+        success: true,
+        result: contractInterface.decodeFunctionResult(
+          fragment,
+          returnData
+        ) as unknown as TReturn,
+      });
+    }
+
+    log.debug(
+      { results },
+      `Results for multicall on ${functionName} across ${addresses.length} addresses as of block ${blockNumber}`
+    );
+
+    return { blockNumber, results };
+  }
+
+  public async callSameFunctionOnContractWithMultipleParams<
+    TFunctionParams extends any[] | undefined,
+    TReturn
+  >(
+    params: CallSameFunctionOnContractWithMultipleParams<
+      TFunctionParams,
+      UniswapMulticallConfig
+    >
+  ): Promise<{
+    blockNumber: BigNumber;
+    results: Result<TReturn>[];
+    approxGasUsedPerSuccessCall: number;
+  }> {
+    const {
+      address,
+      contractInterface,
+      functionName,
+      functionParams,
+      additionalConfig,
+      providerConfig,
+    } = params;
+    const fragment = contractInterface.getFunction(functionName);
+
+    const gasLimitPerCall =
+      additionalConfig?.gasLimitPerCallOverride ?? this.gasLimitPerCall;
+    const blockNumberOverride = providerConfig?.blockNumber ?? undefined;
+
+    const calls = _.map(functionParams, (functionParam) => {
+      const callData = contractInterface.encodeFunctionData(
+        fragment,
+        functionParam
+      );
+
+      return {
+        target: address,
+        callData,
+        gasLimit: gasLimitPerCall,
+      };
+    });
+
+    log.debug(
+      { calls },
+      `About to multicall for ${functionName} at address ${address} with ${functionParams.length} different sets of params`
+    );
+
+    const { blockNumber, returnData: aggregateResults } =
+      await this.multicallContract.callStatic.multicall(calls, {
+        blockTag: blockNumberOverride,
+      });
+
+    const results: Result<TReturn>[] = [];
+
+    const gasUsedForSuccess: number[] = [];
+    for (let i = 0; i < aggregateResults.length; i++) {
+      const { success, returnData, gasUsed } = aggregateResults[i]!;
+
+      // Return data "0x" is sometimes returned for invalid pools.
+      if (!success || returnData.length <= 2) {
+        log.debug(
+          { result: aggregateResults[i] },
+          `Invalid result calling ${functionName} with params ${functionParams[i]}`
+        );
+        results.push({
+          success: false,
+          returnData,
+        });
+        continue;
+      }
+
+      gasUsedForSuccess.push(gasUsed.toNumber());
+
+      results.push({
+        success: true,
+        result: contractInterface.decodeFunctionResult(
+          fragment,
+          returnData
+        ) as unknown as TReturn,
+      });
+    }
+
+    log.debug(
+      { results, functionName, address },
+      `Results for multicall for ${functionName} at address ${address} with ${functionParams.length} different sets of params. Results as of block ${blockNumber}`
+    );
+    return {
+      blockNumber,
+      results,
+      approxGasUsedPerSuccessCall: stats.percentile(gasUsedForSuccess, 99),
+    };
+  }
+
+  public async callMultipleFunctionsOnSameContract<
+    TFunctionParams extends any[] | undefined,
+    TReturn
+  >(
+    params: CallMultipleFunctionsOnSameContractParams<
+      TFunctionParams,
+      UniswapMulticallConfig
+    >
+  ): Promise<{
+    blockNumber: BigNumber;
+    results: Result<TReturn>[];
+    approxGasUsedPerSuccessCall: number;
+  }> {
+    const {
+      address,
+      contractInterface,
+      functionNames,
+      functionParams,
+      additionalConfig,
+      providerConfig,
+    } = params;
+
+    const gasLimitPerCall =
+      additionalConfig?.gasLimitPerCallOverride ?? this.gasLimitPerCall;
+    const blockNumberOverride = providerConfig?.blockNumber ?? undefined;
+
+    const calls = _.map(functionNames, (functionName, i) => {
+      const fragment = contractInterface.getFunction(functionName);
+      const param = functionParams ? functionParams[i] : [];
+      const callData = contractInterface.encodeFunctionData(fragment, param);
+      return {
+        target: address,
+        callData,
+        gasLimit: gasLimitPerCall,
+      };
+    });
+
+    log.debug(
+      { calls },
+      `About to multicall for ${functionNames.length} functions at address ${address} with ${functionParams?.length} different sets of params`
+    );
+
+    const { blockNumber, returnData: aggregateResults } =
+      await this.multicallContract.callStatic.multicall(calls, {
+        blockTag: blockNumberOverride,
+      });
+
+    const results: Result<TReturn>[] = [];
+
+    const gasUsedForSuccess: number[] = [];
+    for (let i = 0; i < aggregateResults.length; i++) {
+      const fragment = contractInterface.getFunction(functionNames[i]!);
+      const { success, returnData, gasUsed } = aggregateResults[i]!;
+
+      // Return data "0x" is sometimes returned for invalid pools.
+      if (!success || returnData.length <= 2) {
+        log.debug(
+          { result: aggregateResults[i] },
+          `Invalid result calling ${functionNames[i]} with ${
+            functionParams ? functionParams[i] : '0'
+          } params`
+        );
+        results.push({
+          success: false,
+          returnData,
+        });
+        continue;
+      }
+
+      gasUsedForSuccess.push(gasUsed.toNumber());
+
+      results.push({
+        success: true,
+        result: contractInterface.decodeFunctionResult(
+          fragment,
+          returnData
+        ) as unknown as TReturn,
+      });
+    }
+
+    log.debug(
+      { results, functionNames, address },
+      `Results for multicall for ${
+        functionNames.length
+      } functions at address ${address} with ${
+        functionParams ? functionParams.length : ' 0'
+      } different sets of params. Results as of block ${blockNumber}`
+    );
+    return {
+      blockNumber,
+      results,
+      approxGasUsedPerSuccessCall: stats.percentile(gasUsedForSuccess, 99),
+    };
+  }
+}
diff --git a/lib/sor/providers/on-chain-gas-price-provider.ts b/lib/sor/providers/on-chain-gas-price-provider.ts
new file mode 100644
index 0000000..cc22ac8
--- /dev/null
+++ b/lib/sor/providers/on-chain-gas-price-provider.ts
@@ -0,0 +1,37 @@
+import { ChainId } from '@uniswap/sdk-core';
+
+import { EIP1559GasPriceProvider } from './eip-1559-gas-price-provider';
+import { GasPrice, IGasPriceProvider } from './gas-price-provider';
+import { LegacyGasPriceProvider } from './legacy-gas-price-provider';
+
+const DEFAULT_EIP_1559_SUPPORTED_CHAINS = [
+  ChainId.MAINNET,
+  ChainId.GOERLI,
+  ChainId.POLYGON_MUMBAI,
+];
+
+/**
+ * Gets gas prices on chain. If the chain supports EIP-1559 and has the feeHistory API,
+ * uses the EIP1559 provider. Otherwise it will use a legacy provider that uses eth_gasPrice
+ *
+ * @export
+ * @class OnChainGasPriceProvider
+ */
+export class OnChainGasPriceProvider extends IGasPriceProvider {
+  constructor(
+    protected chainId: ChainId,
+    protected eip1559GasPriceProvider: EIP1559GasPriceProvider,
+    protected legacyGasPriceProvider: LegacyGasPriceProvider,
+    protected eipChains: ChainId[] = DEFAULT_EIP_1559_SUPPORTED_CHAINS
+  ) {
+    super();
+  }
+
+  public async getGasPrice(): Promise<GasPrice> {
+    if (this.eipChains.includes(this.chainId)) {
+      return this.eip1559GasPriceProvider.getGasPrice();
+    }
+
+    return this.legacyGasPriceProvider.getGasPrice();
+  }
+}
diff --git a/lib/sor/providers/on-chain-quote-provider.ts b/lib/sor/providers/on-chain-quote-provider.ts
new file mode 100644
index 0000000..e26dd86
--- /dev/null
+++ b/lib/sor/providers/on-chain-quote-provider.ts
@@ -0,0 +1,1015 @@
+import { BigNumber } from '@ethersproject/bignumber';
+import { BaseProvider } from '@ethersproject/providers';
+import { encodeMixedRouteToPath, MixedRouteSDK, Protocol, } from '@uniswap/router-sdk';
+import { ChainId } from '@uniswap/sdk-core';
+import { encodeRouteToPath } from '@uniswap/v3-sdk';
+import retry, { Options as RetryOptions } from 'async-retry';
+import _ from 'lodash';
+import stats from 'stats-lite';
+
+import { MixedRoute, V2Route, V3Route } from '../routers/router';
+import { IMixedRouteQuoterV1__factory } from '../types/other/factories/IMixedRouteQuoterV1__factory';
+import { IQuoterV2__factory } from '../types/v3/factories/IQuoterV2__factory';
+import { ID_TO_NETWORK_NAME, metric, MetricLoggerUnit } from '../util';
+import { MIXED_ROUTE_QUOTER_V1_ADDRESSES, QUOTER_V2_ADDRESSES, } from '../util/addresses';
+import { CurrencyAmount } from '../util/amounts';
+import { log } from '../util/log';
+import { routeToString } from '../util/routes';
+
+import { Result } from './multicall-provider';
+import { UniswapMulticallProvider } from './multicall-uniswap-provider';
+import { ProviderConfig } from './provider';
+
+/**
+ * An on chain quote for a swap.
+ */
+export type AmountQuote = {
+  amount: CurrencyAmount;
+  /**
+   * Quotes can be null (e.g. pool did not have enough liquidity).
+   */
+  quote: BigNumber | null;
+  /**
+   * For each pool in the route, the sqrtPriceX96 after the swap.
+   */
+  sqrtPriceX96AfterList: BigNumber[] | null;
+  /**
+   * For each pool in the route, the number of ticks crossed.
+   */
+  initializedTicksCrossedList: number[] | null;
+  /**
+   * An estimate of the gas used by the swap. This is returned by the multicall
+   * and is not necessarily accurate due to EIP-2929 causing gas costs to vary
+   * depending on if the slot has already been loaded in the call.
+   */
+  gasEstimate: BigNumber | null;
+};
+
+export class BlockConflictError extends Error {
+  public name = 'BlockConflictError';
+}
+
+export class SuccessRateError extends Error {
+  public name = 'SuccessRateError';
+}
+
+export class ProviderBlockHeaderError extends Error {
+  public name = 'ProviderBlockHeaderError';
+}
+
+export class ProviderTimeoutError extends Error {
+  public name = 'ProviderTimeoutError';
+}
+
+/**
+ * This error typically means that the gas used by the multicall has
+ * exceeded the total call gas limit set by the node provider.
+ *
+ * This can be resolved by modifying BatchParams to request fewer
+ * quotes per call, or to set a lower gas limit per quote.
+ *
+ * @export
+ * @class ProviderGasError
+ */
+export class ProviderGasError extends Error {
+  public name = 'ProviderGasError';
+}
+
+export type QuoteRetryOptions = RetryOptions;
+
+/**
+ * The V3 route and a list of quotes for that route.
+ */
+export type RouteWithQuotes<TRoute extends V3Route | V2Route | MixedRoute> = [
+  TRoute,
+  AmountQuote[]
+];
+
+type QuoteBatchSuccess = {
+  status: 'success';
+  inputs: [string, string][];
+  results: {
+    blockNumber: BigNumber;
+    results: Result<[BigNumber, BigNumber[], number[], BigNumber]>[];
+    approxGasUsedPerSuccessCall: number;
+  };
+};
+
+type QuoteBatchFailed = {
+  status: 'failed';
+  inputs: [string, string][];
+  reason: Error;
+  results?: {
+    blockNumber: BigNumber;
+    results: Result<[BigNumber, BigNumber[], number[], BigNumber]>[];
+    approxGasUsedPerSuccessCall: number;
+  };
+};
+
+type QuoteBatchPending = {
+  status: 'pending';
+  inputs: [string, string][];
+};
+
+type QuoteBatchState = QuoteBatchSuccess | QuoteBatchFailed | QuoteBatchPending;
+
+/**
+ * Provider for getting on chain quotes using routes containing V3 pools or V2 pools.
+ *
+ * @export
+ * @interface IOnChainQuoteProvider
+ */
+export interface IOnChainQuoteProvider {
+  /**
+   * For every route, gets an exactIn quotes for every amount provided.
+   * @notice While passing in exactIn V2Routes is supported, we recommend using the V2QuoteProvider to compute off chain quotes for V2 whenever possible
+   *
+   * @param amountIns The amounts to get quotes for.
+   * @param routes The routes to get quotes for.
+   * @param [providerConfig] The provider config.
+   * @returns For each route returns a RouteWithQuotes object that contains all the quotes.
+   * @returns The blockNumber used when generating the quotes.
+   */
+  getQuotesManyExactIn<TRoute extends V3Route | V2Route | MixedRoute>(
+    amountIns: CurrencyAmount[],
+    routes: TRoute[],
+    providerConfig?: ProviderConfig
+  ): Promise<{
+    routesWithQuotes: RouteWithQuotes<TRoute>[];
+    blockNumber: BigNumber;
+  }>;
+
+  /**
+   * For every route, gets ane exactOut quote for every amount provided.
+   * @notice This does not support quotes for MixedRoutes (routes with both V3 and V2 pools/pairs) or pure V2 routes
+   *
+   * @param amountOuts The amounts to get quotes for.
+   * @param routes The routes to get quotes for.
+   * @param [providerConfig] The provider config.
+   * @returns For each route returns a RouteWithQuotes object that contains all the quotes.
+   * @returns The blockNumber used when generating the quotes.
+   */
+  getQuotesManyExactOut<TRoute extends V3Route>(
+    amountOuts: CurrencyAmount[],
+    routes: TRoute[],
+    providerConfig?: ProviderConfig
+  ): Promise<{
+    routesWithQuotes: RouteWithQuotes<TRoute>[];
+    blockNumber: BigNumber;
+  }>;
+}
+
+/**
+ * The parameters for the multicalls we make.
+ *
+ * It is important to ensure that (gasLimitPerCall * multicallChunk) < providers gas limit per call.
+ *
+ * On chain quotes can consume a lot of gas (if the swap is so large that it swaps through a large
+ * number of ticks), so there is a risk of exceeded gas limits in these multicalls.
+ */
+export type BatchParams = {
+  /**
+   * The number of quotes to fetch in each multicall.
+   */
+  multicallChunk: number;
+  /**
+   * The maximum call to consume for each quote in the multicall.
+   */
+  gasLimitPerCall: number;
+  /**
+   * The minimum success rate for all quotes across all multicalls.
+   * If we set our gasLimitPerCall too low it could result in a large number of
+   * quotes failing due to out of gas. This parameters will fail the overall request
+   * in this case.
+   */
+  quoteMinSuccessRate: number;
+};
+
+/**
+ * The fallback values for gasLimit and multicallChunk if any failures occur.
+ *
+ */
+
+export type FailureOverrides = {
+  multicallChunk: number;
+  gasLimitOverride: number;
+};
+
+export type BlockHeaderFailureOverridesDisabled = { enabled: false };
+export type BlockHeaderFailureOverridesEnabled = {
+  enabled: true;
+  // Offset to apply in the case of a block header failure. e.g. -10 means rollback by 10 blocks.
+  rollbackBlockOffset: number;
+  // Number of batch failures due to block header before trying a rollback.
+  attemptsBeforeRollback: number;
+};
+export type BlockHeaderFailureOverrides =
+  | BlockHeaderFailureOverridesDisabled
+  | BlockHeaderFailureOverridesEnabled;
+
+/**
+ * Config around what block number to query and how to handle failures due to block header errors.
+ */
+export type BlockNumberConfig = {
+  // Applies an offset to the block number specified when fetching quotes. e.g. -10 means rollback by 10 blocks.
+  // Useful for networks where the latest block may not be available on all nodes, causing frequent 'header not found' errors.
+  baseBlockOffset: number;
+  // Config for handling header not found errors.
+  rollback: BlockHeaderFailureOverrides;
+};
+
+const DEFAULT_BATCH_RETRIES = 2;
+
+/**
+ * Computes on chain quotes for swaps. For pure V3 routes, quotes are computed on-chain using
+ * the 'QuoterV2' smart contract. For exactIn mixed and V2 routes, quotes are computed using the 'MixedRouteQuoterV1' contract
+ * This is because computing quotes off-chain would require fetching all the tick data for each pool, which is a lot of data.
+ *
+ * To minimize the number of requests for quotes we use a Multicall contract. Generally
+ * the number of quotes to fetch exceeds the maximum we can fit in a single multicall
+ * while staying under gas limits, so we also batch these quotes across multiple multicalls.
+ *
+ * The biggest challenge with the quote provider is dealing with various gas limits.
+ * Each provider sets a limit on the amount of gas a call can consume (on Infura this
+ * is approximately 10x the block max size), so we must ensure each multicall does not
+ * exceed this limit. Additionally, each quote on V3 can consume a large number of gas if
+ * the pool lacks liquidity and the swap would cause all the ticks to be traversed.
+ *
+ * To ensure we don't exceed the node's call limit, we limit the gas used by each quote to
+ * a specific value, and we limit the number of quotes in each multicall request. Users of this
+ * class should set BatchParams such that multicallChunk * gasLimitPerCall is less than their node
+ * providers total gas limit per call.
+ *
+ * @export
+ * @class OnChainQuoteProvider
+ */
+export class OnChainQuoteProvider implements IOnChainQuoteProvider {
+  /**
+   * Creates an instance of OnChainQuoteProvider.
+   *
+   * @param chainId The chain to get quotes for.
+   * @param provider The web 3 provider.
+   * @param multicall2Provider The multicall provider to use to get the quotes on-chain.
+   * Only supports the Uniswap Multicall contract as it needs the gas limitting functionality.
+   * @param retryOptions The retry options for each call to the multicall.
+   * @param batchParams The parameters for each batched call to the multicall.
+   * @param gasErrorFailureOverride The gas and chunk parameters to use when retrying a batch that failed due to out of gas.
+   * @param successRateFailureOverrides The parameters for retries when we fail to get quotes.
+   * @param blockNumberConfig Parameters for adjusting which block we get quotes from, and how to handle block header not found errors.
+   * @param [quoterAddressOverride] Overrides the address of the quoter contract to use.
+   */
+  constructor(
+    protected chainId: ChainId,
+    protected provider: BaseProvider,
+    // Only supports Uniswap Multicall as it needs the gas limitting functionality.
+    protected multicall2Provider: UniswapMulticallProvider,
+    protected retryOptions: QuoteRetryOptions = {
+      retries: DEFAULT_BATCH_RETRIES,
+      minTimeout: 25,
+      maxTimeout: 250,
+    },
+    protected batchParams: BatchParams = {
+      multicallChunk: 150,
+      gasLimitPerCall: 1_000_000,
+      quoteMinSuccessRate: 0.2,
+    },
+    protected gasErrorFailureOverride: FailureOverrides = {
+      gasLimitOverride: 1_500_000,
+      multicallChunk: 100,
+    },
+    protected successRateFailureOverrides: FailureOverrides = {
+      gasLimitOverride: 1_300_000,
+      multicallChunk: 110,
+    },
+    protected blockNumberConfig: BlockNumberConfig = {
+      baseBlockOffset: 0,
+      rollback: { enabled: false },
+    },
+    protected quoterAddressOverride?: string
+  ) {
+  }
+
+  private getQuoterAddress(useMixedRouteQuoter: boolean): string {
+    if (this.quoterAddressOverride) {
+      return this.quoterAddressOverride;
+    }
+    const quoterAddress = useMixedRouteQuoter
+      ? MIXED_ROUTE_QUOTER_V1_ADDRESSES[this.chainId]
+      : QUOTER_V2_ADDRESSES[this.chainId];
+
+    if (!quoterAddress) {
+      throw new Error(
+        `No address for the quoter contract on chain id: ${this.chainId}`
+      );
+    }
+    return quoterAddress;
+  }
+
+  public async getQuotesManyExactIn<
+    TRoute extends V3Route | V2Route | MixedRoute
+  >(
+    amountIns: CurrencyAmount[],
+    routes: TRoute[],
+    providerConfig?: ProviderConfig
+  ): Promise<{
+    routesWithQuotes: RouteWithQuotes<TRoute>[];
+    blockNumber: BigNumber;
+  }> {
+    return this.getQuotesManyData(
+      amountIns,
+      routes,
+      'quoteExactInput',
+      providerConfig
+    );
+  }
+
+  public async getQuotesManyExactOut<TRoute extends V3Route>(
+    amountOuts: CurrencyAmount[],
+    routes: TRoute[],
+    providerConfig?: ProviderConfig
+  ): Promise<{
+    routesWithQuotes: RouteWithQuotes<TRoute>[];
+    blockNumber: BigNumber;
+  }> {
+    return this.getQuotesManyData(
+      amountOuts,
+      routes,
+      'quoteExactOutput',
+      providerConfig
+    );
+  }
+
+  private async getQuotesManyData<
+    TRoute extends V3Route | V2Route | MixedRoute
+  >(
+    amounts: CurrencyAmount[],
+    routes: TRoute[],
+    functionName: 'quoteExactInput' | 'quoteExactOutput',
+    _providerConfig?: ProviderConfig
+  ): Promise<{
+    routesWithQuotes: RouteWithQuotes<TRoute>[];
+    blockNumber: BigNumber;
+  }> {
+    const useMixedRouteQuoter =
+      routes.some((route) => route.protocol === Protocol.V2) ||
+      routes.some((route) => route.protocol === Protocol.MIXED);
+
+    /// Validate that there are no incorrect routes / function combinations
+    this.validateRoutes(routes, functionName, useMixedRouteQuoter);
+
+    let multicallChunk = this.batchParams.multicallChunk;
+    let gasLimitOverride = this.batchParams.gasLimitPerCall;
+    const { baseBlockOffset, rollback } = this.blockNumberConfig;
+
+    // Apply the base block offset if provided
+    const originalBlockNumber = await this.provider.getBlockNumber();
+    const providerConfig: ProviderConfig = {
+      ..._providerConfig,
+      blockNumber:
+        _providerConfig?.blockNumber ?? originalBlockNumber + baseBlockOffset,
+    };
+
+    const inputs: [string, string][] = _(routes)
+      .flatMap((route) => {
+        const encodedRoute =
+          route.protocol === Protocol.V3
+            ? encodeRouteToPath(
+              route,
+              functionName == 'quoteExactOutput' // For exactOut must be true to ensure the routes are reversed.
+            )
+            : encodeMixedRouteToPath(
+              route instanceof V2Route
+                ? new MixedRouteSDK(route.pairs, route.input, route.output)
+                : route
+            );
+        const routeInputs: [string, string][] = amounts.map((amount) => [
+          encodedRoute,
+          `0x${amount.quotient.toString(16)}`,
+        ]);
+        return routeInputs;
+      })
+      .value();
+
+    const normalizedChunk = Math.ceil(
+      inputs.length / Math.ceil(inputs.length / multicallChunk)
+    );
+    const inputsChunked = _.chunk(inputs, normalizedChunk);
+    let quoteStates: QuoteBatchState[] = _.map(inputsChunked, (inputChunk) => {
+      return {
+        status: 'pending',
+        inputs: inputChunk,
+      };
+    });
+
+    log.info(
+      `About to get ${
+        inputs.length
+      } quotes in chunks of ${normalizedChunk} [${_.map(
+        inputsChunked,
+        (i) => i.length
+      ).join(',')}] ${
+        gasLimitOverride
+          ? `with a gas limit override of ${gasLimitOverride}`
+          : ''
+      } and block number: ${await providerConfig.blockNumber} [Original before offset: ${originalBlockNumber}].`
+    );
+
+    metric.putMetric('QuoteBatchSize', inputs.length, MetricLoggerUnit.Count);
+    metric.putMetric(`QuoteBatchSize_${ID_TO_NETWORK_NAME(this.chainId)}`, inputs.length, MetricLoggerUnit.Count);
+
+    let haveRetriedForSuccessRate = false;
+    let haveRetriedForBlockHeader = false;
+    let blockHeaderRetryAttemptNumber = 0;
+    let haveIncrementedBlockHeaderFailureCounter = false;
+    let blockHeaderRolledBack = false;
+    let haveRetriedForBlockConflictError = false;
+    let haveRetriedForOutOfGas = false;
+    let haveRetriedForTimeout = false;
+    let haveRetriedForUnknownReason = false;
+    let finalAttemptNumber = 1;
+    const expectedCallsMade = quoteStates.length;
+    let totalCallsMade = 0;
+
+    const {
+      results: quoteResults,
+      blockNumber,
+      approxGasUsedPerSuccessCall,
+    } = await retry(
+      async (_bail, attemptNumber) => {
+        haveIncrementedBlockHeaderFailureCounter = false;
+        finalAttemptNumber = attemptNumber;
+
+        const [success, failed, pending] = this.partitionQuotes(quoteStates);
+
+        log.info(
+          `Starting attempt: ${attemptNumber}.
+          Currently ${success.length} success, ${failed.length} failed, ${pending.length} pending.
+          Gas limit override: ${gasLimitOverride} Block number override: ${providerConfig.blockNumber}.`
+        );
+
+        quoteStates = await Promise.all(
+          _.map(
+            quoteStates,
+            async (quoteState: QuoteBatchState, idx: number) => {
+              if (quoteState.status == 'success') {
+                return quoteState;
+              }
+
+              // QuoteChunk is pending or failed, so we try again
+              const { inputs } = quoteState;
+
+              try {
+                totalCallsMade = totalCallsMade + 1;
+
+                const results =
+                  await this.multicall2Provider.callSameFunctionOnContractWithMultipleParams<
+                    [string, string],
+                    [BigNumber, BigNumber[], number[], BigNumber] // amountIn/amountOut, sqrtPriceX96AfterList, initializedTicksCrossedList, gasEstimate
+                  >({
+                    address: this.getQuoterAddress(useMixedRouteQuoter),
+                    contractInterface: useMixedRouteQuoter
+                      ? IMixedRouteQuoterV1__factory.createInterface()
+                      : IQuoterV2__factory.createInterface(),
+                    functionName,
+                    functionParams: inputs,
+                    providerConfig,
+                    additionalConfig: {
+                      gasLimitPerCallOverride: gasLimitOverride,
+                    },
+                  });
+
+                const successRateError = this.validateSuccessRate(
+                  results.results,
+                  haveRetriedForSuccessRate
+                );
+
+                if (successRateError) {
+                  return {
+                    status: 'failed',
+                    inputs,
+                    reason: successRateError,
+                    results,
+                  } as QuoteBatchFailed;
+                }
+
+                return {
+                  status: 'success',
+                  inputs,
+                  results,
+                } as QuoteBatchSuccess;
+              } catch (err: any) {
+                // Error from providers have huge messages that include all the calldata and fill the logs.
+                // Catch them and rethrow with shorter message.
+                if (err.message.includes('header not found')) {
+                  return {
+                    status: 'failed',
+                    inputs,
+                    reason: new ProviderBlockHeaderError(
+                      err.message.slice(0, 500)
+                    ),
+                  } as QuoteBatchFailed;
+                }
+
+                if (err.message.includes('timeout')) {
+                  return {
+                    status: 'failed',
+                    inputs,
+                    reason: new ProviderTimeoutError(
+                      `Req ${idx}/${quoteStates.length}. Request had ${
+                        inputs.length
+                      } inputs. ${err.message.slice(0, 500)}`
+                    ),
+                  } as QuoteBatchFailed;
+                }
+
+                if (err.message.includes('out of gas')) {
+                  return {
+                    status: 'failed',
+                    inputs,
+                    reason: new ProviderGasError(err.message.slice(0, 500)),
+                  } as QuoteBatchFailed;
+                }
+
+                return {
+                  status: 'failed',
+                  inputs,
+                  reason: new Error(
+                    `Unknown error from provider: ${err.message.slice(0, 500)}`
+                  ),
+                } as QuoteBatchFailed;
+              }
+            }
+          )
+        );
+
+        const [successfulQuoteStates, failedQuoteStates, pendingQuoteStates] =
+          this.partitionQuotes(quoteStates);
+
+        if (pendingQuoteStates.length > 0) {
+          throw new Error('Pending quote after waiting for all promises.');
+        }
+
+        let retryAll = false;
+
+        const blockNumberError = this.validateBlockNumbers(
+          successfulQuoteStates,
+          inputsChunked.length,
+          gasLimitOverride
+        );
+
+        // If there is a block number conflict we retry all the quotes.
+        if (blockNumberError) {
+          retryAll = true;
+        }
+
+        const reasonForFailureStr = _.map(
+          failedQuoteStates,
+          (failedQuoteState) => failedQuoteState.reason.name
+        ).join(', ');
+
+        if (failedQuoteStates.length > 0) {
+          log.info(
+            `On attempt ${attemptNumber}: ${failedQuoteStates.length}/${quoteStates.length} quotes failed. Reasons: ${reasonForFailureStr}`
+          );
+
+          for (const failedQuoteState of failedQuoteStates) {
+            const { reason: error } = failedQuoteState;
+
+            log.info(
+              { error },
+              `[QuoteFetchError] Attempt ${attemptNumber}. ${error.message}`
+            );
+
+            if (error instanceof BlockConflictError) {
+              if (!haveRetriedForBlockConflictError) {
+                metric.putMetric(
+                  'QuoteBlockConflictErrorRetry',
+                  1,
+                  MetricLoggerUnit.Count
+                );
+                haveRetriedForBlockConflictError = true;
+              }
+
+              retryAll = true;
+            } else if (error instanceof ProviderBlockHeaderError) {
+              if (!haveRetriedForBlockHeader) {
+                metric.putMetric(
+                  'QuoteBlockHeaderNotFoundRetry',
+                  1,
+                  MetricLoggerUnit.Count
+                );
+                haveRetriedForBlockHeader = true;
+              }
+
+              // Ensure that if multiple calls fail due to block header in the current pending batch,
+              // we only count once.
+              if (!haveIncrementedBlockHeaderFailureCounter) {
+                blockHeaderRetryAttemptNumber =
+                  blockHeaderRetryAttemptNumber + 1;
+                haveIncrementedBlockHeaderFailureCounter = true;
+              }
+
+              if (rollback.enabled) {
+                const { rollbackBlockOffset, attemptsBeforeRollback } =
+                  rollback;
+
+                if (
+                  blockHeaderRetryAttemptNumber >= attemptsBeforeRollback &&
+                  !blockHeaderRolledBack
+                ) {
+                  log.info(
+                    `Attempt ${attemptNumber}. Have failed due to block header ${
+                      blockHeaderRetryAttemptNumber - 1
+                    } times. Rolling back block number by ${rollbackBlockOffset} for next retry`
+                  );
+                  providerConfig.blockNumber = providerConfig.blockNumber
+                    ? (await providerConfig.blockNumber) + rollbackBlockOffset
+                    : (await this.provider.getBlockNumber()) +
+                    rollbackBlockOffset;
+
+                  retryAll = true;
+                  blockHeaderRolledBack = true;
+                }
+              }
+            } else if (error instanceof ProviderTimeoutError) {
+              if (!haveRetriedForTimeout) {
+                metric.putMetric(
+                  'QuoteTimeoutRetry',
+                  1,
+                  MetricLoggerUnit.Count
+                );
+                haveRetriedForTimeout = true;
+              }
+            } else if (error instanceof ProviderGasError) {
+              if (!haveRetriedForOutOfGas) {
+                metric.putMetric(
+                  'QuoteOutOfGasExceptionRetry',
+                  1,
+                  MetricLoggerUnit.Count
+                );
+                haveRetriedForOutOfGas = true;
+              }
+              gasLimitOverride = this.gasErrorFailureOverride.gasLimitOverride;
+              multicallChunk = this.gasErrorFailureOverride.multicallChunk;
+              retryAll = true;
+            } else if (error instanceof SuccessRateError) {
+              if (!haveRetriedForSuccessRate) {
+                metric.putMetric(
+                  'QuoteSuccessRateRetry',
+                  1,
+                  MetricLoggerUnit.Count
+                );
+                haveRetriedForSuccessRate = true;
+
+                // Low success rate can indicate too little gas given to each call.
+                gasLimitOverride =
+                  this.successRateFailureOverrides.gasLimitOverride;
+                multicallChunk =
+                  this.successRateFailureOverrides.multicallChunk;
+                retryAll = true;
+              }
+            } else {
+              if (!haveRetriedForUnknownReason) {
+                metric.putMetric(
+                  'QuoteUnknownReasonRetry',
+                  1,
+                  MetricLoggerUnit.Count
+                );
+                haveRetriedForUnknownReason = true;
+              }
+            }
+          }
+        }
+
+        if (retryAll) {
+          log.info(
+            `Attempt ${attemptNumber}. Resetting all requests to pending for next attempt.`
+          );
+
+          const normalizedChunk = Math.ceil(
+            inputs.length / Math.ceil(inputs.length / multicallChunk)
+          );
+
+          const inputsChunked = _.chunk(inputs, normalizedChunk);
+          quoteStates = _.map(inputsChunked, (inputChunk) => {
+            return {
+              status: 'pending',
+              inputs: inputChunk,
+            };
+          });
+        }
+
+        if (failedQuoteStates.length > 0) {
+          // TODO: Work with Arbitrum to find a solution for making large multicalls with gas limits that always
+          // successfully.
+          //
+          // On Arbitrum we can not set a gas limit for every call in the multicall and guarantee that
+          // we will not run out of gas on the node. This is because they have a different way of accounting
+          // for gas, that seperates storage and compute gas costs, and we can not cover both in a single limit.
+          //
+          // To work around this and avoid throwing errors when really we just couldn't get a quote, we catch this
+          // case and return 0 quotes found.
+          if (
+            (this.chainId == ChainId.ARBITRUM_ONE ||
+              this.chainId == ChainId.ARBITRUM_GOERLI) &&
+            _.every(
+              failedQuoteStates,
+              (failedQuoteState) =>
+                failedQuoteState.reason instanceof ProviderGasError
+            ) &&
+            attemptNumber == this.retryOptions.retries
+          ) {
+            log.error(
+              `Failed to get quotes on Arbitrum due to provider gas error issue. Overriding error to return 0 quotes.`
+            );
+            return {
+              results: [],
+              blockNumber: BigNumber.from(0),
+              approxGasUsedPerSuccessCall: 0,
+            };
+          }
+          throw new Error(
+            `Failed to get ${failedQuoteStates.length} quotes. Reasons: ${reasonForFailureStr}`
+          );
+        }
+
+        const callResults = _.map(
+          successfulQuoteStates,
+          (quoteState) => quoteState.results
+        );
+
+        return {
+          results: _.flatMap(callResults, (result) => result.results),
+          blockNumber: BigNumber.from(callResults[0]!.blockNumber),
+          approxGasUsedPerSuccessCall: stats.percentile(
+            _.map(callResults, (result) => result.approxGasUsedPerSuccessCall),
+            100
+          ),
+        };
+      },
+      {
+        retries: DEFAULT_BATCH_RETRIES,
+        ...this.retryOptions,
+      }
+    );
+
+    const routesQuotes = this.processQuoteResults(
+      quoteResults,
+      routes,
+      amounts
+    );
+
+    metric.putMetric(
+      'QuoteApproxGasUsedPerSuccessfulCall',
+      approxGasUsedPerSuccessCall,
+      MetricLoggerUnit.Count
+    );
+
+    metric.putMetric(
+      'QuoteNumRetryLoops',
+      finalAttemptNumber - 1,
+      MetricLoggerUnit.Count
+    );
+
+    metric.putMetric(
+      'QuoteTotalCallsToProvider',
+      totalCallsMade,
+      MetricLoggerUnit.Count
+    );
+
+    metric.putMetric(
+      'QuoteExpectedCallsToProvider',
+      expectedCallsMade,
+      MetricLoggerUnit.Count
+    );
+
+    metric.putMetric(
+      'QuoteNumRetriedCalls',
+      totalCallsMade - expectedCallsMade,
+      MetricLoggerUnit.Count
+    );
+
+    const [successfulQuotes, failedQuotes] = _(routesQuotes)
+      .flatMap((routeWithQuotes: RouteWithQuotes<TRoute>) => routeWithQuotes[1])
+      .partition((quote) => quote.quote != null)
+      .value();
+
+    log.info(
+      `Got ${successfulQuotes.length} successful quotes, ${
+        failedQuotes.length
+      } failed quotes. Took ${
+        finalAttemptNumber - 1
+      } attempt loops. Total calls made to provider: ${totalCallsMade}. Have retried for timeout: ${haveRetriedForTimeout}`
+    );
+
+    return { routesWithQuotes: routesQuotes, blockNumber };
+  }
+
+  private partitionQuotes(
+    quoteStates: QuoteBatchState[]
+  ): [QuoteBatchSuccess[], QuoteBatchFailed[], QuoteBatchPending[]] {
+    const successfulQuoteStates: QuoteBatchSuccess[] = _.filter<
+      QuoteBatchState,
+      QuoteBatchSuccess
+    >(
+      quoteStates,
+      (quoteState): quoteState is QuoteBatchSuccess =>
+        quoteState.status == 'success'
+    );
+
+    const failedQuoteStates: QuoteBatchFailed[] = _.filter<
+      QuoteBatchState,
+      QuoteBatchFailed
+    >(
+      quoteStates,
+      (quoteState): quoteState is QuoteBatchFailed =>
+        quoteState.status == 'failed'
+    );
+
+    const pendingQuoteStates: QuoteBatchPending[] = _.filter<
+      QuoteBatchState,
+      QuoteBatchPending
+    >(
+      quoteStates,
+      (quoteState): quoteState is QuoteBatchPending =>
+        quoteState.status == 'pending'
+    );
+
+    return [successfulQuoteStates, failedQuoteStates, pendingQuoteStates];
+  }
+
+  private processQuoteResults<TRoute extends V3Route | V2Route | MixedRoute>(
+    quoteResults: Result<[BigNumber, BigNumber[], number[], BigNumber]>[],
+    routes: TRoute[],
+    amounts: CurrencyAmount[]
+  ): RouteWithQuotes<TRoute>[] {
+    const routesQuotes: RouteWithQuotes<TRoute>[] = [];
+
+    const quotesResultsByRoute = _.chunk(quoteResults, amounts.length);
+
+    const debugFailedQuotes: {
+      amount: string;
+      percent: number;
+      route: string;
+    }[] = [];
+
+    for (let i = 0; i < quotesResultsByRoute.length; i++) {
+      const route = routes[i]!;
+      const quoteResults = quotesResultsByRoute[i]!;
+      const quotes: AmountQuote[] = _.map(
+        quoteResults,
+        (
+          quoteResult: Result<[BigNumber, BigNumber[], number[], BigNumber]>,
+          index: number
+        ) => {
+          const amount = amounts[index]!;
+          if (!quoteResult.success) {
+            const percent = (100 / amounts.length) * (index + 1);
+
+            const amountStr = amount.toFixed(
+              Math.min(amount.currency.decimals, 2)
+            );
+            const routeStr = routeToString(route);
+            debugFailedQuotes.push({
+              route: routeStr,
+              percent,
+              amount: amountStr,
+            });
+
+            return {
+              amount,
+              quote: null,
+              sqrtPriceX96AfterList: null,
+              gasEstimate: null,
+              initializedTicksCrossedList: null,
+            };
+          }
+
+          return {
+            amount,
+            quote: quoteResult.result[0],
+            sqrtPriceX96AfterList: quoteResult.result[1],
+            initializedTicksCrossedList: quoteResult.result[2],
+            gasEstimate: quoteResult.result[3],
+          };
+        }
+      );
+
+      routesQuotes.push([route, quotes]);
+    }
+
+    // For routes and amounts that we failed to get a quote for, group them by route
+    // and batch them together before logging to minimize number of logs.
+    const debugChunk = 80;
+    _.forEach(_.chunk(debugFailedQuotes, debugChunk), (quotes, idx) => {
+      const failedQuotesByRoute = _.groupBy(quotes, (q) => q.route);
+      const failedFlat = _.mapValues(failedQuotesByRoute, (f) =>
+        _(f)
+          .map((f) => `${f.percent}%[${f.amount}]`)
+          .join(',')
+      );
+
+      log.info(
+        {
+          failedQuotes: _.map(
+            failedFlat,
+            (amounts, routeStr) => `${routeStr} : ${amounts}`
+          ),
+        },
+        `Failed on chain quotes for routes Part ${idx}/${Math.ceil(
+          debugFailedQuotes.length / debugChunk
+        )}`
+      );
+    });
+
+    return routesQuotes;
+  }
+
+  private validateBlockNumbers(
+    successfulQuoteStates: QuoteBatchSuccess[],
+    totalCalls: number,
+    gasLimitOverride?: number
+  ): BlockConflictError | null {
+    if (successfulQuoteStates.length <= 1) {
+      return null;
+    }
+
+    const results = _.map(
+      successfulQuoteStates,
+      (quoteState) => quoteState.results
+    );
+
+    const blockNumbers = _.map(results, (result) => result.blockNumber);
+
+    const uniqBlocks = _(blockNumbers)
+      .map((blockNumber) => blockNumber.toNumber())
+      .uniq()
+      .value();
+
+    if (uniqBlocks.length == 1) {
+      return null;
+    }
+
+    /* if (
+      uniqBlocks.length == 2 &&
+      Math.abs(uniqBlocks[0]! - uniqBlocks[1]!) <= 1
+    ) {
+      return null;
+    } */
+
+    return new BlockConflictError(
+      `Quotes returned from different blocks. ${uniqBlocks}. ${totalCalls} calls were made with gas limit ${gasLimitOverride}`
+    );
+  }
+
+  protected validateSuccessRate(
+    allResults: Result<[BigNumber, BigNumber[], number[], BigNumber]>[],
+    haveRetriedForSuccessRate: boolean
+  ): void | SuccessRateError {
+    const numResults = allResults.length;
+    const numSuccessResults = allResults.filter(
+      (result) => result.success
+    ).length;
+
+    const successRate = (1.0 * numSuccessResults) / numResults;
+
+    const { quoteMinSuccessRate } = this.batchParams;
+    if (successRate < quoteMinSuccessRate) {
+      if (haveRetriedForSuccessRate) {
+        log.info(
+          `Quote success rate still below threshold despite retry. Continuing. ${quoteMinSuccessRate}: ${successRate}`
+        );
+        return;
+      }
+
+      return new SuccessRateError(
+        `Quote success rate below threshold of ${quoteMinSuccessRate}: ${successRate}`
+      );
+    }
+  }
+
+  /**
+   * Throw an error for incorrect routes / function combinations
+   * @param routes Any combination of V3, V2, and Mixed routes.
+   * @param functionName
+   * @param useMixedRouteQuoter true if there are ANY V2Routes or MixedRoutes in the routes parameter
+   */
+  protected validateRoutes(
+    routes: (V3Route | V2Route | MixedRoute)[],
+    functionName: string,
+    useMixedRouteQuoter: boolean
+  ) {
+    /// We do not send any V3Routes to new qutoer becuase it is not deployed on chains besides mainnet
+    if (
+      routes.some((route) => route.protocol === Protocol.V3) &&
+      useMixedRouteQuoter
+    ) {
+      throw new Error(`Cannot use mixed route quoter with V3 routes`);
+    }
+
+    /// We cannot call quoteExactOutput with V2 or Mixed routes
+    if (functionName === 'quoteExactOutput' && useMixedRouteQuoter) {
+      throw new Error('Cannot call quoteExactOutput with V2 or Mixed routes');
+    }
+  }
+}
diff --git a/lib/sor/providers/provider.ts b/lib/sor/providers/provider.ts
new file mode 100644
index 0000000..577667f
--- /dev/null
+++ b/lib/sor/providers/provider.ts
@@ -0,0 +1,15 @@
+export type ProviderConfig = {
+  /**
+   * The block number to use when getting data on-chain.
+   */
+  blockNumber?: number | Promise<number>;
+  /*
+  * Debug flag to test some codepaths
+   */
+  debugRouting?: boolean;
+};
+
+export type LocalCacheEntry<T> = {
+  entry: T;
+  blockNumber: number;
+};
diff --git a/lib/sor/providers/simulation-provider.ts b/lib/sor/providers/simulation-provider.ts
new file mode 100644
index 0000000..f300d45
--- /dev/null
+++ b/lib/sor/providers/simulation-provider.ts
@@ -0,0 +1,237 @@
+import { JsonRpcProvider } from '@ethersproject/providers';
+import { ChainId, TradeType } from '@uniswap/sdk-core';
+import { PERMIT2_ADDRESS } from '@uniswap/universal-router-sdk';
+import { BigNumber } from 'ethers/lib/ethers';
+
+import { SwapOptions, SwapRoute, SwapType } from '../routers';
+import { Erc20__factory } from '../types/other/factories/Erc20__factory';
+import { Permit2__factory } from '../types/other/factories/Permit2__factory';
+import {
+  CurrencyAmount,
+  log,
+  SWAP_ROUTER_02_ADDRESSES,
+} from '../util';
+
+import { ProviderConfig } from './provider';
+import { ArbitrumGasData, OptimismGasData } from './v3/gas-data-provider';
+
+export type SimulationResult = {
+  transaction: { hash: string; gas_used: number; gas: number; error_message: string };
+  simulation: { state_overrides: Record<string, unknown> };
+};
+
+export enum SimulationStatus {
+  NotSupported = 0,
+  Failed = 1,
+  Succeeded = 2,
+  InsufficientBalance = 3,
+  NotApproved = 4,
+}
+
+/**
+ * Provider for dry running transactions.
+ *
+ * @export
+ * @class Simulator
+ */
+export abstract class Simulator {
+  protected provider: JsonRpcProvider;
+
+  /**
+   * Returns a new SwapRoute with simulated gas estimates
+   * @returns SwapRoute
+   */
+  constructor(provider: JsonRpcProvider, protected chainId: ChainId) {
+    this.provider = provider;
+  }
+
+  public async simulate(
+    fromAddress: string,
+    swapOptions: SwapOptions,
+    swapRoute: SwapRoute,
+    amount: CurrencyAmount,
+    quote: CurrencyAmount,
+    l2GasData?: OptimismGasData | ArbitrumGasData,
+    providerConfig?: ProviderConfig
+  ): Promise<SwapRoute> {
+    if (
+      await this.userHasSufficientBalance(
+        fromAddress,
+        swapRoute.trade.tradeType,
+        amount,
+        quote
+      )
+    ) {
+      log.info(
+        'User has sufficient balance to simulate. Simulating transaction.'
+      );
+      try {
+        return this.simulateTransaction(
+          fromAddress,
+          swapOptions,
+          swapRoute,
+          l2GasData,
+          providerConfig
+        );
+      } catch (e) {
+        log.error({ e }, 'Error simulating transaction');
+        return {
+          ...swapRoute,
+          simulationStatus: SimulationStatus.Failed,
+        };
+      }
+    } else {
+      log.error('User does not have sufficient balance to simulate.');
+      return {
+        ...swapRoute,
+        simulationStatus: SimulationStatus.InsufficientBalance,
+      };
+    }
+  }
+
+  protected abstract simulateTransaction(
+    fromAddress: string,
+    swapOptions: SwapOptions,
+    swapRoute: SwapRoute,
+    l2GasData?: OptimismGasData | ArbitrumGasData,
+    providerConfig?: ProviderConfig
+  ): Promise<SwapRoute>;
+
+  protected async userHasSufficientBalance(
+    fromAddress: string,
+    tradeType: TradeType,
+    amount: CurrencyAmount,
+    quote: CurrencyAmount
+  ): Promise<boolean> {
+    try {
+      const neededBalance = tradeType == TradeType.EXACT_INPUT ? amount : quote;
+      let balance;
+      if (neededBalance.currency.isNative) {
+        balance = await this.provider.getBalance(fromAddress);
+      } else {
+        const tokenContract = Erc20__factory.connect(
+          neededBalance.currency.address,
+          this.provider
+        );
+        balance = await tokenContract.balanceOf(fromAddress);
+      }
+
+      const hasBalance = balance.gte(
+        BigNumber.from(neededBalance.quotient.toString())
+      );
+      log.info(
+        {
+          fromAddress,
+          balance: balance.toString(),
+          neededBalance: neededBalance.quotient.toString(),
+          neededAddress: neededBalance.wrapped.currency.address,
+          hasBalance,
+        },
+        'Result of balance check for simulation'
+      );
+      return hasBalance;
+    } catch (e) {
+      log.error(e, 'Error while checking user balance');
+      return false;
+    }
+  }
+
+  protected async checkTokenApproved(
+    fromAddress: string,
+    inputAmount: CurrencyAmount,
+    swapOptions: SwapOptions,
+    provider: JsonRpcProvider
+  ): Promise<boolean> {
+    // Check token has approved Permit2 more than expected amount.
+    const tokenContract = Erc20__factory.connect(
+      inputAmount.currency.wrapped.address,
+      provider
+    );
+
+    if (swapOptions.type == SwapType.UNIVERSAL_ROUTER) {
+      const permit2Allowance = await tokenContract.allowance(
+        fromAddress,
+        PERMIT2_ADDRESS
+      );
+
+      // If a permit has been provided we don't need to check if UR has already been allowed.
+      if (swapOptions.inputTokenPermit) {
+        log.info(
+          {
+            permitAllowance: permit2Allowance.toString(),
+            inputAmount: inputAmount.quotient.toString(),
+          },
+          'Permit was provided for simulation on UR, checking that Permit2 has been approved.'
+        );
+        return permit2Allowance.gte(
+          BigNumber.from(inputAmount.quotient.toString())
+        );
+      }
+
+      // Check UR has been approved from Permit2.
+      const permit2Contract = Permit2__factory.connect(
+        PERMIT2_ADDRESS,
+        provider
+      );
+
+      const { amount: universalRouterAllowance, expiration: tokenExpiration } =
+        await permit2Contract.allowance(
+          fromAddress,
+          inputAmount.currency.wrapped.address,
+          SWAP_ROUTER_02_ADDRESSES(this.chainId)
+        );
+
+      const nowTimestampS = Math.round(Date.now() / 1000);
+      const inputAmountBN = BigNumber.from(inputAmount.quotient.toString());
+
+      const permit2Approved = permit2Allowance.gte(inputAmountBN);
+      const universalRouterApproved =
+        universalRouterAllowance.gte(inputAmountBN);
+      const expirationValid = tokenExpiration > nowTimestampS;
+      log.info(
+        {
+          permitAllowance: permit2Allowance.toString(),
+          tokenAllowance: universalRouterAllowance.toString(),
+          tokenExpirationS: tokenExpiration,
+          nowTimestampS,
+          inputAmount: inputAmount.quotient.toString(),
+          permit2Approved,
+          universalRouterApproved,
+          expirationValid,
+        },
+        `Simulating on UR, Permit2 approved: ${permit2Approved}, UR approved: ${universalRouterApproved}, Expiraton valid: ${expirationValid}.`
+      );
+      return permit2Approved && universalRouterApproved && expirationValid;
+    } else if (swapOptions.type == SwapType.SWAP_ROUTER_02) {
+      if (swapOptions.inputTokenPermit) {
+        log.info(
+          {
+            inputAmount: inputAmount.quotient.toString(),
+          },
+          'Simulating on SwapRouter02 info - Permit was provided for simulation. Not checking allowances.'
+        );
+        return true;
+      }
+
+      const allowance = await tokenContract.allowance(
+        fromAddress,
+        SWAP_ROUTER_02_ADDRESSES(this.chainId)
+      );
+      const hasAllowance = allowance.gte(
+        BigNumber.from(inputAmount.quotient.toString())
+      );
+      log.info(
+        {
+          hasAllowance,
+          allowance: allowance.toString(),
+          inputAmount: inputAmount.quotient.toString(),
+        },
+        `Simulating on SwapRouter02 - Has allowance: ${hasAllowance}`
+      );
+      // Return true if token allowance is greater than input amount
+      return hasAllowance;
+    }
+
+    throw new Error(`Unsupported swap type ${swapOptions}`);
+  }
+}
diff --git a/lib/sor/providers/static-gas-price-provider.ts b/lib/sor/providers/static-gas-price-provider.ts
new file mode 100644
index 0000000..fb79ce6
--- /dev/null
+++ b/lib/sor/providers/static-gas-price-provider.ts
@@ -0,0 +1,11 @@
+// eslint-disable-next-line no-restricted-imports
+import { BigNumber } from 'ethers';
+
+import { GasPrice, IGasPriceProvider } from './gas-price-provider';
+
+export class StaticGasPriceProvider implements IGasPriceProvider {
+  constructor(private gasPriceWei: BigNumber) {}
+  async getGasPrice(): Promise<GasPrice> {
+    return { gasPriceWei: this.gasPriceWei };
+  }
+}
diff --git a/lib/sor/providers/swap-router-provider.ts b/lib/sor/providers/swap-router-provider.ts
new file mode 100644
index 0000000..ccd8fb5
--- /dev/null
+++ b/lib/sor/providers/swap-router-provider.ts
@@ -0,0 +1,84 @@
+import { ApprovalTypes } from '@uniswap/router-sdk';
+import { ChainId, Currency, CurrencyAmount } from '@uniswap/sdk-core';
+
+import { SwapRouter02__factory } from '../types/other/factories/SwapRouter02__factory';
+import { log, SWAP_ROUTER_02_ADDRESSES } from '../util';
+
+import { IMulticallProvider } from './multicall-provider';
+
+type TokenApprovalTypes = {
+  approvalTokenIn: ApprovalTypes;
+  approvalTokenOut: ApprovalTypes;
+};
+
+/**
+ * Provider for accessing the SwapRouter02 Contract .
+ *
+ * @export
+ * @interface IRouterProvider
+ */
+export interface ISwapRouterProvider {
+  /**
+   * Get the approval method needed for each token. Throws an error if either query fails.
+   *
+   * @param tokenInAmount The Currency Amount of tokenIn needed by the user
+   * @param tokenOutAmount The Currency Amount of tokenOut needed by the user
+   * @returns the Approval Types for each token.
+   */
+  getApprovalType(
+    tokenInAmount: CurrencyAmount<Currency>,
+    tokenOutAmount: CurrencyAmount<Currency>
+  ): Promise<TokenApprovalTypes>;
+}
+
+export class SwapRouterProvider implements ISwapRouterProvider {
+  constructor(
+    protected multicall2Provider: IMulticallProvider,
+    protected chainId: ChainId
+  ) {}
+
+  public async getApprovalType(
+    tokenInAmount: CurrencyAmount<Currency>,
+    tokenOutAmount: CurrencyAmount<Currency>
+  ): Promise<TokenApprovalTypes> {
+    const functionParams: [string, string][] = [
+      [
+        tokenInAmount.currency.wrapped.address,
+        tokenInAmount.quotient.toString(),
+      ],
+      [
+        tokenOutAmount.currency.wrapped.address,
+        tokenOutAmount.quotient.toString(),
+      ],
+    ];
+
+    const tx =
+      await this.multicall2Provider.callSameFunctionOnContractWithMultipleParams<
+        [string, string],
+        [ApprovalTypes]
+      >({
+        address: SWAP_ROUTER_02_ADDRESSES(this.chainId),
+        contractInterface: SwapRouter02__factory.createInterface(),
+        functionName: 'getApprovalType',
+        functionParams,
+      });
+
+    if (!tx.results[0]?.success || !tx.results[1]?.success) {
+      log.info(
+        { results: tx.results },
+        'Failed to get approval type from swap router for token in or token out'
+      );
+      throw new Error(
+        'Failed to get approval type from swap router for token in or token out'
+      );
+    }
+
+    const { result: approvalTokenIn } = tx.results![0];
+    const { result: approvalTokenOut } = tx.results![1];
+
+    return {
+      approvalTokenIn: approvalTokenIn[0],
+      approvalTokenOut: approvalTokenOut[0],
+    };
+  }
+}
diff --git a/lib/sor/providers/tenderly-simulation-provider.ts b/lib/sor/providers/tenderly-simulation-provider.ts
new file mode 100644
index 0000000..f2f5d80
--- /dev/null
+++ b/lib/sor/providers/tenderly-simulation-provider.ts
@@ -0,0 +1,486 @@
+import { MaxUint256 } from '@ethersproject/constants';
+import { JsonRpcProvider } from '@ethersproject/providers';
+import { ChainId } from '@uniswap/sdk-core';
+import {
+  PERMIT2_ADDRESS,
+  UNIVERSAL_ROUTER_ADDRESS,
+} from '@uniswap/universal-router-sdk';
+import axios from 'axios';
+import { BigNumber } from 'ethers/lib/ethers';
+
+import { SwapOptions, SwapRoute, SwapType } from '../routers';
+import { Erc20__factory } from '../types/other/factories/Erc20__factory';
+import { Permit2__factory } from '../types/other/factories/Permit2__factory';
+import { log, MAX_UINT160, SWAP_ROUTER_02_ADDRESSES } from '../util';
+import { APPROVE_TOKEN_FOR_TRANSFER } from '../util/callData';
+import {
+  calculateGasUsed,
+  initSwapRouteFromExisting,
+} from '../util/gas-factory-helpers';
+
+import { EthEstimateGasSimulator } from './eth-estimate-gas-provider';
+import { ProviderConfig } from './provider';
+import {
+  SimulationResult,
+  SimulationStatus,
+  Simulator,
+} from './simulation-provider';
+import { IV2PoolProvider } from './v2/pool-provider';
+import { ArbitrumGasData, OptimismGasData } from './v3/gas-data-provider';
+import { IV3PoolProvider } from './v3/pool-provider';
+
+export type TenderlyResponseUniversalRouter = {
+  config: {
+    url: string;
+    method: string;
+    data: string;
+  };
+  simulation_results: [SimulationResult, SimulationResult, SimulationResult];
+};
+
+export type TenderlyResponseSwapRouter02 = {
+  config: {
+    url: string;
+    method: string;
+    data: string;
+  };
+  simulation_results: [SimulationResult, SimulationResult];
+};
+
+const TENDERLY_BATCH_SIMULATE_API = (
+  tenderlyBaseUrl: string,
+  tenderlyUser: string,
+  tenderlyProject: string
+) =>
+  `${tenderlyBaseUrl}/api/v1/account/${tenderlyUser}/project/${tenderlyProject}/simulate-batch`;
+
+// We multiply tenderly gas limit by this to overestimate gas limit
+const DEFAULT_ESTIMATE_MULTIPLIER = 1.3;
+
+export class FallbackTenderlySimulator extends Simulator {
+  private tenderlySimulator: TenderlySimulator;
+  private ethEstimateGasSimulator: EthEstimateGasSimulator;
+  constructor(
+    chainId: ChainId,
+    provider: JsonRpcProvider,
+    tenderlySimulator: TenderlySimulator,
+    ethEstimateGasSimulator: EthEstimateGasSimulator
+  ) {
+    super(provider, chainId);
+    this.tenderlySimulator = tenderlySimulator;
+    this.ethEstimateGasSimulator = ethEstimateGasSimulator;
+  }
+
+  protected async simulateTransaction(
+    fromAddress: string,
+    swapOptions: SwapOptions,
+    swapRoute: SwapRoute,
+    l2GasData?: ArbitrumGasData | OptimismGasData,
+    providerConfig?: ProviderConfig
+  ): Promise<SwapRoute> {
+    // Make call to eth estimate gas if possible
+    // For erc20s, we must check if the token allowance is sufficient
+    const inputAmount = swapRoute.trade.inputAmount;
+
+    if (
+      inputAmount.currency.isNative ||
+      (await this.checkTokenApproved(
+        fromAddress,
+        inputAmount,
+        swapOptions,
+        this.provider
+      ))
+    ) {
+      log.info(
+        'Simulating with eth_estimateGas since token is native or approved.'
+      );
+
+      try {
+        const swapRouteWithGasEstimate =
+          await this.ethEstimateGasSimulator.ethEstimateGas(
+            fromAddress,
+            swapOptions,
+            swapRoute,
+            l2GasData,
+            providerConfig
+          );
+        return swapRouteWithGasEstimate;
+      } catch (err) {
+        log.info({ err: err }, 'Error simulating using eth_estimateGas');
+        return { ...swapRoute, simulationStatus: SimulationStatus.Failed };
+      }
+    }
+
+    try {
+      return await this.tenderlySimulator.simulateTransaction(
+        fromAddress,
+        swapOptions,
+        swapRoute,
+        l2GasData,
+        providerConfig
+      );
+    } catch (err) {
+      log.info({ err: err }, 'Failed to simulate via Tenderly');
+      return { ...swapRoute, simulationStatus: SimulationStatus.Failed };
+    }
+  }
+}
+
+export class TenderlySimulator extends Simulator {
+  private tenderlyBaseUrl: string;
+  private tenderlyUser: string;
+  private tenderlyProject: string;
+  private tenderlyAccessKey: string;
+  private v2PoolProvider: IV2PoolProvider;
+  private v3PoolProvider: IV3PoolProvider;
+  private overrideEstimateMultiplier: { [chainId in ChainId]?: number };
+
+  constructor(
+    chainId: ChainId,
+    tenderlyBaseUrl: string,
+    tenderlyUser: string,
+    tenderlyProject: string,
+    tenderlyAccessKey: string,
+    v2PoolProvider: IV2PoolProvider,
+    v3PoolProvider: IV3PoolProvider,
+    provider: JsonRpcProvider,
+    overrideEstimateMultiplier?: { [chainId in ChainId]?: number }
+  ) {
+    super(provider, chainId);
+    this.tenderlyBaseUrl = tenderlyBaseUrl;
+    this.tenderlyUser = tenderlyUser;
+    this.tenderlyProject = tenderlyProject;
+    this.tenderlyAccessKey = tenderlyAccessKey;
+    this.v2PoolProvider = v2PoolProvider;
+    this.v3PoolProvider = v3PoolProvider;
+    this.overrideEstimateMultiplier = overrideEstimateMultiplier ?? {};
+  }
+
+  public async simulateTransaction(
+    fromAddress: string,
+    swapOptions: SwapOptions,
+    swapRoute: SwapRoute,
+    l2GasData?: ArbitrumGasData | OptimismGasData,
+    providerConfig?: ProviderConfig
+  ): Promise<SwapRoute> {
+    const currencyIn = swapRoute.trade.inputAmount.currency;
+    const tokenIn = currencyIn.wrapped;
+    const chainId = this.chainId;
+    if ([ChainId.CELO, ChainId.CELO_ALFAJORES].includes(chainId)) {
+      const msg = 'Celo not supported by Tenderly!';
+      log.info(msg);
+      return { ...swapRoute, simulationStatus: SimulationStatus.NotSupported };
+    }
+
+    if (!swapRoute.methodParameters) {
+      const msg = 'No calldata provided to simulate transaction';
+      log.info(msg);
+      throw new Error(msg);
+    }
+
+    const { calldata } = swapRoute.methodParameters;
+
+    log.info(
+      {
+        calldata: swapRoute.methodParameters.calldata,
+        fromAddress: fromAddress,
+        chainId: chainId,
+        tokenInAddress: tokenIn.address,
+        router: swapOptions.type,
+      },
+      'Simulating transaction on Tenderly'
+    );
+
+    const blockNumber = await providerConfig?.blockNumber;
+    let estimatedGasUsed: BigNumber;
+    const estimateMultiplier =
+      this.overrideEstimateMultiplier[chainId] ?? DEFAULT_ESTIMATE_MULTIPLIER;
+
+    if (swapOptions.type == SwapType.UNIVERSAL_ROUTER) {
+      // Do initial onboarding approval of Permit2.
+      const erc20Interface = Erc20__factory.createInterface();
+      const approvePermit2Calldata = erc20Interface.encodeFunctionData(
+        'approve',
+        [PERMIT2_ADDRESS, MaxUint256]
+      );
+
+      // We are unsure if the users calldata contains a permit or not. We just
+      // max approve the Univeral Router from Permit2 instead, which will cover both cases.
+      const permit2Interface = Permit2__factory.createInterface();
+      const approveUniversalRouterCallData =
+        permit2Interface.encodeFunctionData('approve', [
+          tokenIn.address,
+          UNIVERSAL_ROUTER_ADDRESS(this.chainId),
+          MAX_UINT160,
+          Math.floor(new Date().getTime() / 1000) + 10000000,
+        ]);
+
+      const approvePermit2 = {
+        network_id: chainId,
+        estimate_gas: true,
+        input: approvePermit2Calldata,
+        to: tokenIn.address,
+        value: '0',
+        from: fromAddress,
+      };
+
+      const approveUniversalRouter = {
+        network_id: chainId,
+        estimate_gas: true,
+        input: approveUniversalRouterCallData,
+        to: PERMIT2_ADDRESS,
+        value: '0',
+        from: fromAddress,
+      };
+
+      const swap = {
+        network_id: chainId,
+        input: calldata,
+        estimate_gas: true,
+        to: UNIVERSAL_ROUTER_ADDRESS(this.chainId),
+        value: currencyIn.isNative ? swapRoute.methodParameters.value : '0',
+        from: fromAddress,
+        // TODO: This is a Temporary fix given by Tenderly team, remove once resolved on their end.
+        block_number:
+          chainId == ChainId.ARBITRUM_ONE && blockNumber
+            ? blockNumber - 5
+            : undefined,
+      };
+
+      const body = {
+        simulations: [approvePermit2, approveUniversalRouter, swap],
+        estimate_gas: true,
+      };
+      const opts = {
+        headers: {
+          'X-Access-Key': this.tenderlyAccessKey,
+        },
+      };
+      const url = TENDERLY_BATCH_SIMULATE_API(
+        this.tenderlyBaseUrl,
+        this.tenderlyUser,
+        this.tenderlyProject
+      );
+      const resp = (
+        await axios.post<TenderlyResponseUniversalRouter>(url, body, opts)
+      ).data;
+
+      // Validate tenderly response body
+      if (
+        !resp ||
+        resp.simulation_results.length < 3 ||
+        !resp.simulation_results[2].transaction ||
+        resp.simulation_results[2].transaction.error_message
+      ) {
+        this.logTenderlyErrorResponse(resp);
+        return { ...swapRoute, simulationStatus: SimulationStatus.Failed };
+      }
+
+      // Parse the gas used in the simulation response object, and then pad it so that we overestimate.
+      estimatedGasUsed = BigNumber.from(
+        (
+          resp.simulation_results[2].transaction.gas * estimateMultiplier
+        ).toFixed(0)
+      );
+
+      log.info(
+        {
+          body,
+          approvePermit2GasUsed:
+            resp.simulation_results[0].transaction.gas_used,
+          approveUniversalRouterGasUsed:
+            resp.simulation_results[1].transaction.gas_used,
+          swapGasUsed: resp.simulation_results[2].transaction.gas_used,
+          approvePermit2Gas: resp.simulation_results[0].transaction.gas,
+          approveUniversalRouterGas: resp.simulation_results[1].transaction.gas,
+          swapGas: resp.simulation_results[2].transaction.gas,
+          swapWithMultiplier: estimatedGasUsed.toString(),
+        },
+        'Successfully Simulated Approvals + Swap via Tenderly for Universal Router. Gas used.'
+      );
+
+      log.info(
+        {
+          body,
+          swapSimulation: resp.simulation_results[2].simulation,
+          swapTransaction: resp.simulation_results[2].transaction,
+        },
+        'Successful Tenderly Swap Simulation for Universal Router'
+      );
+    } else if (swapOptions.type == SwapType.SWAP_ROUTER_02) {
+      const approve = {
+        network_id: chainId,
+        input: APPROVE_TOKEN_FOR_TRANSFER,
+        estimate_gas: true,
+        to: tokenIn.address,
+        value: '0',
+        from: fromAddress,
+      };
+
+      const swap = {
+        network_id: chainId,
+        input: calldata,
+        to: SWAP_ROUTER_02_ADDRESSES(chainId),
+        estimate_gas: true,
+        value: currencyIn.isNative ? swapRoute.methodParameters.value : '0',
+        from: fromAddress,
+        // TODO: This is a Temporary fix given by Tenderly team, remove once resolved on their end.
+        block_number:
+          chainId == ChainId.ARBITRUM_ONE && blockNumber
+            ? blockNumber - 5
+            : undefined,
+      };
+
+      const body = { simulations: [approve, swap] };
+      const opts = {
+        headers: {
+          'X-Access-Key': this.tenderlyAccessKey,
+        },
+      };
+
+      const url = TENDERLY_BATCH_SIMULATE_API(
+        this.tenderlyBaseUrl,
+        this.tenderlyUser,
+        this.tenderlyProject
+      );
+
+      const resp = (
+        await axios.post<TenderlyResponseSwapRouter02>(url, body, opts)
+      ).data;
+
+      // Validate tenderly response body
+      if (
+        !resp ||
+        resp.simulation_results.length < 2 ||
+        !resp.simulation_results[1].transaction ||
+        resp.simulation_results[1].transaction.error_message
+      ) {
+        const msg = `Failed to Simulate Via Tenderly!: ${resp.simulation_results[1].transaction.error_message}`;
+        log.info(
+          { err: resp.simulation_results[1].transaction.error_message },
+          msg
+        );
+        return { ...swapRoute, simulationStatus: SimulationStatus.Failed };
+      }
+
+      // Parse the gas used in the simulation response object, and then pad it so that we overestimate.
+      estimatedGasUsed = BigNumber.from(
+        (
+          resp.simulation_results[1].transaction.gas * estimateMultiplier
+        ).toFixed(0)
+      );
+
+      log.info(
+        {
+          body,
+          approveGasUsed: resp.simulation_results[0].transaction.gas_used,
+          swapGasUsed: resp.simulation_results[1].transaction.gas_used,
+          approveGas: resp.simulation_results[0].transaction.gas,
+          swapGas: resp.simulation_results[1].transaction.gas,
+          swapWithMultiplier: estimatedGasUsed.toString(),
+        },
+        'Successfully Simulated Approval + Swap via Tenderly for SwapRouter02. Gas used.'
+      );
+
+      log.info(
+        {
+          body,
+          swapTransaction: resp.simulation_results[1].transaction,
+          swapSimulation: resp.simulation_results[1].simulation,
+        },
+        'Successful Tenderly Swap Simulation for SwapRouter02'
+      );
+    } else {
+      throw new Error(`Unsupported swap type: ${swapOptions}`);
+    }
+
+    const {
+      estimatedGasUsedUSD,
+      estimatedGasUsedQuoteToken,
+      quoteGasAdjusted,
+    } = await calculateGasUsed(
+      chainId,
+      swapRoute,
+      estimatedGasUsed,
+      this.v2PoolProvider,
+      this.v3PoolProvider,
+      l2GasData,
+      providerConfig
+    );
+    return {
+      ...initSwapRouteFromExisting(
+        swapRoute,
+        this.v2PoolProvider,
+        this.v3PoolProvider,
+        quoteGasAdjusted,
+        estimatedGasUsed,
+        estimatedGasUsedQuoteToken,
+        estimatedGasUsedUSD
+      ),
+      simulationStatus: SimulationStatus.Succeeded,
+    };
+  }
+
+  private logTenderlyErrorResponse(resp: TenderlyResponseUniversalRouter) {
+    log.info(
+      {
+        resp,
+      },
+      'Failed to Simulate on Tenderly'
+    );
+    log.info(
+      {
+        err:
+          resp.simulation_results.length >= 1
+            ? resp.simulation_results[0].transaction
+            : {},
+      },
+      'Failed to Simulate on Tenderly #1 Transaction'
+    );
+    log.info(
+      {
+        err:
+          resp.simulation_results.length >= 1
+            ? resp.simulation_results[0].simulation
+            : {},
+      },
+      'Failed to Simulate on Tenderly #1 Simulation'
+    );
+    log.info(
+      {
+        err:
+          resp.simulation_results.length >= 2
+            ? resp.simulation_results[1].transaction
+            : {},
+      },
+      'Failed to Simulate on Tenderly #2 Transaction'
+    );
+    log.info(
+      {
+        err:
+          resp.simulation_results.length >= 2
+            ? resp.simulation_results[1].simulation
+            : {},
+      },
+      'Failed to Simulate on Tenderly #2 Simulation'
+    );
+    log.info(
+      {
+        err:
+          resp.simulation_results.length >= 3
+            ? resp.simulation_results[2].transaction
+            : {},
+      },
+      'Failed to Simulate on Tenderly #3 Transaction'
+    );
+    log.info(
+      {
+        err:
+          resp.simulation_results.length >= 3
+            ? resp.simulation_results[2].simulation
+            : {},
+      },
+      'Failed to Simulate on Tenderly #3 Simulation'
+    );
+  }
+}
diff --git a/lib/sor/providers/token-provider.ts b/lib/sor/providers/token-provider.ts
new file mode 100644
index 0000000..4d95793
--- /dev/null
+++ b/lib/sor/providers/token-provider.ts
@@ -0,0 +1,805 @@
+import { Interface } from '@ethersproject/abi';
+import { BigNumber } from '@ethersproject/bignumber';
+import { parseBytes32String } from '@ethersproject/strings';
+import { ChainId, Token } from '@uniswap/sdk-core';
+import _ from 'lodash';
+
+import { IERC20Metadata__factory } from '../types/v3/factories/IERC20Metadata__factory';
+import { log, WRAPPED_NATIVE_CURRENCY } from '../util';
+
+import { IMulticallProvider, Result } from './multicall-provider';
+import { ProviderConfig } from './provider';
+
+/**
+ * Provider for getting token data.
+ *
+ * @export
+ * @interface ITokenProvider
+ */
+export interface ITokenProvider {
+  /**
+   * Gets the token at each address. Any addresses that are not valid ERC-20 are ignored.
+   *
+   * @param addresses The token addresses to get.
+   * @param [providerConfig] The provider config.
+   * @returns A token accessor with methods for accessing the tokens.
+   */
+  getTokens(
+    addresses: string[],
+    providerConfig?: ProviderConfig
+  ): Promise<TokenAccessor>;
+}
+
+export type TokenAccessor = {
+  getTokenByAddress(address: string): Token | undefined;
+  getTokenBySymbol(symbol: string): Token | undefined;
+  getAllTokens: () => Token[];
+};
+
+// Some well known tokens on each chain for seeding cache / testing.
+export const USDC_MAINNET = new Token(
+  ChainId.MAINNET,
+  '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',
+  6,
+  'USDC',
+  'USD//C'
+);
+export const USDT_MAINNET = new Token(
+  ChainId.MAINNET,
+  '0xdAC17F958D2ee523a2206206994597C13D831ec7',
+  6,
+  'USDT',
+  'Tether USD'
+);
+export const WBTC_MAINNET = new Token(
+  ChainId.MAINNET,
+  '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599',
+  8,
+  'WBTC',
+  'Wrapped BTC'
+);
+export const DAI_MAINNET = new Token(
+  ChainId.MAINNET,
+  '0x6B175474E89094C44Da98b954EedeAC495271d0F',
+  18,
+  'DAI',
+  'Dai Stablecoin'
+);
+export const FEI_MAINNET = new Token(
+  ChainId.MAINNET,
+  '0x956F47F50A910163D8BF957Cf5846D573E7f87CA',
+  18,
+  'FEI',
+  'Fei USD'
+);
+export const UNI_MAINNET = new Token(
+  ChainId.MAINNET,
+  '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',
+  18,
+  'UNI',
+  'Uniswap'
+);
+
+export const AAVE_MAINNET = new Token(
+  ChainId.MAINNET,
+  '0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9',
+  18,
+  'AAVE',
+  'Aave Token'
+);
+
+export const LIDO_MAINNET = new Token(
+  ChainId.MAINNET,
+  '0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32',
+  18,
+  'LDO',
+  'Lido DAO Token'
+);
+
+export const USDC_SEPOLIA = new Token(
+  ChainId.SEPOLIA,
+  '0x6f14C02Fc1F78322cFd7d707aB90f18baD3B54f5',
+  18,
+  'USDC',
+  'USDC Token'
+);
+export const DAI_SEPOLIA = new Token(
+  ChainId.SEPOLIA,
+  '0x7AF17A48a6336F7dc1beF9D485139f7B6f4FB5C8',
+  18,
+  'DAI',
+  'DAI Token'
+);
+export const USDC_GOERLI = new Token(
+  ChainId.GOERLI,
+  '0x07865c6e87b9f70255377e024ace6630c1eaa37f',
+  6,
+  'USDC',
+  'USD//C'
+);
+export const USDT_GOERLI = new Token(
+  ChainId.GOERLI,
+  '0xe583769738b6dd4e7caf8451050d1948be717679',
+  18,
+  'USDT',
+  'Tether USD'
+);
+export const WBTC_GOERLI = new Token(
+  ChainId.GOERLI,
+  '0xa0a5ad2296b38bd3e3eb59aaeaf1589e8d9a29a9',
+  8,
+  'WBTC',
+  'Wrapped BTC'
+);
+export const DAI_GOERLI = new Token(
+  ChainId.GOERLI,
+  '0x11fe4b6ae13d2a6055c8d9cf65c55bac32b5d844',
+  18,
+  'DAI',
+  'Dai Stablecoin'
+);
+export const UNI_GOERLI = new Token(
+  ChainId.GOERLI,
+  '0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984',
+  18,
+  'UNI',
+  'Uni token'
+);
+
+export const USDC_OPTIMISM = new Token(
+  ChainId.OPTIMISM,
+  '0x7F5c764cBc14f9669B88837ca1490cCa17c31607',
+  6,
+  'USDC',
+  'USD//C'
+);
+export const USDT_OPTIMISM = new Token(
+  ChainId.OPTIMISM,
+  '0x94b008aA00579c1307B0EF2c499aD98a8ce58e58',
+  6,
+  'USDT',
+  'Tether USD'
+);
+export const WBTC_OPTIMISM = new Token(
+  ChainId.OPTIMISM,
+  '0x68f180fcCe6836688e9084f035309E29Bf0A2095',
+  8,
+  'WBTC',
+  'Wrapped BTC'
+);
+export const DAI_OPTIMISM = new Token(
+  ChainId.OPTIMISM,
+  '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1',
+  18,
+  'DAI',
+  'Dai Stablecoin'
+);
+export const OP_OPTIMISM = new Token(
+  ChainId.OPTIMISM,
+  '0x4200000000000000000000000000000000000042',
+  18,
+  'OP',
+  'Optimism'
+);
+
+export const USDC_OPTIMISM_GOERLI = new Token(
+  ChainId.OPTIMISM_GOERLI,
+  '0x7E07E15D2a87A24492740D16f5bdF58c16db0c4E',
+  6,
+  'USDC',
+  'USD//C'
+);
+export const USDT_OPTIMISM_GOERLI = new Token(
+  ChainId.OPTIMISM_GOERLI,
+  '0x853eb4bA5D0Ba2B77a0A5329Fd2110d5CE149ECE',
+  6,
+  'USDT',
+  'Tether USD'
+);
+export const WBTC_OPTIMISM_GOERLI = new Token(
+  ChainId.OPTIMISM_GOERLI,
+  '0xe0a592353e81a94Db6E3226fD4A99F881751776a',
+  8,
+  'WBTC',
+  'Wrapped BTC'
+);
+export const DAI_OPTIMISM_GOERLI = new Token(
+  ChainId.OPTIMISM_GOERLI,
+  '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1',
+  18,
+  'DAI',
+  'Dai Stablecoin'
+);
+
+export const USDC_ARBITRUM = new Token(
+  ChainId.ARBITRUM_ONE,
+  '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',
+  6,
+  'USDC',
+  'USD//C'
+);
+export const USDT_ARBITRUM = new Token(
+  ChainId.ARBITRUM_ONE,
+  '0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9',
+  6,
+  'USDT',
+  'Tether USD'
+);
+export const WBTC_ARBITRUM = new Token(
+  ChainId.ARBITRUM_ONE,
+  '0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f',
+  8,
+  'WBTC',
+  'Wrapped BTC'
+);
+export const DAI_ARBITRUM = new Token(
+  ChainId.ARBITRUM_ONE,
+  '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1',
+  18,
+  'DAI',
+  'Dai Stablecoin'
+);
+
+export const ARB_ARBITRUM = new Token(
+  ChainId.ARBITRUM_ONE,
+  '0x912CE59144191C1204E64559FE8253a0e49E6548',
+  18,
+  'ARB',
+  'Arbitrum'
+);
+
+export const DAI_ARBITRUM_GOERLI = new Token(
+  ChainId.ARBITRUM_GOERLI,
+  '0x0000000000000000000000000000000000000000', // TODO: add address
+  18,
+  'DAI',
+  'Dai Stablecoin'
+);
+
+// Bridged version of official Goerli USDC
+export const USDC_ARBITRUM_GOERLI = new Token(
+  ChainId.ARBITRUM_GOERLI,
+  '0x8FB1E3fC51F3b789dED7557E680551d93Ea9d892',
+  6,
+  'USDC',
+  'USD//C'
+);
+
+//polygon tokens
+export const WMATIC_POLYGON = new Token(
+  ChainId.POLYGON,
+  '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',
+  18,
+  'WMATIC',
+  'Wrapped MATIC'
+);
+
+export const WETH_POLYGON = new Token(
+  ChainId.POLYGON,
+  '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',
+  18,
+  'WETH',
+  'Wrapped Ether'
+);
+
+export const USDC_POLYGON = new Token(
+  ChainId.POLYGON,
+  '0x2791bca1f2de4661ed88a30c99a7a9449aa84174',
+  6,
+  'USDC',
+  'USD//C'
+);
+
+export const DAI_POLYGON = new Token(
+  ChainId.POLYGON,
+  '0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063',
+  18,
+  'DAI',
+  'Dai Stablecoin'
+);
+
+//polygon mumbai tokens
+export const WMATIC_POLYGON_MUMBAI = new Token(
+  ChainId.POLYGON_MUMBAI,
+  '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',
+  18,
+  'WMATIC',
+  'Wrapped MATIC'
+);
+
+export const USDC_POLYGON_MUMBAI = new Token(
+  ChainId.POLYGON_MUMBAI,
+  '0xe11a86849d99f524cac3e7a0ec1241828e332c62',
+  6,
+  'USDC',
+  'USD//C'
+);
+
+export const DAI_POLYGON_MUMBAI = new Token(
+  ChainId.POLYGON_MUMBAI,
+  '0x001b3b4d0f3714ca98ba10f6042daebf0b1b7b6f',
+  18,
+  'DAI',
+  'Dai Stablecoin'
+);
+
+export const WETH_POLYGON_MUMBAI = new Token(
+  ChainId.POLYGON_MUMBAI,
+  '0xa6fa4fb5f76172d178d61b04b0ecd319c5d1c0aa',
+  18,
+  'WETH',
+  'Wrapped Ether'
+);
+
+// BNB chain Tokens
+export const BTC_BNB = new Token(
+  ChainId.BNB,
+  '0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c',
+  18,
+  'BTCB',
+  'Binance BTC'
+);
+
+export const BUSD_BNB = new Token(
+  ChainId.BNB,
+  '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',
+  18,
+  'BUSD',
+  'BUSD'
+);
+
+export const DAI_BNB = new Token(
+  ChainId.BNB,
+  '0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3',
+  18,
+  'DAI',
+  'DAI'
+);
+
+export const ETH_BNB = new Token(
+  ChainId.BNB,
+  '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',
+  18,
+  'ETH',
+  'ETH'
+);
+
+export const USDC_BNB = new Token(
+  ChainId.BNB,
+  '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',
+  18,
+  'USDC',
+  'USDC'
+);
+
+export const USDT_BNB = new Token(
+  ChainId.BNB,
+  '0x55d398326f99059fF775485246999027B3197955',
+  18,
+  'USDT',
+  'USDT'
+);
+
+// Celo Tokens
+export const CELO = new Token(
+  ChainId.CELO,
+  '0x471EcE3750Da237f93B8E339c536989b8978a438',
+  18,
+  'CELO',
+  'Celo native asset'
+);
+
+export const DAI_CELO = new Token(
+  ChainId.CELO,
+  '0xE4fE50cdD716522A56204352f00AA110F731932d',
+  18,
+  'DAI',
+  'Dai Stablecoin'
+);
+
+export const CUSD_CELO = new Token(
+  ChainId.CELO,
+  '0x765DE816845861e75A25fCA122bb6898B8B1282a',
+  18,
+  'CUSD',
+  'Celo Dollar Stablecoin'
+);
+
+export const CEUR_CELO = new Token(
+  ChainId.CELO,
+  '0xD8763CBa276a3738E6DE85b4b3bF5FDed6D6cA73',
+  18,
+  'CEUR',
+  'Celo Euro Stablecoin'
+);
+
+// Celo Alfajores Tokens
+export const CELO_ALFAJORES = new Token(
+  ChainId.CELO_ALFAJORES,
+  '0xF194afDf50B03e69Bd7D057c1Aa9e10c9954E4C9',
+  18,
+  'CELO',
+  'Celo native asset'
+);
+export const DAI_CELO_ALFAJORES = new Token(
+  ChainId.CELO_ALFAJORES,
+  '0x7d91E51C8F218f7140188A155f5C75388630B6a8',
+  18,
+  'DAI',
+  'Dai Stablecoin'
+);
+
+export const CUSD_CELO_ALFAJORES = new Token(
+  ChainId.CELO_ALFAJORES,
+  '0x874069Fa1Eb16D44d622F2e0Ca25eeA172369bC1',
+  18,
+  'CUSD',
+  'Celo Dollar Stablecoin'
+);
+
+export const CEUR_CELO_ALFAJORES = new Token(
+  ChainId.CELO_ALFAJORES,
+  '0x10c892A6EC43a53E45D0B916B4b7D383B1b78C0F',
+  18,
+  'CEUR',
+  'Celo Euro Stablecoin'
+);
+
+// Avalanche Tokens
+export const DAI_AVAX = new Token(
+  ChainId.AVALANCHE,
+  '0xd586E7F844cEa2F87f50152665BCbc2C279D8d70',
+  18,
+  'DAI.e',
+  'DAI.e Token'
+);
+
+export const USDC_AVAX = new Token(
+  ChainId.AVALANCHE,
+  '0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E',
+  6,
+  'USDC',
+  'USDC Token'
+);
+
+// Base Tokens
+export const USDC_BASE = new Token(
+  ChainId.BASE,
+  '0xd9aAEc86B65D86f6A7B5B1b0c42FFA531710b6CA',
+  6,
+  'USDbC',
+  'USD Base Coin'
+)
+
+// Base Goerli Tokens
+export const USDC_BASE_GOERLI = new Token(
+  ChainId.BASE_GOERLI,
+  '0x853154e2A5604E5C74a2546E2871Ad44932eB92C',
+  6,
+  'USDbC',
+  'USD Base Coin'
+)
+
+// Gnosis Tokens
+export const USDC_ETHEREUM_GNOSIS = new Token(
+  ChainId.GNOSIS,
+  '0xddafbb505ad214d7b80b1f830fccc89b60fb7a83',
+  6,
+  'USDC',
+  'USDC from Ethereum on Gnosis'
+);
+
+export const WXDAI_GNOSIS = new Token(
+  ChainId.GNOSIS,
+  '0xe91d153e0b41518a2ce8dd3d7944fa863463a97d',
+  18,
+  'WXDAI',
+  'Wrapped XDAI on Gnosis'
+);
+
+export const WBTC_GNOSIS = new Token(
+  ChainId.GNOSIS,
+  '0x8e5bbbb09ed1ebde8674cda39a0c169401db4252',
+  8,
+  'WBTC',
+  'Wrapped BTC from Ethereum on Gnosis'
+);
+
+// Moonbeam Tokens
+export const USDC_MOONBEAM = new Token(
+  ChainId.MOONBEAM,
+  '0x818ec0A7Fe18Ff94269904fCED6AE3DaE6d6dC0b',
+  6,
+  'USDC',
+  'USD Coin bridged using Multichain'
+);
+
+export const WGLMR_MOONBEAM = new Token(
+  ChainId.MOONBEAM,
+  '0xAcc15dC74880C9944775448304B263D191c6077F',
+  18,
+  'WGLMR',
+  'Wrapped GLMR'
+);
+
+export const DAI_MOONBEAM = new Token(
+  ChainId.MOONBEAM,
+  '0x818ec0A7Fe18Ff94269904fCED6AE3DaE6d6dC0b',
+  6,
+  'DAI',
+  'Dai on moonbeam bridged using Multichain'
+);
+
+export const WBTC_MOONBEAM = new Token(
+  ChainId.MOONBEAM,
+  '0x922D641a426DcFFaeF11680e5358F34d97d112E1',
+  8,
+  'WBTC',
+  'Wrapped BTC bridged using Multichain'
+);
+
+export class TokenProvider implements ITokenProvider {
+  constructor(
+    private chainId: ChainId,
+    protected multicall2Provider: IMulticallProvider
+  ) {}
+
+  private async getTokenSymbol(
+    addresses: string[],
+    providerConfig?: ProviderConfig
+  ): Promise<{
+    result: {
+      blockNumber: BigNumber;
+      results: Result<[string]>[];
+    };
+    isBytes32: boolean;
+  }> {
+    let result;
+    let isBytes32 = false;
+
+    try {
+      result =
+        await this.multicall2Provider.callSameFunctionOnMultipleContracts<
+          undefined,
+          [string]
+        >({
+          addresses,
+          contractInterface: IERC20Metadata__factory.createInterface(),
+          functionName: 'symbol',
+          providerConfig,
+        });
+    } catch (error) {
+      log.error(
+        { addresses },
+        `TokenProvider.getTokenSymbol[string] failed with error ${error}. Trying with bytes32.`
+      );
+
+      const bytes32Interface = new Interface([
+        {
+          inputs: [],
+          name: 'symbol',
+          outputs: [
+            {
+              internalType: 'bytes32',
+              name: '',
+              type: 'bytes32',
+            },
+          ],
+          stateMutability: 'view',
+          type: 'function',
+        },
+      ]);
+
+      try {
+        result =
+          await this.multicall2Provider.callSameFunctionOnMultipleContracts<
+            undefined,
+            [string]
+          >({
+            addresses,
+            contractInterface: bytes32Interface,
+            functionName: 'symbol',
+            providerConfig,
+          });
+        isBytes32 = true;
+      } catch (error) {
+        log.fatal(
+          { addresses },
+          `TokenProvider.getTokenSymbol[bytes32] failed with error ${error}.`
+        );
+
+        throw new Error(
+          '[TokenProvider.getTokenSymbol] Impossible to fetch token symbol.'
+        );
+      }
+    }
+
+    return { result, isBytes32 };
+  }
+
+  private async getTokenDecimals(
+    addresses: string[],
+    providerConfig?: ProviderConfig
+  ) {
+    return this.multicall2Provider.callSameFunctionOnMultipleContracts<
+      undefined,
+      [number]
+    >({
+      addresses,
+      contractInterface: IERC20Metadata__factory.createInterface(),
+      functionName: 'decimals',
+      providerConfig,
+    });
+  }
+
+  public async getTokens(
+    _addresses: string[],
+    providerConfig?: ProviderConfig
+  ): Promise<TokenAccessor> {
+    const addressToToken: { [address: string]: Token } = {};
+    const symbolToToken: { [symbol: string]: Token } = {};
+
+    const addresses = _(_addresses)
+      .map((address) => address.toLowerCase())
+      .uniq()
+      .value();
+
+    if (addresses.length > 0) {
+      const [symbolsResult, decimalsResult] = await Promise.all([
+        this.getTokenSymbol(addresses, providerConfig),
+        this.getTokenDecimals(addresses, providerConfig),
+      ]);
+
+      const isBytes32 = symbolsResult.isBytes32;
+      const { results: symbols } = symbolsResult.result;
+      const { results: decimals } = decimalsResult;
+
+      for (let i = 0; i < addresses.length; i++) {
+        const address = addresses[i]!;
+
+        const symbolResult = symbols[i];
+        const decimalResult = decimals[i];
+
+        if (!symbolResult?.success || !decimalResult?.success) {
+          log.info(
+            {
+              symbolResult,
+              decimalResult,
+            },
+            `Dropping token with address ${address} as symbol or decimal are invalid`
+          );
+          continue;
+        }
+
+        const symbol = isBytes32
+          ? parseBytes32String(symbolResult.result[0]!)
+          : symbolResult.result[0]!;
+        const decimal = decimalResult.result[0]!;
+
+        addressToToken[address.toLowerCase()] = new Token(
+          this.chainId,
+          address,
+          decimal,
+          symbol
+        );
+        symbolToToken[symbol.toLowerCase()] =
+          addressToToken[address.toLowerCase()]!;
+      }
+
+      log.info(
+        `Got token symbol and decimals for ${
+          Object.values(addressToToken).length
+        } out of ${addresses.length} tokens on-chain ${
+          providerConfig ? `as of: ${providerConfig?.blockNumber}` : ''
+        }`
+      );
+    }
+
+    return {
+      getTokenByAddress: (address: string): Token | undefined => {
+        return addressToToken[address.toLowerCase()];
+      },
+      getTokenBySymbol: (symbol: string): Token | undefined => {
+        return symbolToToken[symbol.toLowerCase()];
+      },
+      getAllTokens: (): Token[] => {
+        return Object.values(addressToToken);
+      },
+    };
+  }
+}
+
+export const DAI_ON = (chainId: ChainId): Token => {
+  switch (chainId) {
+    case ChainId.MAINNET:
+      return DAI_MAINNET;
+    case ChainId.GOERLI:
+      return DAI_GOERLI;
+    case ChainId.SEPOLIA:
+      return DAI_SEPOLIA;
+    case ChainId.OPTIMISM:
+      return DAI_OPTIMISM;
+    case ChainId.OPTIMISM_GOERLI:
+      return DAI_OPTIMISM_GOERLI;
+    case ChainId.ARBITRUM_ONE:
+      return DAI_ARBITRUM;
+    case ChainId.ARBITRUM_GOERLI:
+      return DAI_ARBITRUM_GOERLI;
+    case ChainId.POLYGON:
+      return DAI_POLYGON;
+    case ChainId.POLYGON_MUMBAI:
+      return DAI_POLYGON_MUMBAI;
+    case ChainId.CELO:
+      return DAI_CELO;
+    case ChainId.CELO_ALFAJORES:
+      return DAI_CELO_ALFAJORES;
+    case ChainId.MOONBEAM:
+      return DAI_MOONBEAM;
+    case ChainId.BNB:
+      return DAI_BNB;
+    case ChainId.AVALANCHE:
+      return DAI_AVAX;
+    default:
+      throw new Error(`Chain id: ${chainId} not supported`);
+  }
+};
+
+export const USDT_ON = (chainId: ChainId): Token => {
+  switch (chainId) {
+    case ChainId.MAINNET:
+      return USDT_MAINNET;
+    case ChainId.GOERLI:
+      return USDT_GOERLI;
+    case ChainId.OPTIMISM:
+      return USDT_OPTIMISM;
+    case ChainId.OPTIMISM_GOERLI:
+      return USDT_OPTIMISM_GOERLI;
+    case ChainId.ARBITRUM_ONE:
+      return USDT_ARBITRUM;
+    case ChainId.BNB:
+      return USDT_BNB;
+    default:
+      throw new Error(`Chain id: ${chainId} not supported`);
+  }
+};
+
+export const USDC_ON = (chainId: ChainId): Token => {
+  switch (chainId) {
+    case ChainId.MAINNET:
+      return USDC_MAINNET;
+    case ChainId.GOERLI:
+      return USDC_GOERLI;
+    case ChainId.SEPOLIA:
+      return USDC_SEPOLIA;
+    case ChainId.OPTIMISM:
+      return USDC_OPTIMISM;
+    case ChainId.OPTIMISM_GOERLI:
+      return USDC_OPTIMISM_GOERLI;
+    case ChainId.ARBITRUM_ONE:
+      return USDC_ARBITRUM;
+    case ChainId.ARBITRUM_GOERLI:
+      return USDC_ARBITRUM_GOERLI;
+    case ChainId.POLYGON:
+      return USDC_POLYGON;
+    case ChainId.POLYGON_MUMBAI:
+      return USDC_POLYGON_MUMBAI;
+    case ChainId.GNOSIS:
+      return USDC_ETHEREUM_GNOSIS;
+    case ChainId.MOONBEAM:
+      return USDC_MOONBEAM;
+    case ChainId.BNB:
+      return USDC_BNB;
+    case ChainId.AVALANCHE:
+      return USDC_AVAX;
+    case ChainId.BASE:
+      return USDC_BASE;
+    case ChainId.BASE_GOERLI:
+      return USDC_BASE_GOERLI;
+    default:
+      throw new Error(`Chain id: ${chainId} not supported`);
+  }
+};
+
+export const WNATIVE_ON = (chainId: ChainId): Token => {
+  return WRAPPED_NATIVE_CURRENCY[chainId];
+};
diff --git a/lib/sor/providers/token-validator-provider.ts b/lib/sor/providers/token-validator-provider.ts
new file mode 100644
index 0000000..ec446dd
--- /dev/null
+++ b/lib/sor/providers/token-validator-provider.ts
@@ -0,0 +1,167 @@
+import { ChainId, Token } from '@uniswap/sdk-core';
+import _ from 'lodash';
+
+import { ITokenValidator__factory } from '../types/other/factories/ITokenValidator__factory';
+import { log, WRAPPED_NATIVE_CURRENCY } from '../util';
+
+import { ICache } from './cache';
+import { IMulticallProvider } from './multicall-provider';
+import { ProviderConfig } from './provider';
+
+const DEFAULT_ALLOWLIST = new Set<string>([
+  // RYOSHI. Does not allow transfers between contracts so fails validation.
+  '0x777E2ae845272a2F540ebf6a3D03734A5a8f618e'.toLowerCase(),
+]);
+
+export enum TokenValidationResult {
+  UNKN = 0,
+  FOT = 1,
+  STF = 2,
+}
+
+export interface TokenValidationResults {
+  getValidationByToken(token: Token): TokenValidationResult | undefined;
+}
+
+const TOKEN_VALIDATOR_ADDRESS = '0xb5ee1690b7dcc7859771148d0889be838fe108e0';
+const AMOUNT_TO_FLASH_BORROW = '1000';
+const GAS_LIMIT_PER_VALIDATE = 1_000_000;
+
+/**
+ * Provider for getting token data.
+ *
+ * @export
+ * @interface ITokenValidatorProvider
+ */
+export interface ITokenValidatorProvider {
+  /**
+   * Gets the token at each address. Any addresses that are not valid ERC-20 are ignored.
+   *
+   * @param addresses The token addresses to get.
+   * @param [providerConfig] The provider config.
+   * @returns A token accessor with methods for accessing the tokens.
+   */
+  validateTokens(
+    tokens: Token[],
+    providerConfig?: ProviderConfig
+  ): Promise<TokenValidationResults>;
+}
+
+export class TokenValidatorProvider implements ITokenValidatorProvider {
+  private CACHE_KEY = (chainId: ChainId, address: string) =>
+    `token-${chainId}-${address}`;
+
+  private BASES: string[];
+
+  constructor(
+    protected chainId: ChainId,
+    protected multicall2Provider: IMulticallProvider,
+    private tokenValidationCache: ICache<TokenValidationResult>,
+    private tokenValidatorAddress = TOKEN_VALIDATOR_ADDRESS,
+    private gasLimitPerCall = GAS_LIMIT_PER_VALIDATE,
+    private amountToFlashBorrow = AMOUNT_TO_FLASH_BORROW,
+    private allowList = DEFAULT_ALLOWLIST
+  ) {
+    this.BASES = [WRAPPED_NATIVE_CURRENCY[this.chainId]!.address];
+  }
+
+  public async validateTokens(
+    tokens: Token[],
+    providerConfig?: ProviderConfig
+  ): Promise<TokenValidationResults> {
+    const tokenAddressToToken = _.keyBy(tokens, 'address');
+    const addressesRaw = _(tokens)
+      .map((token) => token.address)
+      .uniq()
+      .value();
+
+    const addresses: string[] = [];
+    const tokenToResult: { [tokenAddress: string]: TokenValidationResult } = {};
+
+    // Check if we have cached token validation results for any tokens.
+    for (const address of addressesRaw) {
+      if (
+        await this.tokenValidationCache.has(
+          this.CACHE_KEY(this.chainId, address)
+        )
+      ) {
+        tokenToResult[address.toLowerCase()] =
+          (await this.tokenValidationCache.get(
+            this.CACHE_KEY(this.chainId, address)
+          ))!;
+      } else {
+        addresses.push(address);
+      }
+    }
+
+    log.info(
+      `Got token validation results for ${
+        addressesRaw.length - addresses.length
+      } tokens from cache. Getting ${addresses.length} on-chain.`
+    );
+
+    const functionParams = _(addresses)
+      .map((address) => [address, this.BASES, this.amountToFlashBorrow])
+      .value() as [string, string[], string][];
+
+    // We use the validate function instead of batchValidate to avoid poison pill problem.
+    // One token that consumes too much gas could cause the entire batch to fail.
+    const multicallResult =
+      await this.multicall2Provider.callSameFunctionOnContractWithMultipleParams<
+        [string, string[], string], // address, base token addresses, amount to borrow
+        [number]
+      >({
+        address: this.tokenValidatorAddress,
+        contractInterface: ITokenValidator__factory.createInterface(),
+        functionName: 'validate',
+        functionParams: functionParams,
+        providerConfig,
+        additionalConfig: {
+          gasLimitPerCallOverride: this.gasLimitPerCall,
+        },
+      });
+
+    for (let i = 0; i < multicallResult.results.length; i++) {
+      const resultWrapper = multicallResult.results[i]!;
+      const tokenAddress = addresses[i]!;
+      const token = tokenAddressToToken[tokenAddress]!;
+
+      if (this.allowList.has(token.address.toLowerCase())) {
+        tokenToResult[token.address.toLowerCase()] = TokenValidationResult.UNKN;
+
+        await this.tokenValidationCache.set(
+          this.CACHE_KEY(this.chainId, token.address.toLowerCase()),
+          tokenToResult[token.address.toLowerCase()]!
+        );
+
+        continue;
+      }
+
+      // Could happen if the tokens transfer consumes too much gas so we revert. Just
+      // drop the token in that case.
+      if (!resultWrapper.success) {
+        log.info(
+          { result: resultWrapper },
+          `Failed to validate token ${token.symbol}`
+        );
+
+        continue;
+      }
+
+      const validationResult = resultWrapper.result[0]!;
+
+      tokenToResult[token.address.toLowerCase()] =
+        validationResult as TokenValidationResult;
+
+      await this.tokenValidationCache.set(
+        this.CACHE_KEY(this.chainId, token.address.toLowerCase()),
+        tokenToResult[token.address.toLowerCase()]!
+      );
+    }
+
+    return {
+      getValidationByToken: (token: Token) =>
+        tokenToResult[token.address.toLowerCase()],
+    };
+  }
+}
diff --git a/lib/sor/providers/uri-subgraph-provider.ts b/lib/sor/providers/uri-subgraph-provider.ts
new file mode 100644
index 0000000..fd160b2
--- /dev/null
+++ b/lib/sor/providers/uri-subgraph-provider.ts
@@ -0,0 +1,89 @@
+import { ChainId } from '@uniswap/sdk-core';
+import retry from 'async-retry';
+import Timeout from 'await-timeout';
+import axios from 'axios';
+
+import { log } from '../util/log';
+
+import { V2SubgraphPool } from './v2/subgraph-provider';
+import { V3SubgraphPool } from './v3/subgraph-provider';
+
+/**
+ * Gets subgraph pools from a URI. The URI shoudl contain a JSON
+ * stringified array of V2SubgraphPool objects or V3SubgraphPool
+ * objects.
+ *
+ * @export
+ * @class URISubgraphProvider
+ * @template TSubgraphPool
+ */
+export class URISubgraphProvider<
+  TSubgraphPool extends V2SubgraphPool | V3SubgraphPool
+> {
+  constructor(
+    private chainId: ChainId,
+    private uri: string,
+    private timeout = 6000,
+    private retries = 2
+  ) {}
+
+  public async getPools(): Promise<TSubgraphPool[]> {
+    log.info(
+      { uri: this.uri },
+      `About to get subgraph pools from URI ${this.uri}`
+    );
+
+    let allPools: TSubgraphPool[] = [];
+
+    await retry(
+      async () => {
+        const timeout = new Timeout();
+        const timerPromise = timeout.set(this.timeout).then(() => {
+          throw new Error(
+            `Timed out getting pools from subgraph: ${this.timeout}`
+          );
+        });
+
+        let response;
+
+        /* eslint-disable no-useless-catch */
+        try {
+          response = await Promise.race([axios.get(this.uri), timerPromise]);
+        } catch (err) {
+          throw err;
+        } finally {
+          timeout.clear();
+        }
+        /* eslint-enable no-useless-catch */
+
+        const { data: poolsBuffer, status } = response;
+
+        if (status != 200) {
+          log.error({ response }, `Unabled to get pools from ${this.uri}.`);
+
+          throw new Error(`Unable to get pools from ${this.uri}`);
+        }
+
+        const pools = poolsBuffer as TSubgraphPool[];
+
+        log.info(
+          { uri: this.uri, chain: this.chainId },
+          `Got subgraph pools from uri. Num: ${pools.length}`
+        );
+
+        allPools = pools;
+      },
+      {
+        retries: this.retries,
+        onRetry: (err, retry) => {
+          log.info(
+            { err },
+            `Failed to get pools from uri ${this.uri}. Retry attempt: ${retry}`
+          );
+        },
+      }
+    );
+
+    return allPools;
+  }
+}
diff --git a/lib/sor/providers/v2/caching-pool-provider.ts b/lib/sor/providers/v2/caching-pool-provider.ts
new file mode 100644
index 0000000..b4f0881
--- /dev/null
+++ b/lib/sor/providers/v2/caching-pool-provider.ts
@@ -0,0 +1,129 @@
+import { ChainId, Token } from '@uniswap/sdk-core';
+import { Pair } from '@uniswap/v2-sdk';
+import _ from 'lodash';
+
+import { log } from '../../util/log';
+
+import { ICache } from './../cache';
+import { ProviderConfig } from './../provider';
+import { IV2PoolProvider, V2PoolAccessor } from './pool-provider';
+
+/**
+ * Provider for getting V2 pools, with functionality for caching the results per block.
+ *
+ * @export
+ * @class CachingV2PoolProvider
+ */
+export class CachingV2PoolProvider implements IV2PoolProvider {
+  private POOL_KEY = (chainId: ChainId, address: string) =>
+    `pool-${chainId}-${address}`;
+
+  /**
+   * Creates an instance of CachingV3PoolProvider.
+   * @param chainId The chain id to use.
+   * @param poolProvider The provider to use to get the pools when not in the cache.
+   * @param cache Cache instance to hold cached pools.
+   */
+  constructor(
+    protected chainId: ChainId,
+    protected poolProvider: IV2PoolProvider,
+    // Cache is block aware. For V2 pools we need to use the current blocks reserves values since
+    // we compute quotes off-chain.
+    // If no block is specified in the call to getPools we just return whatever is in the cache.
+    private cache: ICache<{ pair: Pair; block?: number }>
+  ) {}
+
+  public async getPools(
+    tokenPairs: [Token, Token][],
+    providerConfig?: ProviderConfig
+  ): Promise<V2PoolAccessor> {
+    const poolAddressSet: Set<string> = new Set<string>();
+    const poolsToGetTokenPairs: Array<[Token, Token]> = [];
+    const poolsToGetAddresses: string[] = [];
+    const poolAddressToPool: { [poolAddress: string]: Pair } = {};
+
+    const blockNumber = await providerConfig?.blockNumber;
+
+    for (const [tokenA, tokenB] of tokenPairs) {
+      const { poolAddress, token0, token1 } = this.getPoolAddress(
+        tokenA,
+        tokenB
+      );
+
+      if (poolAddressSet.has(poolAddress)) {
+        continue;
+      }
+
+      poolAddressSet.add(poolAddress);
+
+      const cachedPool = await this.cache.get(
+        this.POOL_KEY(this.chainId, poolAddress)
+      );
+
+      if (cachedPool) {
+        // If a block was specified by the caller, ensure that the result in our cache matches the
+        // expected block number. If a block number is not specified, just return whatever is in the
+        // cache.
+        if (!blockNumber || (blockNumber && cachedPool.block == blockNumber)) {
+          poolAddressToPool[poolAddress] = cachedPool.pair;
+          continue;
+        }
+      }
+
+      poolsToGetTokenPairs.push([token0, token1]);
+      poolsToGetAddresses.push(poolAddress);
+    }
+
+    log.info(
+      {
+        poolsFound: _.map(
+          Object.values(poolAddressToPool),
+          (p) => p.token0.symbol + ' ' + p.token1.symbol
+        ),
+        poolsToGetTokenPairs: _.map(
+          poolsToGetTokenPairs,
+          (t) => t[0].symbol + ' ' + t[1].symbol
+        ),
+      },
+      `Found ${
+        Object.keys(poolAddressToPool).length
+      } V2 pools already in local cache for block ${blockNumber}. About to get reserves for ${
+        poolsToGetTokenPairs.length
+      } pools.`
+    );
+
+    if (poolsToGetAddresses.length > 0) {
+      const poolAccessor = await this.poolProvider.getPools(
+        poolsToGetTokenPairs,
+        providerConfig
+      );
+      for (const address of poolsToGetAddresses) {
+        const pool = poolAccessor.getPoolByAddress(address);
+        if (pool) {
+          poolAddressToPool[address] = pool;
+          await this.cache.set(this.POOL_KEY(this.chainId, address), {
+            pair: pool,
+            block: blockNumber,
+          });
+        }
+      }
+    }
+
+    return {
+      getPool: (tokenA: Token, tokenB: Token): Pair | undefined => {
+        const { poolAddress } = this.getPoolAddress(tokenA, tokenB);
+        return poolAddressToPool[poolAddress];
+      },
+      getPoolByAddress: (address: string): Pair | undefined =>
+        poolAddressToPool[address],
+      getAllPools: (): Pair[] => Object.values(poolAddressToPool),
+    };
+  }
+
+  public getPoolAddress(
+    tokenA: Token,
+    tokenB: Token
+  ): { poolAddress: string; token0: Token; token1: Token } {
+    return this.poolProvider.getPoolAddress(tokenA, tokenB);
+  }
+}
diff --git a/lib/sor/providers/v2/caching-subgraph-provider.ts b/lib/sor/providers/v2/caching-subgraph-provider.ts
new file mode 100644
index 0000000..3340d41
--- /dev/null
+++ b/lib/sor/providers/v2/caching-subgraph-provider.ts
@@ -0,0 +1,40 @@
+import { ChainId } from '@uniswap/sdk-core';
+
+import { ICache } from './../cache';
+import { IV2SubgraphProvider, V2SubgraphPool } from './subgraph-provider';
+
+/**
+ * Provider for getting V2 pools, with functionality for caching the results.
+ *
+ * @export
+ * @class CachingV2SubgraphProvider
+ */
+export class CachingV2SubgraphProvider implements IV2SubgraphProvider {
+  private SUBGRAPH_KEY = (chainId: ChainId) => `subgraph-pools-v2-${chainId}`;
+
+  /**
+   * Creates an instance of CachingV2SubgraphProvider.
+   * @param chainId The chain id to use.
+   * @param subgraphProvider The provider to use to get the subgraph pools when not in the cache.
+   * @param cache Cache instance to hold cached pools.
+   */
+  constructor(
+    private chainId: ChainId,
+    protected subgraphProvider: IV2SubgraphProvider,
+    private cache: ICache<V2SubgraphPool[]>
+  ) {}
+
+  public async getPools(): Promise<V2SubgraphPool[]> {
+    const cachedPools = await this.cache.get(this.SUBGRAPH_KEY(this.chainId));
+
+    if (cachedPools) {
+      return cachedPools;
+    }
+
+    const pools = await this.subgraphProvider.getPools();
+
+    await this.cache.set(this.SUBGRAPH_KEY(this.chainId), pools);
+
+    return pools;
+  }
+}
diff --git a/lib/sor/providers/v2/pool-provider.ts b/lib/sor/providers/v2/pool-provider.ts
new file mode 100644
index 0000000..dfc70b9
--- /dev/null
+++ b/lib/sor/providers/v2/pool-provider.ts
@@ -0,0 +1,231 @@
+import { BigNumber } from '@ethersproject/bignumber';
+import { ChainId, Token } from '@uniswap/sdk-core';
+import { Pair } from '@uniswap/v2-sdk';
+import retry, { Options as RetryOptions } from 'async-retry';
+import _ from 'lodash';
+
+import { IUniswapV2Pair__factory } from '../../types/v2/factories/IUniswapV2Pair__factory';
+import { CurrencyAmount, ID_TO_NETWORK_NAME, metric, MetricLoggerUnit } from '../../util';
+import { log } from '../../util/log';
+import { poolToString } from '../../util/routes';
+import { IMulticallProvider, Result } from '../multicall-provider';
+import { ProviderConfig } from '../provider';
+
+type IReserves = {
+  reserve0: BigNumber;
+  reserve1: BigNumber;
+  blockTimestampLast: number;
+};
+
+/**
+ * Provider for getting V2 pools.
+ *
+ * @export
+ * @interface IV2PoolProvider
+ */
+export interface IV2PoolProvider {
+  /**
+   * Gets the pools for the specified token pairs.
+   *
+   * @param tokenPairs The token pairs to get.
+   * @param [providerConfig] The provider config.
+   * @returns A pool accessor with methods for accessing the pools.
+   */
+  getPools(
+    tokenPairs: [Token, Token][],
+    providerConfig?: ProviderConfig
+  ): Promise<V2PoolAccessor>;
+
+  /**
+   * Gets the pool address for the specified token pair.
+   *
+   * @param tokenA Token A in the pool.
+   * @param tokenB Token B in the pool.
+   * @returns The pool address and the two tokens.
+   */
+  getPoolAddress(
+    tokenA: Token,
+    tokenB: Token
+  ): { poolAddress: string; token0: Token; token1: Token };
+}
+
+export type V2PoolAccessor = {
+  getPool: (tokenA: Token, tokenB: Token) => Pair | undefined;
+  getPoolByAddress: (address: string) => Pair | undefined;
+  getAllPools: () => Pair[];
+};
+
+export type V2PoolRetryOptions = RetryOptions;
+
+export class V2PoolProvider implements IV2PoolProvider {
+  // Computing pool addresses is slow as it requires hashing, encoding etc.
+  // Addresses never change so can always be cached.
+  private POOL_ADDRESS_CACHE: { [key: string]: string } = {};
+
+  /**
+   * Creates an instance of V2PoolProvider.
+   * @param chainId The chain id to use.
+   * @param multicall2Provider The multicall provider to use to get the pools.
+   * @param retryOptions The retry options for each call to the multicall.
+   */
+  constructor(
+    protected chainId: ChainId,
+    protected multicall2Provider: IMulticallProvider,
+    protected retryOptions: V2PoolRetryOptions = {
+      retries: 2,
+      minTimeout: 50,
+      maxTimeout: 500,
+    }
+  ) {
+  }
+
+  public async getPools(
+    tokenPairs: [Token, Token][],
+    providerConfig?: ProviderConfig
+  ): Promise<V2PoolAccessor> {
+    const poolAddressSet: Set<string> = new Set<string>();
+    const sortedTokenPairs: Array<[Token, Token]> = [];
+    const sortedPoolAddresses: string[] = [];
+
+    for (const tokenPair of tokenPairs) {
+      const [tokenA, tokenB] = tokenPair;
+
+      const { poolAddress, token0, token1 } = this.getPoolAddress(
+        tokenA,
+        tokenB
+      );
+
+      if (poolAddressSet.has(poolAddress)) {
+        continue;
+      }
+
+      poolAddressSet.add(poolAddress);
+      sortedTokenPairs.push([token0, token1]);
+      sortedPoolAddresses.push(poolAddress);
+    }
+
+    log.debug(
+      `getPools called with ${tokenPairs.length} token pairs. Deduped down to ${poolAddressSet.size}`
+    );
+
+    metric.putMetric('V2_RPC_POOL_RPC_CALL', 1, MetricLoggerUnit.None);
+    metric.putMetric('V2GetReservesBatchSize', sortedPoolAddresses.length, MetricLoggerUnit.Count);
+    metric.putMetric(
+      `V2GetReservesBatchSize_${ID_TO_NETWORK_NAME(this.chainId)}`,
+      sortedPoolAddresses.length,
+      MetricLoggerUnit.Count
+    );
+
+    const reservesResults = await this.getPoolsData<IReserves>(
+      sortedPoolAddresses,
+      'getReserves',
+      providerConfig
+    );
+
+    log.info(
+      `Got reserves for ${poolAddressSet.size} pools ${
+        providerConfig?.blockNumber
+          ? `as of block: ${await providerConfig?.blockNumber}.`
+          : ``
+      }`
+    );
+
+    const poolAddressToPool: { [poolAddress: string]: Pair } = {};
+
+    const invalidPools: [Token, Token][] = [];
+
+    for (let i = 0; i < sortedPoolAddresses.length; i++) {
+      const reservesResult = reservesResults[i]!;
+
+      if (!reservesResult?.success) {
+        const [token0, token1] = sortedTokenPairs[i]!;
+        invalidPools.push([token0, token1]);
+
+        continue;
+      }
+
+      const [token0, token1] = sortedTokenPairs[i]!;
+      const { reserve0, reserve1 } = reservesResult.result;
+
+      const pool = new Pair(
+        CurrencyAmount.fromRawAmount(token0, reserve0.toString()),
+        CurrencyAmount.fromRawAmount(token1, reserve1.toString())
+      );
+
+      const poolAddress = sortedPoolAddresses[i]!;
+
+      poolAddressToPool[poolAddress] = pool;
+    }
+
+    if (invalidPools.length > 0) {
+      log.info(
+        {
+          invalidPools: _.map(
+            invalidPools,
+            ([token0, token1]) => `${token0.symbol}/${token1.symbol}`
+          ),
+        },
+        `${invalidPools.length} pools invalid after checking their slot0 and liquidity results. Dropping.`
+      );
+    }
+
+    const poolStrs = _.map(Object.values(poolAddressToPool), poolToString);
+
+    log.debug({ poolStrs }, `Found ${poolStrs.length} valid pools`);
+
+    return {
+      getPool: (tokenA: Token, tokenB: Token): Pair | undefined => {
+        const { poolAddress } = this.getPoolAddress(tokenA, tokenB);
+        return poolAddressToPool[poolAddress];
+      },
+      getPoolByAddress: (address: string): Pair | undefined =>
+        poolAddressToPool[address],
+      getAllPools: (): Pair[] => Object.values(poolAddressToPool),
+    };
+  }
+
+  public getPoolAddress(
+    tokenA: Token,
+    tokenB: Token
+  ): { poolAddress: string; token0: Token; token1: Token } {
+    const [token0, token1] = tokenA.sortsBefore(tokenB)
+      ? [tokenA, tokenB]
+      : [tokenB, tokenA];
+
+    const cacheKey = `${this.chainId}/${token0.address}/${token1.address}`;
+
+    const cachedAddress = this.POOL_ADDRESS_CACHE[cacheKey];
+
+    if (cachedAddress) {
+      return { poolAddress: cachedAddress, token0, token1 };
+    }
+
+    const poolAddress = Pair.getAddress(token0, token1);
+
+    this.POOL_ADDRESS_CACHE[cacheKey] = poolAddress;
+
+    return { poolAddress, token0, token1 };
+  }
+
+  private async getPoolsData<TReturn>(
+    poolAddresses: string[],
+    functionName: string,
+    providerConfig?: ProviderConfig
+  ): Promise<Result<TReturn>[]> {
+    const { results, blockNumber } = await retry(async () => {
+      return this.multicall2Provider.callSameFunctionOnMultipleContracts<
+        undefined,
+        TReturn
+      >({
+        addresses: poolAddresses,
+        contractInterface: IUniswapV2Pair__factory.createInterface(),
+        functionName: functionName,
+        providerConfig,
+      });
+    }, this.retryOptions);
+
+    log.debug(`Pool data fetched as of block ${blockNumber}`);
+
+    return results;
+  }
+}
diff --git a/lib/sor/providers/v2/quote-provider.ts b/lib/sor/providers/v2/quote-provider.ts
new file mode 100644
index 0000000..bf2f2bd
--- /dev/null
+++ b/lib/sor/providers/v2/quote-provider.ts
@@ -0,0 +1,136 @@
+import { BigNumber } from '@ethersproject/bignumber';
+import { TradeType } from '@uniswap/sdk-core';
+import {
+  InsufficientInputAmountError,
+  InsufficientReservesError,
+} from '@uniswap/v2-sdk';
+
+import { V2Route } from '../../routers/router';
+import { CurrencyAmount } from '../../util/amounts';
+import { log } from '../../util/log';
+import { routeToString } from '../../util/routes';
+
+// Quotes can be null (e.g. pool did not have enough liquidity).
+export type V2AmountQuote = {
+  amount: CurrencyAmount;
+  quote: BigNumber | null;
+};
+
+export type V2RouteWithQuotes = [V2Route, V2AmountQuote[]];
+
+export interface IV2QuoteProvider {
+  getQuotesManyExactIn(
+    amountIns: CurrencyAmount[],
+    routes: V2Route[]
+  ): Promise<{ routesWithQuotes: V2RouteWithQuotes[] }>;
+
+  getQuotesManyExactOut(
+    amountOuts: CurrencyAmount[],
+    routes: V2Route[]
+  ): Promise<{ routesWithQuotes: V2RouteWithQuotes[] }>;
+}
+
+/**
+ * Computes quotes for V2 off-chain. Quotes are computed using the balances
+ * of the pools within each route provided.
+ *
+ * @export
+ * @class V2QuoteProvider
+ */
+export class V2QuoteProvider implements IV2QuoteProvider {
+  /* eslint-disable @typescript-eslint/no-empty-function */
+  constructor() {}
+  /* eslint-enable @typescript-eslint/no-empty-function */
+
+  public async getQuotesManyExactIn(
+    amountIns: CurrencyAmount[],
+    routes: V2Route[]
+  ): Promise<{ routesWithQuotes: V2RouteWithQuotes[] }> {
+    return this.getQuotes(amountIns, routes, TradeType.EXACT_INPUT);
+  }
+
+  public async getQuotesManyExactOut(
+    amountOuts: CurrencyAmount[],
+    routes: V2Route[]
+  ): Promise<{ routesWithQuotes: V2RouteWithQuotes[] }> {
+    return this.getQuotes(amountOuts, routes, TradeType.EXACT_OUTPUT);
+  }
+
+  private async getQuotes(
+    amounts: CurrencyAmount[],
+    routes: V2Route[],
+    tradeType: TradeType
+  ): Promise<{ routesWithQuotes: V2RouteWithQuotes[] }> {
+    const routesWithQuotes: V2RouteWithQuotes[] = [];
+
+    const debugStrs: string[] = [];
+    for (const route of routes) {
+      const amountQuotes: V2AmountQuote[] = [];
+
+      let insufficientInputAmountErrorCount = 0;
+      let insufficientReservesErrorCount = 0;
+      for (const amount of amounts) {
+        try {
+          if (tradeType == TradeType.EXACT_INPUT) {
+            let outputAmount = amount.wrapped;
+
+            for (const pair of route.pairs) {
+              const [outputAmountNew] = pair.getOutputAmount(outputAmount);
+              outputAmount = outputAmountNew;
+            }
+
+            amountQuotes.push({
+              amount,
+              quote: BigNumber.from(outputAmount.quotient.toString()),
+            });
+          } else {
+            let inputAmount = amount.wrapped;
+
+            for (let i = route.pairs.length - 1; i >= 0; i--) {
+              const pair = route.pairs[i]!;
+              [inputAmount] = pair.getInputAmount(inputAmount);
+            }
+
+            amountQuotes.push({
+              amount,
+              quote: BigNumber.from(inputAmount.quotient.toString()),
+            });
+          }
+        } catch (err) {
+          // Can fail to get quotes, e.g. throws InsufficientReservesError or InsufficientInputAmountError.
+          if (err instanceof InsufficientInputAmountError) {
+            insufficientInputAmountErrorCount =
+              insufficientInputAmountErrorCount + 1;
+            amountQuotes.push({ amount, quote: null });
+          } else if (err instanceof InsufficientReservesError) {
+            insufficientReservesErrorCount = insufficientReservesErrorCount + 1;
+            amountQuotes.push({ amount, quote: null });
+          } else {
+            throw err;
+          }
+        }
+      }
+
+      if (
+        insufficientInputAmountErrorCount > 0 ||
+        insufficientReservesErrorCount > 0
+      ) {
+        debugStrs.push(
+          `${[
+            routeToString(route),
+          ]} Input: ${insufficientInputAmountErrorCount} Reserves: ${insufficientReservesErrorCount} }`
+        );
+      }
+
+      routesWithQuotes.push([route, amountQuotes]);
+    }
+
+    if (debugStrs.length > 0) {
+      log.info({ debugStrs }, `Failed quotes for V2 routes`);
+    }
+
+    return {
+      routesWithQuotes,
+    };
+  }
+}
diff --git a/lib/sor/providers/v2/static-subgraph-provider.ts b/lib/sor/providers/v2/static-subgraph-provider.ts
new file mode 100644
index 0000000..ff102e2
--- /dev/null
+++ b/lib/sor/providers/v2/static-subgraph-provider.ts
@@ -0,0 +1,126 @@
+import { ChainId, Token } from '@uniswap/sdk-core';
+import { Pair } from '@uniswap/v2-sdk';
+import _ from 'lodash';
+
+import { WRAPPED_NATIVE_CURRENCY } from '../../util/chains';
+import { log } from '../../util/log';
+import {
+  DAI_MAINNET,
+  USDC_MAINNET,
+  USDT_MAINNET,
+  WBTC_MAINNET
+} from '../token-provider';
+
+import { IV2SubgraphProvider, V2SubgraphPool } from './subgraph-provider';
+
+type ChainTokenList = {
+  readonly [chainId in ChainId]: Token[];
+};
+
+const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {
+  [ChainId.MAINNET]: [
+    WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET]!,
+    DAI_MAINNET,
+    USDC_MAINNET,
+    USDT_MAINNET,
+    WBTC_MAINNET
+  ],
+  [ChainId.GOERLI]: [WRAPPED_NATIVE_CURRENCY[ChainId.GOERLI]!],
+  [ChainId.SEPOLIA]: [WRAPPED_NATIVE_CURRENCY[ChainId.SEPOLIA]!],
+  //v2 not deployed on [optimism, arbitrum, polygon, celo, gnosis, moonbeam, bnb, avalanche] and their testnets
+  [ChainId.OPTIMISM]: [],
+  [ChainId.ARBITRUM_ONE]: [],
+  [ChainId.ARBITRUM_GOERLI]: [],
+  [ChainId.OPTIMISM_GOERLI]: [],
+  [ChainId.POLYGON]: [],
+  [ChainId.POLYGON_MUMBAI]: [],
+  [ChainId.CELO]: [],
+  [ChainId.CELO_ALFAJORES]: [],
+  [ChainId.GNOSIS]: [],
+  [ChainId.MOONBEAM]: [],
+  [ChainId.BNB]: [],
+  [ChainId.AVALANCHE]: [],
+  [ChainId.BASE_GOERLI]: [],
+  [ChainId.BASE]: []
+};
+
+/**
+ * Provider that does not get data from an external source and instead returns
+ * a hardcoded list of Subgraph pools.
+ *
+ * Since the pools are hardcoded, the liquidity/price values are dummys and should not
+ * be depended on.
+ *
+ * Useful for instances where other data sources are unavailable. E.g. subgraph not available.
+ *
+ * @export
+ * @class StaticV2SubgraphProvider
+ */
+export class StaticV2SubgraphProvider implements IV2SubgraphProvider {
+  constructor(private chainId: ChainId) {}
+
+  public async getPools(
+    tokenIn?: Token,
+    tokenOut?: Token
+  ): Promise<V2SubgraphPool[]> {
+    log.info('In static subgraph provider for V2');
+    const bases = BASES_TO_CHECK_TRADES_AGAINST[this.chainId];
+
+    const basePairs: [Token, Token][] = _.flatMap(
+      bases,
+      (base): [Token, Token][] => bases.map((otherBase) => [base, otherBase])
+    );
+
+    if (tokenIn && tokenOut) {
+      basePairs.push(
+        [tokenIn, tokenOut],
+        ...bases.map((base): [Token, Token] => [tokenIn, base]),
+        ...bases.map((base): [Token, Token] => [tokenOut, base])
+      );
+    }
+
+    const pairs: [Token, Token][] = _(basePairs)
+      .filter((tokens): tokens is [Token, Token] =>
+        Boolean(tokens[0] && tokens[1])
+      )
+      .filter(
+        ([tokenA, tokenB]) =>
+          tokenA.address !== tokenB.address && !tokenA.equals(tokenB)
+      )
+      .value();
+
+    const poolAddressSet = new Set<string>();
+
+    const subgraphPools: V2SubgraphPool[] = _(pairs)
+      .map(([tokenA, tokenB]) => {
+        const poolAddress = Pair.getAddress(tokenA, tokenB);
+
+        if (poolAddressSet.has(poolAddress)) {
+          return undefined;
+        }
+        poolAddressSet.add(poolAddress);
+
+        const [token0, token1] = tokenA.sortsBefore(tokenB)
+          ? [tokenA, tokenB]
+          : [tokenB, tokenA];
+
+        return {
+          id: poolAddress,
+          liquidity: '100',
+          token0: {
+            id: token0.address
+          },
+          token1: {
+            id: token1.address
+          },
+          supply: 100,
+          reserve: 100,
+          reserveUSD: 100
+        };
+      })
+      .compact()
+      .value();
+
+    return subgraphPools;
+  }
+}
diff --git a/lib/sor/providers/v2/subgraph-provider-with-fallback.ts b/lib/sor/providers/v2/subgraph-provider-with-fallback.ts
new file mode 100644
index 0000000..41c7e4c
--- /dev/null
+++ b/lib/sor/providers/v2/subgraph-provider-with-fallback.ts
@@ -0,0 +1,43 @@
+import { Token } from '@uniswap/sdk-core';
+
+import { log } from '../../util';
+import { ProviderConfig } from '../provider';
+
+import { IV2SubgraphProvider, V2SubgraphPool } from './subgraph-provider';
+
+/**
+ * Provider for getting V2 subgraph pools that falls back to a different provider
+ * in the event of failure.
+ *
+ * @export
+ * @class V2SubgraphProviderWithFallBacks
+ */
+export class V2SubgraphProviderWithFallBacks implements IV2SubgraphProvider {
+  /**
+   * Creates an instance of V2SubgraphProviderWithFallBacks.
+   * @param fallbacks Ordered list of `IV2SubgraphProvider` to try to get pools from.
+   */
+  constructor(private fallbacks: IV2SubgraphProvider[]) {}
+
+  public async getPools(
+    tokenIn?: Token,
+    tokenOut?: Token,
+    providerConfig?: ProviderConfig
+  ): Promise<V2SubgraphPool[]> {
+    for (let i = 0; i < this.fallbacks.length; i++) {
+      const provider = this.fallbacks[i]!;
+      try {
+        const pools = await provider.getPools(
+          tokenIn,
+          tokenOut,
+          providerConfig
+        );
+        return pools;
+      } catch (err) {
+        log.info(`Failed to get subgraph pools for V2 from fallback #${i}`);
+      }
+    }
+
+    throw new Error('Failed to get subgraph pools from any providers');
+  }
+}
diff --git a/lib/sor/providers/v2/subgraph-provider.ts b/lib/sor/providers/v2/subgraph-provider.ts
new file mode 100644
index 0000000..6a171d3
--- /dev/null
+++ b/lib/sor/providers/v2/subgraph-provider.ts
@@ -0,0 +1,231 @@
+import { ChainId, Token } from '@uniswap/sdk-core';
+import retry from 'async-retry';
+import Timeout from 'await-timeout';
+import { gql, GraphQLClient } from 'graphql-request';
+import _ from 'lodash';
+
+import { log } from '../../util/log';
+import { ProviderConfig } from '../provider';
+
+export interface V2SubgraphPool {
+  id: string;
+  token0: {
+    id: string;
+  };
+  token1: {
+    id: string;
+  };
+  supply: number;
+  reserve: number;
+  reserveUSD: number;
+}
+
+type RawV2SubgraphPool = {
+  id: string;
+  token0: {
+    symbol: string;
+    id: string;
+  };
+  token1: {
+    symbol: string;
+    id: string;
+  };
+  totalSupply: string;
+  trackedReserveETH: string;
+  reserveUSD: string;
+};
+
+const SUBGRAPH_URL_BY_CHAIN: { [chainId in ChainId]?: string } = {
+  [ChainId.MAINNET]:
+    'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v2-dev',
+};
+
+const threshold = 0.025;
+
+const PAGE_SIZE = 1000; // 1k is max possible query size from subgraph.
+
+/**
+ * Provider for getting V2 pools from the Subgraph
+ *
+ * @export
+ * @interface IV2SubgraphProvider
+ */
+export interface IV2SubgraphProvider {
+  getPools(
+    tokenIn?: Token,
+    tokenOut?: Token,
+    providerConfig?: ProviderConfig
+  ): Promise<V2SubgraphPool[]>;
+}
+
+export class V2SubgraphProvider implements IV2SubgraphProvider {
+  private client: GraphQLClient;
+
+  constructor(
+    private chainId: ChainId,
+    private retries = 2,
+    private timeout = 360000,
+    private rollback = true,
+    private pageSize = PAGE_SIZE
+  ) {
+    const subgraphUrl = SUBGRAPH_URL_BY_CHAIN[this.chainId];
+    if (!subgraphUrl) {
+      throw new Error(`No subgraph url for chain id: ${this.chainId}`);
+    }
+    this.client = new GraphQLClient(subgraphUrl);
+  }
+
+  public async getPools(
+    _tokenIn?: Token,
+    _tokenOut?: Token,
+    providerConfig?: ProviderConfig
+  ): Promise<V2SubgraphPool[]> {
+    let blockNumber = providerConfig?.blockNumber
+      ? await providerConfig.blockNumber
+      : undefined;
+    // Due to limitations with the Subgraph API this is the only way to parameterize the query.
+    const query2 = gql`
+        query getPools($pageSize: Int!, $id: String) {
+            pairs(
+                first: $pageSize
+                ${blockNumber ? `block: { number: ${blockNumber} }` : ``}
+                where: { id_gt: $id }
+            ) {
+                id
+                token0 { id, symbol }
+                token1 { id, symbol }
+                totalSupply
+                trackedReserveETH
+                reserveUSD
+            }
+        }
+    `;
+
+    let pools: RawV2SubgraphPool[] = [];
+
+    log.info(
+      `Getting V2 pools from the subgraph with page size ${this.pageSize}${
+        providerConfig?.blockNumber
+          ? ` as of block ${providerConfig?.blockNumber}`
+          : ''
+      }.`
+    );
+
+    await retry(
+      async () => {
+        const timeout = new Timeout();
+
+        const getPools = async (): Promise<RawV2SubgraphPool[]> => {
+          let lastId = '';
+          let pairs: RawV2SubgraphPool[] = [];
+          let pairsPage: RawV2SubgraphPool[] = [];
+
+          do {
+            await retry(
+              async () => {
+                const poolsResult = await this.client.request<{
+                  pairs: RawV2SubgraphPool[];
+                }>(query2, {
+                  pageSize: this.pageSize,
+                  id: lastId,
+                });
+
+                pairsPage = poolsResult.pairs;
+
+                pairs = pairs.concat(pairsPage);
+                lastId = pairs[pairs.length - 1]!.id;
+              },
+              {
+                retries: this.retries,
+                onRetry: (err, retry) => {
+                  pools = [];
+                  log.info(
+                    { err },
+                    `Failed request for page of pools from subgraph. Retry attempt: ${retry}`
+                  );
+                },
+              }
+            );
+          } while (pairsPage.length > 0);
+
+          return pairs;
+        };
+
+        /* eslint-disable no-useless-catch */
+        try {
+          const getPoolsPromise = getPools();
+          const timerPromise = timeout.set(this.timeout).then(() => {
+            throw new Error(
+              `Timed out getting pools from subgraph: ${this.timeout}`
+            );
+          });
+          pools = await Promise.race([getPoolsPromise, timerPromise]);
+          return;
+        } catch (err) {
+          throw err;
+        } finally {
+          timeout.clear();
+        }
+        /* eslint-enable no-useless-catch */
+      },
+      {
+        retries: this.retries,
+        onRetry: (err, retry) => {
+          if (
+            this.rollback &&
+            blockNumber &&
+            _.includes(err.message, 'indexed up to')
+          ) {
+            blockNumber = blockNumber - 10;
+            log.info(
+              `Detected subgraph indexing error. Rolled back block number to: ${blockNumber}`
+            );
+          }
+          pools = [];
+          log.info(
+            { err },
+            `Failed to get pools from subgraph. Retry attempt: ${retry}`
+          );
+        },
+      }
+    );
+
+    // Filter pools that have tracked reserve ETH less than threshold.
+    // trackedReserveETH filters pools that do not involve a pool from this allowlist:
+    // https://github.com/Uniswap/v2-subgraph/blob/7c82235cad7aee4cfce8ea82f0030af3d224833e/src/mappings/pricing.ts#L43
+    // Which helps filter pools with manipulated prices/liquidity.
+
+    // TODO: Remove. Temporary fix to ensure tokens without trackedReserveETH are in the list.
+    const FEI = '0x956f47f50a910163d8bf957cf5846d573e7f87ca';
+
+    const poolsSanitized: V2SubgraphPool[] = pools
+      .filter((pool) => {
+        return (
+          pool.token0.id == FEI ||
+          pool.token1.id == FEI ||
+          parseFloat(pool.trackedReserveETH) > threshold
+        );
+      })
+      .map((pool) => {
+        return {
+          ...pool,
+          id: pool.id.toLowerCase(),
+          token0: {
+            id: pool.token0.id.toLowerCase(),
+          },
+          token1: {
+            id: pool.token1.id.toLowerCase(),
+          },
+          supply: parseFloat(pool.totalSupply),
+          reserve: parseFloat(pool.trackedReserveETH),
+          reserveUSD: parseFloat(pool.reserveUSD),
+        };
+      });
+
+    log.info(
+      `Got ${pools.length} V2 pools from the subgraph. ${poolsSanitized.length} after filtering`
+    );
+
+    return poolsSanitized;
+  }
+}
diff --git a/lib/sor/providers/v2/uri-subgraph-provider.ts b/lib/sor/providers/v2/uri-subgraph-provider.ts
new file mode 100644
index 0000000..9d298d5
--- /dev/null
+++ b/lib/sor/providers/v2/uri-subgraph-provider.ts
@@ -0,0 +1,7 @@
+import { URISubgraphProvider } from '../uri-subgraph-provider';
+
+import { IV2SubgraphProvider, V2SubgraphPool } from './subgraph-provider';
+
+export class V2URISubgraphProvider
+  extends URISubgraphProvider<V2SubgraphPool>
+  implements IV2SubgraphProvider {}
diff --git a/lib/sor/providers/v3/caching-pool-provider.ts b/lib/sor/providers/v3/caching-pool-provider.ts
new file mode 100644
index 0000000..b75e17a
--- /dev/null
+++ b/lib/sor/providers/v3/caching-pool-provider.ts
@@ -0,0 +1,127 @@
+import { ChainId, Token } from '@uniswap/sdk-core';
+import { FeeAmount, Pool } from '@uniswap/v3-sdk';
+import _ from 'lodash';
+
+import { metric, MetricLoggerUnit } from '../../util';
+import { log } from '../../util/log';
+
+import { ICache } from './../cache';
+import { ProviderConfig } from './../provider';
+import { IV3PoolProvider, V3PoolAccessor } from './pool-provider';
+
+
+/**
+ * Provider for getting V3 pools, with functionality for caching the results.
+ * Does not cache by block because we compute quotes using the on-chain quoter
+ * so do not mind if the liquidity values are out of date.
+ *
+ * @export
+ * @class CachingV3PoolProvider
+ */
+export class CachingV3PoolProvider implements IV3PoolProvider {
+  private POOL_KEY = (chainId: ChainId, address: string) =>
+    `pool-${chainId}-${address}`;
+
+  /**
+   * Creates an instance of CachingV3PoolProvider.
+   * @param chainId The chain id to use.
+   * @param poolProvider The provider to use to get the pools when not in the cache.
+   * @param cache Cache instance to hold cached pools.
+   */
+  constructor(
+    protected chainId: ChainId,
+    protected poolProvider: IV3PoolProvider,
+    private cache: ICache<Pool>
+  ) {}
+
+  public async getPools(
+    tokenPairs: [Token, Token, FeeAmount][],
+    providerConfig?: ProviderConfig
+  ): Promise<V3PoolAccessor> {
+    const poolAddressSet: Set<string> = new Set<string>();
+    const poolsToGetTokenPairs: Array<[Token, Token, FeeAmount]> = [];
+    const poolsToGetAddresses: string[] = [];
+    const poolAddressToPool: { [poolAddress: string]: Pool } = {};
+
+    for (const [tokenA, tokenB, feeAmount] of tokenPairs) {
+      const { poolAddress, token0, token1 } = this.getPoolAddress(
+        tokenA,
+        tokenB,
+        feeAmount
+      );
+
+      if (poolAddressSet.has(poolAddress)) {
+        continue;
+      }
+
+      poolAddressSet.add(poolAddress);
+
+      const cachedPool = await this.cache.get(
+        this.POOL_KEY(this.chainId, poolAddress)
+      );
+      if (cachedPool) {
+        metric.putMetric('V3_INMEMORY_CACHING_POOL_HIT_IN_MEMORY', 1, MetricLoggerUnit.None)
+        poolAddressToPool[poolAddress] = cachedPool;
+        continue;
+      }
+
+      metric.putMetric('V3_INMEMORY_CACHING_POOL_MISS_NOT_IN_MEMORY', 1, MetricLoggerUnit.None)
+      poolsToGetTokenPairs.push([token0, token1, feeAmount]);
+      poolsToGetAddresses.push(poolAddress);
+    }
+
+    log.info(
+      {
+        poolsFound: _.map(
+          Object.values(poolAddressToPool),
+          (p) => `${p.token0.symbol} ${p.token1.symbol} ${p.fee}`
+        ),
+        poolsToGetTokenPairs: _.map(
+          poolsToGetTokenPairs,
+          (t) => `${t[0].symbol} ${t[1].symbol} ${t[2]}`
+        ),
+      },
+      `Found ${
+        Object.keys(poolAddressToPool).length
+      } V3 pools already in local cache. About to get liquidity and slot0s for ${
+        poolsToGetTokenPairs.length
+      } pools.`
+    );
+
+    if (poolsToGetAddresses.length > 0) {
+      const poolAccessor = await this.poolProvider.getPools(
+        poolsToGetTokenPairs,
+        providerConfig
+      );
+      for (const address of poolsToGetAddresses) {
+        const pool = poolAccessor.getPoolByAddress(address);
+        if (pool) {
+          poolAddressToPool[address] = pool;
+          await this.cache.set(this.POOL_KEY(this.chainId, address), pool);
+        }
+      }
+    }
+
+    return {
+      getPool: (
+        tokenA: Token,
+        tokenB: Token,
+        feeAmount: FeeAmount
+      ): Pool | undefined => {
+        const { poolAddress } = this.getPoolAddress(tokenA, tokenB, feeAmount);
+        return poolAddressToPool[poolAddress];
+      },
+      getPoolByAddress: (address: string): Pool | undefined =>
+        poolAddressToPool[address],
+      getAllPools: (): Pool[] => Object.values(poolAddressToPool),
+    };
+  }
+
+  public getPoolAddress(
+    tokenA: Token,
+    tokenB: Token,
+    feeAmount: FeeAmount
+  ): { poolAddress: string; token0: Token; token1: Token } {
+    return this.poolProvider.getPoolAddress(tokenA, tokenB, feeAmount);
+  }
+}
diff --git a/lib/sor/providers/v3/caching-subgraph-provider.ts b/lib/sor/providers/v3/caching-subgraph-provider.ts
new file mode 100644
index 0000000..3ca2a69
--- /dev/null
+++ b/lib/sor/providers/v3/caching-subgraph-provider.ts
@@ -0,0 +1,40 @@
+import { ChainId } from '@uniswap/sdk-core';
+
+import { ICache } from './../cache';
+import { IV3SubgraphProvider, V3SubgraphPool } from './subgraph-provider';
+
+/**
+ * Provider for getting V3 pools, with functionality for caching the results.
+ *
+ * @export
+ * @class CachingV3SubgraphProvider
+ */
+export class CachingV3SubgraphProvider implements IV3SubgraphProvider {
+  private SUBGRAPH_KEY = (chainId: ChainId) => `subgraph-pools-${chainId}`;
+
+  /**
+   * Creates an instance of CachingV3SubgraphProvider.
+   * @param chainId The chain id to use.
+   * @param subgraphProvider The provider to use to get the subgraph pools when not in the cache.
+   * @param cache Cache instance to hold cached pools.
+   */
+  constructor(
+    private chainId: ChainId,
+    protected subgraphProvider: IV3SubgraphProvider,
+    private cache: ICache<V3SubgraphPool[]>
+  ) {}
+
+  public async getPools(): Promise<V3SubgraphPool[]> {
+    const cachedPools = await this.cache.get(this.SUBGRAPH_KEY(this.chainId));
+
+    if (cachedPools) {
+      return cachedPools;
+    }
+
+    const pools = await this.subgraphProvider.getPools();
+
+    await this.cache.set(this.SUBGRAPH_KEY(this.chainId), pools);
+
+    return pools;
+  }
+}
diff --git a/lib/sor/providers/v3/gas-data-provider.ts b/lib/sor/providers/v3/gas-data-provider.ts
new file mode 100644
index 0000000..65ba177
--- /dev/null
+++ b/lib/sor/providers/v3/gas-data-provider.ts
@@ -0,0 +1,128 @@
+import { BigNumber } from '@ethersproject/bignumber';
+import { BaseProvider } from '@ethersproject/providers';
+import { ChainId } from '@uniswap/sdk-core';
+
+import { GasDataArbitrum__factory } from '../../types/other/factories/GasDataArbitrum__factory';
+import { GasPriceOracle__factory } from '../../types/other/factories/GasPriceOracle__factory';
+import { ARB_GASINFO_ADDRESS, log, OVM_GASPRICE_ADDRESS, } from '../../util';
+import { IMulticallProvider } from '../multicall-provider';
+
+/**
+ * Provider for getting gas constants on L2s.
+ *
+ * @export
+ * @interface IL2GasDataProvider
+ */
+export interface IL2GasDataProvider<T> {
+  /**
+   * Gets the data constants needed to calculate the l1 security fee on L2s like arbitrum and optimism.
+   * @returns An object that includes the data necessary for the off chain estimations.
+   */
+  getGasData(): Promise<T>;
+}
+
+export type OptimismGasData = {
+  l1BaseFee: BigNumber;
+  scalar: BigNumber;
+  decimals: BigNumber;
+  overhead: BigNumber;
+};
+
+export class OptimismGasDataProvider
+  implements IL2GasDataProvider<OptimismGasData> {
+  protected gasOracleAddress: string;
+
+  constructor(
+    protected chainId: ChainId,
+    protected multicall2Provider: IMulticallProvider,
+    gasPriceAddress?: string
+  ) {
+    if (chainId !== ChainId.OPTIMISM && chainId !== ChainId.BASE) {
+      throw new Error('This data provider is used only on optimism networks.');
+    }
+    this.gasOracleAddress = gasPriceAddress ?? OVM_GASPRICE_ADDRESS;
+  }
+
+  /**
+   * Gets the data constants needed to calculate the l1 security fee on Optimism.
+   * @returns An OptimismGasData object that includes the l1BaseFee,
+   * scalar, decimals, and overhead values.
+   */
+  public async getGasData(): Promise<OptimismGasData> {
+    const funcNames = ['l1BaseFee', 'scalar', 'decimals', 'overhead'];
+    const tx =
+      await this.multicall2Provider.callMultipleFunctionsOnSameContract<
+        undefined,
+        [BigNumber]
+      >({
+        address: this.gasOracleAddress,
+        contractInterface: GasPriceOracle__factory.createInterface(),
+        functionNames: funcNames,
+      });
+
+    if (
+      !tx.results[0]?.success ||
+      !tx.results[1]?.success ||
+      !tx.results[2]?.success ||
+      !tx.results[3]?.success
+    ) {
+      log.info(
+        { results: tx.results },
+        'Failed to get gas constants data from the optimism gas oracle'
+      );
+      throw new Error(
+        'Failed to get gas constants data from the optimism gas oracle'
+      );
+    }
+
+    const { result: l1BaseFee } = tx.results![0];
+    const { result: scalar } = tx.results![1];
+    const { result: decimals } = tx.results![2];
+    const { result: overhead } = tx.results![3];
+
+    return {
+      l1BaseFee: l1BaseFee[0],
+      scalar: scalar[0],
+      decimals: decimals[0],
+      overhead: overhead[0],
+    };
+  }
+}
+
+/**
+ * perL2TxFee is the base fee in wei for an l2 transaction.
+ * perL2CalldataFee is the fee in wei per byte of calldata the swap uses. Multiply by the total bytes of the calldata.
+ * perArbGasTotal is the fee in wei per unit of arbgas. Multiply this by the estimate we calculate based on ticks/hops in the gasModel.
+ */
+export type ArbitrumGasData = {
+  perL2TxFee: BigNumber;
+  perL1CalldataFee: BigNumber;
+  perArbGasTotal: BigNumber;
+};
+
+export class ArbitrumGasDataProvider
+  implements IL2GasDataProvider<ArbitrumGasData> {
+  protected gasFeesAddress: string;
+  protected blockNumberOverride: number | Promise<number> | undefined;
+
+  constructor(
+    protected chainId: ChainId,
+    protected provider: BaseProvider,
+    gasDataAddress?: string
+  ) {
+    this.gasFeesAddress = gasDataAddress ? gasDataAddress : ARB_GASINFO_ADDRESS;
+  }
+
+  public async getGasData() {
+    const gasDataContract = GasDataArbitrum__factory.connect(
+      this.gasFeesAddress,
+      this.provider
+    );
+    const gasData = await gasDataContract.getPricesInWei();
+    return {
+      perL2TxFee: gasData[0],
+      perL1CalldataFee: gasData[1],
+      perArbGasTotal: gasData[5],
+    };
+  }
+}
diff --git a/lib/sor/providers/v3/pool-provider.ts b/lib/sor/providers/v3/pool-provider.ts
new file mode 100644
index 0000000..7f37d96
--- /dev/null
+++ b/lib/sor/providers/v3/pool-provider.ts
@@ -0,0 +1,260 @@
+import { BigNumber } from '@ethersproject/bignumber';
+import { ChainId, Token } from '@uniswap/sdk-core';
+import { computePoolAddress, FeeAmount, Pool } from '@uniswap/v3-sdk';
+import retry, { Options as RetryOptions } from 'async-retry';
+import _ from 'lodash';
+
+import { IUniswapV3PoolState__factory } from '../../types/v3/factories/IUniswapV3PoolState__factory';
+import { V3_CORE_FACTORY_ADDRESSES } from '../../util/addresses';
+import { log } from '../../util/log';
+import { poolToString } from '../../util/routes';
+import { IMulticallProvider, Result } from '../multicall-provider';
+import { ProviderConfig } from '../provider';
+
+type ISlot0 = {
+  sqrtPriceX96: BigNumber;
+  tick: number;
+  observationIndex: number;
+  observationCardinality: number;
+  observationCardinalityNext: number;
+  feeProtocol: number;
+  unlocked: boolean;
+};
+
+type ILiquidity = { liquidity: BigNumber };
+
+/**
+ * Provider or getting V3 pools.
+ *
+ * @export
+ * @interface IV3PoolProvider
+ */
+export interface IV3PoolProvider {
+  /**
+   * Gets the specified pools.
+   *
+   * @param tokenPairs The token pairs and fee amount of the pools to get.
+   * @param [providerConfig] The provider config.
+   * @returns A pool accessor with methods for accessing the pools.
+   */
+  getPools(
+    tokenPairs: [Token, Token, FeeAmount][],
+    providerConfig?: ProviderConfig
+  ): Promise<V3PoolAccessor>;
+
+  /**
+   * Gets the pool address for the specified token pair and fee tier.
+   *
+   * @param tokenA Token A in the pool.
+   * @param tokenB Token B in the pool.
+   * @param feeAmount The fee amount of the pool.
+   * @returns The pool address and the two tokens.
+   */
+  getPoolAddress(
+    tokenA: Token,
+    tokenB: Token,
+    feeAmount: FeeAmount
+  ): { poolAddress: string; token0: Token; token1: Token };
+}
+
+export type V3PoolAccessor = {
+  getPool: (
+    tokenA: Token,
+    tokenB: Token,
+    feeAmount: FeeAmount
+  ) => Pool | undefined;
+  getPoolByAddress: (address: string) => Pool | undefined;
+  getAllPools: () => Pool[];
+};
+
+export type V3PoolRetryOptions = RetryOptions;
+
+export class V3PoolProvider implements IV3PoolProvider {
+  // Computing pool addresses is slow as it requires hashing, encoding etc.
+  // Addresses never change so can always be cached.
+  private POOL_ADDRESS_CACHE: { [key: string]: string } = {};
+
+  /**
+   * Creates an instance of V3PoolProvider.
+   * @param chainId The chain id to use.
+   * @param multicall2Provider The multicall provider to use to get the pools.
+   * @param retryOptions The retry options for each call to the multicall.
+   */
+  constructor(
+    protected chainId: ChainId,
+    protected multicall2Provider: IMulticallProvider,
+    protected retryOptions: V3PoolRetryOptions = {
+      retries: 2,
+      minTimeout: 50,
+      maxTimeout: 500,
+    }
+  ) {}
+
+  public async getPools(
+    tokenPairs: [Token, Token, FeeAmount][],
+    providerConfig?: ProviderConfig
+  ): Promise<V3PoolAccessor> {
+    const poolAddressSet: Set<string> = new Set<string>();
+    const sortedTokenPairs: Array<[Token, Token, FeeAmount]> = [];
+    const sortedPoolAddresses: string[] = [];
+
+    for (const tokenPair of tokenPairs) {
+      const [tokenA, tokenB, feeAmount] = tokenPair;
+
+      const { poolAddress, token0, token1 } = this.getPoolAddress(
+        tokenA,
+        tokenB,
+        feeAmount
+      );
+
+      if (poolAddressSet.has(poolAddress)) {
+        continue;
+      }
+
+      poolAddressSet.add(poolAddress);
+      sortedTokenPairs.push([token0, token1, feeAmount]);
+      sortedPoolAddresses.push(poolAddress);
+    }
+
+    log.debug(
+      `getPools called with ${tokenPairs.length} token pairs. Deduped down to ${poolAddressSet.size}`
+    );
+
+    const [slot0Results, liquidityResults] = await Promise.all([
+      this.getPoolsData<ISlot0>(sortedPoolAddresses, 'slot0', providerConfig),
+      this.getPoolsData<[ILiquidity]>(
+        sortedPoolAddresses,
+        'liquidity',
+        providerConfig
+      ),
+    ]);
+
+    log.info(
+      `Got liquidity and slot0s for ${poolAddressSet.size} pools ${
+        providerConfig?.blockNumber
+          ? `as of block: ${providerConfig?.blockNumber}.`
+          : ``
+      }`
+    );
+
+    const poolAddressToPool: { [poolAddress: string]: Pool } = {};
+
+    const invalidPools: [Token, Token, FeeAmount][] = [];
+
+    for (let i = 0; i < sortedPoolAddresses.length; i++) {
+      const slot0Result = slot0Results[i];
+      const liquidityResult = liquidityResults[i];
+
+      // These properties tell us if a pool is valid and initialized or not.
+      if (
+        !slot0Result?.success ||
+        !liquidityResult?.success ||
+        slot0Result.result.sqrtPriceX96.eq(0)
+      ) {
+        const [token0, token1, fee] = sortedTokenPairs[i]!;
+        invalidPools.push([token0, token1, fee]);
+
+        continue;
+      }
+
+      const [token0, token1, fee] = sortedTokenPairs[i]!;
+      const slot0 = slot0Result.result;
+      const liquidity = liquidityResult.result[0];
+
+      const pool = new Pool(
+        token0,
+        token1,
+        fee,
+        slot0.sqrtPriceX96.toString(),
+        liquidity.toString(),
+        slot0.tick
+      );
+
+      const poolAddress = sortedPoolAddresses[i]!;
+
+      poolAddressToPool[poolAddress] = pool;
+    }
+
+    if (invalidPools.length > 0) {
+      log.info(
+        {
+          invalidPools: _.map(
+            invalidPools,
+            ([token0, token1, fee]) =>
+              `${token0.symbol}/${token1.symbol}/${fee / 10000}%`
+          ),
+        },
+        `${invalidPools.length} pools invalid after checking their slot0 and liquidity results. Dropping.`
+      );
+    }
+
+    const poolStrs = _.map(Object.values(poolAddressToPool), poolToString);
+
+    log.debug({ poolStrs }, `Found ${poolStrs.length} valid pools`);
+
+    return {
+      getPool: (
+        tokenA: Token,
+        tokenB: Token,
+        feeAmount: FeeAmount
+      ): Pool | undefined => {
+        const { poolAddress } = this.getPoolAddress(tokenA, tokenB, feeAmount);
+        return poolAddressToPool[poolAddress];
+      },
+      getPoolByAddress: (address: string): Pool | undefined =>
+        poolAddressToPool[address],
+      getAllPools: (): Pool[] => Object.values(poolAddressToPool),
+    };
+  }
+
+  public getPoolAddress(
+    tokenA: Token,
+    tokenB: Token,
+    feeAmount: FeeAmount
+  ): { poolAddress: string; token0: Token; token1: Token } {
+    const [token0, token1] = tokenA.sortsBefore(tokenB)
+      ? [tokenA, tokenB]
+      : [tokenB, tokenA];
+
+    const cacheKey = `${this.chainId}/${token0.address}/${token1.address}/${feeAmount}`;
+
+    const cachedAddress = this.POOL_ADDRESS_CACHE[cacheKey];
+
+    if (cachedAddress) {
+      return { poolAddress: cachedAddress, token0, token1 };
+    }
+
+    const poolAddress = computePoolAddress({
+      factoryAddress: V3_CORE_FACTORY_ADDRESSES[this.chainId]!,
+      tokenA: token0,
+      tokenB: token1,
+      fee: feeAmount,
+    });
+
+    this.POOL_ADDRESS_CACHE[cacheKey] = poolAddress;
+
+    return { poolAddress, token0, token1 };
+  }
+
+  private async getPoolsData<TReturn>(
+    poolAddresses: string[],
+    functionName: string,
+    providerConfig?: ProviderConfig
+  ): Promise<Result<TReturn>[]> {
+    const { results, blockNumber } = await retry(async () => {
+      return this.multicall2Provider.callSameFunctionOnMultipleContracts<
+        undefined,
+        TReturn
+      >({
+        addresses: poolAddresses,
+        contractInterface: IUniswapV3PoolState__factory.createInterface(),
+        functionName: functionName,
+        providerConfig,
+      });
+    }, this.retryOptions);
+
+    log.debug(`Pool data fetched as of block ${blockNumber}`);
+
+    return results;
+  }
+}
diff --git a/lib/sor/providers/v3/static-subgraph-provider.ts b/lib/sor/providers/v3/static-subgraph-provider.ts
new file mode 100644
index 0000000..e996523
--- /dev/null
+++ b/lib/sor/providers/v3/static-subgraph-provider.ts
@@ -0,0 +1,258 @@
+/* eslint-disable @typescript-eslint/no-non-null-assertion */
+import { ChainId, Token } from '@uniswap/sdk-core';
+import { FeeAmount, Pool } from '@uniswap/v3-sdk';
+import JSBI from 'jsbi';
+import _ from 'lodash';
+
+import { unparseFeeAmount } from '../../util/amounts';
+import { WRAPPED_NATIVE_CURRENCY } from '../../util/chains';
+import { log } from '../../util/log';
+import { ProviderConfig } from '../provider';
+import {
+  ARB_ARBITRUM,
+  BTC_BNB,
+  BUSD_BNB,
+  CELO,
+  CELO_ALFAJORES,
+  CEUR_CELO,
+  CEUR_CELO_ALFAJORES,
+  CUSD_CELO,
+  CUSD_CELO_ALFAJORES,
+  DAI_ARBITRUM,
+  DAI_AVAX,
+  DAI_BNB,
+  DAI_CELO,
+  DAI_CELO_ALFAJORES,
+  DAI_GOERLI,
+  DAI_MAINNET,
+  DAI_MOONBEAM,
+  DAI_OPTIMISM,
+  DAI_OPTIMISM_GOERLI,
+  DAI_POLYGON_MUMBAI,
+  ETH_BNB,
+  OP_OPTIMISM,
+  USDC_ARBITRUM,
+  USDC_ARBITRUM_GOERLI,
+  USDC_AVAX,
+  USDC_BASE,
+  USDC_BNB,
+  USDC_ETHEREUM_GNOSIS,
+  USDC_GOERLI,
+  USDC_MAINNET,
+  USDC_MOONBEAM,
+  USDC_OPTIMISM,
+  USDC_OPTIMISM_GOERLI,
+  USDC_POLYGON,
+  USDC_SEPOLIA,
+  USDT_ARBITRUM,
+  USDT_BNB,
+  USDT_GOERLI,
+  USDT_MAINNET,
+  USDT_OPTIMISM,
+  USDT_OPTIMISM_GOERLI,
+  WBTC_ARBITRUM,
+  WBTC_GNOSIS,
+  WBTC_GOERLI,
+  WBTC_MAINNET,
+  WBTC_MOONBEAM,
+  WBTC_OPTIMISM,
+  WBTC_OPTIMISM_GOERLI,
+  WETH_POLYGON,
+  WMATIC_POLYGON,
+  WMATIC_POLYGON_MUMBAI,
+  WXDAI_GNOSIS
+} from '../token-provider';
+
+import { IV3PoolProvider } from './pool-provider';
+import { IV3SubgraphProvider, V3SubgraphPool } from './subgraph-provider';
+
+type ChainTokenList = {
+  readonly [chainId in ChainId]: Token[];
+};
+
+const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {
+  [ChainId.MAINNET]: [
+    WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET]!,
+    DAI_MAINNET,
+    USDC_MAINNET,
+    USDT_MAINNET,
+    WBTC_MAINNET
+  ],
+  [ChainId.GOERLI]: [
+    WRAPPED_NATIVE_CURRENCY[ChainId.GOERLI]!,
+    USDT_GOERLI,
+    USDC_GOERLI,
+    WBTC_GOERLI,
+    DAI_GOERLI
+  ],
+  [ChainId.SEPOLIA]: [WRAPPED_NATIVE_CURRENCY[ChainId.SEPOLIA]!, USDC_SEPOLIA],
+  [ChainId.OPTIMISM]: [
+    WRAPPED_NATIVE_CURRENCY[ChainId.OPTIMISM]!,
+    USDC_OPTIMISM,
+    DAI_OPTIMISM,
+    USDT_OPTIMISM,
+    WBTC_OPTIMISM,
+    OP_OPTIMISM
+  ],
+  [ChainId.ARBITRUM_ONE]: [
+    WRAPPED_NATIVE_CURRENCY[ChainId.ARBITRUM_ONE]!,
+    WBTC_ARBITRUM,
+    DAI_ARBITRUM,
+    USDC_ARBITRUM,
+    USDT_ARBITRUM,
+    ARB_ARBITRUM
+  ],
+  [ChainId.ARBITRUM_GOERLI]: [
+    WRAPPED_NATIVE_CURRENCY[ChainId.ARBITRUM_GOERLI]!,
+    USDC_ARBITRUM_GOERLI
+  ],
+  [ChainId.OPTIMISM_GOERLI]: [
+    WRAPPED_NATIVE_CURRENCY[ChainId.OPTIMISM_GOERLI]!,
+    USDC_OPTIMISM_GOERLI,
+    DAI_OPTIMISM_GOERLI,
+    USDT_OPTIMISM_GOERLI,
+    WBTC_OPTIMISM_GOERLI
+  ],
+  [ChainId.POLYGON]: [USDC_POLYGON, WETH_POLYGON, WMATIC_POLYGON],
+  [ChainId.POLYGON_MUMBAI]: [
+    DAI_POLYGON_MUMBAI,
+    WRAPPED_NATIVE_CURRENCY[ChainId.POLYGON_MUMBAI]!,
+    WMATIC_POLYGON_MUMBAI
+  ],
+  [ChainId.CELO]: [CELO, CUSD_CELO, CEUR_CELO, DAI_CELO],
+  [ChainId.CELO_ALFAJORES]: [
+    CELO_ALFAJORES,
+    CUSD_CELO_ALFAJORES,
+    CEUR_CELO_ALFAJORES,
+    DAI_CELO_ALFAJORES
+  ],
+  [ChainId.GNOSIS]: [
+    WRAPPED_NATIVE_CURRENCY[ChainId.GNOSIS],
+    WBTC_GNOSIS,
+    WXDAI_GNOSIS,
+    USDC_ETHEREUM_GNOSIS
+  ],
+  [ChainId.BNB]: [
+    WRAPPED_NATIVE_CURRENCY[ChainId.BNB],
+    BUSD_BNB,
+    DAI_BNB,
+    USDC_BNB,
+    USDT_BNB,
+    BTC_BNB,
+    ETH_BNB
+  ],
+  [ChainId.AVALANCHE]: [
+    WRAPPED_NATIVE_CURRENCY[ChainId.AVALANCHE],
+    USDC_AVAX,
+    DAI_AVAX
+  ],
+  [ChainId.MOONBEAM]: [
+    WRAPPED_NATIVE_CURRENCY[ChainId.MOONBEAM],
+    DAI_MOONBEAM,
+    USDC_MOONBEAM,
+    WBTC_MOONBEAM
+  ],
+  [ChainId.BASE_GOERLI]: [WRAPPED_NATIVE_CURRENCY[ChainId.BASE_GOERLI]],
+  [ChainId.BASE]: [WRAPPED_NATIVE_CURRENCY[ChainId.BASE], USDC_BASE],
+};
+
+/**
+ * Provider that uses a hardcoded list of V3 pools to generate a list of subgraph pools.
+ *
+ * Since the pools are hardcoded and the data does not come from the Subgraph, the TVL values
+ * are dummys and should not be depended on.
+ *
+ * Useful for instances where other data sources are unavailable. E.g. Subgraph not available.
+ *
+ * @export
+ * @class StaticV3SubgraphProvider
+ */
+export class StaticV3SubgraphProvider implements IV3SubgraphProvider {
+  constructor(
+    private chainId: ChainId,
+    private poolProvider: IV3PoolProvider
+  ) {}
+
+  public async getPools(
+    tokenIn?: Token,
+    tokenOut?: Token,
+    providerConfig?: ProviderConfig
+  ): Promise<V3SubgraphPool[]> {
+    log.info('In static subgraph provider for V3');
+    const bases = BASES_TO_CHECK_TRADES_AGAINST[this.chainId];
+
+    const basePairs: [Token, Token][] = _.flatMap(
+      bases,
+      (base): [Token, Token][] => bases.map((otherBase) => [base, otherBase])
+    );
+
+    if (tokenIn && tokenOut) {
+      basePairs.push(
+        [tokenIn, tokenOut],
+        ...bases.map((base): [Token, Token] => [tokenIn, base]),
+        ...bases.map((base): [Token, Token] => [tokenOut, base])
+      );
+    }
+
+    const pairs: [Token, Token, FeeAmount][] = _(basePairs)
+      .filter((tokens): tokens is [Token, Token] =>
+        Boolean(tokens[0] && tokens[1])
+      )
+      .filter(
+        ([tokenA, tokenB]) =>
+          tokenA.address !== tokenB.address && !tokenA.equals(tokenB)
+      )
+      .flatMap<[Token, Token, FeeAmount]>(([tokenA, tokenB]) => {
+        return [
+          [tokenA, tokenB, FeeAmount.LOWEST],
+          [tokenA, tokenB, FeeAmount.LOW],
+          [tokenA, tokenB, FeeAmount.MEDIUM],
+          [tokenA, tokenB, FeeAmount.HIGH]
+        ];
+      })
+      .value();
+
+    log.info(
+      `V3 Static subgraph provider about to get ${pairs.length} pools on-chain`
+    );
+    const poolAccessor = await this.poolProvider.getPools(
+      pairs,
+      providerConfig
+    );
+    const pools = poolAccessor.getAllPools();
+
+    const poolAddressSet = new Set<string>();
+    const subgraphPools: V3SubgraphPool[] = _(pools)
+      .map((pool) => {
+        const { token0, token1, fee, liquidity } = pool;
+
+        const poolAddress = Pool.getAddress(pool.token0, pool.token1, pool.fee);
+
+        if (poolAddressSet.has(poolAddress)) {
+          return undefined;
+        }
+        poolAddressSet.add(poolAddress);
+
+        const liquidityNumber = JSBI.toNumber(liquidity);
+
+        return {
+          id: poolAddress,
+          feeTier: unparseFeeAmount(fee),
+          liquidity: liquidity.toString(),
+          token0: {
+            id: token0.address
+          },
+          token1: {
+            id: token1.address
+          },
+          // As a very rough proxy we just use liquidity for TVL.
+          tvlETH: liquidityNumber,
+          tvlUSD: liquidityNumber
+        };
+      })
+      .compact()
+      .value();
+
+    return subgraphPools;
+  }
+}
diff --git a/lib/sor/providers/v3/subgraph-provider-with-fallback.ts b/lib/sor/providers/v3/subgraph-provider-with-fallback.ts
new file mode 100644
index 0000000..f044cc8
--- /dev/null
+++ b/lib/sor/providers/v3/subgraph-provider-with-fallback.ts
@@ -0,0 +1,39 @@
+import { Token } from '@uniswap/sdk-core';
+
+import { log } from '../../util';
+import { ProviderConfig } from '../provider';
+
+import { IV3SubgraphProvider, V3SubgraphPool } from './subgraph-provider';
+
+/**
+ * Provider for getting V3 subgraph pools that falls back to a different provider
+ * in the event of failure.
+ *
+ * @export
+ * @class V3SubgraphProviderWithFallBacks
+ */
+export class V3SubgraphProviderWithFallBacks implements IV3SubgraphProvider {
+  constructor(private fallbacks: IV3SubgraphProvider[]) {}
+
+  public async getPools(
+    tokenIn?: Token,
+    tokenOut?: Token,
+    providerConfig?: ProviderConfig
+  ): Promise<V3SubgraphPool[]> {
+    for (let i = 0; i < this.fallbacks.length; i++) {
+      const provider = this.fallbacks[i]!;
+      try {
+        const pools = await provider.getPools(
+          tokenIn,
+          tokenOut,
+          providerConfig
+        );
+        return pools;
+      } catch (err) {
+        log.info(`Failed to get subgraph pools for V3 from fallback #${i}`);
+      }
+    }
+
+    throw new Error('Failed to get subgraph pools from any providers');
+  }
+}
diff --git a/lib/sor/providers/v3/subgraph-provider.ts b/lib/sor/providers/v3/subgraph-provider.ts
new file mode 100644
index 0000000..6918fca
--- /dev/null
+++ b/lib/sor/providers/v3/subgraph-provider.ts
@@ -0,0 +1,238 @@
+import { ChainId, Token } from '@uniswap/sdk-core';
+import retry from 'async-retry';
+import Timeout from 'await-timeout';
+import { gql, GraphQLClient } from 'graphql-request';
+import _ from 'lodash';
+
+import { log } from '../../util';
+import { ProviderConfig } from '../provider';
+import { V2SubgraphPool } from '../v2/subgraph-provider';
+
+export interface V3SubgraphPool {
+  id: string;
+  feeTier: string;
+  liquidity: string;
+  token0: {
+    id: string;
+  };
+  token1: {
+    id: string;
+  };
+  tvlETH: number;
+  tvlUSD: number;
+}
+
+type RawV3SubgraphPool = {
+  id: string;
+  feeTier: string;
+  liquidity: string;
+  token0: {
+    symbol: string;
+    id: string;
+  };
+  token1: {
+    symbol: string;
+    id: string;
+  };
+  totalValueLockedUSD: string;
+  totalValueLockedETH: string;
+};
+
+export const printV3SubgraphPool = (s: V3SubgraphPool) =>
+  `${s.token0.id}/${s.token1.id}/${s.feeTier}`;
+
+export const printV2SubgraphPool = (s: V2SubgraphPool) =>
+  `${s.token0.id}/${s.token1.id}`;
+
+const SUBGRAPH_URL_BY_CHAIN: { [chainId in ChainId]?: string } = {
+  [ChainId.MAINNET]:
+    'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3',
+  [ChainId.OPTIMISM]:
+    'https://api.thegraph.com/subgraphs/name/ianlapham/optimism-post-regenesis',
+  [ChainId.ARBITRUM_ONE]:
+    'https://api.thegraph.com/subgraphs/name/ianlapham/arbitrum-minimal',
+  [ChainId.POLYGON]:
+    'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v3-polygon',
+  [ChainId.CELO]:
+    'https://api.thegraph.com/subgraphs/name/jesse-sawa/uniswap-celo',
+  [ChainId.GOERLI]:
+    'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v3-gorli',
+  [ChainId.BNB]:
+    'https://api.thegraph.com/subgraphs/name/ilyamk/uniswap-v3---bnb-chain',
+  [ChainId.AVALANCHE]:
+    'https://api.thegraph.com/subgraphs/name/lynnshaoyu/uniswap-v3-avax',
+  [ChainId.BASE]:
+    'https://api.studio.thegraph.com/query/48211/uniswap-v3-base/version/latest',
+};
+
+const PAGE_SIZE = 1000; // 1k is max possible query size from subgraph.
+
+/**
+ * Provider for getting V3 pools from the Subgraph
+ *
+ * @export
+ * @interface IV3SubgraphProvider
+ */
+export interface IV3SubgraphProvider {
+  getPools(
+    tokenIn?: Token,
+    tokenOut?: Token,
+    providerConfig?: ProviderConfig
+  ): Promise<V3SubgraphPool[]>;
+}
+
+export class V3SubgraphProvider implements IV3SubgraphProvider {
+  private client: GraphQLClient;
+
+  constructor(
+    private chainId: ChainId,
+    private retries = 2,
+    private timeout = 30000,
+    private rollback = true
+  ) {
+    const subgraphUrl = SUBGRAPH_URL_BY_CHAIN[this.chainId];
+    if (!subgraphUrl) {
+      throw new Error(`No subgraph url for chain id: ${this.chainId}`);
+    }
+    this.client = new GraphQLClient(subgraphUrl);
+  }
+
+  public async getPools(
+    _tokenIn?: Token,
+    _tokenOut?: Token,
+    providerConfig?: ProviderConfig
+  ): Promise<V3SubgraphPool[]> {
+    let blockNumber = providerConfig?.blockNumber
+      ? await providerConfig.blockNumber
+      : undefined;
+
+    const query = gql`
+      query getPools($pageSize: Int!, $id: String) {
+        pools(
+          first: $pageSize
+          ${blockNumber ? `block: { number: ${blockNumber} }` : ``}
+          where: { id_gt: $id }
+        ) {
+          id
+          token0 {
+            symbol
+            id
+          }
+          token1 {
+            symbol
+            id
+          }
+          feeTier
+          liquidity
+          totalValueLockedUSD
+          totalValueLockedETH
+        }
+      }
+    `;
+
+    let pools: RawV3SubgraphPool[] = [];
+
+    log.info(
+      `Getting V3 pools from the subgraph with page size ${PAGE_SIZE}${
+        providerConfig?.blockNumber
+          ? ` as of block ${providerConfig?.blockNumber}`
+          : ''
+      }.`
+    );
+
+    await retry(
+      async () => {
+        const timeout = new Timeout();
+
+        const getPools = async (): Promise<RawV3SubgraphPool[]> => {
+          let lastId = '';
+          let pools: RawV3SubgraphPool[] = [];
+          let poolsPage: RawV3SubgraphPool[] = [];
+
+          do {
+            const poolsResult = await this.client.request<{
+              pools: RawV3SubgraphPool[];
+            }>(query, {
+              pageSize: PAGE_SIZE,
+              id: lastId,
+            });
+
+            poolsPage = poolsResult.pools;
+
+            pools = pools.concat(poolsPage);
+
+            lastId = pools[pools.length - 1]!.id;
+          } while (poolsPage.length > 0);
+
+          return pools;
+        };
+
+        /* eslint-disable no-useless-catch */
+        try {
+          const getPoolsPromise = getPools();
+          const timerPromise = timeout.set(this.timeout).then(() => {
+            throw new Error(
+              `Timed out getting pools from subgraph: ${this.timeout}`
+            );
+          });
+          pools = await Promise.race([getPoolsPromise, timerPromise]);
+          return;
+        } catch (err) {
+          throw err;
+        } finally {
+          timeout.clear();
+        }
+        /* eslint-enable no-useless-catch */
+      },
+      {
+        retries: this.retries,
+        onRetry: (err, retry) => {
+          if (
+            this.rollback &&
+            blockNumber &&
+            _.includes(err.message, 'indexed up to')
+          ) {
+            blockNumber = blockNumber - 10;
+            log.info(
+              `Detected subgraph indexing error. Rolled back block number to: ${blockNumber}`
+            );
+          }
+          pools = [];
+          log.info(
+            { err },
+            `Failed to get pools from subgraph. Retry attempt: ${retry}`
+          );
+        },
+      }
+    );
+
+    const poolsSanitized = pools
+      .filter(
+        (pool) =>
+          parseInt(pool.liquidity) > 0 ||
+          parseFloat(pool.totalValueLockedETH) > 0.01
+      )
+      .map((pool) => {
+        const { totalValueLockedETH, totalValueLockedUSD, ...rest } = pool;
+
+        return {
+          ...rest,
+          id: pool.id.toLowerCase(),
+          token0: {
+            id: pool.token0.id.toLowerCase(),
+          },
+          token1: {
+            id: pool.token1.id.toLowerCase(),
+          },
+          tvlETH: parseFloat(totalValueLockedETH),
+          tvlUSD: parseFloat(totalValueLockedUSD),
+        };
+      });
+
+    log.info(
+      `Got ${pools.length} V3 pools from the subgraph. ${poolsSanitized.length} after filtering`
+    );
+
+    return poolsSanitized;
+  }
+}
diff --git a/lib/sor/providers/v3/uri-subgraph-provider.ts b/lib/sor/providers/v3/uri-subgraph-provider.ts
new file mode 100644
index 0000000..da5193d
--- /dev/null
+++ b/lib/sor/providers/v3/uri-subgraph-provider.ts
@@ -0,0 +1,7 @@
+import { URISubgraphProvider } from '../uri-subgraph-provider';
+
+import { IV3SubgraphProvider, V3SubgraphPool } from './subgraph-provider';
+
+export class V3URISubgraphProvider
+  extends URISubgraphProvider<V3SubgraphPool>
+  implements IV3SubgraphProvider {}
diff --git a/lib/sor/routers/alpha-router/alpha-router.ts b/lib/sor/routers/alpha-router/alpha-router.ts
new file mode 100644
index 0000000..72735b1
--- /dev/null
+++ b/lib/sor/routers/alpha-router/alpha-router.ts
@@ -0,0 +1,1892 @@
+import { BigNumber } from '@ethersproject/bignumber'
+import { BaseProvider, JsonRpcProvider } from '@ethersproject/providers'
+import DEFAULT_TOKEN_LIST from '@uniswap/default-token-list'
+import { Protocol, SwapRouter, Trade } from '@uniswap/router-sdk'
+import { ChainId, Currency, Fraction, Token, TradeType } from '@uniswap/sdk-core'
+import { TokenList } from '@uniswap/token-lists'
+import { Pool, Position, SqrtPriceMath, TickMath } from '@uniswap/v3-sdk'
+import retry from 'async-retry'
+import JSBI from 'jsbi'
+import _ from 'lodash'
+import NodeCache from 'node-cache'
+
+import {
+  CachedRoutes,
+  CacheMode,
+  CachingGasStationProvider,
+  CachingTokenProviderWithFallback,
+  CachingV2PoolProvider,
+  CachingV2SubgraphProvider,
+  CachingV3PoolProvider,
+  CachingV3SubgraphProvider,
+  EIP1559GasPriceProvider,
+  ETHGasStationInfoProvider,
+  IOnChainQuoteProvider,
+  IRouteCachingProvider,
+  ISwapRouterProvider,
+  IV2QuoteProvider,
+  IV2SubgraphProvider,
+  LegacyGasPriceProvider,
+  NodeJSCache,
+  OnChainGasPriceProvider,
+  OnChainQuoteProvider,
+  Simulator,
+  StaticV2SubgraphProvider,
+  StaticV3SubgraphProvider,
+  SwapRouterProvider,
+  UniswapMulticallProvider,
+  URISubgraphProvider,
+  V2QuoteProvider,
+  V2SubgraphProviderWithFallBacks,
+  V3SubgraphProviderWithFallBacks,
+} from '../../providers'
+import { CachingTokenListProvider, ITokenListProvider } from '../../providers/caching-token-list-provider'
+import { GasPrice, IGasPriceProvider } from '../../providers/gas-price-provider'
+import { ProviderConfig } from '../../providers/provider'
+import { ITokenProvider, TokenProvider } from '../../providers/token-provider'
+import { ITokenValidatorProvider, TokenValidatorProvider } from '../../providers/token-validator-provider'
+import { IV2PoolProvider, V2PoolProvider } from '../../providers/v2/pool-provider'
+import {
+  ArbitrumGasData,
+  ArbitrumGasDataProvider,
+  IL2GasDataProvider,
+  OptimismGasData,
+  OptimismGasDataProvider,
+} from '../../providers/v3/gas-data-provider'
+import { IV3PoolProvider, V3PoolProvider } from '../../providers/v3/pool-provider'
+import { IV3SubgraphProvider } from '../../providers/v3/subgraph-provider'
+import { Erc20__factory } from '../../types/other/factories/Erc20__factory'
+import { SWAP_ROUTER_02_ADDRESSES, WRAPPED_NATIVE_CURRENCY } from '../../util'
+import { CurrencyAmount } from '../../util/amounts'
+import { ID_TO_CHAIN_ID, ID_TO_NETWORK_NAME, V2_SUPPORTED } from '../../util/chains'
+import { getHighestLiquidityV3NativePool, getHighestLiquidityV3USDPool } from '../../util/gas-factory-helpers'
+import { log } from '../../util/log'
+import { buildSwapMethodParameters, buildTrade } from '../../util/methodParameters'
+import { metric, MetricLoggerUnit } from '../../util/metric'
+import { UNSUPPORTED_TOKENS } from '../../util/unsupported-tokens'
+import {
+  IRouter,
+  ISwapToRatio,
+  MethodParameters,
+  MixedRoute,
+  SwapAndAddConfig,
+  SwapAndAddOptions,
+  SwapAndAddParameters,
+  SwapOptions,
+  SwapRoute,
+  SwapToRatioResponse,
+  SwapToRatioStatus,
+  V2Route,
+  V3Route,
+} from '../router'
+
+import { DEFAULT_ROUTING_CONFIG_BY_CHAIN, ETH_GAS_STATION_API_URL } from './config'
+import { MixedRouteWithValidQuote, RouteWithValidQuote, V3RouteWithValidQuote } from './entities/route-with-valid-quote'
+import { BestSwapRoute, getBestSwapRoute } from './functions/best-swap-route'
+import { calculateRatioAmountIn } from './functions/calculate-ratio-amount-in'
+import {
+  CandidatePoolsBySelectionCriteria,
+  getV2CandidatePools,
+  // @ts-ignore
+  getV3CandidatePools,
+  PoolId,
+  V2CandidatePools,
+  // @ts-ignore
+  V3CandidatePools,
+} from './functions/get-candidate-pools'
+import {
+  IGasModel,
+  IOnChainGasModelFactory,
+  IV2GasModelFactory,
+  LiquidityCalculationPools,
+} from './gas-models/gas-model'
+import { MixedRouteHeuristicGasModelFactory } from './gas-models/mixedRoute/mixed-route-heuristic-gas-model'
+import { V2HeuristicGasModelFactory } from './gas-models/v2/v2-heuristic-gas-model'
+import { V3HeuristicGasModelFactory } from './gas-models/v3/v3-heuristic-gas-model'
+import { GetQuotesResult, MixedQuoter, V2Quoter, V3Quoter } from './quoters'
+import { Logger as PowertoolsLogger } from '@aws-lambda-powertools/logger'
+import { CONTEXT } from '../../../handlers/context'
+
+const powertoolsLogger = new PowertoolsLogger({ serviceName: 'AlphaRouter' })
+
+export type AlphaRouterParams = {
+  /**
+   * The chain id for this instance of the Alpha Router.
+   */
+  chainId: ChainId
+  /**
+   * The Web3 provider for getting on-chain data.
+   */
+  provider: BaseProvider
+  /**
+   * The provider to use for making multicalls. Used for getting on-chain data
+   * like pools, tokens, quotes in batch.
+   */
+  multicall2Provider?: UniswapMulticallProvider
+  /**
+   * The provider for getting all pools that exist on V3 from the Subgraph. The pools
+   * from this provider are filtered during the algorithm to a set of candidate pools.
+   */
+  v3SubgraphProvider?: IV3SubgraphProvider
+  /**
+   * The provider for getting data about V3 pools.
+   */
+  v3PoolProvider?: IV3PoolProvider
+  /**
+   * The provider for getting V3 quotes.
+   */
+  onChainQuoteProvider?: IOnChainQuoteProvider
+  /**
+   * The provider for getting all pools that exist on V2 from the Subgraph. The pools
+   * from this provider are filtered during the algorithm to a set of candidate pools.
+   */
+  v2SubgraphProvider?: IV2SubgraphProvider
+  /**
+   * The provider for getting data about V2 pools.
+   */
+  v2PoolProvider?: IV2PoolProvider
+  /**
+   * The provider for getting V3 quotes.
+   */
+  v2QuoteProvider?: IV2QuoteProvider
+  /**
+   * The provider for getting data about Tokens.
+   */
+  tokenProvider?: ITokenProvider
+  /**
+   * The provider for getting the current gas price to use when account for gas in the
+   * algorithm.
+   */
+  gasPriceProvider?: IGasPriceProvider
+  /**
+   * A factory for generating a gas model that is used when estimating the gas used by
+   * V3 routes.
+   */
+  v3GasModelFactory?: IOnChainGasModelFactory
+  /**
+   * A factory for generating a gas model that is used when estimating the gas used by
+   * V2 routes.
+   */
+  v2GasModelFactory?: IV2GasModelFactory
+  /**
+   * A factory for generating a gas model that is used when estimating the gas used by
+   * V3 routes.
+   */
+  mixedRouteGasModelFactory?: IOnChainGasModelFactory
+  /**
+   * A token list that specifies Token that should be blocked from routing through.
+   * Defaults to Uniswap's unsupported token list.
+   */
+  blockedTokenListProvider?: ITokenListProvider
+
+  /**
+   * Calls lens function on SwapRouter02 to determine ERC20 approval types for
+   * LP position tokens.
+   */
+  swapRouterProvider?: ISwapRouterProvider
+
+  /**
+   * Calls the optimism gas oracle contract to fetch constants for calculating the l1 security fee.
+   */
+  optimismGasDataProvider?: IL2GasDataProvider<OptimismGasData>
+
+  /**
+   * A token validator for detecting fee-on-transfer tokens or tokens that can't be transferred.
+   */
+  tokenValidatorProvider?: ITokenValidatorProvider
+
+  /**
+   * Calls the arbitrum gas data contract to fetch constants for calculating the l1 fee.
+   */
+  arbitrumGasDataProvider?: IL2GasDataProvider<ArbitrumGasData>
+
+  /**
+   * Simulates swaps and returns new SwapRoute with updated gas estimates.
+   */
+  simulator?: Simulator
+
+  /**
+   * A provider for caching the best route given an amount, quoteToken, tradeType
+   */
+  routeCachingProvider?: IRouteCachingProvider
+}
+
+export class MapWithLowerCaseKey<V> extends Map<string, V> {
+  override set(key: string, value: V): this {
+    return super.set(key.toLowerCase(), value)
+  }
+}
+
+/**
+ * Determines the pools that the algorithm will consider when finding the optimal swap.
+ *
+ * All pools on each protocol are filtered based on the heuristics specified here to generate
+ * the set of candidate pools. The Top N pools are taken by Total Value Locked (TVL).
+ *
+ * Higher values here result in more pools to explore which results in higher latency.
+ */
+export type ProtocolPoolSelection = {
+  /**
+   * The top N pools by TVL out of all pools on the protocol.
+   */
+  topN: number
+  /**
+   * The top N pools by TVL of pools that consist of tokenIn and tokenOut.
+   */
+  topNDirectSwaps: number
+  /**
+   * The top N pools by TVL of pools where one token is tokenIn and the
+   * top N pools by TVL of pools where one token is tokenOut tokenOut.
+   */
+  topNTokenInOut: number
+  /**
+   * Given the topNTokenInOut pools, gets the top N pools that involve the other token.
+   * E.g. for a WETH -> USDC swap, if topNTokenInOut found WETH -> DAI and WETH -> USDT,
+   * a value of 2 would find the top 2 pools that involve DAI and top 2 pools that involve USDT.
+   */
+  topNSecondHop: number
+  /**
+   * Given the topNTokenInOut pools and a token address,
+   * gets the top N pools that involve the other token.
+   * If token address is not on the list, we default to topNSecondHop.
+   * E.g. for a WETH -> USDC swap, if topNTokenInOut found WETH -> DAI and WETH -> USDT,
+   * and there's a mapping USDT => 4, but no mapping for DAI
+   * it would find the top 4 pools that involve USDT, and find the topNSecondHop pools that involve DAI
+   */
+  topNSecondHopForTokenAddress?: MapWithLowerCaseKey<number>
+  /**
+   * The top N pools for token in and token out that involve a token from a list of
+   * hardcoded 'base tokens'. These are standard tokens such as WETH, USDC, DAI, etc.
+   * This is similar to how the legacy routing algorithm used by Uniswap would select
+   * pools and is intended to make the new pool selection algorithm close to a superset
+   * of the old algorithm.
+   */
+  topNWithEachBaseToken: number
+  /**
+   * Given the topNWithEachBaseToken pools, takes the top N pools from the full list.
+   * E.g. for a WETH -> USDC swap, if topNWithEachBaseToken found WETH -0.05-> DAI,
+   * WETH -0.01-> DAI, WETH -0.05-> USDC, WETH -0.3-> USDC, a value of 2 would reduce
+   * this set to the top 2 pools from that full list.
+   */
+  topNWithBaseToken: number
+}
+
+export type AlphaRouterConfig = {
+  /**
+   * The block number to use for all on-chain data. If not provided, the router will
+   * use the latest block returned by the provider.
+   */
+  blockNumber?: number | Promise<number>
+  /**
+   * The protocols to consider when finding the optimal swap. If not provided all protocols
+   * will be used.
+   */
+  protocols?: Protocol[]
+  /**
+   * Config for selecting which pools to consider routing via on V2.
+   */
+  v2PoolSelection: ProtocolPoolSelection
+  /**
+   * Config for selecting which pools to consider routing via on V3.
+   */
+  v3PoolSelection: ProtocolPoolSelection
+  /**
+   * For each route, the maximum number of hops to consider. More hops will increase latency of the algorithm.
+   */
+  maxSwapsPerPath: number
+  /**
+   * The maximum number of splits in the returned route. A higher maximum will increase latency of the algorithm.
+   */
+  maxSplits: number
+  /**
+   * The minimum number of splits in the returned route.
+   * This parameters should always be set to 1. It is only included for testing purposes.
+   */
+  minSplits: number
+  /**
+   * Forces the returned swap to route across all protocols.
+   * This parameter should always be false. It is only included for testing purposes.
+   */
+  forceCrossProtocol: boolean
+  /**
+   * Force the alpha router to choose a mixed route swap.
+   * Default will be falsy. It is only included for testing purposes.
+   */
+  forceMixedRoutes?: boolean
+  /**
+   * The minimum percentage of the input token to use for each route in a split route.
+   * All routes will have a multiple of this value. For example is distribution percentage is 5,
+   * a potential return swap would be:
+   *
+   * 5% of input => Route 1
+   * 55% of input => Route 2
+   * 40% of input => Route 3
+   */
+  distributionPercent: number
+  /**
+   * Flag to indicate whether to use the cached routes or not.
+   * By default, the cached routes will be used.
+   */
+  useCachedRoutes?: boolean
+  /**
+   * Flag to indicate whether to write to the cached routes or not.
+   * By default, the cached routes will be written to.
+   */
+  writeToCachedRoutes?: boolean
+  /**
+   * Flag to indicate whether to use the CachedRoutes in optimistic mode.
+   * Optimistic mode means that we will allow blocksToLive greater than 1.
+   */
+  optimisticCachedRoutes?: boolean
+  /**
+   * Debug param that helps to see the short-term latencies improvements without impacting the main path.
+   */
+  debugRouting?: boolean
+}
+
+export class AlphaRouter implements IRouter<AlphaRouterConfig>, ISwapToRatio<AlphaRouterConfig, SwapAndAddConfig> {
+  protected chainId: ChainId
+  protected provider: BaseProvider
+  protected multicall2Provider: UniswapMulticallProvider
+  protected v3SubgraphProvider: IV3SubgraphProvider
+  protected v3PoolProvider: IV3PoolProvider
+  protected onChainQuoteProvider: IOnChainQuoteProvider
+  protected v2SubgraphProvider: IV2SubgraphProvider
+  protected v2QuoteProvider: IV2QuoteProvider
+  protected v2PoolProvider: IV2PoolProvider
+  protected tokenProvider: ITokenProvider
+  protected gasPriceProvider: IGasPriceProvider
+  protected swapRouterProvider: ISwapRouterProvider
+  protected v3GasModelFactory: IOnChainGasModelFactory
+  protected v2GasModelFactory: IV2GasModelFactory
+  protected mixedRouteGasModelFactory: IOnChainGasModelFactory
+  protected tokenValidatorProvider?: ITokenValidatorProvider
+  protected blockedTokenListProvider?: ITokenListProvider
+  protected l2GasDataProvider?: IL2GasDataProvider<OptimismGasData> | IL2GasDataProvider<ArbitrumGasData>
+  protected simulator?: Simulator
+  protected v2Quoter: V2Quoter
+  protected v3Quoter: V3Quoter
+  protected mixedQuoter: MixedQuoter
+  protected routeCachingProvider?: IRouteCachingProvider
+
+  constructor({
+    chainId,
+    provider,
+    multicall2Provider,
+    v3PoolProvider,
+    onChainQuoteProvider,
+    v2PoolProvider,
+    v2QuoteProvider,
+    v2SubgraphProvider,
+    tokenProvider,
+    blockedTokenListProvider,
+    v3SubgraphProvider,
+    gasPriceProvider,
+    v3GasModelFactory,
+    v2GasModelFactory,
+    mixedRouteGasModelFactory,
+    swapRouterProvider,
+    optimismGasDataProvider,
+    tokenValidatorProvider,
+    arbitrumGasDataProvider,
+    simulator,
+    routeCachingProvider,
+  }: AlphaRouterParams) {
+    this.chainId = chainId
+    this.provider = provider
+    this.multicall2Provider = multicall2Provider ?? new UniswapMulticallProvider(chainId, provider, 375_000)
+    this.v3PoolProvider =
+      v3PoolProvider ??
+      new CachingV3PoolProvider(
+        this.chainId,
+        new V3PoolProvider(ID_TO_CHAIN_ID(chainId), this.multicall2Provider),
+        new NodeJSCache(new NodeCache({ stdTTL: 360, useClones: false }))
+      )
+    this.simulator = simulator
+    this.routeCachingProvider = routeCachingProvider
+
+    // Skip the caching provider to test
+    this.routeCachingProvider = undefined
+
+    if (onChainQuoteProvider) {
+      this.onChainQuoteProvider = onChainQuoteProvider
+    } else {
+      switch (chainId) {
+        case ChainId.OPTIMISM:
+        case ChainId.OPTIMISM_GOERLI:
+          this.onChainQuoteProvider = new OnChainQuoteProvider(
+            chainId,
+            provider,
+            this.multicall2Provider,
+            {
+              retries: 2,
+              minTimeout: 100,
+              maxTimeout: 1000,
+            },
+            {
+              multicallChunk: 110,
+              gasLimitPerCall: 1_200_000,
+              quoteMinSuccessRate: 0.1,
+            },
+            {
+              gasLimitOverride: 3_000_000,
+              multicallChunk: 45,
+            },
+            {
+              gasLimitOverride: 3_000_000,
+              multicallChunk: 45,
+            },
+            {
+              baseBlockOffset: -10,
+              rollback: {
+                enabled: true,
+                attemptsBeforeRollback: 1,
+                rollbackBlockOffset: -10,
+              },
+            }
+          )
+          break
+        case ChainId.BASE:
+        case ChainId.BASE_GOERLI:
+          this.onChainQuoteProvider = new OnChainQuoteProvider(
+            chainId,
+            provider,
+            this.multicall2Provider,
+            {
+              retries: 2,
+              minTimeout: 100,
+              maxTimeout: 1000,
+            },
+            {
+              multicallChunk: 80,
+              gasLimitPerCall: 1_200_000,
+              quoteMinSuccessRate: 0.1,
+            },
+            {
+              gasLimitOverride: 3_000_000,
+              multicallChunk: 45,
+            },
+            {
+              gasLimitOverride: 3_000_000,
+              multicallChunk: 45,
+            },
+            {
+              baseBlockOffset: -10,
+              rollback: {
+                enabled: true,
+                attemptsBeforeRollback: 1,
+                rollbackBlockOffset: -10,
+              },
+            }
+          )
+          break
+        case ChainId.ARBITRUM_ONE:
+        case ChainId.ARBITRUM_GOERLI:
+          this.onChainQuoteProvider = new OnChainQuoteProvider(
+            chainId,
+            provider,
+            this.multicall2Provider,
+            {
+              retries: 2,
+              minTimeout: 100,
+              maxTimeout: 1000,
+            },
+            {
+              multicallChunk: 10,
+              gasLimitPerCall: 12_000_000,
+              quoteMinSuccessRate: 0.1,
+            },
+            {
+              gasLimitOverride: 30_000_000,
+              multicallChunk: 6,
+            },
+            {
+              gasLimitOverride: 30_000_000,
+              multicallChunk: 6,
+            }
+          )
+          break
+        case ChainId.CELO:
+        case ChainId.CELO_ALFAJORES:
+          this.onChainQuoteProvider = new OnChainQuoteProvider(
+            chainId,
+            provider,
+            this.multicall2Provider,
+            {
+              retries: 2,
+              minTimeout: 100,
+              maxTimeout: 1000,
+            },
+            {
+              multicallChunk: 10,
+              gasLimitPerCall: 5_000_000,
+              quoteMinSuccessRate: 0.1,
+            },
+            {
+              gasLimitOverride: 5_000_000,
+              multicallChunk: 5,
+            },
+            {
+              gasLimitOverride: 6_250_000,
+              multicallChunk: 4,
+            }
+          )
+          break
+        default:
+          this.onChainQuoteProvider = new OnChainQuoteProvider(
+            chainId,
+            provider,
+            this.multicall2Provider,
+            {
+              retries: 2,
+              minTimeout: 100,
+              maxTimeout: 1000,
+            },
+            {
+              multicallChunk: 210,
+              gasLimitPerCall: 705_000,
+              quoteMinSuccessRate: 0.15,
+            },
+            {
+              gasLimitOverride: 2_000_000,
+              multicallChunk: 70,
+            }
+          )
+          break
+      }
+    }
+
+    this.v2PoolProvider =
+      v2PoolProvider ??
+      new CachingV2PoolProvider(
+        chainId,
+        new V2PoolProvider(chainId, this.multicall2Provider),
+        new NodeJSCache(new NodeCache({ stdTTL: 60, useClones: false }))
+      )
+
+    this.v2QuoteProvider = v2QuoteProvider ?? new V2QuoteProvider()
+
+    this.blockedTokenListProvider =
+      blockedTokenListProvider ??
+      new CachingTokenListProvider(
+        chainId,
+        UNSUPPORTED_TOKENS as TokenList,
+        new NodeJSCache(new NodeCache({ stdTTL: 3600, useClones: false }))
+      )
+    this.tokenProvider =
+      tokenProvider ??
+      new CachingTokenProviderWithFallback(
+        chainId,
+        new NodeJSCache(new NodeCache({ stdTTL: 3600, useClones: false })),
+        new CachingTokenListProvider(
+          chainId,
+          DEFAULT_TOKEN_LIST,
+          new NodeJSCache(new NodeCache({ stdTTL: 3600, useClones: false }))
+        ),
+        new TokenProvider(chainId, this.multicall2Provider)
+      )
+
+    const chainName = ID_TO_NETWORK_NAME(chainId)
+
+    // ipfs urls in the following format: `https://cloudflare-ipfs.com/ipns/api.uniswap.org/v1/pools/${protocol}/${chainName}.json`;
+    if (v2SubgraphProvider) {
+      this.v2SubgraphProvider = v2SubgraphProvider
+    } else {
+      this.v2SubgraphProvider = new V2SubgraphProviderWithFallBacks([
+        new CachingV2SubgraphProvider(
+          chainId,
+          new URISubgraphProvider(
+            chainId,
+            `https://cloudflare-ipfs.com/ipns/api.uniswap.org/v1/pools/v2/${chainName}.json`,
+            undefined,
+            0
+          ),
+          new NodeJSCache(new NodeCache({ stdTTL: 300, useClones: false }))
+        ),
+        new StaticV2SubgraphProvider(chainId),
+      ])
+    }
+
+    if (v3SubgraphProvider) {
+      this.v3SubgraphProvider = v3SubgraphProvider
+    } else {
+      this.v3SubgraphProvider = new V3SubgraphProviderWithFallBacks([
+        new CachingV3SubgraphProvider(
+          chainId,
+          new URISubgraphProvider(
+            chainId,
+            `https://cloudflare-ipfs.com/ipns/api.uniswap.org/v1/pools/v3/${chainName}.json`,
+            undefined,
+            0
+          ),
+          new NodeJSCache(new NodeCache({ stdTTL: 300, useClones: false }))
+        ),
+        new StaticV3SubgraphProvider(chainId, this.v3PoolProvider),
+      ])
+    }
+
+    let gasPriceProviderInstance: IGasPriceProvider
+    if (JsonRpcProvider.isProvider(this.provider)) {
+      gasPriceProviderInstance = new OnChainGasPriceProvider(
+        chainId,
+        new EIP1559GasPriceProvider(this.provider as JsonRpcProvider),
+        new LegacyGasPriceProvider(this.provider as JsonRpcProvider)
+      )
+    } else {
+      gasPriceProviderInstance = new ETHGasStationInfoProvider(ETH_GAS_STATION_API_URL)
+    }
+
+    this.gasPriceProvider =
+      gasPriceProvider ??
+      new CachingGasStationProvider(
+        chainId,
+        gasPriceProviderInstance,
+        new NodeJSCache<GasPrice>(new NodeCache({ stdTTL: 7, useClones: false }))
+      )
+    this.v3GasModelFactory = v3GasModelFactory ?? new V3HeuristicGasModelFactory()
+    this.v2GasModelFactory = v2GasModelFactory ?? new V2HeuristicGasModelFactory()
+    this.mixedRouteGasModelFactory = mixedRouteGasModelFactory ?? new MixedRouteHeuristicGasModelFactory()
+
+    this.swapRouterProvider = swapRouterProvider ?? new SwapRouterProvider(this.multicall2Provider, this.chainId)
+
+    if (chainId === ChainId.OPTIMISM || chainId === ChainId.BASE) {
+      this.l2GasDataProvider = optimismGasDataProvider ?? new OptimismGasDataProvider(chainId, this.multicall2Provider)
+    }
+    if (chainId === ChainId.ARBITRUM_ONE || chainId === ChainId.ARBITRUM_GOERLI) {
+      this.l2GasDataProvider = arbitrumGasDataProvider ?? new ArbitrumGasDataProvider(chainId, this.provider)
+    }
+    if (tokenValidatorProvider) {
+      this.tokenValidatorProvider = tokenValidatorProvider
+    } else if (this.chainId === ChainId.MAINNET) {
+      this.tokenValidatorProvider = new TokenValidatorProvider(
+        this.chainId,
+        this.multicall2Provider,
+        new NodeJSCache(new NodeCache({ stdTTL: 30000, useClones: false }))
+      )
+    }
+
+    // Initialize the Quoters.
+    // Quoters are an abstraction encapsulating the business logic of fetching routes and quotes.
+    this.v2Quoter = new V2Quoter(
+      this.v2SubgraphProvider,
+      this.v2PoolProvider,
+      this.v2QuoteProvider,
+      this.v2GasModelFactory,
+      this.tokenProvider,
+      this.chainId,
+      this.blockedTokenListProvider,
+      this.tokenValidatorProvider
+    )
+
+    this.v3Quoter = new V3Quoter(
+      this.v3SubgraphProvider,
+      this.v3PoolProvider,
+      this.onChainQuoteProvider,
+      this.tokenProvider,
+      this.chainId,
+      this.blockedTokenListProvider,
+      this.tokenValidatorProvider
+    )
+
+    this.mixedQuoter = new MixedQuoter(
+      this.v3SubgraphProvider,
+      this.v3PoolProvider,
+      this.v2SubgraphProvider,
+      this.v2PoolProvider,
+      this.onChainQuoteProvider,
+      this.tokenProvider,
+      this.chainId,
+      this.blockedTokenListProvider,
+      this.tokenValidatorProvider
+    )
+  }
+
+  public async routeToRatio(
+    token0Balance: CurrencyAmount,
+    token1Balance: CurrencyAmount,
+    position: Position,
+    swapAndAddConfig: SwapAndAddConfig,
+    swapAndAddOptions?: SwapAndAddOptions,
+    routingConfig: Partial<AlphaRouterConfig> = DEFAULT_ROUTING_CONFIG_BY_CHAIN(this.chainId)
+  ): Promise<SwapToRatioResponse> {
+    if (token1Balance.currency.wrapped.sortsBefore(token0Balance.currency.wrapped)) {
+      ;[token0Balance, token1Balance] = [token1Balance, token0Balance]
+    }
+
+    let preSwapOptimalRatio = this.calculateOptimalRatio(position, position.pool.sqrtRatioX96, true)
+    // set up parameters according to which token will be swapped
+    let zeroForOne: boolean
+    if (position.pool.tickCurrent > position.tickUpper) {
+      zeroForOne = true
+    } else if (position.pool.tickCurrent < position.tickLower) {
+      zeroForOne = false
+    } else {
+      zeroForOne = new Fraction(token0Balance.quotient, token1Balance.quotient).greaterThan(preSwapOptimalRatio)
+      if (!zeroForOne) preSwapOptimalRatio = preSwapOptimalRatio.invert()
+    }
+
+    const [inputBalance, outputBalance] = zeroForOne ? [token0Balance, token1Balance] : [token1Balance, token0Balance]
+
+    let optimalRatio = preSwapOptimalRatio
+    let postSwapTargetPool = position.pool
+    let exchangeRate: Fraction = zeroForOne ? position.pool.token0Price : position.pool.token1Price
+    let swap: SwapRoute | null = null
+    let ratioAchieved = false
+    let n = 0
+    // iterate until we find a swap with a sufficient ratio or return null
+    while (!ratioAchieved) {
+      n++
+      if (n > swapAndAddConfig.maxIterations) {
+        log.info('max iterations exceeded')
+        return {
+          status: SwapToRatioStatus.NO_ROUTE_FOUND,
+          error: 'max iterations exceeded',
+        }
+      }
+
+      const amountToSwap = calculateRatioAmountIn(optimalRatio, exchangeRate, inputBalance, outputBalance)
+      if (amountToSwap.equalTo(0)) {
+        log.info(`no swap needed: amountToSwap = 0`)
+        return {
+          status: SwapToRatioStatus.NO_SWAP_NEEDED,
+        }
+      }
+      swap = await this.route(amountToSwap, outputBalance.currency, TradeType.EXACT_INPUT, undefined, {
+        ...DEFAULT_ROUTING_CONFIG_BY_CHAIN(this.chainId),
+        ...routingConfig,
+        /// @dev We do not want to query for mixedRoutes for routeToRatio as they are not supported
+        /// [Protocol.V3, Protocol.V2] will make sure we only query for V3 and V2
+        protocols: [Protocol.V3, Protocol.V2],
+      })
+      if (!swap) {
+        log.info('no route found from this.route()')
+        return {
+          status: SwapToRatioStatus.NO_ROUTE_FOUND,
+          error: 'no route found',
+        }
+      }
+
+      const inputBalanceUpdated = inputBalance.subtract(swap.trade!.inputAmount)
+      const outputBalanceUpdated = outputBalance.add(swap.trade!.outputAmount)
+      const newRatio = inputBalanceUpdated.divide(outputBalanceUpdated)
+
+      let targetPoolPriceUpdate
+      swap.route.forEach((route) => {
+        if (route.protocol === Protocol.V3) {
+          const v3Route = route as V3RouteWithValidQuote
+          v3Route.route.pools.forEach((pool, i) => {
+            if (
+              pool.token0.equals(position.pool.token0) &&
+              pool.token1.equals(position.pool.token1) &&
+              pool.fee === position.pool.fee
+            ) {
+              targetPoolPriceUpdate = JSBI.BigInt(v3Route.sqrtPriceX96AfterList[i]!.toString())
+              optimalRatio = this.calculateOptimalRatio(
+                position,
+                JSBI.BigInt(targetPoolPriceUpdate!.toString()),
+                zeroForOne
+              )
+            }
+          })
+        }
+      })
+      if (!targetPoolPriceUpdate) {
+        optimalRatio = preSwapOptimalRatio
+      }
+      ratioAchieved =
+        newRatio.equalTo(optimalRatio) ||
+        this.absoluteValue(newRatio.asFraction.divide(optimalRatio).subtract(1)).lessThan(
+          swapAndAddConfig.ratioErrorTolerance
+        )
+
+      if (ratioAchieved && targetPoolPriceUpdate) {
+        postSwapTargetPool = new Pool(
+          position.pool.token0,
+          position.pool.token1,
+          position.pool.fee,
+          targetPoolPriceUpdate,
+          position.pool.liquidity,
+          TickMath.getTickAtSqrtRatio(targetPoolPriceUpdate),
+          position.pool.tickDataProvider
+        )
+      }
+      exchangeRate = swap.trade!.outputAmount.divide(swap.trade!.inputAmount)
+
+      log.info(
+        {
+          exchangeRate: exchangeRate.asFraction.toFixed(18),
+          optimalRatio: optimalRatio.asFraction.toFixed(18),
+          newRatio: newRatio.asFraction.toFixed(18),
+          inputBalanceUpdated: inputBalanceUpdated.asFraction.toFixed(18),
+          outputBalanceUpdated: outputBalanceUpdated.asFraction.toFixed(18),
+          ratioErrorTolerance: swapAndAddConfig.ratioErrorTolerance.toFixed(18),
+          iterationN: n.toString(),
+        },
+        'QuoteToRatio Iteration Parameters'
+      )
+
+      if (exchangeRate.equalTo(0)) {
+        log.info('exchangeRate to 0')
+        return {
+          status: SwapToRatioStatus.NO_ROUTE_FOUND,
+          error: 'insufficient liquidity to swap to optimal ratio',
+        }
+      }
+    }
+
+    if (!swap) {
+      return {
+        status: SwapToRatioStatus.NO_ROUTE_FOUND,
+        error: 'no route found',
+      }
+    }
+    let methodParameters: MethodParameters | undefined
+    if (swapAndAddOptions) {
+      methodParameters = await this.buildSwapAndAddMethodParameters(swap.trade, swapAndAddOptions, {
+        initialBalanceTokenIn: inputBalance,
+        initialBalanceTokenOut: outputBalance,
+        preLiquidityPosition: position,
+      })
+    }
+
+    return {
+      status: SwapToRatioStatus.SUCCESS,
+      result: { ...swap, methodParameters, optimalRatio, postSwapTargetPool },
+    }
+  }
+
+  /**
+   * @inheritdoc IRouter
+   */
+  public async route(
+    amount: CurrencyAmount,
+    quoteCurrency: Currency,
+    tradeType: TradeType,
+    swapConfig?: SwapOptions,
+    partialRoutingConfig: Partial<AlphaRouterConfig> = {},
+    cannedRoutingConfig: Partial<AlphaRouterConfig> = {}
+  ): Promise<SwapRoute | null> {
+    const { currencyIn, currencyOut } = this.determineCurrencyInOutFromTradeType(tradeType, amount, quoteCurrency)
+
+    const tokenIn = currencyIn.wrapped
+    const tokenOut = currencyOut.wrapped
+
+    metric.setProperty('chainId', this.chainId)
+    metric.setProperty('pair', `${tokenIn.symbol}/${tokenOut.symbol}`)
+    metric.setProperty('tokenIn', tokenIn.address)
+    metric.setProperty('tokenOut', tokenOut.address)
+    metric.setProperty('tradeType', tradeType === TradeType.EXACT_INPUT ? 'ExactIn' : 'ExactOut')
+
+    metric.putMetric(`QuoteRequestedForChain${this.chainId}`, 1, MetricLoggerUnit.Count)
+
+    // Get a block number to specify in all our calls. Ensures data we fetch from chain is
+    // from the same block.
+    const blockNumber = partialRoutingConfig.blockNumber ?? this.getBlockNumberPromise()
+
+    let routingConfig: AlphaRouterConfig = _.merge(
+      {
+        // These settings could be changed by the partialRoutingConfig
+        useCachedRoutes: true,
+        writeToCachedRoutes: true,
+        optimisticCachedRoutes: false,
+      },
+      DEFAULT_ROUTING_CONFIG_BY_CHAIN(this.chainId),
+      partialRoutingConfig,
+      { blockNumber }
+    )
+
+    routingConfig = {
+      ...routingConfig,
+      v2PoolSelection: {
+        topN: 2,
+        topNDirectSwaps: 2,
+        topNTokenInOut: 2,
+        topNSecondHop: 1,
+        topNWithEachBaseToken: 2,
+        topNWithBaseToken: 2,
+      },
+      v3PoolSelection: {
+        topN: 2,
+        topNDirectSwaps: 2,
+        topNTokenInOut: 2,
+        topNSecondHop: 1,
+        topNWithEachBaseToken: 2,
+        topNWithBaseToken: 2,
+      },
+      maxSwapsPerPath: 2,
+      minSplits: 1,
+      maxSplits: 1,
+      distributionPercent: 50,
+      protocols: [Protocol.V3, Protocol.V2, Protocol.MIXED],
+      forceCrossProtocol: false,
+      forceMixedRoutes: false,
+      ...cannedRoutingConfig,
+    }
+
+    powertoolsLogger.info('Using Routing Config', {
+      routingConfig,
+    })
+
+    const gasPriceWei = await this.getGasPriceWei()
+
+    const quoteToken = quoteCurrency.wrapped
+
+    const [v3GasModel, mixedRouteGasModel] = await this.getGasModels(gasPriceWei, amount.currency.wrapped, quoteToken, {
+      blockNumber,
+    })
+
+    // Create a Set to sanitize the protocols input, a Set of undefined becomes an empty set,
+    // Then create an Array from the values of that Set.
+    const protocols: Protocol[] = Array.from(new Set(routingConfig.protocols).values())
+
+    const cacheMode = await this.routeCachingProvider?.getCacheMode(
+      this.chainId,
+      amount,
+      quoteToken,
+      tradeType,
+      protocols
+    )
+
+    // Fetch CachedRoutes
+    let cachedRoutes: CachedRoutes | undefined
+    if (routingConfig.useCachedRoutes && cacheMode !== CacheMode.Darkmode) {
+      cachedRoutes = await this.routeCachingProvider?.getCachedRoute(
+        this.chainId,
+        amount,
+        quoteToken,
+        tradeType,
+        protocols,
+        await blockNumber,
+        routingConfig.optimisticCachedRoutes
+      )
+    }
+
+    if (cacheMode && cacheMode !== CacheMode.Darkmode && !cachedRoutes) {
+      metric.putMetric(`GetCachedRoute_miss_${cacheMode}`, 1, MetricLoggerUnit.Count)
+      log.info(
+        {
+          tokenIn: tokenIn.symbol,
+          tokenInAddress: tokenIn.address,
+          tokenOut: tokenOut.symbol,
+          tokenOutAddress: tokenOut.address,
+          cacheMode,
+          amount: amount.toExact(),
+          chainId: this.chainId,
+          tradeType: this.tradeTypeStr(tradeType),
+        },
+        `GetCachedRoute miss ${cacheMode} for ${this.tokenPairSymbolTradeTypeChainId(tokenIn, tokenOut, tradeType)}`
+      )
+    } else if (cachedRoutes) {
+      metric.putMetric(`GetCachedRoute_hit_${cacheMode}`, 1, MetricLoggerUnit.Count)
+      log.info(
+        {
+          tokenIn: tokenIn.symbol,
+          tokenInAddress: tokenIn.address,
+          tokenOut: tokenOut.symbol,
+          tokenOutAddress: tokenOut.address,
+          cacheMode,
+          amount: amount.toExact(),
+          chainId: this.chainId,
+          tradeType: this.tradeTypeStr(tradeType),
+        },
+        `GetCachedRoute hit ${cacheMode} for ${this.tokenPairSymbolTradeTypeChainId(tokenIn, tokenOut, tradeType)}`
+      )
+    }
+
+    let swapRouteFromCachePromise: Promise<BestSwapRoute | null> = Promise.resolve(null)
+    if (cachedRoutes) {
+      swapRouteFromCachePromise = this.getSwapRouteFromCache(
+        cachedRoutes,
+        await blockNumber,
+        amount,
+        quoteToken,
+        tradeType,
+        routingConfig,
+        v3GasModel,
+        mixedRouteGasModel,
+        gasPriceWei
+      )
+    }
+
+    let swapRouteFromChainPromise: Promise<BestSwapRoute | null> = Promise.resolve(null)
+    if (!cachedRoutes || cacheMode !== CacheMode.Livemode) {
+      swapRouteFromChainPromise = this.getSwapRouteFromChain(
+        amount,
+        tokenIn,
+        tokenOut,
+        protocols,
+        quoteToken,
+        tradeType,
+        routingConfig,
+        v3GasModel,
+        mixedRouteGasModel,
+        gasPriceWei
+      )
+    }
+
+    const [swapRouteFromCache, swapRouteFromChain] = await Promise.all([
+      swapRouteFromCachePromise,
+      swapRouteFromChainPromise,
+    ])
+
+    let swapRouteRaw: BestSwapRoute | null
+    if (cacheMode === CacheMode.Livemode && swapRouteFromCache) {
+      log.info(`CacheMode is ${cacheMode}, and we are using swapRoute from cache`)
+      swapRouteRaw = swapRouteFromCache
+    } else {
+      log.info(`CacheMode is ${cacheMode}, and we are using materialized swapRoute`)
+      swapRouteRaw = swapRouteFromChain
+    }
+
+    if (cacheMode === CacheMode.Tapcompare && swapRouteFromCache && swapRouteFromChain) {
+      const quoteDiff = swapRouteFromChain.quote.subtract(swapRouteFromCache.quote)
+      const quoteGasAdjustedDiff = swapRouteFromChain.quoteGasAdjusted.subtract(swapRouteFromCache.quoteGasAdjusted)
+      const gasUsedDiff = swapRouteFromChain.estimatedGasUsed.sub(swapRouteFromCache.estimatedGasUsed)
+
+      // Only log if quoteDiff is different from 0, or if quoteGasAdjustedDiff and gasUsedDiff are both different from 0
+      if (!quoteDiff.equalTo(0) || !(quoteGasAdjustedDiff.equalTo(0) || gasUsedDiff.eq(0))) {
+        // Calculates the percentage of the difference with respect to the quoteFromChain (not from cache)
+        const misquotePercent = quoteGasAdjustedDiff.divide(swapRouteFromChain.quoteGasAdjusted).multiply(100)
+
+        metric.putMetric(
+          `TapcompareCachedRoute_quoteGasAdjustedDiffPercent`,
+          Number(misquotePercent.toExact()),
+          MetricLoggerUnit.Percent
+        )
+
+        log.warn(
+          {
+            quoteFromChain: swapRouteFromChain.quote.toExact(),
+            quoteFromCache: swapRouteFromCache.quote.toExact(),
+            quoteDiff: quoteDiff.toExact(),
+            quoteGasAdjustedFromChain: swapRouteFromChain.quoteGasAdjusted.toExact(),
+            quoteGasAdjustedFromCache: swapRouteFromCache.quoteGasAdjusted.toExact(),
+            quoteGasAdjustedDiff: quoteGasAdjustedDiff.toExact(),
+            gasUsedFromChain: swapRouteFromChain.estimatedGasUsed.toString(),
+            gasUsedFromCache: swapRouteFromCache.estimatedGasUsed.toString(),
+            gasUsedDiff: gasUsedDiff.toString(),
+            routesFromChain: swapRouteFromChain.routes.toString(),
+            routesFromCache: swapRouteFromCache.routes.toString(),
+            amount: amount.toExact(),
+            originalAmount: cachedRoutes?.originalAmount,
+            pair: this.tokenPairSymbolTradeTypeChainId(tokenIn, tokenOut, tradeType),
+            blockNumber,
+          },
+          `Comparing quotes between Chain and Cache for ${this.tokenPairSymbolTradeTypeChainId(
+            tokenIn,
+            tokenOut,
+            tradeType
+          )}`
+        )
+      }
+    }
+
+    if (!swapRouteRaw) {
+      return null
+    }
+
+    const {
+      quote,
+      quoteGasAdjusted,
+      estimatedGasUsed,
+      routes: routeAmounts,
+      estimatedGasUsedQuoteToken,
+      estimatedGasUsedUSD,
+    } = swapRouteRaw
+
+    if (
+      this.routeCachingProvider &&
+      routingConfig.writeToCachedRoutes &&
+      cacheMode !== CacheMode.Darkmode &&
+      swapRouteFromChain
+    ) {
+      // Generate the object to be cached
+      const routesToCache = CachedRoutes.fromRoutesWithValidQuotes(
+        swapRouteFromChain.routes,
+        this.chainId,
+        tokenIn,
+        tokenOut,
+        protocols.sort(), // sort it for consistency in the order of the protocols.
+        await blockNumber,
+        tradeType,
+        amount.toExact()
+      )
+
+      if (routesToCache) {
+        // Attempt to insert the entry in cache. This is fire and forget promise.
+        // The catch method will prevent any exception from blocking the normal code execution.
+        this.routeCachingProvider
+          .setCachedRoute(routesToCache, amount)
+          .then((success) => {
+            const status = success ? 'success' : 'rejected'
+            metric.putMetric(`SetCachedRoute_${status}`, 1, MetricLoggerUnit.Count)
+          })
+          .catch((reason) => {
+            log.error(
+              {
+                reason: reason,
+                tokenPair: this.tokenPairSymbolTradeTypeChainId(tokenIn, tokenOut, tradeType),
+              },
+              `SetCachedRoute failure`
+            )
+
+            metric.putMetric(`SetCachedRoute_failure`, 1, MetricLoggerUnit.Count)
+          })
+      }
+    }
+
+    metric.putMetric(`QuoteFoundForChain${this.chainId}`, 1, MetricLoggerUnit.Count)
+
+    // Build Trade object that represents the optimal swap.
+    const trade = buildTrade<typeof tradeType>(currencyIn, currencyOut, tradeType, routeAmounts)
+
+    let methodParameters: MethodParameters | undefined
+
+    // If user provided recipient, deadline etc. we also generate the calldata required to execute
+    // the swap and return it too.
+    if (swapConfig) {
+      methodParameters = buildSwapMethodParameters(trade, swapConfig, this.chainId)
+    }
+
+    const swapRoute: SwapRoute = {
+      quote,
+      quoteGasAdjusted,
+      estimatedGasUsed,
+      estimatedGasUsedQuoteToken,
+      estimatedGasUsedUSD,
+      gasPriceWei,
+      route: routeAmounts,
+      trade,
+      methodParameters,
+      blockNumber: BigNumber.from(await blockNumber),
+    }
+
+    if (swapConfig && swapConfig.simulate && methodParameters && methodParameters.calldata) {
+      if (!this.simulator) {
+        throw new Error('Simulator not initialized!')
+      }
+      log.info({ swapConfig, methodParameters }, 'Starting simulation')
+      const fromAddress = swapConfig.simulate.fromAddress
+      const beforeSimulate = Date.now()
+      const swapRouteWithSimulation = await this.simulator.simulate(
+        fromAddress,
+        swapConfig,
+        swapRoute,
+        amount,
+        // Quote will be in WETH even if quoteCurrency is ETH
+        // So we init a new CurrencyAmount object here
+        CurrencyAmount.fromRawAmount(quoteCurrency, quote.quotient.toString()),
+        this.l2GasDataProvider ? await this.l2GasDataProvider!.getGasData() : undefined,
+        { blockNumber }
+      )
+      metric.putMetric('SimulateTransaction', Date.now() - beforeSimulate, MetricLoggerUnit.Milliseconds)
+      return swapRouteWithSimulation
+    }
+
+    return swapRoute
+  }
+
+  private async getSwapRouteFromCache(
+    cachedRoutes: CachedRoutes,
+    blockNumber: number,
+    amount: CurrencyAmount,
+    quoteToken: Token,
+    tradeType: TradeType,
+    routingConfig: AlphaRouterConfig,
+    v3GasModel: IGasModel<V3RouteWithValidQuote>,
+    mixedRouteGasModel: IGasModel<MixedRouteWithValidQuote>,
+    gasPriceWei: BigNumber
+  ): Promise<BestSwapRoute | null> {
+    log.info(
+      {
+        protocols: cachedRoutes.protocolsCovered,
+        tradeType: cachedRoutes.tradeType,
+        cachedBlockNumber: cachedRoutes.blockNumber,
+        quoteBlockNumber: blockNumber,
+      },
+      'Routing across CachedRoute'
+    )
+    const quotePromises: Promise<GetQuotesResult>[] = []
+
+    const v3Routes = cachedRoutes.routes.filter((route) => route.protocol === Protocol.V3)
+    const v2Routes = cachedRoutes.routes.filter((route) => route.protocol === Protocol.V2)
+    const mixedRoutes = cachedRoutes.routes.filter((route) => route.protocol === Protocol.MIXED)
+
+    let percents: number[]
+    let amounts: CurrencyAmount[]
+    if (cachedRoutes.routes.length > 1) {
+      // If we have more than 1 route, we will quote the different percents for it, following the regular process
+      ;[percents, amounts] = this.getAmountDistribution(amount, routingConfig)
+    } else if (cachedRoutes.routes.length == 1) {
+      ;[percents, amounts] = [[100], [amount]]
+    } else {
+      // In this case this means that there's no route, so we return null
+      return Promise.resolve(null)
+    }
+
+    if (v3Routes.length > 0) {
+      const v3RoutesFromCache: V3Route[] = v3Routes.map((cachedRoute) => cachedRoute.route as V3Route)
+      metric.putMetric('SwapRouteFromCache_V3_GetQuotes_Request', 1, MetricLoggerUnit.Count)
+
+      const beforeGetQuotes = Date.now()
+
+      quotePromises.push(
+        this.v3Quoter
+          .getQuotes(v3RoutesFromCache, amounts, percents, quoteToken, tradeType, routingConfig, undefined, v3GasModel)
+          .then((result) => {
+            metric.putMetric(
+              `SwapRouteFromCache_V3_GetQuotes_Load`,
+              Date.now() - beforeGetQuotes,
+              MetricLoggerUnit.Milliseconds
+            )
+
+            return result
+          })
+      )
+    }
+
+    if (v2Routes.length > 0) {
+      const v2RoutesFromCache: V2Route[] = v2Routes.map((cachedRoute) => cachedRoute.route as V2Route)
+      metric.putMetric('SwapRouteFromCache_V2_GetQuotes_Request', 1, MetricLoggerUnit.Count)
+
+      const beforeGetQuotes = Date.now()
+
+      quotePromises.push(
+        this.v2Quoter
+          .refreshRoutesThenGetQuotes(
+            cachedRoutes.tokenIn,
+            cachedRoutes.tokenOut,
+            v2RoutesFromCache,
+            amounts,
+            percents,
+            quoteToken,
+            tradeType,
+            routingConfig,
+            gasPriceWei
+          )
+          .then((result) => {
+            metric.putMetric(
+              `SwapRouteFromCache_V2_GetQuotes_Load`,
+              Date.now() - beforeGetQuotes,
+              MetricLoggerUnit.Milliseconds
+            )
+
+            return result
+          })
+      )
+    }
+
+    if (mixedRoutes.length > 0) {
+      const mixedRoutesFromCache: MixedRoute[] = mixedRoutes.map((cachedRoute) => cachedRoute.route as MixedRoute)
+      metric.putMetric('SwapRouteFromCache_Mixed_GetQuotes_Request', 1, MetricLoggerUnit.Count)
+
+      const beforeGetQuotes = Date.now()
+
+      quotePromises.push(
+        this.mixedQuoter
+          .getQuotes(
+            mixedRoutesFromCache,
+            amounts,
+            percents,
+            quoteToken,
+            tradeType,
+            routingConfig,
+            undefined,
+            mixedRouteGasModel
+          )
+          .then((result) => {
+            metric.putMetric(
+              `SwapRouteFromCache_Mixed_GetQuotes_Load`,
+              Date.now() - beforeGetQuotes,
+              MetricLoggerUnit.Milliseconds
+            )
+
+            return result
+          })
+      )
+    }
+
+    const getQuotesResults = await Promise.all(quotePromises)
+    const allRoutesWithValidQuotes = _.flatMap(getQuotesResults, (quoteResult) => quoteResult.routesWithValidQuotes)
+
+    return getBestSwapRoute(
+      amount,
+      percents,
+      allRoutesWithValidQuotes,
+      tradeType,
+      this.chainId,
+      routingConfig,
+      v3GasModel
+    )
+  }
+
+  private async getSwapRouteFromChain(
+    amount: CurrencyAmount,
+    tokenIn: Token,
+    tokenOut: Token,
+    protocols: Protocol[],
+    quoteToken: Token,
+    tradeType: TradeType,
+    routingConfig: AlphaRouterConfig,
+    v3GasModel: IGasModel<V3RouteWithValidQuote>,
+    // @ts-ignore
+    mixedRouteGasModel: IGasModel<MixedRouteWithValidQuote>,
+    gasPriceWei: BigNumber
+  ): Promise<BestSwapRoute | null> {
+    // Generate our distribution of amounts, i.e. fractions of the input amount.
+    // We will get quotes for fractions of the input amount for different routes, then
+    // combine to generate split routes.
+
+    const getSwapRouteFromChainStartTime = Date.now()
+    const [percents, amounts] = this.getAmountDistribution(amount, routingConfig)
+
+    const noProtocolsSpecified = protocols.length === 0
+    // @ts-ignore
+    const v3ProtocolSpecified = protocols.includes(Protocol.V3)
+    const v2ProtocolSpecified = protocols.includes(Protocol.V2)
+    const v2SupportedInChain = V2_SUPPORTED.includes(this.chainId)
+    const shouldQueryMixedProtocol = protocols.includes(Protocol.MIXED) || (noProtocolsSpecified && v2SupportedInChain)
+    const mixedProtocolAllowed =
+      [ChainId.MAINNET, ChainId.GOERLI].includes(this.chainId) && tradeType === TradeType.EXACT_INPUT
+
+    const beforeGetCandidates = Date.now()
+
+    // let v3CandidatePoolsPromise: Promise<V3CandidatePools | undefined> = Promise.resolve(undefined)
+    // if (v3ProtocolSpecified || noProtocolsSpecified || (shouldQueryMixedProtocol && mixedProtocolAllowed)) {
+    //   v3CandidatePoolsPromise = getV3CandidatePools({
+    //     tokenIn,
+    //     tokenOut,
+    //     tokenProvider: this.tokenProvider,
+    //     blockedTokenListProvider: this.blockedTokenListProvider,
+    //     poolProvider: this.v3PoolProvider,
+    //     routeType: tradeType,
+    //     subgraphProvider: this.v3SubgraphProvider,
+    //     routingConfig,
+    //     chainId: this.chainId,
+    //   }).then((candidatePools) => {
+    //     metric.putMetric('GetV3CandidatePools', Date.now() - beforeGetCandidates, MetricLoggerUnit.Milliseconds)
+    //     return candidatePools
+    //   })
+    // }
+
+    const buildingV2CandidatePoolStart = Date.now()
+    let v2CandidatePoolsPromise: Promise<V2CandidatePools | undefined> = Promise.resolve(undefined)
+    if (
+      (v2SupportedInChain && (v2ProtocolSpecified || noProtocolsSpecified)) ||
+      (shouldQueryMixedProtocol && mixedProtocolAllowed)
+    ) {
+      // Fetch all the pools that we will consider routing via. There are thousands
+      // of pools, so we filter them to a set of candidate pools that we expect will
+      // result in good prices.
+      v2CandidatePoolsPromise = getV2CandidatePools({
+        tokenIn,
+        tokenOut,
+        tokenProvider: this.tokenProvider,
+        blockedTokenListProvider: this.blockedTokenListProvider,
+        poolProvider: this.v2PoolProvider,
+        routeType: tradeType,
+        subgraphProvider: this.v2SubgraphProvider,
+        routingConfig,
+        chainId: this.chainId,
+      }).then((candidatePools) => {
+        metric.putMetric('GetV2CandidatePools', Date.now() - beforeGetCandidates, MetricLoggerUnit.Milliseconds)
+        return candidatePools
+      })
+    }
+
+    const buildingV2CandidatePoolEnd = Date.now()
+
+    const quotePromises: Promise<GetQuotesResult>[] = []
+
+    // // Maybe Quote V3 - if V3 is specified, or no protocol is specified
+    // if (v3ProtocolSpecified || noProtocolsSpecified) {
+    //   log.info({ protocols, tradeType }, 'Routing across V3')
+
+    //   metric.putMetric('SwapRouteFromChain_V3_GetRoutesThenQuotes_Request', 1, MetricLoggerUnit.Count)
+    //   const beforeGetRoutesThenQuotes = Date.now()
+
+    //   quotePromises.push(
+    //     v3CandidatePoolsPromise.then((v3CandidatePools) =>
+    //       this.v3Quoter
+    //         .getRoutesThenQuotes(
+    //           tokenIn,
+    //           tokenOut,
+    //           amounts,
+    //           percents,
+    //           quoteToken,
+    //           v3CandidatePools!,
+    //           tradeType,
+    //           routingConfig,
+    //           v3GasModel
+    //         )
+    //         .then((result) => {
+    //           metric.putMetric(
+    //             `SwapRouteFromChain_V3_GetRoutesThenQuotes_Load`,
+    //             Date.now() - beforeGetRoutesThenQuotes,
+    //             MetricLoggerUnit.Milliseconds
+    //           )
+
+    //           return result
+    //         })
+    //     )
+    //   )
+    // }
+
+    const buildingV2PromiseStart = Date.now()
+    let promiseV2CandidatePoolStart = Date.now()
+    let promiseV2CandidatePoolEnd = Date.now()
+    let promiseGetRoutesThenQuotesStart = Date.now()
+    let promiseGetRoutesThenQuotesEnd = Date.now()
+    // Maybe Quote V2 - if V2 is specified, or no protocol is specified AND v2 is supported in this chain
+    if (v2SupportedInChain && (v2ProtocolSpecified || noProtocolsSpecified)) {
+      log.info({ protocols, tradeType }, 'Routing across V2')
+
+      metric.putMetric('SwapRouteFromChain_V2_GetRoutesThenQuotes_Request', 1, MetricLoggerUnit.Count)
+      const beforeGetRoutesThenQuotes = Date.now()
+
+      quotePromises.push(
+        (async () => {
+          promiseV2CandidatePoolStart = Date.now()
+          const v2CandidatePools = await v2CandidatePoolsPromise
+          promiseV2CandidatePoolEnd = Date.now()
+
+          promiseGetRoutesThenQuotesStart = Date.now()
+          const result = await this.v2Quoter.getRoutesThenQuotes(
+            tokenIn,
+            tokenOut,
+            amounts,
+            percents,
+            quoteToken,
+            v2CandidatePools!,
+            tradeType,
+            routingConfig,
+            undefined,
+            gasPriceWei
+          )
+          promiseGetRoutesThenQuotesEnd = Date.now()
+
+          metric.putMetric(
+            `SwapRouteFromChain_V2_GetRoutesThenQuotes_Load`,
+            Date.now() - beforeGetRoutesThenQuotes,
+            MetricLoggerUnit.Milliseconds
+          )
+
+          return result
+        })()
+      )
+      // v2CandidatePoolsPromise.then((v2CandidatePools) =>
+      //   this.v2Quoter
+      //     .getRoutesThenQuotes(
+      //       tokenIn,
+      //       tokenOut,
+      //       amounts,
+      //       percents,
+      //       quoteToken,
+      //       v2CandidatePools!,
+      //       tradeType,
+      //       routingConfig,
+      //       undefined,
+      //       gasPriceWei
+      //     )
+      //     .then((result) => {
+      //       metric.putMetric(
+      //         `SwapRouteFromChain_V2_GetRoutesThenQuotes_Load`,
+      //         Date.now() - beforeGetRoutesThenQuotes,
+      //         MetricLoggerUnit.Milliseconds
+      //       )
+
+      //       return result
+      //     })
+      // )
+    }
+
+    const buildingV2PromiseEnd = Date.now()
+
+    // // Maybe Quote mixed routes
+    // // if MixedProtocol is specified or no protocol is specified and v2 is supported AND tradeType is ExactIn
+    // // AND is Mainnet or Gorli
+    // if (shouldQueryMixedProtocol && mixedProtocolAllowed) {
+    //   log.info({ protocols, tradeType }, 'Routing across MixedRoutes')
+
+    //   metric.putMetric('SwapRouteFromChain_Mixed_GetRoutesThenQuotes_Request', 1, MetricLoggerUnit.Count)
+    //   const beforeGetRoutesThenQuotes = Date.now()
+
+    //   quotePromises.push(
+    //     Promise.all([v3CandidatePoolsPromise, v2CandidatePoolsPromise]).then(([v3CandidatePools, v2CandidatePools]) =>
+    //       this.mixedQuoter
+    //         .getRoutesThenQuotes(
+    //           tokenIn,
+    //           tokenOut,
+    //           amounts,
+    //           percents,
+    //           quoteToken,
+    //           [v3CandidatePools!, v2CandidatePools!],
+    //           tradeType,
+    //           routingConfig,
+    //           mixedRouteGasModel
+    //         )
+    //         .then((result) => {
+    //           metric.putMetric(
+    //             `SwapRouteFromChain_Mixed_GetRoutesThenQuotes_Load`,
+    //             Date.now() - beforeGetRoutesThenQuotes,
+    //             MetricLoggerUnit.Milliseconds
+    //           )
+
+    //           return result
+    //         })
+    //     )
+    //   )
+    // }
+
+    const getQuotesResults = await Promise.all(quotePromises)
+
+    const allRoutesWithValidQuotes: RouteWithValidQuote[] = []
+    const allCandidatePools: CandidatePoolsBySelectionCriteria[] = []
+    getQuotesResults.forEach((getQuoteResult) => {
+      allRoutesWithValidQuotes.push(...getQuoteResult.routesWithValidQuotes)
+      if (getQuoteResult.candidatePools) {
+        allCandidatePools.push(getQuoteResult.candidatePools)
+      }
+    })
+
+    if (allRoutesWithValidQuotes.length === 0) {
+      log.info({ allRoutesWithValidQuotes }, 'Received no valid quotes')
+      return null
+    }
+
+    const bestSwapRouteTimeStart = Date.now()
+    // Given all the quotes for all the amounts for all the routes, find the best combination.
+    const bestSwapRoute = await getBestSwapRoute(
+      amount,
+      percents,
+      allRoutesWithValidQuotes,
+      tradeType,
+      this.chainId,
+      routingConfig,
+      v3GasModel
+    )
+
+    if (bestSwapRoute) {
+      this.emitPoolSelectionMetrics(bestSwapRoute, allCandidatePools)
+    }
+
+    const bestSwapRouteTimeEnd = Date.now()
+
+    const getSwapRouteFromChainEndTime = Date.now()
+
+    CONTEXT['AlphaRouter_getSwapRouteFromChain'] = {
+      duration: {
+        buildingV2CandidatePoolDuration: buildingV2CandidatePoolEnd - buildingV2CandidatePoolStart,
+        buildingV2PromiseDuration: buildingV2PromiseEnd - buildingV2PromiseStart,
+        bestSwapRouteDuration: bestSwapRouteTimeEnd - bestSwapRouteTimeStart,
+
+        promiseV2CandidatePoolDuration: promiseV2CandidatePoolEnd - promiseV2CandidatePoolStart,
+        promiseGetRoutesThenQuotesDuration: promiseGetRoutesThenQuotesEnd - promiseGetRoutesThenQuotesStart,
+
+        totalDuration: getSwapRouteFromChainEndTime - getSwapRouteFromChainStartTime,
+      },
+    }
+    return bestSwapRoute
+  }
+
+  private tradeTypeStr(tradeType: TradeType): string {
+    return tradeType === TradeType.EXACT_INPUT ? 'ExactIn' : 'ExactOut'
+  }
+
+  private tokenPairSymbolTradeTypeChainId(tokenIn: Token, tokenOut: Token, tradeType: TradeType) {
+    return `${tokenIn.symbol}/${tokenOut.symbol}/${this.tradeTypeStr(tradeType)}/${this.chainId}`
+  }
+
+  private determineCurrencyInOutFromTradeType(tradeType: TradeType, amount: CurrencyAmount, quoteCurrency: Currency) {
+    if (tradeType === TradeType.EXACT_INPUT) {
+      return {
+        currencyIn: amount.currency,
+        currencyOut: quoteCurrency,
+      }
+    } else {
+      return {
+        currencyIn: quoteCurrency,
+        currencyOut: amount.currency,
+      }
+    }
+  }
+
+  private async getGasPriceWei(): Promise<BigNumber> {
+    // Track how long it takes to resolve this async call.
+    const beforeGasTimestamp = Date.now()
+
+    // Get an estimate of the gas price to use when estimating gas cost of different routes.
+    const { gasPriceWei } = await this.gasPriceProvider.getGasPrice()
+
+    metric.putMetric('GasPriceLoad', Date.now() - beforeGasTimestamp, MetricLoggerUnit.Milliseconds)
+
+    return gasPriceWei
+  }
+
+  private async getGasModels(
+    gasPriceWei: BigNumber,
+    amountToken: Token,
+    quoteToken: Token,
+    providerConfig?: ProviderConfig
+  ): Promise<[IGasModel<V3RouteWithValidQuote>, IGasModel<MixedRouteWithValidQuote>]> {
+    const beforeGasModel = Date.now()
+
+    const usdPoolPromise = getHighestLiquidityV3USDPool(this.chainId, this.v3PoolProvider, providerConfig)
+    const nativeCurrency = WRAPPED_NATIVE_CURRENCY[this.chainId]
+    const nativeQuoteTokenV3PoolPromise = !quoteToken.equals(nativeCurrency)
+      ? getHighestLiquidityV3NativePool(quoteToken, this.v3PoolProvider, providerConfig)
+      : Promise.resolve(null)
+    const nativeAmountTokenV3PoolPromise = !amountToken.equals(nativeCurrency)
+      ? getHighestLiquidityV3NativePool(amountToken, this.v3PoolProvider, providerConfig)
+      : Promise.resolve(null)
+
+    const [usdPool, nativeQuoteTokenV3Pool, nativeAmountTokenV3Pool] = await Promise.all([
+      usdPoolPromise,
+      nativeQuoteTokenV3PoolPromise,
+      nativeAmountTokenV3PoolPromise,
+    ])
+
+    const pools: LiquidityCalculationPools = {
+      usdPool: usdPool,
+      nativeQuoteTokenV3Pool: nativeQuoteTokenV3Pool,
+      nativeAmountTokenV3Pool: nativeAmountTokenV3Pool,
+    }
+
+    const v3GasModelPromise = this.v3GasModelFactory.buildGasModel({
+      chainId: this.chainId,
+      gasPriceWei,
+      pools,
+      amountToken,
+      quoteToken,
+      v2poolProvider: this.v2PoolProvider,
+      l2GasDataProvider: this.l2GasDataProvider,
+      providerConfig: providerConfig,
+    })
+
+    const mixedRouteGasModelPromise = this.mixedRouteGasModelFactory.buildGasModel({
+      chainId: this.chainId,
+      gasPriceWei,
+      pools,
+      amountToken,
+      quoteToken,
+      v2poolProvider: this.v2PoolProvider,
+      providerConfig: providerConfig,
+    })
+
+    const [v3GasModel, mixedRouteGasModel] = await Promise.all([v3GasModelPromise, mixedRouteGasModelPromise])
+
+    metric.putMetric('GasModelCreation', Date.now() - beforeGasModel, MetricLoggerUnit.Milliseconds)
+
+    return [v3GasModel, mixedRouteGasModel]
+  }
+
+  // Note multiplications here can result in a loss of precision in the amounts (e.g. taking 50% of 101)
+  // This is reconcilled at the end of the algorithm by adding any lost precision to one of
+  // the splits in the route.
+  private getAmountDistribution(
+    amount: CurrencyAmount,
+    routingConfig: AlphaRouterConfig
+  ): [number[], CurrencyAmount[]] {
+    const { distributionPercent } = routingConfig
+    const percents = []
+    const amounts = []
+
+    for (let i = 1; i <= 100 / distributionPercent; i++) {
+      percents.push(i * distributionPercent)
+      amounts.push(amount.multiply(new Fraction(i * distributionPercent, 100)))
+    }
+
+    return [percents, amounts]
+  }
+
+  private async buildSwapAndAddMethodParameters(
+    trade: Trade<Currency, Currency, TradeType>,
+    swapAndAddOptions: SwapAndAddOptions,
+    swapAndAddParameters: SwapAndAddParameters
+  ): Promise<MethodParameters> {
+    const {
+      swapOptions: { recipient, slippageTolerance, deadline, inputTokenPermit },
+      addLiquidityOptions: addLiquidityConfig,
+    } = swapAndAddOptions
+
+    const preLiquidityPosition = swapAndAddParameters.preLiquidityPosition
+    const finalBalanceTokenIn = swapAndAddParameters.initialBalanceTokenIn.subtract(trade.inputAmount)
+    const finalBalanceTokenOut = swapAndAddParameters.initialBalanceTokenOut.add(trade.outputAmount)
+    const approvalTypes = await this.swapRouterProvider.getApprovalType(finalBalanceTokenIn, finalBalanceTokenOut)
+    const zeroForOne = finalBalanceTokenIn.currency.wrapped.sortsBefore(finalBalanceTokenOut.currency.wrapped)
+    return {
+      ...SwapRouter.swapAndAddCallParameters(
+        trade,
+        {
+          recipient,
+          slippageTolerance,
+          deadlineOrPreviousBlockhash: deadline,
+          inputTokenPermit,
+        },
+        Position.fromAmounts({
+          pool: preLiquidityPosition.pool,
+          tickLower: preLiquidityPosition.tickLower,
+          tickUpper: preLiquidityPosition.tickUpper,
+          amount0: zeroForOne ? finalBalanceTokenIn.quotient.toString() : finalBalanceTokenOut.quotient.toString(),
+          amount1: zeroForOne ? finalBalanceTokenOut.quotient.toString() : finalBalanceTokenIn.quotient.toString(),
+          useFullPrecision: false,
+        }),
+        addLiquidityConfig,
+        approvalTypes.approvalTokenIn,
+        approvalTypes.approvalTokenOut
+      ),
+      to: SWAP_ROUTER_02_ADDRESSES(this.chainId),
+    }
+  }
+
+  private emitPoolSelectionMetrics(
+    swapRouteRaw: {
+      quote: CurrencyAmount
+      quoteGasAdjusted: CurrencyAmount
+      routes: RouteWithValidQuote[]
+      estimatedGasUsed: BigNumber
+    },
+    allPoolsBySelection: CandidatePoolsBySelectionCriteria[]
+  ) {
+    const poolAddressesUsed = new Set<string>()
+    const { routes: routeAmounts } = swapRouteRaw
+    _(routeAmounts)
+      .flatMap((routeAmount) => {
+        const { poolAddresses } = routeAmount
+        return poolAddresses
+      })
+      .forEach((address: string) => {
+        poolAddressesUsed.add(address.toLowerCase())
+      })
+
+    for (const poolsBySelection of allPoolsBySelection) {
+      const { protocol } = poolsBySelection
+      _.forIn(poolsBySelection.selections, (pools: PoolId[], topNSelection: string) => {
+        const topNUsed = _.findLastIndex(pools, (pool) => poolAddressesUsed.has(pool.id.toLowerCase())) + 1
+        metric.putMetric(_.capitalize(`${protocol}${topNSelection}`), topNUsed, MetricLoggerUnit.Count)
+      })
+    }
+
+    let hasV3Route = false
+    let hasV2Route = false
+    let hasMixedRoute = false
+    for (const routeAmount of routeAmounts) {
+      if (routeAmount.protocol === Protocol.V3) {
+        hasV3Route = true
+      }
+      if (routeAmount.protocol === Protocol.V2) {
+        hasV2Route = true
+      }
+      if (routeAmount.protocol === Protocol.MIXED) {
+        hasMixedRoute = true
+      }
+    }
+
+    if (hasMixedRoute && (hasV3Route || hasV2Route)) {
+      if (hasV3Route && hasV2Route) {
+        metric.putMetric(`MixedAndV3AndV2SplitRoute`, 1, MetricLoggerUnit.Count)
+        metric.putMetric(`MixedAndV3AndV2SplitRouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count)
+      } else if (hasV3Route) {
+        metric.putMetric(`MixedAndV3SplitRoute`, 1, MetricLoggerUnit.Count)
+        metric.putMetric(`MixedAndV3SplitRouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count)
+      } else if (hasV2Route) {
+        metric.putMetric(`MixedAndV2SplitRoute`, 1, MetricLoggerUnit.Count)
+        metric.putMetric(`MixedAndV2SplitRouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count)
+      }
+    } else if (hasV3Route && hasV2Route) {
+      metric.putMetric(`V3AndV2SplitRoute`, 1, MetricLoggerUnit.Count)
+      metric.putMetric(`V3AndV2SplitRouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count)
+    } else if (hasMixedRoute) {
+      if (routeAmounts.length > 1) {
+        metric.putMetric(`MixedSplitRoute`, 1, MetricLoggerUnit.Count)
+        metric.putMetric(`MixedSplitRouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count)
+      } else {
+        metric.putMetric(`MixedRoute`, 1, MetricLoggerUnit.Count)
+        metric.putMetric(`MixedRouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count)
+      }
+    } else if (hasV3Route) {
+      if (routeAmounts.length > 1) {
+        metric.putMetric(`V3SplitRoute`, 1, MetricLoggerUnit.Count)
+        metric.putMetric(`V3SplitRouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count)
+      } else {
+        metric.putMetric(`V3Route`, 1, MetricLoggerUnit.Count)
+        metric.putMetric(`V3RouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count)
+      }
+    } else if (hasV2Route) {
+      if (routeAmounts.length > 1) {
+        metric.putMetric(`V2SplitRoute`, 1, MetricLoggerUnit.Count)
+        metric.putMetric(`V2SplitRouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count)
+      } else {
+        metric.putMetric(`V2Route`, 1, MetricLoggerUnit.Count)
+        metric.putMetric(`V2RouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count)
+      }
+    }
+  }
+
+  private calculateOptimalRatio(position: Position, sqrtRatioX96: JSBI, zeroForOne: boolean): Fraction {
+    const upperSqrtRatioX96 = TickMath.getSqrtRatioAtTick(position.tickUpper)
+    const lowerSqrtRatioX96 = TickMath.getSqrtRatioAtTick(position.tickLower)
+
+    // returns Fraction(0, 1) for any out of range position regardless of zeroForOne. Implication: function
+    // cannot be used to determine the trading direction of out of range positions.
+    if (JSBI.greaterThan(sqrtRatioX96, upperSqrtRatioX96) || JSBI.lessThan(sqrtRatioX96, lowerSqrtRatioX96)) {
+      return new Fraction(0, 1)
+    }
+
+    const precision = JSBI.BigInt('1' + '0'.repeat(18))
+    let optimalRatio = new Fraction(
+      SqrtPriceMath.getAmount0Delta(sqrtRatioX96, upperSqrtRatioX96, precision, true),
+      SqrtPriceMath.getAmount1Delta(sqrtRatioX96, lowerSqrtRatioX96, precision, true)
+    )
+    if (!zeroForOne) optimalRatio = optimalRatio.invert()
+    return optimalRatio
+  }
+
+  public async userHasSufficientBalance(
+    fromAddress: string,
+    tradeType: TradeType,
+    amount: CurrencyAmount,
+    quote: CurrencyAmount
+  ): Promise<boolean> {
+    try {
+      const neededBalance = tradeType === TradeType.EXACT_INPUT ? amount : quote
+      let balance
+      if (neededBalance.currency.isNative) {
+        balance = await this.provider.getBalance(fromAddress)
+      } else {
+        const tokenContract = Erc20__factory.connect(neededBalance.currency.address, this.provider)
+        balance = await tokenContract.balanceOf(fromAddress)
+      }
+      return balance.gte(BigNumber.from(neededBalance.quotient.toString()))
+    } catch (e) {
+      log.error(e, 'Error while checking user balance')
+      return false
+    }
+  }
+
+  private absoluteValue(fraction: Fraction): Fraction {
+    const numeratorAbs = JSBI.lessThan(fraction.numerator, JSBI.BigInt(0))
+      ? JSBI.unaryMinus(fraction.numerator)
+      : fraction.numerator
+    const denominatorAbs = JSBI.lessThan(fraction.denominator, JSBI.BigInt(0))
+      ? JSBI.unaryMinus(fraction.denominator)
+      : fraction.denominator
+    return new Fraction(numeratorAbs, denominatorAbs)
+  }
+
+  private getBlockNumberPromise(): number | Promise<number> {
+    return retry(
+      async (_b, attempt) => {
+        if (attempt > 1) {
+          log.info(`Get block number attempt ${attempt}`)
+        }
+        return this.provider.getBlockNumber()
+      },
+      {
+        retries: 2,
+        minTimeout: 100,
+        maxTimeout: 1000,
+      }
+    )
+  }
+}
diff --git a/lib/sor/routers/alpha-router/config.ts b/lib/sor/routers/alpha-router/config.ts
new file mode 100644
index 0000000..bab1ca1
--- /dev/null
+++ b/lib/sor/routers/alpha-router/config.ts
@@ -0,0 +1,94 @@
+import { ChainId } from '@uniswap/sdk-core';
+
+import { AlphaRouterConfig } from './alpha-router';
+
+export const DEFAULT_ROUTING_CONFIG_BY_CHAIN = (
+  chainId: ChainId
+): AlphaRouterConfig => {
+  switch (chainId) {
+    // Optimism
+    case ChainId.OPTIMISM:
+    case ChainId.OPTIMISM_GOERLI:
+    case ChainId.BASE:
+    case ChainId.BASE_GOERLI:
+      return {
+        v2PoolSelection: {
+          topN: 3,
+          topNDirectSwaps: 1,
+          topNTokenInOut: 5,
+          topNSecondHop: 2,
+          topNWithEachBaseToken: 2,
+          topNWithBaseToken: 6,
+        },
+        v3PoolSelection: {
+          topN: 2,
+          topNDirectSwaps: 2,
+          topNTokenInOut: 2,
+          topNSecondHop: 1,
+          topNWithEachBaseToken: 3,
+          topNWithBaseToken: 3,
+        },
+        maxSwapsPerPath: 3,
+        minSplits: 1,
+        maxSplits: 7,
+        distributionPercent: 10,
+        forceCrossProtocol: false,
+      };
+    // Arbitrum calls have lower gas limits and tend to timeout more, which causes us to reduce the multicall
+    // batch size and send more multicalls per quote. To reduce the amount of requests each quote sends, we
+    // have to adjust the routing config so we explore fewer routes.
+    case ChainId.ARBITRUM_ONE:
+    case ChainId.ARBITRUM_GOERLI:
+    case ChainId.CELO:
+    case ChainId.CELO_ALFAJORES:
+      return {
+        v2PoolSelection: {
+          topN: 3,
+          topNDirectSwaps: 1,
+          topNTokenInOut: 5,
+          topNSecondHop: 2,
+          topNWithEachBaseToken: 2,
+          topNWithBaseToken: 6,
+        },
+        v3PoolSelection: {
+          topN: 2,
+          topNDirectSwaps: 2,
+          topNTokenInOut: 2,
+          topNSecondHop: 1,
+          topNWithEachBaseToken: 3,
+          topNWithBaseToken: 2,
+        },
+        maxSwapsPerPath: 2,
+        minSplits: 1,
+        maxSplits: 7,
+        distributionPercent: 25,
+        forceCrossProtocol: false,
+      };
+    default:
+      return {
+        v2PoolSelection: {
+          topN: 3,
+          topNDirectSwaps: 1,
+          topNTokenInOut: 5,
+          topNSecondHop: 2,
+          topNWithEachBaseToken: 2,
+          topNWithBaseToken: 6,
+        },
+        v3PoolSelection: {
+          topN: 2,
+          topNDirectSwaps: 2,
+          topNTokenInOut: 3,
+          topNSecondHop: 1,
+          topNWithEachBaseToken: 3,
+          topNWithBaseToken: 5,
+        },
+        maxSwapsPerPath: 3,
+        minSplits: 1,
+        maxSplits: 7,
+        distributionPercent: 5,
+        forceCrossProtocol: false,
+      };
+  }
+};
+export const ETH_GAS_STATION_API_URL =
+  'https://ethgasstation.info/api/ethgasAPI.json';
diff --git a/lib/sor/routers/alpha-router/entities/index.ts b/lib/sor/routers/alpha-router/entities/index.ts
new file mode 100644
index 0000000..83d00c0
--- /dev/null
+++ b/lib/sor/routers/alpha-router/entities/index.ts
@@ -0,0 +1 @@
+export * from './route-with-valid-quote';
diff --git a/lib/sor/routers/alpha-router/entities/route-with-valid-quote.ts b/lib/sor/routers/alpha-router/entities/route-with-valid-quote.ts
new file mode 100644
index 0000000..0b220ac
--- /dev/null
+++ b/lib/sor/routers/alpha-router/entities/route-with-valid-quote.ts
@@ -0,0 +1,348 @@
+import { BigNumber } from '@ethersproject/bignumber';
+import { Protocol } from '@uniswap/router-sdk';
+import { Token, TradeType } from '@uniswap/sdk-core';
+import { Pool } from '@uniswap/v3-sdk';
+import _ from 'lodash';
+
+import { IV2PoolProvider } from '../../../providers/v2/pool-provider';
+import { IV3PoolProvider } from '../../../providers/v3/pool-provider';
+import { CurrencyAmount } from '../../../util/amounts';
+import { routeToString } from '../../../util/routes';
+import { MixedRoute, V2Route, V3Route } from '../../router';
+import { IGasModel } from '../gas-models/gas-model';
+
+/**
+ * Represents a route, a quote for swapping some amount on it, and other
+ * metadata used by the routing algorithm.
+ *
+ * @export
+ * @interface IRouteWithValidQuote
+ * @template Route
+ */
+export interface IRouteWithValidQuote<
+  Route extends V3Route | V2Route | MixedRoute
+> {
+  amount: CurrencyAmount;
+  percent: number;
+  // If exact in, this is (quote - gasCostInToken). If exact out, this is (quote + gasCostInToken).
+  quoteAdjustedForGas: CurrencyAmount;
+  quote: CurrencyAmount;
+  route: Route;
+  gasEstimate: BigNumber;
+  // The gas cost in terms of the quote token.
+  gasCostInToken: CurrencyAmount;
+  gasCostInUSD: CurrencyAmount;
+  tradeType: TradeType;
+  poolAddresses: string[];
+  tokenPath: Token[];
+}
+
+// Discriminated unions on protocol field to narrow types.
+export type IV2RouteWithValidQuote = {
+  protocol: Protocol.V2;
+} & IRouteWithValidQuote<V2Route>;
+
+export type IV3RouteWithValidQuote = {
+  protocol: Protocol.V3;
+} & IRouteWithValidQuote<V3Route>;
+
+export type IMixedRouteWithValidQuote = {
+  protocol: Protocol.MIXED;
+} & IRouteWithValidQuote<MixedRoute>;
+
+export type RouteWithValidQuote =
+  | V2RouteWithValidQuote
+  | V3RouteWithValidQuote
+  | MixedRouteWithValidQuote;
+
+export type V2RouteWithValidQuoteParams = {
+  amount: CurrencyAmount;
+  rawQuote: BigNumber;
+  percent: number;
+  route: V2Route;
+  gasModel: IGasModel<V2RouteWithValidQuote>;
+  quoteToken: Token;
+  tradeType: TradeType;
+  v2PoolProvider: IV2PoolProvider;
+};
+/**
+ * Represents a quote for swapping on a V2 only route. Contains all information
+ * such as the route used, the amount specified by the user, the type of quote
+ * (exact in or exact out), the quote itself, and gas estimates.
+ *
+ * @export
+ * @class V2RouteWithValidQuote
+ */
+export class V2RouteWithValidQuote implements IV2RouteWithValidQuote {
+  public readonly protocol = Protocol.V2;
+  public amount: CurrencyAmount;
+  // The BigNumber representing the quote.
+  public rawQuote: BigNumber;
+  public quote: CurrencyAmount;
+  public quoteAdjustedForGas: CurrencyAmount;
+  public percent: number;
+  public route: V2Route;
+  public quoteToken: Token;
+  public gasModel: IGasModel<V2RouteWithValidQuote>;
+  public gasEstimate: BigNumber;
+  public gasCostInToken: CurrencyAmount;
+  public gasCostInUSD: CurrencyAmount;
+  public tradeType: TradeType;
+  public poolAddresses: string[];
+  public tokenPath: Token[];
+
+  public toString(): string {
+    return `${this.percent.toFixed(
+      2
+    )}% QuoteGasAdj[${this.quoteAdjustedForGas.toExact()}] Quote[${this.quote.toExact()}] Gas[${this.gasEstimate.toString()}] = ${routeToString(
+      this.route
+    )}`;
+  }
+
+  constructor({
+    amount,
+    rawQuote,
+    percent,
+    route,
+    gasModel,
+    quoteToken,
+    tradeType,
+    v2PoolProvider,
+  }: V2RouteWithValidQuoteParams) {
+    this.amount = amount;
+    this.rawQuote = rawQuote;
+    this.quote = CurrencyAmount.fromRawAmount(quoteToken, rawQuote.toString());
+    this.percent = percent;
+    this.route = route;
+    this.gasModel = gasModel;
+    this.quoteToken = quoteToken;
+    this.tradeType = tradeType;
+
+    const { gasEstimate, gasCostInToken, gasCostInUSD } =
+      this.gasModel.estimateGasCost(this);
+
+    this.gasCostInToken = gasCostInToken;
+    this.gasCostInUSD = gasCostInUSD;
+    this.gasEstimate = gasEstimate;
+
+    // If its exact out, we need to request *more* of the input token to account for the gas.
+    if (this.tradeType == TradeType.EXACT_INPUT) {
+      const quoteGasAdjusted = this.quote.subtract(gasCostInToken);
+      this.quoteAdjustedForGas = quoteGasAdjusted;
+    } else {
+      const quoteGasAdjusted = this.quote.add(gasCostInToken);
+      this.quoteAdjustedForGas = quoteGasAdjusted;
+    }
+
+    this.poolAddresses = _.map(
+      route.pairs,
+      (p) => v2PoolProvider.getPoolAddress(p.token0, p.token1).poolAddress
+    );
+
+    this.tokenPath = this.route.path;
+  }
+}
+
+export type V3RouteWithValidQuoteParams = {
+  amount: CurrencyAmount;
+  rawQuote: BigNumber;
+  sqrtPriceX96AfterList: BigNumber[];
+  initializedTicksCrossedList: number[];
+  quoterGasEstimate: BigNumber;
+  percent: number;
+  route: V3Route;
+  gasModel: IGasModel<V3RouteWithValidQuote>;
+  quoteToken: Token;
+  tradeType: TradeType;
+  v3PoolProvider: IV3PoolProvider;
+};
+
+/**
+ * Represents a quote for swapping on a V3 only route. Contains all information
+ * such as the route used, the amount specified by the user, the type of quote
+ * (exact in or exact out), the quote itself, and gas estimates.
+ *
+ * @export
+ * @class V3RouteWithValidQuote
+ */
+export class V3RouteWithValidQuote implements IV3RouteWithValidQuote {
+  public readonly protocol = Protocol.V3;
+  public amount: CurrencyAmount;
+  public rawQuote: BigNumber;
+  public quote: CurrencyAmount;
+  public quoteAdjustedForGas: CurrencyAmount;
+  public sqrtPriceX96AfterList: BigNumber[];
+  public initializedTicksCrossedList: number[];
+  public quoterGasEstimate: BigNumber;
+  public percent: number;
+  public route: V3Route;
+  public quoteToken: Token;
+  public gasModel: IGasModel<V3RouteWithValidQuote>;
+  public gasEstimate: BigNumber;
+  public gasCostInToken: CurrencyAmount;
+  public gasCostInUSD: CurrencyAmount;
+  public tradeType: TradeType;
+  public poolAddresses: string[];
+  public tokenPath: Token[];
+
+  public toString(): string {
+    return `${this.percent.toFixed(
+      2
+    )}% QuoteGasAdj[${this.quoteAdjustedForGas.toExact()}] Quote[${this.quote.toExact()}] Gas[${this.gasEstimate.toString()}] = ${routeToString(
+      this.route
+    )}`;
+  }
+
+  constructor({
+    amount,
+    rawQuote,
+    sqrtPriceX96AfterList,
+    initializedTicksCrossedList,
+    quoterGasEstimate,
+    percent,
+    route,
+    gasModel,
+    quoteToken,
+    tradeType,
+    v3PoolProvider,
+  }: V3RouteWithValidQuoteParams) {
+    this.amount = amount;
+    this.rawQuote = rawQuote;
+    this.sqrtPriceX96AfterList = sqrtPriceX96AfterList;
+    this.initializedTicksCrossedList = initializedTicksCrossedList;
+    this.quoterGasEstimate = quoterGasEstimate;
+    this.quote = CurrencyAmount.fromRawAmount(quoteToken, rawQuote.toString());
+    this.percent = percent;
+    this.route = route;
+    this.gasModel = gasModel;
+    this.quoteToken = quoteToken;
+    this.tradeType = tradeType;
+
+    const { gasEstimate, gasCostInToken, gasCostInUSD } =
+      this.gasModel.estimateGasCost(this);
+
+    this.gasCostInToken = gasCostInToken;
+    this.gasCostInUSD = gasCostInUSD;
+    this.gasEstimate = gasEstimate;
+
+    // If its exact out, we need to request *more* of the input token to account for the gas.
+    if (this.tradeType == TradeType.EXACT_INPUT) {
+      const quoteGasAdjusted = this.quote.subtract(gasCostInToken);
+      this.quoteAdjustedForGas = quoteGasAdjusted;
+    } else {
+      const quoteGasAdjusted = this.quote.add(gasCostInToken);
+      this.quoteAdjustedForGas = quoteGasAdjusted;
+    }
+
+    this.poolAddresses = _.map(
+      route.pools,
+      (p) =>
+        v3PoolProvider.getPoolAddress(p.token0, p.token1, p.fee).poolAddress
+    );
+
+    this.tokenPath = this.route.tokenPath;
+  }
+}
+
+export type MixedRouteWithValidQuoteParams = {
+  amount: CurrencyAmount;
+  rawQuote: BigNumber;
+  sqrtPriceX96AfterList: BigNumber[];
+  initializedTicksCrossedList: number[];
+  quoterGasEstimate: BigNumber;
+  percent: number;
+  route: MixedRoute;
+  mixedRouteGasModel: IGasModel<MixedRouteWithValidQuote>;
+  quoteToken: Token;
+  tradeType: TradeType;
+  v3PoolProvider: IV3PoolProvider;
+  v2PoolProvider: IV2PoolProvider;
+};
+
+/**
+ * Represents a quote for swapping on a Mixed Route. Contains all information
+ * such as the route used, the amount specified by the user, the type of quote
+ * (exact in or exact out), the quote itself, and gas estimates.
+ *
+ * @export
+ * @class MixedRouteWithValidQuote
+ */
+export class MixedRouteWithValidQuote implements IMixedRouteWithValidQuote {
+  public readonly protocol = Protocol.MIXED;
+  public amount: CurrencyAmount;
+  public rawQuote: BigNumber;
+  public quote: CurrencyAmount;
+  public quoteAdjustedForGas: CurrencyAmount;
+  public sqrtPriceX96AfterList: BigNumber[];
+  public initializedTicksCrossedList: number[];
+  public quoterGasEstimate: BigNumber;
+  public percent: number;
+  public route: MixedRoute;
+  public quoteToken: Token;
+  public gasModel: IGasModel<MixedRouteWithValidQuote>;
+  public gasEstimate: BigNumber;
+  public gasCostInToken: CurrencyAmount;
+  public gasCostInUSD: CurrencyAmount;
+  public tradeType: TradeType;
+  public poolAddresses: string[];
+  public tokenPath: Token[];
+
+  public toString(): string {
+    return `${this.percent.toFixed(
+      2
+    )}% QuoteGasAdj[${this.quoteAdjustedForGas.toExact()}] Quote[${this.quote.toExact()}] Gas[${this.gasEstimate.toString()}] = ${routeToString(
+      this.route
+    )}`;
+  }
+
+  constructor({
+    amount,
+    rawQuote,
+    sqrtPriceX96AfterList,
+    initializedTicksCrossedList,
+    quoterGasEstimate,
+    percent,
+    route,
+    mixedRouteGasModel,
+    quoteToken,
+    tradeType,
+    v3PoolProvider,
+    v2PoolProvider,
+  }: MixedRouteWithValidQuoteParams) {
+    this.amount = amount;
+    this.rawQuote = rawQuote;
+    this.sqrtPriceX96AfterList = sqrtPriceX96AfterList;
+    this.initializedTicksCrossedList = initializedTicksCrossedList;
+    this.quoterGasEstimate = quoterGasEstimate;
+    this.quote = CurrencyAmount.fromRawAmount(quoteToken, rawQuote.toString());
+    this.percent = percent;
+    this.route = route;
+    this.gasModel = mixedRouteGasModel;
+    this.quoteToken = quoteToken;
+    this.tradeType = tradeType;
+
+    const { gasEstimate, gasCostInToken, gasCostInUSD } =
+      this.gasModel.estimateGasCost(this);
+
+    this.gasCostInToken = gasCostInToken;
+    this.gasCostInUSD = gasCostInUSD;
+    this.gasEstimate = gasEstimate;
+
+    // If its exact out, we need to request *more* of the input token to account for the gas.
+    if (this.tradeType == TradeType.EXACT_INPUT) {
+      const quoteGasAdjusted = this.quote.subtract(gasCostInToken);
+      this.quoteAdjustedForGas = quoteGasAdjusted;
+    } else {
+      const quoteGasAdjusted = this.quote.add(gasCostInToken);
+      this.quoteAdjustedForGas = quoteGasAdjusted;
+    }
+
+    this.poolAddresses = _.map(route.pools, (p) => {
+      return p instanceof Pool
+        ? v3PoolProvider.getPoolAddress(p.token0, p.token1, p.fee).poolAddress
+        : v2PoolProvider.getPoolAddress(p.token0, p.token1).poolAddress;
+    });
+
+    this.tokenPath = this.route.path;
+  }
+}
diff --git a/lib/sor/routers/alpha-router/functions/best-swap-route.ts b/lib/sor/routers/alpha-router/functions/best-swap-route.ts
new file mode 100644
index 0000000..3a67598
--- /dev/null
+++ b/lib/sor/routers/alpha-router/functions/best-swap-route.ts
@@ -0,0 +1,596 @@
+import { BigNumber } from '@ethersproject/bignumber';
+import { Protocol } from '@uniswap/router-sdk';
+import { ChainId, TradeType } from '@uniswap/sdk-core';
+import JSBI from 'jsbi';
+import _ from 'lodash';
+import FixedReverseHeap from 'mnemonist/fixed-reverse-heap';
+import Queue from 'mnemonist/queue';
+
+import { HAS_L1_FEE } from '../../../util';
+import { CurrencyAmount } from '../../../util/amounts';
+import { log } from '../../../util/log';
+import { metric, MetricLoggerUnit } from '../../../util/metric';
+import { routeAmountsToString, routeToString } from '../../../util/routes';
+import { AlphaRouterConfig } from '../alpha-router';
+import { IGasModel, L1ToL2GasCosts, usdGasTokensByChain } from '../gas-models';
+
+import { RouteWithValidQuote, V3RouteWithValidQuote, } from './../entities/route-with-valid-quote';
+
+export type BestSwapRoute = {
+  quote: CurrencyAmount;
+  quoteGasAdjusted: CurrencyAmount;
+  estimatedGasUsed: BigNumber;
+  estimatedGasUsedUSD: CurrencyAmount;
+  estimatedGasUsedQuoteToken: CurrencyAmount;
+  routes: RouteWithValidQuote[];
+};
+
+export async function getBestSwapRoute(
+  amount: CurrencyAmount,
+  percents: number[],
+  routesWithValidQuotes: RouteWithValidQuote[],
+  routeType: TradeType,
+  chainId: ChainId,
+  routingConfig: AlphaRouterConfig,
+  gasModel?: IGasModel<V3RouteWithValidQuote>
+): Promise<BestSwapRoute | null> {
+  const now = Date.now();
+
+  const { forceMixedRoutes } = routingConfig;
+
+  /// Like with forceCrossProtocol, we apply that logic here when determining the bestSwapRoute
+  if (forceMixedRoutes) {
+    log.info(
+      {
+        forceMixedRoutes: forceMixedRoutes,
+      },
+      'Forcing mixed routes by filtering out other route types'
+    );
+    routesWithValidQuotes = _.filter(routesWithValidQuotes, (quotes) => {
+      return quotes.protocol === Protocol.MIXED;
+    });
+    if (!routesWithValidQuotes) {
+      return null;
+    }
+  }
+
+  // Build a map of percentage of the input to list of valid quotes.
+  // Quotes can be null for a variety of reasons (not enough liquidity etc), so we drop them here too.
+  const percentToQuotes: { [percent: number]: RouteWithValidQuote[] } = {};
+  for (const routeWithValidQuote of routesWithValidQuotes) {
+    if (!percentToQuotes[routeWithValidQuote.percent]) {
+      percentToQuotes[routeWithValidQuote.percent] = [];
+    }
+    percentToQuotes[routeWithValidQuote.percent]!.push(routeWithValidQuote);
+  }
+
+  metric.putMetric(
+    'BuildRouteWithValidQuoteObjects',
+    Date.now() - now,
+    MetricLoggerUnit.Milliseconds
+  );
+
+  // Given all the valid quotes for each percentage find the optimal route.
+  const swapRoute = await getBestSwapRouteBy(
+    routeType,
+    percentToQuotes,
+    percents,
+    chainId,
+    (rq: RouteWithValidQuote) => rq.quoteAdjustedForGas,
+    routingConfig,
+    gasModel
+  );
+
+  // It is possible we were unable to find any valid route given the quotes.
+  if (!swapRoute) {
+    return null;
+  }
+
+  // Due to potential loss of precision when taking percentages of the input it is possible that the sum of the amounts of each
+  // route of our optimal quote may not add up exactly to exactIn or exactOut.
+  //
+  // We check this here, and if there is a mismatch
+  // add the missing amount to a random route. The missing amount size should be neglible so the quote should still be highly accurate.
+  const { routes: routeAmounts } = swapRoute;
+  const totalAmount = _.reduce(
+    routeAmounts,
+    (total, routeAmount) => total.add(routeAmount.amount),
+    CurrencyAmount.fromRawAmount(routeAmounts[0]!.amount.currency, 0)
+  );
+
+  const missingAmount = amount.subtract(totalAmount);
+  if (missingAmount.greaterThan(0)) {
+    log.info(
+      {
+        missingAmount: missingAmount.quotient.toString(),
+      },
+      `Optimal route's amounts did not equal exactIn/exactOut total. Adding missing amount to last route in array.`
+    );
+
+    routeAmounts[routeAmounts.length - 1]!.amount =
+      routeAmounts[routeAmounts.length - 1]!.amount.add(missingAmount);
+  }
+
+  log.info(
+    {
+      routes: routeAmountsToString(routeAmounts),
+      numSplits: routeAmounts.length,
+      amount: amount.toExact(),
+      quote: swapRoute.quote.toExact(),
+      quoteGasAdjusted: swapRoute.quoteGasAdjusted.toFixed(
+        Math.min(swapRoute.quoteGasAdjusted.currency.decimals, 2)
+      ),
+      estimatedGasUSD: swapRoute.estimatedGasUsedUSD.toFixed(
+        Math.min(swapRoute.estimatedGasUsedUSD.currency.decimals, 2)
+      ),
+      estimatedGasToken: swapRoute.estimatedGasUsedQuoteToken.toFixed(
+        Math.min(swapRoute.estimatedGasUsedQuoteToken.currency.decimals, 2)
+      ),
+    },
+    `Found best swap route. ${routeAmounts.length} split.`
+  );
+
+  return swapRoute;
+}
+
+export async function getBestSwapRouteBy(
+  routeType: TradeType,
+  percentToQuotes: { [percent: number]: RouteWithValidQuote[] },
+  percents: number[],
+  chainId: ChainId,
+  by: (routeQuote: RouteWithValidQuote) => CurrencyAmount,
+  routingConfig: AlphaRouterConfig,
+  gasModel?: IGasModel<V3RouteWithValidQuote>
+): Promise<
+  | BestSwapRoute
+  | undefined
+> {
+  // Build a map of percentage to sorted list of quotes, with the biggest quote being first in the list.
+  const percentToSortedQuotes = _.mapValues(
+    percentToQuotes,
+    (routeQuotes: RouteWithValidQuote[]) => {
+      return routeQuotes.sort((routeQuoteA, routeQuoteB) => {
+        if (routeType == TradeType.EXACT_INPUT) {
+          return by(routeQuoteA).greaterThan(by(routeQuoteB)) ? -1 : 1;
+        } else {
+          return by(routeQuoteA).lessThan(by(routeQuoteB)) ? -1 : 1;
+        }
+      });
+    }
+  );
+
+  const quoteCompFn =
+    routeType == TradeType.EXACT_INPUT
+      ? (a: CurrencyAmount, b: CurrencyAmount) => a.greaterThan(b)
+      : (a: CurrencyAmount, b: CurrencyAmount) => a.lessThan(b);
+
+  const sumFn = (currencyAmounts: CurrencyAmount[]): CurrencyAmount => {
+    let sum = currencyAmounts[0]!;
+    for (let i = 1; i < currencyAmounts.length; i++) {
+      sum = sum.add(currencyAmounts[i]!);
+    }
+    return sum;
+  };
+
+  let bestQuote: CurrencyAmount | undefined;
+  let bestSwap: RouteWithValidQuote[] | undefined;
+
+  // Min-heap for tracking the 5 best swaps given some number of splits.
+  const bestSwapsPerSplit = new FixedReverseHeap<{
+    quote: CurrencyAmount;
+    routes: RouteWithValidQuote[];
+  }>(
+    Array,
+    (a, b) => {
+      return quoteCompFn(a.quote, b.quote) ? -1 : 1;
+    },
+    3
+  );
+
+  const { minSplits, maxSplits, forceCrossProtocol } = routingConfig;
+
+  if (!percentToSortedQuotes[100] || minSplits > 1 || forceCrossProtocol) {
+    log.info(
+      {
+        percentToSortedQuotes: _.mapValues(
+          percentToSortedQuotes,
+          (p) => p.length
+        ),
+      },
+      'Did not find a valid route without any splits. Continuing search anyway.'
+    );
+  } else {
+    bestQuote = by(percentToSortedQuotes[100][0]!);
+    bestSwap = [percentToSortedQuotes[100][0]!];
+
+    for (const routeWithQuote of percentToSortedQuotes[100].slice(0, 5)) {
+      bestSwapsPerSplit.push({
+        quote: by(routeWithQuote),
+        routes: [routeWithQuote],
+      });
+    }
+  }
+
+  // We do a BFS. Each additional node in a path represents us adding an additional split to the route.
+  const queue = new Queue<{
+    percentIndex: number;
+    curRoutes: RouteWithValidQuote[];
+    remainingPercent: number;
+    special: boolean;
+  }>();
+
+  // First we seed BFS queue with the best quotes for each percentage.
+  // i.e. [best quote when sending 10% of amount, best quote when sending 20% of amount, ...]
+  // We will explore the various combinations from each node.
+  for (let i = percents.length; i >= 0; i--) {
+    const percent = percents[i]!;
+
+    if (!percentToSortedQuotes[percent]) {
+      continue;
+    }
+
+    queue.enqueue({
+      curRoutes: [percentToSortedQuotes[percent]![0]!],
+      percentIndex: i,
+      remainingPercent: 100 - percent,
+      special: false,
+    });
+
+    if (
+      !percentToSortedQuotes[percent] ||
+      !percentToSortedQuotes[percent]![1]
+    ) {
+      continue;
+    }
+
+    queue.enqueue({
+      curRoutes: [percentToSortedQuotes[percent]![1]!],
+      percentIndex: i,
+      remainingPercent: 100 - percent,
+      special: true,
+    });
+  }
+
+  let splits = 1;
+  let startedSplit = Date.now();
+
+  while (queue.size > 0) {
+    metric.putMetric(
+      `Split${splits}Done`,
+      Date.now() - startedSplit,
+      MetricLoggerUnit.Milliseconds
+    );
+
+    startedSplit = Date.now();
+
+    log.info(
+      {
+        top5: _.map(
+          Array.from(bestSwapsPerSplit.consume()),
+          (q) =>
+            `${q.quote.toExact()} (${_(q.routes)
+              .map((r) => r.toString())
+              .join(', ')})`
+        ),
+        onQueue: queue.size,
+      },
+      `Top 3 with ${splits} splits`
+    );
+
+    bestSwapsPerSplit.clear();
+
+    // Size of the queue at this point is the number of potential routes we are investigating for the given number of splits.
+    let layer = queue.size;
+    splits++;
+
+    // If we didn't improve our quote by adding another split, very unlikely to improve it by splitting more after that.
+    if (splits >= 3 && bestSwap && bestSwap.length < splits - 1) {
+      break;
+    }
+
+    if (splits > maxSplits) {
+      log.info('Max splits reached. Stopping search.');
+      metric.putMetric(`MaxSplitsHitReached`, 1, MetricLoggerUnit.Count);
+      break;
+    }
+
+    while (layer > 0) {
+      layer--;
+
+      const { remainingPercent, curRoutes, percentIndex, special } =
+        queue.dequeue()!;
+
+      // For all other percentages, add a new potential route.
+      // E.g. if our current aggregated route if missing 50%, we will create new nodes and add to the queue for:
+      // 50% + new 10% route, 50% + new 20% route, etc.
+      for (let i = percentIndex; i >= 0; i--) {
+        const percentA = percents[i]!;
+
+        if (percentA > remainingPercent) {
+          continue;
+        }
+
+        // At some point the amount * percentage is so small that the quoter is unable to get
+        // a quote. In this case there could be no quotes for that percentage.
+        if (!percentToSortedQuotes[percentA]) {
+          continue;
+        }
+
+        const candidateRoutesA = percentToSortedQuotes[percentA]!;
+
+        // Find the best route in the complimentary percentage that doesn't re-use a pool already
+        // used in the current route. Re-using pools is not allowed as each swap through a pool changes its liquidity,
+        // so it would make the quotes inaccurate.
+        const routeWithQuoteA = findFirstRouteNotUsingUsedPools(
+          curRoutes,
+          candidateRoutesA,
+          forceCrossProtocol
+        );
+
+        if (!routeWithQuoteA) {
+          continue;
+        }
+
+        const remainingPercentNew = remainingPercent - percentA;
+        const curRoutesNew = [...curRoutes, routeWithQuoteA];
+
+        // If we've found a route combination that uses all 100%, and it has at least minSplits, update our best route.
+        if (remainingPercentNew == 0 && splits >= minSplits) {
+          const quotesNew = _.map(curRoutesNew, (r) => by(r));
+          const quoteNew = sumFn(quotesNew);
+
+          let gasCostL1QuoteToken = CurrencyAmount.fromRawAmount(
+            quoteNew.currency,
+            0
+          );
+
+          if (HAS_L1_FEE.includes(chainId)) {
+            const onlyV3Routes = curRoutesNew.every(
+              (route) => route.protocol == Protocol.V3
+            );
+
+            if (gasModel == undefined || !onlyV3Routes) {
+              throw new Error('Can\'t compute L1 gas fees.');
+            } else {
+              const gasCostL1 = await gasModel.calculateL1GasFees!(
+                curRoutesNew as V3RouteWithValidQuote[]
+              );
+              gasCostL1QuoteToken = gasCostL1.gasCostL1QuoteToken;
+            }
+          }
+
+          const quoteAfterL1Adjust =
+            routeType == TradeType.EXACT_INPUT
+              ? quoteNew.subtract(gasCostL1QuoteToken)
+              : quoteNew.add(gasCostL1QuoteToken);
+
+          bestSwapsPerSplit.push({
+            quote: quoteAfterL1Adjust,
+            routes: curRoutesNew,
+          });
+
+          if (!bestQuote || quoteCompFn(quoteAfterL1Adjust, bestQuote)) {
+            bestQuote = quoteAfterL1Adjust;
+            bestSwap = curRoutesNew;
+
+            // Temporary experiment.
+            if (special) {
+              metric.putMetric(
+                `BestSwapNotPickingBestForPercent`,
+                1,
+                MetricLoggerUnit.Count
+              );
+            }
+          }
+        } else {
+          queue.enqueue({
+            curRoutes: curRoutesNew,
+            remainingPercent: remainingPercentNew,
+            percentIndex: i,
+            special,
+          });
+        }
+      }
+    }
+  }
+
+  if (!bestSwap) {
+    log.info(`Could not find a valid swap`);
+    return undefined;
+  }
+
+  const postSplitNow = Date.now();
+
+  let quoteGasAdjusted = sumFn(
+    _.map(
+      bestSwap,
+      (routeWithValidQuote) => routeWithValidQuote.quoteAdjustedForGas
+    )
+  );
+
+  // this calculates the base gas used
+  // if on L1, its the estimated gas used based on hops and ticks across all the routes
+  // if on L2, its the gas used on the L2 based on hops and ticks across all the routes
+  const estimatedGasUsed = _(bestSwap)
+    .map((routeWithValidQuote) => routeWithValidQuote.gasEstimate)
+    .reduce(
+      (sum, routeWithValidQuote) => sum.add(routeWithValidQuote),
+      BigNumber.from(0)
+    );
+
+  if (!usdGasTokensByChain[chainId] || !usdGasTokensByChain[chainId]![0]) {
+    // Each route can use a different stablecoin to account its gas costs.
+    // They should all be pegged, and this is just an estimate, so we do a merge
+    // to an arbitrary stable.
+    throw new Error(
+      `Could not find a USD token for computing gas costs on ${chainId}`
+    );
+  }
+  const usdToken = usdGasTokensByChain[chainId]![0]!;
+  const usdTokenDecimals = usdToken.decimals;
+
+  // if on L2, calculate the L1 security fee
+  let gasCostsL1ToL2: L1ToL2GasCosts = {
+    gasUsedL1: BigNumber.from(0),
+    gasCostL1USD: CurrencyAmount.fromRawAmount(usdToken, 0),
+    gasCostL1QuoteToken: CurrencyAmount.fromRawAmount(
+      // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain
+      bestSwap[0]?.quoteToken!,
+      0
+    ),
+  };
+  // If swapping on an L2 that includes a L1 security fee, calculate the fee and include it in the gas adjusted quotes
+  if (HAS_L1_FEE.includes(chainId)) {
+    // ensure the gasModel exists and that the swap route is a v3 only route
+    const onlyV3Routes = bestSwap.every(
+      (route) => route.protocol == Protocol.V3
+    );
+    if (gasModel == undefined || !onlyV3Routes) {
+      throw new Error('Can\'t compute L1 gas fees.');
+    } else {
+      gasCostsL1ToL2 = await gasModel.calculateL1GasFees!(
+        bestSwap as V3RouteWithValidQuote[]
+      );
+    }
+  }
+
+  const { gasCostL1USD, gasCostL1QuoteToken } = gasCostsL1ToL2;
+
+  // For each gas estimate, normalize decimals to that of the chosen usd token.
+  const estimatedGasUsedUSDs = _(bestSwap)
+    .map((routeWithValidQuote) => {
+      // TODO: will error if gasToken has decimals greater than usdToken
+      const decimalsDiff =
+        usdTokenDecimals - routeWithValidQuote.gasCostInUSD.currency.decimals;
+
+      if (decimalsDiff == 0) {
+        return CurrencyAmount.fromRawAmount(
+          usdToken,
+          routeWithValidQuote.gasCostInUSD.quotient
+        );
+      }
+
+      return CurrencyAmount.fromRawAmount(
+        usdToken,
+        JSBI.multiply(
+          routeWithValidQuote.gasCostInUSD.quotient,
+          JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(decimalsDiff))
+        )
+      );
+    })
+    .value();
+
+  let estimatedGasUsedUSD = sumFn(estimatedGasUsedUSDs);
+
+  // if they are different usd pools, convert to the usdToken
+  if (estimatedGasUsedUSD.currency != gasCostL1USD.currency) {
+    const decimalsDiff = usdTokenDecimals - gasCostL1USD.currency.decimals;
+    estimatedGasUsedUSD = estimatedGasUsedUSD.add(
+      CurrencyAmount.fromRawAmount(
+        usdToken,
+        JSBI.multiply(
+          gasCostL1USD.quotient,
+          JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(decimalsDiff))
+        )
+      )
+    );
+  } else {
+    estimatedGasUsedUSD = estimatedGasUsedUSD.add(gasCostL1USD);
+  }
+
+  log.info(
+    {
+      estimatedGasUsedUSD: estimatedGasUsedUSD.toExact(),
+      normalizedUsdToken: usdToken,
+      routeUSDGasEstimates: _.map(
+        bestSwap,
+        (b) =>
+          `${b.percent}% ${routeToString(b.route)} ${b.gasCostInUSD.toExact()}`
+      ),
+      flatL1GasCostUSD: gasCostL1USD.toExact(),
+    },
+    'USD gas estimates of best route'
+  );
+
+  const estimatedGasUsedQuoteToken = sumFn(
+    _.map(bestSwap, (routeWithValidQuote) => routeWithValidQuote.gasCostInToken)
+  ).add(gasCostL1QuoteToken);
+
+  const quote = sumFn(
+    _.map(bestSwap, (routeWithValidQuote) => routeWithValidQuote.quote)
+  );
+
+  // Adjust the quoteGasAdjusted for the l1 fee
+  if (routeType == TradeType.EXACT_INPUT) {
+    const quoteGasAdjustedForL1 =
+      quoteGasAdjusted.subtract(gasCostL1QuoteToken);
+    quoteGasAdjusted = quoteGasAdjustedForL1;
+  } else {
+    const quoteGasAdjustedForL1 = quoteGasAdjusted.add(gasCostL1QuoteToken);
+    quoteGasAdjusted = quoteGasAdjustedForL1;
+  }
+
+  const routeWithQuotes = bestSwap.sort((routeAmountA, routeAmountB) =>
+    routeAmountB.amount.greaterThan(routeAmountA.amount) ? 1 : -1
+  );
+
+  metric.putMetric(
+    'PostSplitDone',
+    Date.now() - postSplitNow,
+    MetricLoggerUnit.Milliseconds
+  );
+  return {
+    quote,
+    quoteGasAdjusted,
+    estimatedGasUsed,
+    estimatedGasUsedUSD,
+    estimatedGasUsedQuoteToken,
+    routes: routeWithQuotes,
+  };
+}
+
+// We do not allow pools to be re-used across split routes, as swapping through a pool changes the pools state.
+// Given a list of used routes, this function finds the first route in the list of candidate routes that does not re-use an already used pool.
+const findFirstRouteNotUsingUsedPools = (
+  usedRoutes: RouteWithValidQuote[],
+  candidateRouteQuotes: RouteWithValidQuote[],
+  forceCrossProtocol: boolean
+): RouteWithValidQuote | null => {
+  const poolAddressSet = new Set();
+  const usedPoolAddresses = _(usedRoutes)
+    .flatMap((r) => r.poolAddresses)
+    .value();
+
+  for (const poolAddress of usedPoolAddresses) {
+    poolAddressSet.add(poolAddress);
+  }
+
+  const protocolsSet = new Set();
+  const usedProtocols = _(usedRoutes)
+    .flatMap((r) => r.protocol)
+    .uniq()
+    .value();
+
+  for (const protocol of usedProtocols) {
+    protocolsSet.add(protocol);
+  }
+
+  for (const routeQuote of candidateRouteQuotes) {
+    const { poolAddresses, protocol } = routeQuote;
+
+    if (poolAddresses.some((poolAddress) => poolAddressSet.has(poolAddress))) {
+      continue;
+    }
+
+    // This code is just for debugging. Allows us to force a cross-protocol split route by skipping
+    // consideration of routes that come from the same protocol as a used route.
+    const needToForce = forceCrossProtocol && protocolsSet.size == 1;
+    if (needToForce && protocolsSet.has(protocol)) {
+      continue;
+    }
+
+    return routeQuote;
+  }
+
+  return null;
+};
diff --git a/lib/sor/routers/alpha-router/functions/calculate-ratio-amount-in.ts b/lib/sor/routers/alpha-router/functions/calculate-ratio-amount-in.ts
new file mode 100644
index 0000000..19c99bb
--- /dev/null
+++ b/lib/sor/routers/alpha-router/functions/calculate-ratio-amount-in.ts
@@ -0,0 +1,25 @@
+import { Fraction } from '@uniswap/sdk-core';
+
+import { CurrencyAmount } from '../../../util/amounts';
+
+export function calculateRatioAmountIn(
+  optimalRatio: Fraction,
+  inputTokenPrice: Fraction,
+  inputBalance: CurrencyAmount,
+  outputBalance: CurrencyAmount
+): CurrencyAmount {
+  // formula: amountToSwap = (inputBalance - (optimalRatio * outputBalance)) / ((optimalRatio * inputTokenPrice) + 1))
+  const amountToSwapRaw = new Fraction(inputBalance.quotient)
+    .subtract(optimalRatio.multiply(outputBalance.quotient))
+    .divide(optimalRatio.multiply(inputTokenPrice).add(1));
+
+  if (amountToSwapRaw.lessThan(0)) {
+    // should never happen since we do checks before calling in
+    throw new Error('routeToRatio: insufficient input token amount');
+  }
+
+  return CurrencyAmount.fromRawAmount(
+    inputBalance.currency,
+    amountToSwapRaw.quotient
+  );
+}
diff --git a/lib/sor/routers/alpha-router/functions/compute-all-routes.ts b/lib/sor/routers/alpha-router/functions/compute-all-routes.ts
new file mode 100644
index 0000000..6659188
--- /dev/null
+++ b/lib/sor/routers/alpha-router/functions/compute-all-routes.ts
@@ -0,0 +1,140 @@
+import { Token } from '@uniswap/sdk-core';
+import { Pair } from '@uniswap/v2-sdk';
+import { Pool } from '@uniswap/v3-sdk';
+
+import { log } from '../../../util/log';
+import { poolToString, routeToString } from '../../../util/routes';
+import { MixedRoute, V2Route, V3Route } from '../../router';
+
+export function computeAllV3Routes(
+  tokenIn: Token,
+  tokenOut: Token,
+  pools: Pool[],
+  maxHops: number
+): V3Route[] {
+  return computeAllRoutes<Pool, V3Route>(
+    tokenIn,
+    tokenOut,
+    (route: Pool[], tokenIn: Token, tokenOut: Token) => {
+      return new V3Route(route, tokenIn, tokenOut);
+    },
+    pools,
+    maxHops
+  );
+}
+
+export function computeAllV2Routes(
+  tokenIn: Token,
+  tokenOut: Token,
+  pools: Pair[],
+  maxHops: number
+): V2Route[] {
+  return computeAllRoutes<Pair, V2Route>(
+    tokenIn,
+    tokenOut,
+    (route: Pair[], tokenIn: Token, tokenOut: Token) => {
+      return new V2Route(route, tokenIn, tokenOut);
+    },
+    pools,
+    maxHops
+  );
+}
+
+export function computeAllMixedRoutes(
+  tokenIn: Token,
+  tokenOut: Token,
+  parts: (Pool | Pair)[],
+  maxHops: number
+): MixedRoute[] {
+  const routesRaw = computeAllRoutes<Pool | Pair, MixedRoute>(
+    tokenIn,
+    tokenOut,
+    (route: (Pool | Pair)[], tokenIn: Token, tokenOut: Token) => {
+      return new MixedRoute(route, tokenIn, tokenOut);
+    },
+    parts,
+    maxHops
+  );
+  /// filter out pure v3 and v2 routes
+  return routesRaw.filter((route) => {
+    return (
+      !route.pools.every((pool) => pool instanceof Pool) &&
+      !route.pools.every((pool) => pool instanceof Pair)
+    );
+  });
+}
+
+export function computeAllRoutes<
+  TPool extends Pair | Pool,
+  TRoute extends V3Route | V2Route | MixedRoute
+>(
+  tokenIn: Token,
+  tokenOut: Token,
+  buildRoute: (route: TPool[], tokenIn: Token, tokenOut: Token) => TRoute,
+  pools: TPool[],
+  maxHops: number
+): TRoute[] {
+  const poolsUsed = Array<boolean>(pools.length).fill(false);
+  const routes: TRoute[] = [];
+
+  const computeRoutes = (
+    tokenIn: Token,
+    tokenOut: Token,
+    currentRoute: TPool[],
+    poolsUsed: boolean[],
+    _previousTokenOut?: Token
+  ) => {
+    if (currentRoute.length > maxHops) {
+      return;
+    }
+
+    if (
+      currentRoute.length > 0 &&
+      currentRoute[currentRoute.length - 1]!.involvesToken(tokenOut)
+    ) {
+      routes.push(buildRoute([...currentRoute], tokenIn, tokenOut));
+      return;
+    }
+
+    for (let i = 0; i < pools.length; i++) {
+      if (poolsUsed[i]) {
+        continue;
+      }
+
+      const curPool = pools[i]!;
+      const previousTokenOut = _previousTokenOut ? _previousTokenOut : tokenIn;
+
+      if (!curPool.involvesToken(previousTokenOut)) {
+        continue;
+      }
+
+      const currentTokenOut = curPool.token0.equals(previousTokenOut)
+        ? curPool.token1
+        : curPool.token0;
+
+      currentRoute.push(curPool);
+      poolsUsed[i] = true;
+      computeRoutes(
+        tokenIn,
+        tokenOut,
+        currentRoute,
+        poolsUsed,
+        currentTokenOut
+      );
+      poolsUsed[i] = false;
+      currentRoute.pop();
+    }
+  };
+
+  computeRoutes(tokenIn, tokenOut, [], poolsUsed);
+
+  log.info(
+    {
+      routes: routes.map(routeToString),
+      pools: pools.map(poolToString),
+    },
+    `Computed ${routes.length} possible routes for type ${routes[0]?.protocol}.`
+  );
+
+  return routes;
+}
diff --git a/lib/sor/routers/alpha-router/functions/get-candidate-pools.ts b/lib/sor/routers/alpha-router/functions/get-candidate-pools.ts
new file mode 100644
index 0000000..6d247dd
--- /dev/null
+++ b/lib/sor/routers/alpha-router/functions/get-candidate-pools.ts
@@ -0,0 +1,1293 @@
+import { Protocol } from '@uniswap/router-sdk'
+import { ChainId, Token, TradeType } from '@uniswap/sdk-core'
+import { FeeAmount } from '@uniswap/v3-sdk'
+import _ from 'lodash'
+
+import { ITokenListProvider, IV2SubgraphProvider, V2SubgraphPool } from '../../../providers'
+import {
+  CELO,
+  CELO_ALFAJORES,
+  CEUR_CELO,
+  CEUR_CELO_ALFAJORES,
+  CUSD_CELO,
+  CUSD_CELO_ALFAJORES,
+  DAI_ARBITRUM,
+  DAI_AVAX,
+  DAI_BNB,
+  DAI_MAINNET,
+  DAI_MOONBEAM,
+  DAI_OPTIMISM,
+  DAI_OPTIMISM_GOERLI,
+  DAI_POLYGON_MUMBAI,
+  DAI_SEPOLIA,
+  FEI_MAINNET,
+  ITokenProvider,
+  USDC_ARBITRUM,
+  USDC_ARBITRUM_GOERLI,
+  USDC_AVAX,
+  USDC_BASE,
+  USDC_BNB,
+  USDC_ETHEREUM_GNOSIS,
+  USDC_MAINNET,
+  USDC_MOONBEAM,
+  USDC_OPTIMISM,
+  USDC_OPTIMISM_GOERLI,
+  USDC_POLYGON,
+  USDC_SEPOLIA,
+  USDT_ARBITRUM,
+  USDT_BNB,
+  USDT_MAINNET,
+  USDT_OPTIMISM,
+  USDT_OPTIMISM_GOERLI,
+  WBTC_ARBITRUM,
+  WBTC_GNOSIS,
+  WBTC_MAINNET,
+  WBTC_MOONBEAM,
+  WBTC_OPTIMISM,
+  WBTC_OPTIMISM_GOERLI,
+  WGLMR_MOONBEAM,
+  WMATIC_POLYGON,
+  WMATIC_POLYGON_MUMBAI,
+  WXDAI_GNOSIS,
+} from '../../../providers/token-provider'
+import { IV2PoolProvider, V2PoolAccessor } from '../../../providers/v2/pool-provider'
+import { IV3PoolProvider, V3PoolAccessor } from '../../../providers/v3/pool-provider'
+import { IV3SubgraphProvider, V3SubgraphPool } from '../../../providers/v3/subgraph-provider'
+import { unparseFeeAmount, WRAPPED_NATIVE_CURRENCY } from '../../../util'
+import { parseFeeAmount } from '../../../util/amounts'
+import { log } from '../../../util/log'
+import { metric, MetricLoggerUnit } from '../../../util/metric'
+import { AlphaRouterConfig } from '../alpha-router'
+import { CONTEXT } from '../../../../handlers/context'
+
+export type PoolId = { id: string }
+export type CandidatePoolsBySelectionCriteria = {
+  protocol: Protocol
+  selections: CandidatePoolsSelections
+}
+
+/// Utility type for allowing us to use `keyof CandidatePoolsSelections` to map
+export type CandidatePoolsSelections = {
+  topByBaseWithTokenIn: PoolId[]
+  topByBaseWithTokenOut: PoolId[]
+  topByDirectSwapPool: PoolId[]
+  topByEthQuoteTokenPool: PoolId[]
+  topByTVL: PoolId[]
+  topByTVLUsingTokenIn: PoolId[]
+  topByTVLUsingTokenOut: PoolId[]
+  topByTVLUsingTokenInSecondHops: PoolId[]
+  topByTVLUsingTokenOutSecondHops: PoolId[]
+}
+
+export type V3GetCandidatePoolsParams = {
+  tokenIn: Token
+  tokenOut: Token
+  routeType: TradeType
+  routingConfig: AlphaRouterConfig
+  subgraphProvider: IV3SubgraphProvider
+  tokenProvider: ITokenProvider
+  poolProvider: IV3PoolProvider
+  blockedTokenListProvider?: ITokenListProvider
+  chainId: ChainId
+}
+
+export type V2GetCandidatePoolsParams = {
+  tokenIn: Token
+  tokenOut: Token
+  routeType: TradeType
+  routingConfig: AlphaRouterConfig
+  subgraphProvider: IV2SubgraphProvider
+  tokenProvider: ITokenProvider
+  poolProvider: IV2PoolProvider
+  blockedTokenListProvider?: ITokenListProvider
+  chainId: ChainId
+}
+
+export type MixedRouteGetCandidatePoolsParams = {
+  v3CandidatePools: V3CandidatePools
+  v2CandidatePools: V2CandidatePools
+  routingConfig: AlphaRouterConfig
+  tokenProvider: ITokenProvider
+  v2poolProvider: IV2PoolProvider
+  v3poolProvider: IV3PoolProvider
+  blockedTokenListProvider?: ITokenListProvider
+  chainId: ChainId
+}
+
+const baseTokensByChain: { [chainId in ChainId]?: Token[] } = {
+  [ChainId.MAINNET]: [USDC_MAINNET, USDT_MAINNET, WBTC_MAINNET, DAI_MAINNET, WRAPPED_NATIVE_CURRENCY[1]!, FEI_MAINNET],
+  [ChainId.OPTIMISM]: [DAI_OPTIMISM, USDC_OPTIMISM, USDT_OPTIMISM, WBTC_OPTIMISM],
+  [ChainId.SEPOLIA]: [DAI_SEPOLIA, USDC_SEPOLIA],
+  [ChainId.OPTIMISM_GOERLI]: [DAI_OPTIMISM_GOERLI, USDC_OPTIMISM_GOERLI, USDT_OPTIMISM_GOERLI, WBTC_OPTIMISM_GOERLI],
+  [ChainId.ARBITRUM_ONE]: [DAI_ARBITRUM, USDC_ARBITRUM, WBTC_ARBITRUM, USDT_ARBITRUM],
+  [ChainId.ARBITRUM_GOERLI]: [USDC_ARBITRUM_GOERLI],
+  [ChainId.POLYGON]: [USDC_POLYGON, WMATIC_POLYGON],
+  [ChainId.POLYGON_MUMBAI]: [DAI_POLYGON_MUMBAI, WMATIC_POLYGON_MUMBAI],
+  [ChainId.CELO]: [CUSD_CELO, CEUR_CELO, CELO],
+  [ChainId.CELO_ALFAJORES]: [CUSD_CELO_ALFAJORES, CEUR_CELO_ALFAJORES, CELO_ALFAJORES],
+  [ChainId.GNOSIS]: [WBTC_GNOSIS, WXDAI_GNOSIS, USDC_ETHEREUM_GNOSIS],
+  [ChainId.MOONBEAM]: [DAI_MOONBEAM, USDC_MOONBEAM, WBTC_MOONBEAM, WGLMR_MOONBEAM],
+  [ChainId.BNB]: [DAI_BNB, USDC_BNB, USDT_BNB],
+  [ChainId.AVALANCHE]: [DAI_AVAX, USDC_AVAX],
+  [ChainId.BASE]: [USDC_BASE],
+}
+
+class SubcategorySelectionPools<SubgraphPool> {
+  constructor(public pools: SubgraphPool[], public readonly poolsNeeded: number) {}
+
+  public hasEnoughPools(): boolean {
+    return this.pools.length >= this.poolsNeeded
+  }
+}
+
+export type V3CandidatePools = {
+  poolAccessor: V3PoolAccessor
+  candidatePools: CandidatePoolsBySelectionCriteria
+  subgraphPools: V3SubgraphPool[]
+}
+
+export async function getV3CandidatePools({
+  tokenIn,
+  tokenOut,
+  routeType,
+  routingConfig,
+  subgraphProvider,
+  tokenProvider,
+  poolProvider,
+  blockedTokenListProvider,
+  chainId,
+}: V3GetCandidatePoolsParams): Promise<V3CandidatePools> {
+  const {
+    blockNumber,
+    v3PoolSelection: {
+      topN,
+      topNDirectSwaps,
+      topNTokenInOut,
+      topNSecondHop,
+      topNSecondHopForTokenAddress,
+      topNWithEachBaseToken,
+      topNWithBaseToken,
+    },
+  } = routingConfig
+  const tokenInAddress = tokenIn.address.toLowerCase()
+  const tokenOutAddress = tokenOut.address.toLowerCase()
+
+  const beforeSubgraphPools = Date.now()
+
+  const allPoolsRaw = await subgraphProvider.getPools(tokenIn, tokenOut, {
+    blockNumber,
+  })
+
+  log.info({ samplePools: allPoolsRaw.slice(0, 3) }, 'Got all pools from V3 subgraph provider')
+
+  const allPools = _.map(allPoolsRaw, (pool) => {
+    return {
+      ...pool,
+      token0: {
+        ...pool.token0,
+        id: pool.token0.id.toLowerCase(),
+      },
+      token1: {
+        ...pool.token1,
+        id: pool.token1.id.toLowerCase(),
+      },
+    }
+  })
+
+  metric.putMetric('V3SubgraphPoolsLoad', Date.now() - beforeSubgraphPools, MetricLoggerUnit.Milliseconds)
+
+  const beforePoolsFiltered = Date.now()
+
+  // Only consider pools where neither tokens are in the blocked token list.
+  let filteredPools: V3SubgraphPool[] = allPools
+  if (blockedTokenListProvider) {
+    filteredPools = []
+    for (const pool of allPools) {
+      const token0InBlocklist = await blockedTokenListProvider.getTokenByAddress(pool.token0.id)
+      const token1InBlocklist = await blockedTokenListProvider.getTokenByAddress(pool.token1.id)
+
+      if (token0InBlocklist || token1InBlocklist) {
+        continue
+      }
+
+      filteredPools.push(pool)
+    }
+  }
+
+  const subgraphPoolsSorted = _(filteredPools)
+    .sortBy((tokenListPool) => -tokenListPool.tvlUSD)
+    .value()
+
+  log.info(`After filtering blocked tokens went from ${allPools.length} to ${subgraphPoolsSorted.length}.`)
+
+  const poolAddressesSoFar = new Set<string>()
+  const addToAddressSet = (pools: V3SubgraphPool[]) => {
+    _(pools)
+      .map((pool) => pool.id)
+      .forEach((poolAddress) => poolAddressesSoFar.add(poolAddress))
+  }
+
+  const baseTokens = baseTokensByChain[chainId] ?? []
+
+  const topByBaseWithTokenIn = _(baseTokens)
+    .flatMap((token: Token) => {
+      return _(subgraphPoolsSorted)
+        .filter((subgraphPool) => {
+          const tokenAddress = token.address.toLowerCase()
+          return (
+            (subgraphPool.token0.id == tokenAddress && subgraphPool.token1.id == tokenInAddress) ||
+            (subgraphPool.token1.id == tokenAddress && subgraphPool.token0.id == tokenInAddress)
+          )
+        })
+        .sortBy((tokenListPool) => -tokenListPool.tvlUSD)
+        .slice(0, topNWithEachBaseToken)
+        .value()
+    })
+    .sortBy((tokenListPool) => -tokenListPool.tvlUSD)
+    .slice(0, topNWithBaseToken)
+    .value()
+
+  const topByBaseWithTokenOut = _(baseTokens)
+    .flatMap((token: Token) => {
+      return _(subgraphPoolsSorted)
+        .filter((subgraphPool) => {
+          const tokenAddress = token.address.toLowerCase()
+          return (
+            (subgraphPool.token0.id == tokenAddress && subgraphPool.token1.id == tokenOutAddress) ||
+            (subgraphPool.token1.id == tokenAddress && subgraphPool.token0.id == tokenOutAddress)
+          )
+        })
+        .sortBy((tokenListPool) => -tokenListPool.tvlUSD)
+        .slice(0, topNWithEachBaseToken)
+        .value()
+    })
+    .sortBy((tokenListPool) => -tokenListPool.tvlUSD)
+    .slice(0, topNWithBaseToken)
+    .value()
+
+  let top2DirectSwapPool = _(subgraphPoolsSorted)
+    .filter((subgraphPool) => {
+      return (
+        !poolAddressesSoFar.has(subgraphPool.id) &&
+        ((subgraphPool.token0.id == tokenInAddress && subgraphPool.token1.id == tokenOutAddress) ||
+          (subgraphPool.token1.id == tokenInAddress && subgraphPool.token0.id == tokenOutAddress))
+      )
+    })
+    .slice(0, topNDirectSwaps)
+    .value()
+
+  if (top2DirectSwapPool.length == 0 && topNDirectSwaps > 0) {
+    // If we requested direct swap pools but did not find any in the subgraph query.
+    // Optimistically add them into the query regardless. Invalid pools ones will be dropped anyway
+    // when we query the pool on-chain. Ensures that new pools for new pairs can be swapped on immediately.
+    top2DirectSwapPool = _.map([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW, FeeAmount.LOWEST], (feeAmount) => {
+      const { token0, token1, poolAddress } = poolProvider.getPoolAddress(tokenIn, tokenOut, feeAmount)
+      return {
+        id: poolAddress,
+        feeTier: unparseFeeAmount(feeAmount),
+        liquidity: '10000',
+        token0: {
+          id: token0.address,
+        },
+        token1: {
+          id: token1.address,
+        },
+        tvlETH: 10000,
+        tvlUSD: 10000,
+      }
+    })
+  }
+
+  addToAddressSet(top2DirectSwapPool)
+
+  const wrappedNativeAddress = WRAPPED_NATIVE_CURRENCY[chainId]?.address
+
+  // Main reason we need this is for gas estimates, only needed if token out is not native.
+  // We don't check the seen address set because if we've already added pools for getting native quotes
+  // theres no need to add more.
+  let top2EthQuoteTokenPool: V3SubgraphPool[] = []
+  if (
+    (WRAPPED_NATIVE_CURRENCY[chainId]?.symbol == WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET]?.symbol &&
+      tokenOut.symbol != 'WETH' &&
+      tokenOut.symbol != 'WETH9' &&
+      tokenOut.symbol != 'ETH') ||
+    (WRAPPED_NATIVE_CURRENCY[chainId]?.symbol == WMATIC_POLYGON.symbol &&
+      tokenOut.symbol != 'MATIC' &&
+      tokenOut.symbol != 'WMATIC')
+  ) {
+    top2EthQuoteTokenPool = _(subgraphPoolsSorted)
+      .filter((subgraphPool) => {
+        if (routeType == TradeType.EXACT_INPUT) {
+          return (
+            (subgraphPool.token0.id == wrappedNativeAddress && subgraphPool.token1.id == tokenOutAddress) ||
+            (subgraphPool.token1.id == wrappedNativeAddress && subgraphPool.token0.id == tokenOutAddress)
+          )
+        } else {
+          return (
+            (subgraphPool.token0.id == wrappedNativeAddress && subgraphPool.token1.id == tokenInAddress) ||
+            (subgraphPool.token1.id == wrappedNativeAddress && subgraphPool.token0.id == tokenInAddress)
+          )
+        }
+      })
+      .slice(0, 1)
+      .value()
+  }
+
+  addToAddressSet(top2EthQuoteTokenPool)
+
+  const topByTVL = _(subgraphPoolsSorted)
+    .filter((subgraphPool) => {
+      return !poolAddressesSoFar.has(subgraphPool.id)
+    })
+    .slice(0, topN)
+    .value()
+
+  addToAddressSet(topByTVL)
+
+  const topByTVLUsingTokenIn = _(subgraphPoolsSorted)
+    .filter((subgraphPool) => {
+      return (
+        !poolAddressesSoFar.has(subgraphPool.id) &&
+        (subgraphPool.token0.id == tokenInAddress || subgraphPool.token1.id == tokenInAddress)
+      )
+    })
+    .slice(0, topNTokenInOut)
+    .value()
+
+  addToAddressSet(topByTVLUsingTokenIn)
+
+  const topByTVLUsingTokenOut = _(subgraphPoolsSorted)
+    .filter((subgraphPool) => {
+      return (
+        !poolAddressesSoFar.has(subgraphPool.id) &&
+        (subgraphPool.token0.id == tokenOutAddress || subgraphPool.token1.id == tokenOutAddress)
+      )
+    })
+    .slice(0, topNTokenInOut)
+    .value()
+
+  addToAddressSet(topByTVLUsingTokenOut)
+
+  const topByTVLUsingTokenInSecondHops = _(topByTVLUsingTokenIn)
+    .map((subgraphPool) => {
+      return tokenInAddress == subgraphPool.token0.id ? subgraphPool.token1.id : subgraphPool.token0.id
+    })
+    .flatMap((secondHopId: string) => {
+      return _(subgraphPoolsSorted)
+        .filter((subgraphPool) => {
+          return (
+            !poolAddressesSoFar.has(subgraphPool.id) &&
+            (subgraphPool.token0.id == secondHopId || subgraphPool.token1.id == secondHopId)
+          )
+        })
+        .slice(0, topNSecondHopForTokenAddress?.get(secondHopId) ?? topNSecondHop)
+        .value()
+    })
+    .uniqBy((pool) => pool.id)
+    .value()
+
+  addToAddressSet(topByTVLUsingTokenInSecondHops)
+
+  const topByTVLUsingTokenOutSecondHops = _(topByTVLUsingTokenOut)
+    .map((subgraphPool) => {
+      return tokenOutAddress == subgraphPool.token0.id ? subgraphPool.token1.id : subgraphPool.token0.id
+    })
+    .flatMap((secondHopId: string) => {
+      return _(subgraphPoolsSorted)
+        .filter((subgraphPool) => {
+          return (
+            !poolAddressesSoFar.has(subgraphPool.id) &&
+            (subgraphPool.token0.id == secondHopId || subgraphPool.token1.id == secondHopId)
+          )
+        })
+        .slice(0, topNSecondHopForTokenAddress?.get(secondHopId) ?? topNSecondHop)
+        .value()
+    })
+    .uniqBy((pool) => pool.id)
+    .value()
+
+  addToAddressSet(topByTVLUsingTokenOutSecondHops)
+
+  const subgraphPools = _([
+    ...topByBaseWithTokenIn,
+    ...topByBaseWithTokenOut,
+    ...top2DirectSwapPool,
+    ...top2EthQuoteTokenPool,
+    ...topByTVL,
+    ...topByTVLUsingTokenIn,
+    ...topByTVLUsingTokenOut,
+    ...topByTVLUsingTokenInSecondHops,
+    ...topByTVLUsingTokenOutSecondHops,
+  ])
+    .compact()
+    .uniqBy((pool) => pool.id)
+    .value()
+
+  const tokenAddresses = _(subgraphPools)
+    .flatMap((subgraphPool) => [subgraphPool.token0.id, subgraphPool.token1.id])
+    .compact()
+    .uniq()
+    .value()
+
+  log.info(`Getting the ${tokenAddresses.length} tokens within the ${subgraphPools.length} V3 pools we are considering`)
+
+  const tokenAccessor = await tokenProvider.getTokens(tokenAddresses, {
+    blockNumber,
+  })
+
+  const printV3SubgraphPool = (s: V3SubgraphPool) =>
+    `${tokenAccessor.getTokenByAddress(s.token0.id)?.symbol ?? s.token0.id}/${
+      tokenAccessor.getTokenByAddress(s.token1.id)?.symbol ?? s.token1.id
+    }/${s.feeTier}`
+
+  log.info(
+    {
+      topByBaseWithTokenIn: topByBaseWithTokenIn.map(printV3SubgraphPool),
+      topByBaseWithTokenOut: topByBaseWithTokenOut.map(printV3SubgraphPool),
+      topByTVL: topByTVL.map(printV3SubgraphPool),
+      topByTVLUsingTokenIn: topByTVLUsingTokenIn.map(printV3SubgraphPool),
+      topByTVLUsingTokenOut: topByTVLUsingTokenOut.map(printV3SubgraphPool),
+      topByTVLUsingTokenInSecondHops: topByTVLUsingTokenInSecondHops.map(printV3SubgraphPool),
+      topByTVLUsingTokenOutSecondHops: topByTVLUsingTokenOutSecondHops.map(printV3SubgraphPool),
+      top2DirectSwap: top2DirectSwapPool.map(printV3SubgraphPool),
+      top2EthQuotePool: top2EthQuoteTokenPool.map(printV3SubgraphPool),
+    },
+    `V3 Candidate Pools`
+  )
+
+  const tokenPairsRaw = _.map<V3SubgraphPool, [Token, Token, FeeAmount] | undefined>(subgraphPools, (subgraphPool) => {
+    const tokenA = tokenAccessor.getTokenByAddress(subgraphPool.token0.id)
+    const tokenB = tokenAccessor.getTokenByAddress(subgraphPool.token1.id)
+    let fee: FeeAmount
+    try {
+      fee = parseFeeAmount(subgraphPool.feeTier)
+    } catch (err) {
+      log.info(
+        { subgraphPool },
+        `Dropping candidate pool for ${subgraphPool.token0.id}/${subgraphPool.token1.id}/${subgraphPool.feeTier} because fee tier not supported`
+      )
+      return undefined
+    }
+
+    if (!tokenA || !tokenB) {
+      log.info(
+        `Dropping candidate pool for ${subgraphPool.token0.id}/${subgraphPool.token1.id}/${fee} because ${
+          tokenA ? subgraphPool.token1.id : subgraphPool.token0.id
+        } not found by token provider`
+      )
+      return undefined
+    }
+
+    return [tokenA, tokenB, fee]
+  })
+
+  const tokenPairs = _.compact(tokenPairsRaw)
+
+  metric.putMetric('V3PoolsFilterLoad', Date.now() - beforePoolsFiltered, MetricLoggerUnit.Milliseconds)
+
+  const beforePoolsLoad = Date.now()
+
+  const poolAccessor = await poolProvider.getPools(tokenPairs, {
+    blockNumber,
+  })
+
+  metric.putMetric('V3PoolsLoad', Date.now() - beforePoolsLoad, MetricLoggerUnit.Milliseconds)
+
+  const poolsBySelection: CandidatePoolsBySelectionCriteria = {
+    protocol: Protocol.V3,
+    selections: {
+      topByBaseWithTokenIn,
+      topByBaseWithTokenOut,
+      topByDirectSwapPool: top2DirectSwapPool,
+      topByEthQuoteTokenPool: top2EthQuoteTokenPool,
+      topByTVL,
+      topByTVLUsingTokenIn,
+      topByTVLUsingTokenOut,
+      topByTVLUsingTokenInSecondHops,
+      topByTVLUsingTokenOutSecondHops,
+    },
+  }
+
+  return { poolAccessor, candidatePools: poolsBySelection, subgraphPools }
+}
+
+export type V2CandidatePools = {
+  poolAccessor: V2PoolAccessor
+  candidatePools: CandidatePoolsBySelectionCriteria
+  subgraphPools: V2SubgraphPool[]
+}
+
+export async function getV2CandidatePools({
+  tokenIn,
+  tokenOut,
+  routeType,
+  routingConfig,
+  subgraphProvider,
+  tokenProvider,
+  poolProvider,
+  blockedTokenListProvider,
+  chainId,
+}: V2GetCandidatePoolsParams): Promise<V2CandidatePools> {
+  const {
+    blockNumber,
+    v2PoolSelection: { topN, topNDirectSwaps, topNTokenInOut, topNSecondHop, topNWithEachBaseToken, topNWithBaseToken },
+    debugRouting,
+  } = routingConfig
+  const tokenInAddress = tokenIn.address.toLowerCase()
+  const tokenOutAddress = tokenOut.address.toLowerCase()
+
+  const getV2CandidatePoolsStart = Date.now()
+
+  const beforeSubgraphPools = Date.now()
+
+  const subgraphProviderGetPoolsStart = Date.now()
+
+  const allPoolsRaw = await subgraphProvider.getPools(tokenIn, tokenOut, {
+    blockNumber,
+  })
+
+  const subgraphProviderGetPoolsEnd = Date.now()
+
+  const allPoolsMapStart = Date.now()
+
+  for (const pool of allPoolsRaw) {
+    pool.token0.id = pool.token0.id.toLowerCase()
+    pool.token1.id = pool.token1.id.toLowerCase()
+  }
+
+  // const allPools = _.map(allPoolsRaw, (pool) => {
+  //   return {
+  //     ...pool,
+  //     token0: {
+  //       ...pool.token0,
+  //       id: pool.token0.id.toLowerCase(),
+  //     },
+  //     token1: {
+  //       ...pool.token1,
+  //       id: pool.token1.id.toLowerCase(),
+  //     },
+  //   }
+  // })
+
+  const allPoolsMapEnd = Date.now()
+
+  metric.putMetric('V2SubgraphPoolsLoad', Date.now() - beforeSubgraphPools, MetricLoggerUnit.Milliseconds)
+
+  const beforePoolsFiltered = Date.now()
+
+  const subgraphPoolsSortStart = Date.now()
+  allPoolsRaw.sort((a, b) => b.reserve - a.reserve)
+
+  const subgraphPoolsSorted = allPoolsRaw
+
+  // const subgraphPoolsSorted = _(allPoolsRaw)
+  //   .sortBy((tokenListPool) => -tokenListPool.reserve)
+  //   .value()
+
+  const subgraphPoolsSortEnd = Date.now()
+
+  const poolAddressesSoFar = new Set<string>()
+
+  // Always add the direct swap pool into the mix regardless of if it exists in the subgraph pool list.
+  // Ensures that new pools can be swapped on immediately, and that if a pool was filtered out of the
+  // subgraph query for some reason (e.g. trackedReserveETH was 0), then we still consider it.
+  let topByDirectSwapPool: V2SubgraphPool[] = []
+
+  const topNDirectSwapsStart = Date.now()
+  if (topNDirectSwaps > 0) {
+    const { token0, token1, poolAddress } = poolProvider.getPoolAddress(tokenIn, tokenOut)
+
+    poolAddressesSoFar.add(poolAddress.toLowerCase())
+
+    topByDirectSwapPool = [
+      {
+        id: poolAddress,
+        token0: {
+          id: token0.address,
+        },
+        token1: {
+          id: token1.address,
+        },
+        supply: 10000, // Not used. Set to arbitrary number.
+        reserve: 10000, // Not used. Set to arbitrary number.
+        reserveUSD: 10000, // Not used. Set to arbitrary number.
+      },
+    ]
+  }
+  const topNDirectSwapsEnd = Date.now()
+
+  const wethAddress = WRAPPED_NATIVE_CURRENCY[chainId]!.address
+
+  const topByBaseWithTokenInMap: Map<string, SubcategorySelectionPools<V2SubgraphPool>> = new Map()
+  const topByBaseWithTokenOutMap: Map<string, SubcategorySelectionPools<V2SubgraphPool>> = new Map()
+
+  const baseTokens = baseTokensByChain[chainId] ?? []
+  const baseTokensAddresses: Set<string> = new Set()
+
+  baseTokens.forEach((token) => {
+    const baseTokenAddr = token.address.toLowerCase()
+
+    baseTokensAddresses.add(baseTokenAddr)
+    topByBaseWithTokenInMap.set(baseTokenAddr, new SubcategorySelectionPools<V2SubgraphPool>([], topNWithEachBaseToken))
+    topByBaseWithTokenOutMap.set(
+      baseTokenAddr,
+      new SubcategorySelectionPools<V2SubgraphPool>([], topNWithEachBaseToken)
+    )
+  })
+
+  let topByBaseWithTokenInPoolsFound = 0
+  let topByBaseWithTokenOutPoolsFound = 0
+
+  const topByEthQuoteTokenPool: V2SubgraphPool[] = []
+  const topByTVLUsingTokenIn: V2SubgraphPool[] = []
+  const topByTVLUsingTokenOut: V2SubgraphPool[] = []
+  const topByTVL: V2SubgraphPool[] = []
+
+  let totalTimeFetchingBlockedTokens = 0
+  // Filtering step for up to first hop
+  // The pools are pre-sorted, so we can just iterate through them and fill our heuristics.
+
+  const topByBaseETHTVLStart = Date.now()
+  let totalDurationFetchingBlockedInTVL = 0
+
+  let foundAllTopByBaseWithTokenIn = false
+  let foundAllTopByBaseWithTokenOut = false
+  let foundTopByEthQuoteTokenPool = false
+  let foundTopByTVL = false
+  let foundTopByTVLUsingTokenIn = false
+  let foundTopByTVLUsingTokenOut = false
+
+  let totalPoolsSeen = 0
+  for (const subgraphPool of subgraphPoolsSorted) {
+    // Check if we have satisfied all the heuristics, if so, we can stop.
+    totalPoolsSeen += 1
+
+    foundAllTopByBaseWithTokenIn = topByBaseWithTokenInPoolsFound >= topNWithBaseToken
+    foundAllTopByBaseWithTokenOut = topByBaseWithTokenOutPoolsFound >= topNWithBaseToken
+    foundTopByEthQuoteTokenPool = topByEthQuoteTokenPool.length >= 2
+    foundTopByTVL = topByTVL.length >= topN
+    foundTopByTVLUsingTokenIn = topByTVLUsingTokenIn.length >= topNTokenInOut
+    foundTopByTVLUsingTokenOut = topByTVLUsingTokenOut.length >= topNTokenInOut
+
+    if (
+      foundAllTopByBaseWithTokenIn &&
+      foundAllTopByBaseWithTokenOut &&
+      foundTopByEthQuoteTokenPool &&
+      foundTopByTVL &&
+      foundTopByTVLUsingTokenIn &&
+      foundTopByTVLUsingTokenOut
+
+      // topByBaseWithTokenInPoolsFound >= topNWithBaseToken &&
+      // topByBaseWithTokenOutPoolsFound >= topNWithBaseToken &&
+      // topByEthQuoteTokenPool.length >= 2 &&
+      // topByTVL.length >= topN &&
+      // topByTVLUsingTokenIn.length >= topNTokenInOut &&
+      // topByTVLUsingTokenOut.length >= topNTokenInOut
+    ) {
+      // We have satisfied all the heuristics, so we can stop.
+      break
+    }
+
+    if (poolAddressesSoFar.has(subgraphPool.id)) {
+      // We've already added this pool, so skip it.
+      continue
+    }
+
+    // Only consider pools where neither tokens are in the blocked token list.
+    if (blockedTokenListProvider) {
+      const beforeBlockedTokens = Date.now()
+      const [token0InBlocklist, token1InBlocklist] = await Promise.all([
+        blockedTokenListProvider.getTokenByAddress(subgraphPool.token0.id),
+        blockedTokenListProvider.getTokenByAddress(subgraphPool.token1.id),
+      ])
+      const afterBlockedTokens = Date.now()
+      totalDurationFetchingBlockedInTVL += afterBlockedTokens - beforeBlockedTokens
+      totalTimeFetchingBlockedTokens += afterBlockedTokens - beforeBlockedTokens
+
+      if (token0InBlocklist || token1InBlocklist) {
+        continue
+      }
+    }
+
+    const tokenInToken0TopByBase = topByBaseWithTokenInMap.get(subgraphPool.token0.id)
+    if (
+      topByBaseWithTokenInPoolsFound < topNWithBaseToken &&
+      tokenInToken0TopByBase &&
+      subgraphPool.token0.id != tokenOutAddress &&
+      subgraphPool.token1.id == tokenInAddress
+    ) {
+      topByBaseWithTokenInPoolsFound += 1
+      poolAddressesSoFar.add(subgraphPool.id)
+      if (topByTVLUsingTokenIn.length < topNTokenInOut) {
+        topByTVLUsingTokenIn.push(subgraphPool)
+      }
+      tokenInToken0TopByBase.pools.push(subgraphPool)
+      continue
+    }
+
+    const tokenInToken1TopByBase = topByBaseWithTokenInMap.get(subgraphPool.token1.id)
+    if (
+      topByBaseWithTokenInPoolsFound < topNWithBaseToken &&
+      tokenInToken1TopByBase &&
+      subgraphPool.token0.id == tokenInAddress &&
+      subgraphPool.token1.id != tokenOutAddress
+    ) {
+      topByBaseWithTokenInPoolsFound += 1
+      poolAddressesSoFar.add(subgraphPool.id)
+      if (topByTVLUsingTokenIn.length < topNTokenInOut) {
+        topByTVLUsingTokenIn.push(subgraphPool)
+      }
+      tokenInToken1TopByBase.pools.push(subgraphPool)
+      continue
+    }
+
+    const tokenOutToken0TopByBase = topByBaseWithTokenOutMap.get(subgraphPool.token0.id)
+    if (
+      topByBaseWithTokenOutPoolsFound < topNWithBaseToken &&
+      tokenOutToken0TopByBase &&
+      subgraphPool.token0.id != tokenInAddress &&
+      subgraphPool.token1.id == tokenOutAddress
+    ) {
+      topByBaseWithTokenOutPoolsFound += 1
+      poolAddressesSoFar.add(subgraphPool.id)
+      if (topByTVLUsingTokenOut.length < topNTokenInOut) {
+        topByTVLUsingTokenOut.push(subgraphPool)
+      }
+      tokenOutToken0TopByBase.pools.push(subgraphPool)
+      continue
+    }
+
+    const tokenOutToken1TopByBase = topByBaseWithTokenOutMap.get(subgraphPool.token1.id)
+    if (
+      topByBaseWithTokenOutPoolsFound < topNWithBaseToken &&
+      tokenOutToken1TopByBase &&
+      subgraphPool.token0.id == tokenOutAddress &&
+      subgraphPool.token1.id != tokenInAddress
+    ) {
+      topByBaseWithTokenOutPoolsFound += 1
+      poolAddressesSoFar.add(subgraphPool.id)
+      if (topByTVLUsingTokenOut.length < topNTokenInOut) {
+        topByTVLUsingTokenOut.push(subgraphPool)
+      }
+      tokenOutToken1TopByBase.pools.push(subgraphPool)
+      continue
+    }
+
+    // Main reason we need this is for gas estimates, only needed if token out is not ETH.
+    // We don't check the seen address set because if we've already added pools for getting ETH quotes
+    // there's no need to add more.
+    // Note: we do not need to check other native currencies for the V2 Protocol
+    if (
+      topByEthQuoteTokenPool.length < 2 &&
+      tokenOut.symbol != 'WETH' &&
+      tokenOut.symbol != 'WETH9' &&
+      tokenOut.symbol != 'ETH' &&
+      ((routeType === TradeType.EXACT_INPUT &&
+        ((subgraphPool.token0.id == wethAddress && subgraphPool.token1.id == tokenOutAddress) ||
+          (subgraphPool.token1.id == wethAddress && subgraphPool.token0.id == tokenOutAddress))) ||
+        (routeType === TradeType.EXACT_OUTPUT &&
+          ((subgraphPool.token0.id == wethAddress && subgraphPool.token1.id == tokenInAddress) ||
+            (subgraphPool.token1.id == wethAddress && subgraphPool.token0.id == tokenInAddress))))
+    ) {
+      poolAddressesSoFar.add(subgraphPool.id)
+      topByEthQuoteTokenPool.push(subgraphPool)
+      continue
+    }
+
+    if (topByTVL.length < topN) {
+      poolAddressesSoFar.add(subgraphPool.id)
+      topByTVL.push(subgraphPool)
+      continue
+    }
+
+    if (
+      topByTVLUsingTokenIn.length < topNTokenInOut &&
+      (subgraphPool.token0.id == tokenInAddress || subgraphPool.token1.id == tokenInAddress)
+    ) {
+      poolAddressesSoFar.add(subgraphPool.id)
+      topByTVLUsingTokenIn.push(subgraphPool)
+      continue
+    }
+
+    if (
+      topByTVLUsingTokenOut.length < topNTokenInOut &&
+      (subgraphPool.token0.id == tokenOutAddress || subgraphPool.token1.id == tokenOutAddress)
+    ) {
+      poolAddressesSoFar.add(subgraphPool.id)
+      topByTVLUsingTokenOut.push(subgraphPool)
+      continue
+    }
+  }
+
+  const topByBaseEThTVLEnd = Date.now()
+
+  const topByBaseTokenInOutStart = Date.now()
+  const topByBaseWithTokenIn: V2SubgraphPool[] = []
+  for (const topByBaseWithTokenInSelection of topByBaseWithTokenInMap.values()) {
+    topByBaseWithTokenIn.push(...topByBaseWithTokenInSelection.pools)
+  }
+
+  const topByBaseWithTokenOut: V2SubgraphPool[] = []
+  for (const topByBaseWithTokenOutSelection of topByBaseWithTokenOutMap.values()) {
+    topByBaseWithTokenOut.push(...topByBaseWithTokenOutSelection.pools)
+  }
+
+  const topByBaseTokenInOutEnd = Date.now()
+
+  // Filtering step for second hops
+
+  const secondHopTotalStart = Date.now()
+
+  const topByTVLUsingTokenInSecondHopsMap: Map<string, SubcategorySelectionPools<V2SubgraphPool>> = new Map()
+  const topByTVLUsingTokenOutSecondHopsMap: Map<string, SubcategorySelectionPools<V2SubgraphPool>> = new Map()
+  const tokenInSecondHopAddresses = topByTVLUsingTokenIn.map((pool) =>
+    tokenInAddress == pool.token0.id ? pool.token1.id : pool.token0.id
+  )
+  const tokenOutSecondHopAddresses = topByTVLUsingTokenOut.map((pool) =>
+    tokenOutAddress == pool.token0.id ? pool.token1.id : pool.token0.id
+  )
+
+  for (const secondHopId of tokenInSecondHopAddresses) {
+    topByTVLUsingTokenInSecondHopsMap.set(secondHopId, new SubcategorySelectionPools<V2SubgraphPool>([], topNSecondHop))
+  }
+  for (const secondHopId of tokenOutSecondHopAddresses) {
+    topByTVLUsingTokenOutSecondHopsMap.set(
+      secondHopId,
+      new SubcategorySelectionPools<V2SubgraphPool>([], topNSecondHop)
+    )
+  }
+
+  for (const subgraphPool of subgraphPoolsSorted) {
+    let allTokenInSecondHopsHaveTheirTopN = true
+    for (const secondHopPools of topByTVLUsingTokenInSecondHopsMap.values()) {
+      if (!secondHopPools.hasEnoughPools()) {
+        allTokenInSecondHopsHaveTheirTopN = false
+        break
+      }
+    }
+
+    let allTokenOutSecondHopsHaveTheirTopN = true
+    for (const secondHopPools of topByTVLUsingTokenOutSecondHopsMap.values()) {
+      if (!secondHopPools.hasEnoughPools()) {
+        allTokenOutSecondHopsHaveTheirTopN = false
+        break
+      }
+    }
+
+    if (allTokenInSecondHopsHaveTheirTopN && allTokenOutSecondHopsHaveTheirTopN) {
+      // We have satisfied all the heuristics, so we can stop.
+      break
+    }
+
+    if (poolAddressesSoFar.has(subgraphPool.id)) {
+      continue
+    }
+
+    // Only consider pools where neither tokens are in the blocked token list.
+    if (blockedTokenListProvider) {
+      const beforeBlockedTokens = Date.now()
+      const [token0InBlocklist, token1InBlocklist] = await Promise.all([
+        blockedTokenListProvider.getTokenByAddress(subgraphPool.token0.id),
+        blockedTokenListProvider.getTokenByAddress(subgraphPool.token1.id),
+      ])
+      const afterBlockedTokens = Date.now()
+      totalTimeFetchingBlockedTokens += afterBlockedTokens - beforeBlockedTokens
+
+      if (token0InBlocklist || token1InBlocklist) {
+        continue
+      }
+    }
+
+    const tokenInToken0SecondHop = topByTVLUsingTokenInSecondHopsMap.get(subgraphPool.token0.id)
+
+    if (tokenInToken0SecondHop && !tokenInToken0SecondHop.hasEnoughPools()) {
+      poolAddressesSoFar.add(subgraphPool.id)
+      tokenInToken0SecondHop.pools.push(subgraphPool)
+      continue
+    }
+
+    const tokenInToken1SecondHop = topByTVLUsingTokenInSecondHopsMap.get(subgraphPool.token1.id)
+
+    if (tokenInToken1SecondHop && !tokenInToken1SecondHop.hasEnoughPools()) {
+      poolAddressesSoFar.add(subgraphPool.id)
+      tokenInToken1SecondHop.pools.push(subgraphPool)
+      continue
+    }
+
+    const tokenOutToken0SecondHop = topByTVLUsingTokenOutSecondHopsMap.get(subgraphPool.token0.id)
+
+    if (tokenOutToken0SecondHop && !tokenOutToken0SecondHop.hasEnoughPools()) {
+      poolAddressesSoFar.add(subgraphPool.id)
+      tokenOutToken0SecondHop.pools.push(subgraphPool)
+      continue
+    }
+
+    const tokenOutToken1SecondHop = topByTVLUsingTokenOutSecondHopsMap.get(subgraphPool.token1.id)
+
+    if (tokenOutToken1SecondHop && !tokenOutToken1SecondHop.hasEnoughPools()) {
+      poolAddressesSoFar.add(subgraphPool.id)
+      tokenOutToken1SecondHop.pools.push(subgraphPool)
+      continue
+    }
+  }
+
+  const topByTVLUsingTokenInSecondHops: V2SubgraphPool[] = []
+  for (const secondHopPools of topByTVLUsingTokenInSecondHopsMap.values()) {
+    topByTVLUsingTokenInSecondHops.push(...secondHopPools.pools)
+  }
+
+  const topByTVLUsingTokenOutSecondHops: V2SubgraphPool[] = []
+  for (const secondHopPools of topByTVLUsingTokenOutSecondHopsMap.values()) {
+    topByTVLUsingTokenOutSecondHops.push(...secondHopPools.pools)
+  }
+
+  const secondHopTotalEnd = Date.now()
+
+  const metadataBuildTime = Date.now()
+  const buildSubgraphPoolsStart = Date.now()
+  const subgraphPools = _([
+    ...topByBaseWithTokenIn,
+    ...topByBaseWithTokenOut,
+    ...topByDirectSwapPool,
+    ...topByEthQuoteTokenPool,
+    ...topByTVL,
+    ...topByTVLUsingTokenIn,
+    ...topByTVLUsingTokenOut,
+    ...topByTVLUsingTokenInSecondHops,
+    ...topByTVLUsingTokenOutSecondHops,
+  ])
+    .uniqBy((pool) => pool.id)
+    .value()
+
+  const buildSubgraphPoolsEnd = Date.now()
+
+  const buildTokenAddressesStart = Date.now()
+
+  const tokenAddressesSet: Set<string> = new Set()
+  for (const pool of subgraphPools) {
+    tokenAddressesSet.add(pool.token0.id)
+    tokenAddressesSet.add(pool.token1.id)
+  }
+  const tokenAddresses = Array.from(tokenAddressesSet)
+  const buildTokenAddressesEnd = Date.now()
+  const metadataBuildTimeEnd = Date.now()
+
+  log.info(`Getting the ${tokenAddresses.length} tokens within the ${subgraphPools.length} V2 pools we are considering`)
+
+  const tokenAccessorTimeStart = Date.now()
+  const tokenAccessor = await tokenProvider.getTokens(tokenAddresses, {
+    blockNumber,
+  })
+  const tokenAccessorEnd = Date.now()
+
+  const printV2SubgraphPool = (s: V2SubgraphPool) =>
+    `${tokenAccessor.getTokenByAddress(s.token0.id)?.symbol ?? s.token0.id}/${
+      tokenAccessor.getTokenByAddress(s.token1.id)?.symbol ?? s.token1.id
+    }`
+
+  log.info(
+    {
+      topByBaseWithTokenIn: topByBaseWithTokenIn.map(printV2SubgraphPool),
+      topByBaseWithTokenOut: topByBaseWithTokenOut.map(printV2SubgraphPool),
+      topByTVL: topByTVL.map(printV2SubgraphPool),
+      topByTVLUsingTokenIn: topByTVLUsingTokenIn.map(printV2SubgraphPool),
+      topByTVLUsingTokenOut: topByTVLUsingTokenOut.map(printV2SubgraphPool),
+      topByTVLUsingTokenInSecondHops: topByTVLUsingTokenInSecondHops.map(printV2SubgraphPool),
+      topByTVLUsingTokenOutSecondHops: topByTVLUsingTokenOutSecondHops.map(printV2SubgraphPool),
+      top2DirectSwap: topByDirectSwapPool.map(printV2SubgraphPool),
+      top2EthQuotePool: topByEthQuoteTokenPool.map(printV2SubgraphPool),
+    },
+    `V2 Candidate pools`
+  )
+
+  const tokenPairsRaw = _.map<V2SubgraphPool, [Token, Token] | undefined>(subgraphPools, (subgraphPool) => {
+    const tokenA = tokenAccessor.getTokenByAddress(subgraphPool.token0.id)
+    const tokenB = tokenAccessor.getTokenByAddress(subgraphPool.token1.id)
+
+    if (!tokenA || !tokenB) {
+      log.info(`Dropping candidate pool for ${subgraphPool.token0.id}/${subgraphPool.token1.id}`)
+      return undefined
+    }
+
+    return [tokenA, tokenB]
+  })
+
+  const tokenPairs = _.compact(tokenPairsRaw)
+
+  metric.putMetric('V2PoolsFilterLoad', Date.now() - beforePoolsFiltered, MetricLoggerUnit.Milliseconds)
+
+  const beforePoolsLoad = Date.now()
+
+  const getPoolsStart = Date.now()
+  const poolAccessor = await poolProvider.getPools(tokenPairs, { blockNumber, debugRouting })
+  const getPoolsEnd = Date.now()
+
+  metric.putMetric('V2PoolsLoad', Date.now() - beforePoolsLoad, MetricLoggerUnit.Milliseconds)
+
+  const poolsBySelection: CandidatePoolsBySelectionCriteria = {
+    protocol: Protocol.V2,
+    selections: {
+      topByBaseWithTokenIn,
+      topByBaseWithTokenOut,
+      topByDirectSwapPool,
+      topByEthQuoteTokenPool,
+      topByTVL,
+      topByTVLUsingTokenIn,
+      topByTVLUsingTokenOut,
+      topByTVLUsingTokenInSecondHops,
+      topByTVLUsingTokenOutSecondHops,
+    },
+  }
+
+  const getV2CandidatePoolsEnd = Date.now()
+
+  CONTEXT['V2 GetCandidatePools'] = {
+    duration: {
+      blockedTokensTotalFetchTime: totalTimeFetchingBlockedTokens,
+      subgraphProviderGetPoolsDuration: subgraphProviderGetPoolsEnd - subgraphProviderGetPoolsStart,
+
+      topNDirectSwapsFetchDuration: topNDirectSwapsEnd - topNDirectSwapsStart,
+      allPoolsMapDuration: allPoolsMapEnd - allPoolsMapStart,
+      subgraphPoolsSortDuration: subgraphPoolsSortEnd - subgraphPoolsSortStart,
+      topByBaseTokenInOutDuration: topByBaseTokenInOutEnd - topByBaseTokenInOutStart,
+      secondHopTotalDuration: secondHopTotalEnd - secondHopTotalStart,
+
+      topByBaseETHTVLStartDuration: topByBaseEThTVLEnd - topByBaseETHTVLStart,
+      totalDurationFetchingBlockedInTVL: totalDurationFetchingBlockedInTVL,
+
+      tvlLoopTotalPoolsSeen: totalPoolsSeen,
+      tvlLoopPotentialPoolsToLookAt: subgraphPoolsSorted.length,
+
+      tokenAccessorDuration: tokenAccessorEnd - tokenAccessorTimeStart,
+      getPoolsDuration: getPoolsEnd - getPoolsStart,
+
+      metadataBuildTimeDuration: metadataBuildTimeEnd - metadataBuildTime,
+      buildSubgraphPoolsDuration: buildSubgraphPoolsEnd - buildSubgraphPoolsStart,
+      buildTokenAddressesDuration: buildTokenAddressesEnd - buildTokenAddressesStart,
+
+      totalDuration: getV2CandidatePoolsEnd - getV2CandidatePoolsStart,
+    },
+    dataSize: {
+      tokenAddresses: tokenAddresses.length,
+      allPoolsRaw: allPoolsRaw.length,
+      tokenPairs: tokenPairs.length,
+    },
+
+    whatDidIFind: {
+      foundAllTopByBaseWithTokenIn,
+      foundAllTopByBaseWithTokenOut,
+      foundTopByEthQuoteTokenPool,
+      foundTopByTVL,
+      foundTopByTVLUsingTokenIn,
+      foundTopByTVLUsingTokenOut,
+    },
+    whatDidIFindNumbers: {
+      topByBaseWithTokenInPoolsFound,
+      topByBaseWithTokenOutPoolsFound,
+      topByTVLFound: topByTVL.length,
+      topByTVLUsingTokenInFound: topByTVLUsingTokenIn.length,
+      topByTVLUsingTokenOutFound: topByTVLUsingTokenOut.length,
+    },
+  }
+  return { poolAccessor, candidatePools: poolsBySelection, subgraphPools }
+}
+
+export type MixedCandidatePools = {
+  V2poolAccessor: V2PoolAccessor
+  V3poolAccessor: V3PoolAccessor
+  candidatePools: CandidatePoolsBySelectionCriteria
+  subgraphPools: (V2SubgraphPool | V3SubgraphPool)[]
+}
+
+export async function getMixedRouteCandidatePools({
+  v3CandidatePools,
+  v2CandidatePools,
+  routingConfig,
+  tokenProvider,
+  v3poolProvider,
+  v2poolProvider,
+}: MixedRouteGetCandidatePoolsParams): Promise<MixedCandidatePools> {
+  const beforeSubgraphPools = Date.now()
+  const { blockNumber, debugRouting } = routingConfig
+  const [
+    { subgraphPools: V3subgraphPools, candidatePools: V3candidatePools },
+    { subgraphPools: V2subgraphPools, candidatePools: V2candidatePools },
+  ] = [v3CandidatePools, v2CandidatePools]
+
+  metric.putMetric('MixedSubgraphPoolsLoad', Date.now() - beforeSubgraphPools, MetricLoggerUnit.Milliseconds)
+  const beforePoolsFiltered = Date.now()
+
+  /**
+   * Main heuristic for pruning mixedRoutes:
+   * - we pick V2 pools with higher liq than respective V3 pools, or if the v3 pool doesn't exist
+   *
+   * This way we can reduce calls to our provider since it's possible to generate a lot of mixed routes
+   */
+  /// We only really care about pools involving the tokenIn or tokenOut explictly,
+  /// since there's no way a long tail token in V2 would be routed through as an intermediary
+  const V2topByTVLPoolIds = new Set(
+    [
+      ...V2candidatePools.selections.topByTVLUsingTokenIn,
+      ...V2candidatePools.selections.topByBaseWithTokenIn,
+      /// tokenOut:
+      ...V2candidatePools.selections.topByTVLUsingTokenOut,
+      ...V2candidatePools.selections.topByBaseWithTokenOut,
+      /// Direct swap:
+      ...V2candidatePools.selections.topByDirectSwapPool,
+    ].map((poolId) => poolId.id)
+  )
+
+  const V2topByTVLSortedPools = _(V2subgraphPools)
+    .filter((pool) => V2topByTVLPoolIds.has(pool.id))
+    .sortBy((pool) => -pool.reserveUSD)
+    .value()
+
+  /// we consider all returned V3 pools for this heuristic to "fill in the gaps"
+  const V3sortedPools = _(V3subgraphPools)
+    .sortBy((pool) => -pool.tvlUSD)
+    .value()
+
+  /// Finding pools with greater reserveUSD on v2 than tvlUSD on v3, or if there is no v3 liquidity
+  const buildV2Pools: V2SubgraphPool[] = []
+  V2topByTVLSortedPools.forEach((V2subgraphPool) => {
+    const V3subgraphPool = V3sortedPools.find(
+      (pool) =>
+        (pool.token0.id == V2subgraphPool.token0.id && pool.token1.id == V2subgraphPool.token1.id) ||
+        (pool.token0.id == V2subgraphPool.token1.id && pool.token1.id == V2subgraphPool.token0.id)
+    )
+
+    if (V3subgraphPool) {
+      if (V2subgraphPool.reserveUSD > V3subgraphPool.tvlUSD) {
+        log.info(
+          {
+            token0: V2subgraphPool.token0.id,
+            token1: V2subgraphPool.token1.id,
+            v2reserveUSD: V2subgraphPool.reserveUSD,
+            v3tvlUSD: V3subgraphPool.tvlUSD,
+          },
+          `MixedRoute heuristic, found a V2 pool with higher liquidity than its V3 counterpart`
+        )
+        buildV2Pools.push(V2subgraphPool)
+      }
+    } else {
+      log.info(
+        {
+          token0: V2subgraphPool.token0.id,
+          token1: V2subgraphPool.token1.id,
+          v2reserveUSD: V2subgraphPool.reserveUSD,
+        },
+        `MixedRoute heuristic, found a V2 pool with no V3 counterpart`
+      )
+      buildV2Pools.push(V2subgraphPool)
+    }
+  })
+
+  log.info(buildV2Pools.length, `Number of V2 candidate pools that fit first heuristic`)
+
+  const subgraphPools = [...buildV2Pools, ...V3sortedPools]
+
+  const tokenAddresses = _(subgraphPools)
+    .flatMap((subgraphPool) => [subgraphPool.token0.id, subgraphPool.token1.id])
+    .compact()
+    .uniq()
+    .value()
+
+  log.info(`Getting the ${tokenAddresses.length} tokens within the ${subgraphPools.length} pools we are considering`)
+
+  const tokenAccessor = await tokenProvider.getTokens(tokenAddresses, {
+    blockNumber,
+  })
+
+  const V3tokenPairsRaw = _.map<V3SubgraphPool, [Token, Token, FeeAmount] | undefined>(
+    V3sortedPools,
+    (subgraphPool) => {
+      const tokenA = tokenAccessor.getTokenByAddress(subgraphPool.token0.id)
+      const tokenB = tokenAccessor.getTokenByAddress(subgraphPool.token1.id)
+      let fee: FeeAmount
+      try {
+        fee = parseFeeAmount(subgraphPool.feeTier)
+      } catch (err) {
+        log.info(
+          { subgraphPool },
+          `Dropping candidate pool for ${subgraphPool.token0.id}/${subgraphPool.token1.id}/${subgraphPool.feeTier} because fee tier not supported`
+        )
+        return undefined
+      }
+
+      if (!tokenA || !tokenB) {
+        log.info(
+          `Dropping candidate pool for ${subgraphPool.token0.id}/${subgraphPool.token1.id}/${fee} because ${
+            tokenA ? subgraphPool.token1.id : subgraphPool.token0.id
+          } not found by token provider`
+        )
+        return undefined
+      }
+
+      return [tokenA, tokenB, fee]
+    }
+  )
+
+  const V3tokenPairs = _.compact(V3tokenPairsRaw)
+
+  const V2tokenPairsRaw = _.map<V2SubgraphPool, [Token, Token] | undefined>(buildV2Pools, (subgraphPool) => {
+    const tokenA = tokenAccessor.getTokenByAddress(subgraphPool.token0.id)
+    const tokenB = tokenAccessor.getTokenByAddress(subgraphPool.token1.id)
+
+    if (!tokenA || !tokenB) {
+      log.info(`Dropping candidate pool for ${subgraphPool.token0.id}/${subgraphPool.token1.id}`)
+      return undefined
+    }
+
+    return [tokenA, tokenB]
+  })
+
+  const V2tokenPairs = _.compact(V2tokenPairsRaw)
+
+  metric.putMetric('MixedPoolsFilterLoad', Date.now() - beforePoolsFiltered, MetricLoggerUnit.Milliseconds)
+
+  const beforePoolsLoad = Date.now()
+
+  const [V2poolAccessor, V3poolAccessor] = await Promise.all([
+    v2poolProvider.getPools(V2tokenPairs, {
+      blockNumber,
+      debugRouting,
+    }),
+    v3poolProvider.getPools(V3tokenPairs, {
+      blockNumber,
+      debugRouting,
+    }),
+  ])
+
+  metric.putMetric('MixedPoolsLoad', Date.now() - beforePoolsLoad, MetricLoggerUnit.Milliseconds)
+
+  /// @dev a bit tricky here since the original V2CandidateSelections object included pools that we may have dropped
+  /// as part of the heuristic. We need to reconstruct a new object with the v3 pools too.
+  const buildPoolsBySelection = (key: keyof CandidatePoolsSelections) => {
+    return [
+      ...buildV2Pools.filter((pool) => V2candidatePools.selections[key].map((p) => p.id).includes(pool.id)),
+      ...V3candidatePools.selections[key],
+    ]
+  }
+
+  const poolsBySelection: CandidatePoolsBySelectionCriteria = {
+    protocol: Protocol.MIXED,
+    selections: {
+      topByBaseWithTokenIn: buildPoolsBySelection('topByBaseWithTokenIn'),
+      topByBaseWithTokenOut: buildPoolsBySelection('topByBaseWithTokenOut'),
+      topByDirectSwapPool: buildPoolsBySelection('topByDirectSwapPool'),
+      topByEthQuoteTokenPool: buildPoolsBySelection('topByEthQuoteTokenPool'),
+      topByTVL: buildPoolsBySelection('topByTVL'),
+      topByTVLUsingTokenIn: buildPoolsBySelection('topByTVLUsingTokenIn'),
+      topByTVLUsingTokenOut: buildPoolsBySelection('topByTVLUsingTokenOut'),
+      topByTVLUsingTokenInSecondHops: buildPoolsBySelection('topByTVLUsingTokenInSecondHops'),
+      topByTVLUsingTokenOutSecondHops: buildPoolsBySelection('topByTVLUsingTokenOutSecondHops'),
+    },
+  }
+
+  return {
+    V2poolAccessor,
+    V3poolAccessor,
+    candidatePools: poolsBySelection,
+    subgraphPools,
+  }
+}
diff --git a/lib/sor/routers/alpha-router/gas-models/gas-model.ts b/lib/sor/routers/alpha-router/gas-models/gas-model.ts
new file mode 100644
index 0000000..cbdf3f3
--- /dev/null
+++ b/lib/sor/routers/alpha-router/gas-models/gas-model.ts
@@ -0,0 +1,168 @@
+import { BigNumber } from '@ethersproject/bignumber'
+import { ChainId, Token } from '@uniswap/sdk-core'
+import { Pool } from '@uniswap/v3-sdk'
+
+import { ProviderConfig } from '../../../providers/provider'
+import {
+  CUSD_CELO,
+  CUSD_CELO_ALFAJORES,
+  DAI_ARBITRUM,
+  DAI_AVAX,
+  DAI_BNB,
+  DAI_GOERLI,
+  DAI_MAINNET,
+  DAI_OPTIMISM,
+  DAI_OPTIMISM_GOERLI,
+  DAI_POLYGON_MUMBAI,
+  DAI_SEPOLIA,
+  USDC_ARBITRUM,
+  USDC_ARBITRUM_GOERLI,
+  USDC_AVAX,
+  USDC_BASE,
+  USDC_BNB,
+  USDC_ETHEREUM_GNOSIS,
+  USDC_GOERLI,
+  USDC_MAINNET,
+  USDC_MOONBEAM,
+  USDC_OPTIMISM,
+  USDC_OPTIMISM_GOERLI,
+  USDC_POLYGON,
+  USDC_SEPOLIA,
+  USDT_ARBITRUM,
+  USDT_BNB,
+  USDT_GOERLI,
+  USDT_MAINNET,
+  USDT_OPTIMISM,
+  USDT_OPTIMISM_GOERLI,
+  WBTC_GOERLI,
+} from '../../../providers/token-provider'
+import { IV2PoolProvider } from '../../../providers/v2/pool-provider'
+import { ArbitrumGasData, IL2GasDataProvider, OptimismGasData } from '../../../providers/v3/gas-data-provider'
+import { CurrencyAmount } from '../../../util/amounts'
+import {
+  MixedRouteWithValidQuote,
+  RouteWithValidQuote,
+  V2RouteWithValidQuote,
+  V3RouteWithValidQuote,
+} from '../entities/route-with-valid-quote'
+
+// When adding new usd gas tokens, ensure the tokens are ordered
+// from tokens with highest decimals to lowest decimals. For example,
+// DAI_AVAX has 18 decimals and comes before USDC_AVAX which has 6 decimals.
+export const usdGasTokensByChain: { [chainId in ChainId]?: Token[] } = {
+  [ChainId.MAINNET]: [DAI_MAINNET, USDC_MAINNET, USDT_MAINNET],
+  [ChainId.ARBITRUM_ONE]: [DAI_ARBITRUM, USDC_ARBITRUM, USDT_ARBITRUM],
+  [ChainId.OPTIMISM]: [DAI_OPTIMISM, USDC_OPTIMISM, USDT_OPTIMISM],
+  [ChainId.OPTIMISM_GOERLI]: [DAI_OPTIMISM_GOERLI, USDC_OPTIMISM_GOERLI, USDT_OPTIMISM_GOERLI],
+  [ChainId.ARBITRUM_GOERLI]: [USDC_ARBITRUM_GOERLI],
+  [ChainId.GOERLI]: [DAI_GOERLI, USDC_GOERLI, USDT_GOERLI, WBTC_GOERLI],
+  [ChainId.SEPOLIA]: [USDC_SEPOLIA, DAI_SEPOLIA],
+  [ChainId.POLYGON]: [USDC_POLYGON],
+  [ChainId.POLYGON_MUMBAI]: [DAI_POLYGON_MUMBAI],
+  [ChainId.CELO]: [CUSD_CELO],
+  [ChainId.CELO_ALFAJORES]: [CUSD_CELO_ALFAJORES],
+  [ChainId.GNOSIS]: [USDC_ETHEREUM_GNOSIS],
+  [ChainId.MOONBEAM]: [USDC_MOONBEAM],
+  [ChainId.BNB]: [USDT_BNB, USDC_BNB, DAI_BNB],
+  [ChainId.AVALANCHE]: [DAI_AVAX, USDC_AVAX],
+  [ChainId.BASE]: [USDC_BASE],
+}
+
+export type L1ToL2GasCosts = {
+  gasUsedL1: BigNumber
+  gasCostL1USD: CurrencyAmount
+  gasCostL1QuoteToken: CurrencyAmount
+}
+
+export type BuildOnChainGasModelFactoryType = {
+  chainId: ChainId
+  gasPriceWei: BigNumber
+  pools: LiquidityCalculationPools
+  amountToken: Token
+  quoteToken: Token
+  v2poolProvider: IV2PoolProvider
+  l2GasDataProvider?: IL2GasDataProvider<OptimismGasData> | IL2GasDataProvider<ArbitrumGasData>
+  providerConfig?: ProviderConfig
+}
+
+export type BuildV2GasModelFactoryType = {
+  chainId: ChainId
+  gasPriceWei: BigNumber
+  poolProvider: IV2PoolProvider
+  token: Token
+  providerConfig?: ProviderConfig
+}
+
+export type LiquidityCalculationPools = {
+  usdPool: Pool
+  nativeQuoteTokenV3Pool: Pool | null
+  nativeAmountTokenV3Pool: Pool | null
+}
+
+/**
+ * Contains functions for generating gas estimates for given routes.
+ *
+ * We generally compute gas estimates off-chain because
+ *  1/ Calling eth_estimateGas for a swaps requires the caller to have
+ *     the full balance token being swapped, and approvals.
+ *  2/ Tracking gas used using a wrapper contract is not accurate with Multicall
+ *     due to EIP-2929
+ *  3/ For V2 we simulate all our swaps off-chain so have no way to track gas used.
+ *
+ * Generally these models should be optimized to return quickly by performing any
+ * long running operations (like fetching external data) outside of the functions defined.
+ * This is because the functions in the model are called once for every route and every
+ * amount that is considered in the algorithm so it is important to minimize the number of
+ * long running operations.
+ */
+export type IGasModel<TRouteWithValidQuote extends RouteWithValidQuote> = {
+  estimateGasCost(routeWithValidQuote: TRouteWithValidQuote): {
+    gasEstimate: BigNumber
+    gasCostInToken: CurrencyAmount
+    gasCostInUSD: CurrencyAmount
+  }
+  calculateL1GasFees?(routes: TRouteWithValidQuote[]): Promise<L1ToL2GasCosts>
+}
+
+/**
+ * Factory for building gas models that can be used with any route to generate
+ * gas estimates.
+ *
+ * Factory model is used so that any supporting data can be fetched once and
+ * returned as part of the model.
+ *
+ * @export
+ * @abstract
+ * @class IV2GasModelFactory
+ */
+export abstract class IV2GasModelFactory {
+  public abstract buildGasModel({
+    chainId,
+    gasPriceWei,
+    poolProvider,
+    token,
+  }: BuildV2GasModelFactoryType): Promise<IGasModel<V2RouteWithValidQuote>>
+}
+
+/**
+ * Factory for building gas models that can be used with any route to generate
+ * gas estimates.
+ *
+ * Factory model is used so that any supporting data can be fetched once and
+ * returned as part of the model.
+ *
+ * @export
+ * @abstract
+ * @class IOnChainGasModelFactory
+ */
+export abstract class IOnChainGasModelFactory {
+  public abstract buildGasModel({
+    chainId,
+    gasPriceWei,
+    pools,
+    amountToken,
+    quoteToken,
+    v2poolProvider,
+    l2GasDataProvider,
+  }: BuildOnChainGasModelFactoryType): Promise<IGasModel<V3RouteWithValidQuote | MixedRouteWithValidQuote>>
+}
diff --git a/lib/sor/routers/alpha-router/gas-models/index.ts b/lib/sor/routers/alpha-router/gas-models/index.ts
new file mode 100644
index 0000000..f9462ce
--- /dev/null
+++ b/lib/sor/routers/alpha-router/gas-models/index.ts
@@ -0,0 +1,2 @@
+export * from './gas-model';
+export * from './v3/v3-heuristic-gas-model';
diff --git a/lib/sor/routers/alpha-router/gas-models/mixedRoute/mixed-route-heuristic-gas-model.ts b/lib/sor/routers/alpha-router/gas-models/mixedRoute/mixed-route-heuristic-gas-model.ts
new file mode 100644
index 0000000..150e75f
--- /dev/null
+++ b/lib/sor/routers/alpha-router/gas-models/mixedRoute/mixed-route-heuristic-gas-model.ts
@@ -0,0 +1,269 @@
+import { BigNumber } from '@ethersproject/bignumber';
+import { partitionMixedRouteByProtocol } from '@uniswap/router-sdk';
+import { ChainId } from '@uniswap/sdk-core';
+import { Pair } from '@uniswap/v2-sdk';
+import { Pool } from '@uniswap/v3-sdk';
+import JSBI from 'jsbi';
+import _ from 'lodash';
+
+import { WRAPPED_NATIVE_CURRENCY } from '../../../..';
+import { log } from '../../../../util';
+import { CurrencyAmount } from '../../../../util/amounts';
+import {
+  getV2NativePool,
+} from '../../../../util/gas-factory-helpers';
+import { MixedRouteWithValidQuote } from '../../entities/route-with-valid-quote';
+import {
+  BuildOnChainGasModelFactoryType,
+  IGasModel,
+  IOnChainGasModelFactory,
+} from '../gas-model';
+import {
+  BASE_SWAP_COST as BASE_SWAP_COST_V2,
+  COST_PER_EXTRA_HOP as COST_PER_EXTRA_HOP_V2,
+} from '../v2/v2-heuristic-gas-model';
+import {
+  BASE_SWAP_COST,
+  COST_PER_HOP,
+  COST_PER_INIT_TICK,
+  COST_PER_UNINIT_TICK,
+} from '../v3/gas-costs';
+
+/**
+ * Computes a gas estimate for a mixed route swap using heuristics.
+ * Considers number of hops in the route, number of ticks crossed
+ * and the typical base cost for a swap.
+ *
+ * We get the number of ticks crossed in a swap from the MixedRouteQuoterV1
+ * contract.
+ *
+ * We compute gas estimates off-chain because
+ *  1/ Calling eth_estimateGas for a swaps requires the caller to have
+ *     the full balance token being swapped, and approvals.
+ *  2/ Tracking gas used using a wrapper contract is not accurate with Multicall
+ *     due to EIP-2929. We would have to make a request for every swap we wanted to estimate.
+ *  3/ For V2 we simulate all our swaps off-chain so have no way to track gas used.
+ *
+ * @export
+ * @class MixedRouteHeuristicGasModelFactory
+ */
+export class MixedRouteHeuristicGasModelFactory extends IOnChainGasModelFactory {
+  constructor() {
+    super();
+  }
+
+  public async buildGasModel({
+    chainId,
+    gasPriceWei,
+    pools,
+    quoteToken,
+    v2poolProvider: V2poolProvider,
+    providerConfig: providerConfig,
+  }: BuildOnChainGasModelFactoryType): Promise<
+    IGasModel<MixedRouteWithValidQuote>
+  > {
+    const usdPool: Pool = pools.usdPool
+
+    // If our quote token is WETH, we don't need to convert our gas use to be in terms
+    // of the quote token in order to produce a gas adjusted amount.
+    // We do return a gas use in USD however, so we still convert to usd.
+    const nativeCurrency = WRAPPED_NATIVE_CURRENCY[chainId]!;
+    if (quoteToken.equals(nativeCurrency)) {
+      const estimateGasCost = (
+        routeWithValidQuote: MixedRouteWithValidQuote
+      ): {
+        gasEstimate: BigNumber;
+        gasCostInToken: CurrencyAmount;
+        gasCostInUSD: CurrencyAmount;
+      } => {
+        const { totalGasCostNativeCurrency, baseGasUse } = this.estimateGas(
+          routeWithValidQuote,
+          gasPriceWei,
+          chainId
+        );
+
+        const token0 = usdPool.token0.address == nativeCurrency.address;
+
+        const nativeTokenPrice = token0
+          ? usdPool.token0Price
+          : usdPool.token1Price;
+
+        const gasCostInTermsOfUSD: CurrencyAmount = nativeTokenPrice.quote(
+          totalGasCostNativeCurrency
+        ) as CurrencyAmount;
+
+        return {
+          gasEstimate: baseGasUse,
+          gasCostInToken: totalGasCostNativeCurrency,
+          gasCostInUSD: gasCostInTermsOfUSD,
+        };
+      };
+
+      return {
+        estimateGasCost,
+      };
+    }
+
+    // If the quote token is not in the native currency, we convert the gas cost to be in terms of the quote token.
+    // We do this by getting the highest liquidity <quoteToken>/<nativeCurrency> pool. eg. <quoteToken>/ETH pool.
+    const nativeV3Pool: Pool | null = pools.nativeQuoteTokenV3Pool
+
+    let nativeV2Pool: Pair | null;
+    if (V2poolProvider) {
+      /// MixedRoutes
+      nativeV2Pool = await getV2NativePool(quoteToken, V2poolProvider, providerConfig);
+    }
+
+    const usdToken =
+      usdPool.token0.address == nativeCurrency.address
+        ? usdPool.token1
+        : usdPool.token0;
+
+    const estimateGasCost = (
+      routeWithValidQuote: MixedRouteWithValidQuote
+    ): {
+      gasEstimate: BigNumber;
+      gasCostInToken: CurrencyAmount;
+      gasCostInUSD: CurrencyAmount;
+    } => {
+      const { totalGasCostNativeCurrency, baseGasUse } = this.estimateGas(
+        routeWithValidQuote,
+        gasPriceWei,
+        chainId
+      );
+
+      if (!nativeV3Pool && !nativeV2Pool) {
+        log.info(
+          `Unable to find ${nativeCurrency.symbol} pool with the quote token, ${quoteToken.symbol} to produce gas adjusted costs. Route will not account for gas.`
+        );
+        return {
+          gasEstimate: baseGasUse,
+          gasCostInToken: CurrencyAmount.fromRawAmount(quoteToken, 0),
+          gasCostInUSD: CurrencyAmount.fromRawAmount(usdToken, 0),
+        };
+      }
+
+      /// we will use nativeV2Pool for fallback if nativeV3 does not exist or has 0 liquidity
+      /// can use ! here because we return above if v3Pool and v2Pool are null
+      const nativePool =
+        (!nativeV3Pool || JSBI.equal(nativeV3Pool.liquidity, JSBI.BigInt(0))) &&
+        nativeV2Pool
+          ? nativeV2Pool
+          : nativeV3Pool!;
+
+      const token0 = nativePool.token0.address == nativeCurrency.address;
+
+      // returns mid price in terms of the native currency (the ratio of quoteToken/nativeToken)
+      const nativeTokenPrice = token0
+        ? nativePool.token0Price
+        : nativePool.token1Price;
+
+      let gasCostInTermsOfQuoteToken: CurrencyAmount;
+      try {
+        // native token is base currency
+        gasCostInTermsOfQuoteToken = nativeTokenPrice.quote(
+          totalGasCostNativeCurrency
+        ) as CurrencyAmount;
+      } catch (err) {
+        log.info(
+          {
+            nativeTokenPriceBase: nativeTokenPrice.baseCurrency,
+            nativeTokenPriceQuote: nativeTokenPrice.quoteCurrency,
+            gasCostInEth: totalGasCostNativeCurrency.currency,
+          },
+          'Debug eth price token issue'
+        );
+        throw err;
+      }
+
+      // true if token0 is the native currency
+      const token0USDPool = usdPool.token0.address == nativeCurrency.address;
+
+      // gets the mid price of the pool in terms of the native token
+      const nativeTokenPriceUSDPool = token0USDPool
+        ? usdPool.token0Price
+        : usdPool.token1Price;
+
+      let gasCostInTermsOfUSD: CurrencyAmount;
+      try {
+        gasCostInTermsOfUSD = nativeTokenPriceUSDPool.quote(
+          totalGasCostNativeCurrency
+        ) as CurrencyAmount;
+      } catch (err) {
+        log.info(
+          {
+            usdT1: usdPool.token0.symbol,
+            usdT2: usdPool.token1.symbol,
+            gasCostInNativeToken: totalGasCostNativeCurrency.currency.symbol,
+          },
+          'Failed to compute USD gas price'
+        );
+        throw err;
+      }
+
+      return {
+        gasEstimate: baseGasUse,
+        gasCostInToken: gasCostInTermsOfQuoteToken,
+        gasCostInUSD: gasCostInTermsOfUSD!,
+      };
+    };
+
+    return {
+      estimateGasCost: estimateGasCost.bind(this),
+    };
+  }
+
+  private estimateGas(
+    routeWithValidQuote: MixedRouteWithValidQuote,
+    gasPriceWei: BigNumber,
+    chainId: ChainId
+  ) {
+    const totalInitializedTicksCrossed = BigNumber.from(
+      Math.max(1, _.sum(routeWithValidQuote.initializedTicksCrossedList))
+    );
+    /**
+     * Since we must make a separate call to multicall for each v3 and v2 section, we will have to
+     * add the BASE_SWAP_COST to each section.
+     */
+    let baseGasUse = BigNumber.from(0);
+
+    const route = routeWithValidQuote.route;
+
+    const res = partitionMixedRouteByProtocol(route);
+    res.map((section: (Pair | Pool)[]) => {
+      if (section.every((pool) => pool instanceof Pool)) {
+        baseGasUse = baseGasUse.add(BASE_SWAP_COST(chainId));
+        baseGasUse = baseGasUse.add(COST_PER_HOP(chainId).mul(section.length));
+      } else if (section.every((pool) => pool instanceof Pair)) {
+        baseGasUse = baseGasUse.add(BASE_SWAP_COST_V2);
+        baseGasUse = baseGasUse.add(
+          /// same behavior in v2 heuristic gas model factory
+          COST_PER_EXTRA_HOP_V2.mul(section.length - 1)
+        );
+      }
+    });
+
+    const tickGasUse = COST_PER_INIT_TICK(chainId).mul(
+      totalInitializedTicksCrossed
+    );
+    const uninitializedTickGasUse = COST_PER_UNINIT_TICK.mul(0);
+
+    // base estimate gas used based on chainId estimates for hops and ticks gas useage
+    baseGasUse = baseGasUse.add(tickGasUse).add(uninitializedTickGasUse);
+
+    const baseGasCostWei = gasPriceWei.mul(baseGasUse);
+
+    const wrappedCurrency = WRAPPED_NATIVE_CURRENCY[chainId]!;
+
+    const totalGasCostNativeCurrency = CurrencyAmount.fromRawAmount(
+      wrappedCurrency,
+      baseGasCostWei.toString()
+    );
+
+    return {
+      totalGasCostNativeCurrency,
+      totalInitializedTicksCrossed,
+      baseGasUse,
+    };
+  }
+}
diff --git a/lib/sor/routers/alpha-router/gas-models/v2/v2-heuristic-gas-model.ts b/lib/sor/routers/alpha-router/gas-models/v2/v2-heuristic-gas-model.ts
new file mode 100644
index 0000000..1a43fb4
--- /dev/null
+++ b/lib/sor/routers/alpha-router/gas-models/v2/v2-heuristic-gas-model.ts
@@ -0,0 +1,276 @@
+import { BigNumber } from '@ethersproject/bignumber';
+import { ChainId, Token } from '@uniswap/sdk-core';
+import { Pair } from '@uniswap/v2-sdk';
+import _ from 'lodash';
+
+import { IV2PoolProvider } from '../../../../providers/v2/pool-provider';
+import { log, WRAPPED_NATIVE_CURRENCY } from '../../../../util';
+import { CurrencyAmount } from '../../../../util/amounts';
+import { V2RouteWithValidQuote } from '../../entities/route-with-valid-quote';
+import {
+  BuildV2GasModelFactoryType,
+  IGasModel,
+  IV2GasModelFactory,
+  usdGasTokensByChain,
+} from '../gas-model';
+import { ProviderConfig } from '../../../../providers/provider';
+
+// Constant cost for doing any swap regardless of pools.
+export const BASE_SWAP_COST = BigNumber.from(135000); // 115000, bumped up by 20_000 @eric 7/8/2022
+
+// Constant per extra hop in the route.
+export const COST_PER_EXTRA_HOP = BigNumber.from(50000); // 20000, bumped up by 30_000 @eric 7/8/2022
+
+/**
+ * Computes a gas estimate for a V2 swap using heuristics.
+ * Considers number of hops in the route and the typical base cost for a swap.
+ *
+ * We compute gas estimates off-chain because
+ *  1/ Calling eth_estimateGas for a swaps requires the caller to have
+ *     the full balance token being swapped, and approvals.
+ *  2/ Tracking gas used using a wrapper contract is not accurate with Multicall
+ *     due to EIP-2929. We would have to make a request for every swap we wanted to estimate.
+ *  3/ For V2 we simulate all our swaps off-chain so have no way to track gas used.
+ *
+ * Note, certain tokens e.g. rebasing/fee-on-transfer, may incur higher gas costs than
+ * what we estimate here. This is because they run extra logic on token transfer.
+ *
+ * @export
+ * @class V2HeuristicGasModelFactory
+ */
+export class V2HeuristicGasModelFactory extends IV2GasModelFactory {
+  constructor() {
+    super();
+  }
+
+  public async buildGasModel({
+    chainId,
+    gasPriceWei,
+    poolProvider,
+    token,
+    providerConfig
+  }: BuildV2GasModelFactoryType): Promise<IGasModel<V2RouteWithValidQuote>> {
+    if (token.equals(WRAPPED_NATIVE_CURRENCY[chainId]!)) {
+      const usdPool: Pair = await this.getHighestLiquidityUSDPool(
+        chainId,
+        poolProvider,
+        providerConfig
+      );
+
+      return {
+        estimateGasCost: (routeWithValidQuote: V2RouteWithValidQuote) => {
+          const { gasCostInEth, gasUse } = this.estimateGas(
+            routeWithValidQuote,
+            gasPriceWei,
+            chainId
+          );
+
+          const ethToken0 =
+            usdPool.token0.address == WRAPPED_NATIVE_CURRENCY[chainId]!.address;
+
+          const ethTokenPrice = ethToken0
+            ? usdPool.token0Price
+            : usdPool.token1Price;
+
+          const gasCostInTermsOfUSD: CurrencyAmount = ethTokenPrice.quote(
+            gasCostInEth
+          ) as CurrencyAmount;
+
+          return {
+            gasEstimate: gasUse,
+            gasCostInToken: gasCostInEth,
+            gasCostInUSD: gasCostInTermsOfUSD,
+          };
+        },
+      };
+    }
+
+    // If the quote token is not WETH, we convert the gas cost to be in terms of the quote token.
+    // We do this by getting the highest liquidity <token>/ETH pool.
+    const ethPool: Pair | null = await this.getEthPool(
+      chainId,
+      token,
+      poolProvider,
+      providerConfig
+    );
+    if (!ethPool) {
+      log.info(
+        'Unable to find ETH pool with the quote token to produce gas adjusted costs. Route will not account for gas.'
+      );
+    }
+
+    const usdPool: Pair = await this.getHighestLiquidityUSDPool(
+      chainId,
+      poolProvider,
+      providerConfig
+    );
+
+    return {
+      estimateGasCost: (routeWithValidQuote: V2RouteWithValidQuote) => {
+        const usdToken =
+          usdPool.token0.address == WRAPPED_NATIVE_CURRENCY[chainId]!.address
+            ? usdPool.token1
+            : usdPool.token0;
+
+        const { gasCostInEth, gasUse } = this.estimateGas(
+          routeWithValidQuote,
+          gasPriceWei,
+          chainId
+        );
+
+        if (!ethPool) {
+          return {
+            gasEstimate: gasUse,
+            gasCostInToken: CurrencyAmount.fromRawAmount(token, 0),
+            gasCostInUSD: CurrencyAmount.fromRawAmount(usdToken, 0),
+          };
+        }
+
+        const ethToken0 =
+          ethPool.token0.address == WRAPPED_NATIVE_CURRENCY[chainId]!.address;
+
+        const ethTokenPrice = ethToken0
+          ? ethPool.token0Price
+          : ethPool.token1Price;
+
+        let gasCostInTermsOfQuoteToken: CurrencyAmount;
+        try {
+          gasCostInTermsOfQuoteToken = ethTokenPrice.quote(
+            gasCostInEth
+          ) as CurrencyAmount;
+        } catch (err) {
+          log.error(
+            {
+              ethTokenPriceBase: ethTokenPrice.baseCurrency,
+              ethTokenPriceQuote: ethTokenPrice.quoteCurrency,
+              gasCostInEth: gasCostInEth.currency,
+            },
+            'Debug eth price token issue'
+          );
+          throw err;
+        }
+
+        const ethToken0USDPool =
+          usdPool.token0.address == WRAPPED_NATIVE_CURRENCY[chainId]!.address;
+
+        const ethTokenPriceUSDPool = ethToken0USDPool
+          ? usdPool.token0Price
+          : usdPool.token1Price;
+
+        let gasCostInTermsOfUSD: CurrencyAmount;
+        try {
+          gasCostInTermsOfUSD = ethTokenPriceUSDPool.quote(
+            gasCostInEth
+          ) as CurrencyAmount;
+        } catch (err) {
+          log.error(
+            {
+              usdT1: usdPool.token0.symbol,
+              usdT2: usdPool.token1.symbol,
+              gasCostInEthToken: gasCostInEth.currency.symbol,
+            },
+            'Failed to compute USD gas price'
+          );
+          throw err;
+        }
+
+        return {
+          gasEstimate: gasUse,
+          gasCostInToken: gasCostInTermsOfQuoteToken,
+          gasCostInUSD: gasCostInTermsOfUSD!,
+        };
+      },
+    };
+  }
+
+  private estimateGas(
+    routeWithValidQuote: V2RouteWithValidQuote,
+    gasPriceWei: BigNumber,
+    chainId: ChainId
+  ) {
+    const hops = routeWithValidQuote.route.pairs.length;
+    const gasUse = BASE_SWAP_COST.add(COST_PER_EXTRA_HOP.mul(hops - 1));
+
+    const totalGasCostWei = gasPriceWei.mul(gasUse);
+
+    const weth = WRAPPED_NATIVE_CURRENCY[chainId]!;
+
+    const gasCostInEth = CurrencyAmount.fromRawAmount(
+      weth,
+      totalGasCostWei.toString()
+    );
+
+    return { gasCostInEth, gasUse };
+  }
+
+  private async getEthPool(
+    chainId: ChainId,
+    token: Token,
+    poolProvider: IV2PoolProvider,
+    providerConfig?: ProviderConfig,
+  ): Promise<Pair | null> {
+    const weth = WRAPPED_NATIVE_CURRENCY[chainId]!;
+
+    const poolAccessor = await poolProvider.getPools([[weth, token]], providerConfig);
+    const pool = poolAccessor.getPool(weth, token);
+
+    if (!pool || pool.reserve0.equalTo(0) || pool.reserve1.equalTo(0)) {
+      log.error(
+        {
+          weth,
+          token,
+          reserve0: pool?.reserve0.toExact(),
+          reserve1: pool?.reserve1.toExact(),
+        },
+        `Could not find a valid WETH pool with ${token.symbol} for computing gas costs.`
+      );
+
+      return null;
+    }
+
+    return pool;
+  }
+
+  private async getHighestLiquidityUSDPool(
+    chainId: ChainId,
+    poolProvider: IV2PoolProvider,
+    providerConfig?: ProviderConfig,
+  ): Promise<Pair> {
+    const usdTokens = usdGasTokensByChain[chainId];
+
+    if (!usdTokens) {
+      throw new Error(
+        `Could not find a USD token for computing gas costs on ${chainId}`
+      );
+    }
+
+    const usdPools = _.map<Token, [Token, Token]>(usdTokens, (usdToken) => [
+      usdToken,
+      WRAPPED_NATIVE_CURRENCY[chainId]!,
+    ]);
+    const poolAccessor = await poolProvider.getPools(usdPools, providerConfig);
+    const poolsRaw = poolAccessor.getAllPools();
+    const pools = _.filter(
+      poolsRaw,
+      (pool) => pool.reserve0.greaterThan(0) && pool.reserve1.greaterThan(0)
+    );
+
+    if (pools.length == 0) {
+      log.error(
+        { pools },
+        `Could not find a USD/WETH pool for computing gas costs.`
+      );
+      throw new Error(`Can't find USD/WETH pool for computing gas costs.`);
+    }
+
+    const maxPool = _.maxBy(pools, (pool) => {
+      if (pool.token0.equals(WRAPPED_NATIVE_CURRENCY[chainId]!)) {
+        return parseFloat(pool.reserve0.toSignificant(2));
+      } else {
+        return parseFloat(pool.reserve1.toSignificant(2));
+      }
+    }) as Pair;
+
+    return maxPool;
+  }
+}
diff --git a/lib/sor/routers/alpha-router/gas-models/v3/gas-costs.ts b/lib/sor/routers/alpha-router/gas-models/v3/gas-costs.ts
new file mode 100644
index 0000000..6ee9fad
--- /dev/null
+++ b/lib/sor/routers/alpha-router/gas-models/v3/gas-costs.ts
@@ -0,0 +1,121 @@
+import { BigNumber } from '@ethersproject/bignumber';
+import { ChainId, Token } from '@uniswap/sdk-core';
+import { AAVE_MAINNET, LIDO_MAINNET } from '../../../../providers';
+
+import { V3Route } from '../../../router';
+
+// Cost for crossing an uninitialized tick.
+export const COST_PER_UNINIT_TICK = BigNumber.from(0);
+
+//l2 execution fee on optimism is roughly the same as mainnet
+export const BASE_SWAP_COST = (id: ChainId): BigNumber => {
+  switch (id) {
+    case ChainId.MAINNET:
+    case ChainId.GOERLI:
+    case ChainId.SEPOLIA:
+    case ChainId.OPTIMISM:
+    case ChainId.OPTIMISM_GOERLI:
+    case ChainId.BNB:
+    case ChainId.AVALANCHE:
+    case ChainId.BASE:
+    case ChainId.BASE_GOERLI:
+      return BigNumber.from(2000);
+    case ChainId.ARBITRUM_ONE:
+    case ChainId.ARBITRUM_GOERLI:
+      return BigNumber.from(5000);
+    case ChainId.POLYGON:
+    case ChainId.POLYGON_MUMBAI:
+      return BigNumber.from(2000);
+
+    case ChainId.CELO:
+    case ChainId.CELO_ALFAJORES:
+      return BigNumber.from(2000);
+
+    //TODO determine if sufficient
+    case ChainId.GNOSIS:
+      return BigNumber.from(2000);
+    case ChainId.MOONBEAM:
+      return BigNumber.from(2000);
+  }
+};
+export const COST_PER_INIT_TICK = (id: ChainId): BigNumber => {
+  switch (id) {
+    case ChainId.MAINNET:
+    case ChainId.GOERLI:
+    case ChainId.SEPOLIA:
+    case ChainId.BNB:
+    case ChainId.AVALANCHE:
+      return BigNumber.from(31000);
+    case ChainId.OPTIMISM:
+    case ChainId.OPTIMISM_GOERLI:
+    case ChainId.BASE:
+    case ChainId.BASE_GOERLI:
+      return BigNumber.from(31000);
+    case ChainId.ARBITRUM_ONE:
+    case ChainId.ARBITRUM_GOERLI:
+      return BigNumber.from(31000);
+    case ChainId.POLYGON:
+    case ChainId.POLYGON_MUMBAI:
+      return BigNumber.from(31000);
+    case ChainId.CELO:
+    case ChainId.CELO_ALFAJORES:
+      return BigNumber.from(31000);
+    case ChainId.GNOSIS:
+      return BigNumber.from(31000);
+    case ChainId.MOONBEAM:
+      return BigNumber.from(31000);
+  }
+};
+
+export const COST_PER_HOP = (id: ChainId): BigNumber => {
+  switch (id) {
+    case ChainId.MAINNET:
+    case ChainId.GOERLI:
+    case ChainId.SEPOLIA:
+    case ChainId.BNB:
+    case ChainId.OPTIMISM:
+    case ChainId.OPTIMISM_GOERLI:
+    case ChainId.AVALANCHE:
+    case ChainId.BASE:
+    case ChainId.BASE_GOERLI:
+      return BigNumber.from(80000);
+    case ChainId.ARBITRUM_ONE:
+    case ChainId.ARBITRUM_GOERLI:
+      return BigNumber.from(80000);
+    case ChainId.POLYGON:
+    case ChainId.POLYGON_MUMBAI:
+      return BigNumber.from(80000);
+    case ChainId.CELO:
+    case ChainId.CELO_ALFAJORES:
+      return BigNumber.from(80000);
+    case ChainId.GNOSIS:
+      return BigNumber.from(80000);
+    case ChainId.MOONBEAM:
+      return BigNumber.from(80000);
+  }
+};
+
+export const SINGLE_HOP_OVERHEAD = (_id: ChainId): BigNumber => {
+  return BigNumber.from(15000);
+};
+
+export const TOKEN_OVERHEAD = (id: ChainId, route: V3Route): BigNumber => {
+  const tokens: Token[] = route.tokenPath;
+  let overhead = BigNumber.from(0);
+
+  if (id == ChainId.MAINNET) {
+    // AAVE's transfer contains expensive governance snapshotting logic. We estimate
+    // it at around 150k.
+    if (tokens.some((t: Token) => t.equals(AAVE_MAINNET))) {
+      overhead = overhead.add(150000);
+    }
+
+    // LDO's reaches out to an external token controller which adds a large overhead
+    // of around 150k.
+    if (tokens.some((t: Token) => t.equals(LIDO_MAINNET))) {
+      overhead = overhead.add(150000);
+    }
+  }
+
+  return overhead;
+};
diff --git a/lib/sor/routers/alpha-router/gas-models/v3/v3-heuristic-gas-model.ts b/lib/sor/routers/alpha-router/gas-models/v3/v3-heuristic-gas-model.ts
new file mode 100644
index 0000000..1941292
--- /dev/null
+++ b/lib/sor/routers/alpha-router/gas-models/v3/v3-heuristic-gas-model.ts
@@ -0,0 +1,470 @@
+import { BigNumber } from '@ethersproject/bignumber';
+import { ChainId, Percent, Price, TradeType } from '@uniswap/sdk-core';
+import { Pool } from '@uniswap/v3-sdk';
+import _ from 'lodash';
+
+import { SwapOptionsUniversalRouter, SwapType, WRAPPED_NATIVE_CURRENCY, } from '../../../..';
+import { ArbitrumGasData, OptimismGasData, } from '../../../../providers/v3/gas-data-provider';
+import { CurrencyAmount } from '../../../../util/amounts';
+import { getL2ToL1GasUsed } from '../../../../util/gas-factory-helpers';
+import { log } from '../../../../util/log';
+import { buildSwapMethodParameters, buildTrade, } from '../../../../util/methodParameters';
+import { V3RouteWithValidQuote } from '../../entities/route-with-valid-quote';
+import { BuildOnChainGasModelFactoryType, IGasModel, IOnChainGasModelFactory, } from '../gas-model';
+
+import {
+  BASE_SWAP_COST,
+  COST_PER_HOP,
+  COST_PER_INIT_TICK,
+  COST_PER_UNINIT_TICK,
+  SINGLE_HOP_OVERHEAD,
+  TOKEN_OVERHEAD,
+} from './gas-costs';
+
+/**
+ * Computes a gas estimate for a V3 swap using heuristics.
+ * Considers number of hops in the route, number of ticks crossed
+ * and the typical base cost for a swap.
+ *
+ * We get the number of ticks crossed in a swap from the QuoterV2
+ * contract.
+ *
+ * We compute gas estimates off-chain because
+ *  1/ Calling eth_estimateGas for a swaps requires the caller to have
+ *     the full balance token being swapped, and approvals.
+ *  2/ Tracking gas used using a wrapper contract is not accurate with Multicall
+ *     due to EIP-2929. We would have to make a request for every swap we wanted to estimate.
+ *  3/ For V2 we simulate all our swaps off-chain so have no way to track gas used.
+ *
+ * @export
+ * @class V3HeuristicGasModelFactory
+ */
+export class V3HeuristicGasModelFactory extends IOnChainGasModelFactory {
+  constructor() {
+    super();
+  }
+
+  public async buildGasModel({
+    chainId,
+    gasPriceWei,
+    pools,
+    amountToken,
+    quoteToken,
+    l2GasDataProvider,
+  }: BuildOnChainGasModelFactoryType): Promise<
+    IGasModel<V3RouteWithValidQuote>
+  > {
+    const l2GasData = l2GasDataProvider
+      ? await l2GasDataProvider.getGasData()
+      : undefined;
+
+    const usdPool: Pool = pools.usdPool;
+
+    const calculateL1GasFees = async (
+      route: V3RouteWithValidQuote[]
+    ): Promise<{
+      gasUsedL1: BigNumber;
+      gasCostL1USD: CurrencyAmount;
+      gasCostL1QuoteToken: CurrencyAmount;
+    }> => {
+      const swapOptions: SwapOptionsUniversalRouter = {
+        type: SwapType.UNIVERSAL_ROUTER,
+        recipient: '0x0000000000000000000000000000000000000001',
+        deadlineOrPreviousBlockhash: 100,
+        slippageTolerance: new Percent(5, 10_000),
+      };
+      let l1Used = BigNumber.from(0);
+      let l1FeeInWei = BigNumber.from(0);
+      const opStackChains = [
+        ChainId.OPTIMISM,
+        ChainId.OPTIMISM_GOERLI,
+        ChainId.BASE,
+        ChainId.BASE_GOERLI,
+      ];
+      if (opStackChains.includes(chainId)) {
+        [l1Used, l1FeeInWei] = this.calculateOptimismToL1SecurityFee(
+          route,
+          swapOptions,
+          l2GasData as OptimismGasData
+        );
+      } else if (
+        chainId == ChainId.ARBITRUM_ONE ||
+        chainId == ChainId.ARBITRUM_GOERLI
+      ) {
+        [l1Used, l1FeeInWei] = this.calculateArbitrumToL1SecurityFee(
+          route,
+          swapOptions,
+          l2GasData as ArbitrumGasData
+        );
+      }
+
+      // wrap fee to native currency
+      const nativeCurrency = WRAPPED_NATIVE_CURRENCY[chainId];
+      const costNativeCurrency = CurrencyAmount.fromRawAmount(
+        nativeCurrency,
+        l1FeeInWei.toString()
+      );
+
+      // convert fee into usd
+      const nativeTokenPrice =
+        usdPool.token0.address == nativeCurrency.address
+          ? usdPool.token0Price
+          : usdPool.token1Price;
+
+      const gasCostL1USD: CurrencyAmount =
+        nativeTokenPrice.quote(costNativeCurrency);
+
+      let gasCostL1QuoteToken = costNativeCurrency;
+      // if the inputted token is not in the native currency, quote a native/quote token pool to get the gas cost in terms of the quote token
+      if (!quoteToken.equals(nativeCurrency)) {
+        const nativePool: Pool | null = pools.nativeQuoteTokenV3Pool;
+        if (!nativePool) {
+          log.info(
+            'Could not find a pool to convert the cost into the quote token'
+          );
+          gasCostL1QuoteToken = CurrencyAmount.fromRawAmount(quoteToken, 0);
+        } else {
+          const nativeTokenPrice =
+            nativePool.token0.address == nativeCurrency.address
+              ? nativePool.token0Price
+              : nativePool.token1Price;
+          gasCostL1QuoteToken = nativeTokenPrice.quote(costNativeCurrency);
+        }
+      }
+      // gasUsedL1 is the gas units used calculated from the bytes of the calldata
+      // gasCostL1USD and gasCostL1QuoteToken is the cost of gas in each of those tokens
+      return {
+        gasUsedL1: l1Used,
+        gasCostL1USD,
+        gasCostL1QuoteToken,
+      };
+    };
+
+    // If our quote token is WETH, we don't need to convert our gas use to be in terms
+    // of the quote token in order to produce a gas adjusted amount.
+    // We do return a gas use in USD however, so we still convert to usd.
+    const nativeCurrency = WRAPPED_NATIVE_CURRENCY[chainId]!;
+    if (quoteToken.equals(nativeCurrency)) {
+      const estimateGasCost = (
+        routeWithValidQuote: V3RouteWithValidQuote
+      ): {
+        gasEstimate: BigNumber;
+        gasCostInToken: CurrencyAmount;
+        gasCostInUSD: CurrencyAmount;
+      } => {
+        const { totalGasCostNativeCurrency, baseGasUse } = this.estimateGas(
+          routeWithValidQuote,
+          gasPriceWei,
+          chainId
+        );
+
+        const token0 = usdPool.token0.address == nativeCurrency.address;
+
+        const nativeTokenPrice = token0
+          ? usdPool.token0Price
+          : usdPool.token1Price;
+
+        const gasCostInTermsOfUSD: CurrencyAmount = nativeTokenPrice.quote(
+          totalGasCostNativeCurrency
+        ) as CurrencyAmount;
+
+        return {
+          gasEstimate: baseGasUse,
+          gasCostInToken: totalGasCostNativeCurrency,
+          gasCostInUSD: gasCostInTermsOfUSD,
+        };
+      };
+
+      return {
+        estimateGasCost,
+        calculateL1GasFees,
+      };
+    }
+
+    // If the quote token is not in the native currency, we convert the gas cost to be in terms of the quote token.
+    // We do this by getting the highest liquidity <quoteToken>/<nativeCurrency> pool. eg. <quoteToken>/ETH pool.
+    const nativePool: Pool | null = pools.nativeQuoteTokenV3Pool;
+
+    let nativeAmountPool: Pool | null = null;
+    if (!amountToken.equals(nativeCurrency)) {
+      nativeAmountPool = pools.nativeAmountTokenV3Pool;
+    }
+
+    const usdToken =
+      usdPool.token0.address == nativeCurrency.address
+        ? usdPool.token1
+        : usdPool.token0;
+
+    const estimateGasCost = (
+      routeWithValidQuote: V3RouteWithValidQuote
+    ): {
+      gasEstimate: BigNumber;
+      gasCostInToken: CurrencyAmount;
+      gasCostInUSD: CurrencyAmount;
+    } => {
+      const { totalGasCostNativeCurrency, baseGasUse } = this.estimateGas(
+        routeWithValidQuote,
+        gasPriceWei,
+        chainId
+      );
+
+      let gasCostInTermsOfQuoteToken: CurrencyAmount | null = null;
+      if (nativePool) {
+        const token0 = nativePool.token0.address == nativeCurrency.address;
+
+        // returns mid price in terms of the native currency (the ratio of quoteToken/nativeToken)
+        const nativeTokenPrice = token0
+          ? nativePool.token0Price
+          : nativePool.token1Price;
+
+        try {
+          // native token is base currency
+          gasCostInTermsOfQuoteToken = nativeTokenPrice.quote(
+            totalGasCostNativeCurrency
+          ) as CurrencyAmount;
+        } catch (err) {
+          log.info(
+            {
+              nativeTokenPriceBase: nativeTokenPrice.baseCurrency,
+              nativeTokenPriceQuote: nativeTokenPrice.quoteCurrency,
+              gasCostInEth: totalGasCostNativeCurrency.currency,
+            },
+            'Debug eth price token issue'
+          );
+          throw err;
+        }
+      }
+      // we have a nativeAmountPool, but not a nativePool
+      else {
+        log.info(
+          `Unable to find ${nativeCurrency.symbol} pool with the quote token, ${quoteToken.symbol} to produce gas adjusted costs. Using amountToken to calculate gas costs.`
+        );
+      }
+
+      // Highest liquidity pool for the non quote token / ETH
+      // A pool with the non quote token / ETH should not be required and errors should be handled separately
+      if (nativeAmountPool) {
+        // get current execution price (amountToken / quoteToken)
+        const executionPrice = new Price(
+          routeWithValidQuote.amount.currency,
+          routeWithValidQuote.quote.currency,
+          routeWithValidQuote.amount.quotient,
+          routeWithValidQuote.quote.quotient
+        );
+
+        const inputIsToken0 =
+          nativeAmountPool.token0.address == nativeCurrency.address;
+        // ratio of input / native
+        const nativeAmountTokenPrice = inputIsToken0
+          ? nativeAmountPool.token0Price
+          : nativeAmountPool.token1Price;
+
+        const gasCostInTermsOfAmountToken = nativeAmountTokenPrice.quote(
+          totalGasCostNativeCurrency
+        ) as CurrencyAmount;
+
+        // Convert gasCostInTermsOfAmountToken to quote token using execution price
+        const syntheticGasCostInTermsOfQuoteToken = executionPrice.quote(
+          gasCostInTermsOfAmountToken
+        );
+
+        // Note that the syntheticGasCost being lessThan the original quoted value is not always strictly better
+        // e.g. the scenario where the amountToken/ETH pool is very illiquid as well and returns an extremely small number
+        // however, it is better to have the gasEstimation be almost 0 than almost infinity, as the user will still receive a quote
+        if (
+          gasCostInTermsOfQuoteToken === null ||
+          syntheticGasCostInTermsOfQuoteToken.lessThan(
+            gasCostInTermsOfQuoteToken.asFraction
+          )
+        ) {
+          log.info(
+            {
+              nativeAmountTokenPrice: nativeAmountTokenPrice.toSignificant(6),
+              gasCostInTermsOfQuoteToken: gasCostInTermsOfQuoteToken
+                ? gasCostInTermsOfQuoteToken.toExact()
+                : 0,
+              gasCostInTermsOfAmountToken:
+                gasCostInTermsOfAmountToken.toExact(),
+              executionPrice: executionPrice.toSignificant(6),
+              syntheticGasCostInTermsOfQuoteToken:
+                syntheticGasCostInTermsOfQuoteToken.toSignificant(6),
+            },
+            'New gasCostInTermsOfQuoteToken calculated with synthetic quote token price is less than original'
+          );
+
+          gasCostInTermsOfQuoteToken = syntheticGasCostInTermsOfQuoteToken;
+        }
+      }
+
+      // true if token0 is the native currency
+      const token0USDPool = usdPool.token0.address == nativeCurrency.address;
+
+      // gets the mid price of the pool in terms of the native token
+      const nativeTokenPriceUSDPool = token0USDPool
+        ? usdPool.token0Price
+        : usdPool.token1Price;
+
+      let gasCostInTermsOfUSD: CurrencyAmount;
+      try {
+        gasCostInTermsOfUSD = nativeTokenPriceUSDPool.quote(
+          totalGasCostNativeCurrency
+        ) as CurrencyAmount;
+      } catch (err) {
+        log.info(
+          {
+            usdT1: usdPool.token0.symbol,
+            usdT2: usdPool.token1.symbol,
+            gasCostInNativeToken: totalGasCostNativeCurrency.currency.symbol,
+          },
+          'Failed to compute USD gas price'
+        );
+        throw err;
+      }
+
+      // If gasCostInTermsOfQuoteToken is null, both attempts to calculate gasCostInTermsOfQuoteToken failed (nativePool and amountNativePool)
+      if (gasCostInTermsOfQuoteToken === null) {
+        log.info(
+          `Unable to find ${nativeCurrency.symbol} pool with the quote token, ${quoteToken.symbol}, or amount Token, ${amountToken.symbol} to produce gas adjusted costs. Route will not account for gas.`
+        );
+        return {
+          gasEstimate: baseGasUse,
+          gasCostInToken: CurrencyAmount.fromRawAmount(quoteToken, 0),
+          gasCostInUSD: CurrencyAmount.fromRawAmount(usdToken, 0),
+        };
+      }
+
+      return {
+        gasEstimate: baseGasUse,
+        gasCostInToken: gasCostInTermsOfQuoteToken,
+        gasCostInUSD: gasCostInTermsOfUSD!,
+      };
+    };
+
+    return {
+      estimateGasCost: estimateGasCost.bind(this),
+      calculateL1GasFees,
+    };
+  }
+
+  private estimateGas(
+    routeWithValidQuote: V3RouteWithValidQuote,
+    gasPriceWei: BigNumber,
+    chainId: ChainId
+  ) {
+    const totalInitializedTicksCrossed = BigNumber.from(
+      Math.max(1, _.sum(routeWithValidQuote.initializedTicksCrossedList))
+    );
+    const totalHops = BigNumber.from(routeWithValidQuote.route.pools.length);
+
+    let hopsGasUse = COST_PER_HOP(chainId).mul(totalHops);
+
+    // We have observed that this algorithm tends to underestimate single hop swaps.
+    // We add a buffer in the case of a single hop swap.
+    if (totalHops.eq(1)) {
+      hopsGasUse = hopsGasUse.add(SINGLE_HOP_OVERHEAD(chainId));
+    }
+
+    // Some tokens have extremely expensive transferFrom functions, which causes
+    // us to underestimate them by a large amount. For known tokens, we apply an
+    // adjustment.
+    const tokenOverhead = TOKEN_OVERHEAD(chainId, routeWithValidQuote.route);
+
+    const tickGasUse = COST_PER_INIT_TICK(chainId).mul(
+      totalInitializedTicksCrossed
+    );
+    const uninitializedTickGasUse = COST_PER_UNINIT_TICK.mul(0);
+
+    // base estimate gas used based on chainId estimates for hops and ticks gas useage
+    const baseGasUse = BASE_SWAP_COST(chainId)
+      .add(hopsGasUse)
+      .add(tokenOverhead)
+      .add(tickGasUse)
+      .add(uninitializedTickGasUse);
+
+    const baseGasCostWei = gasPriceWei.mul(baseGasUse);
+
+    const wrappedCurrency = WRAPPED_NATIVE_CURRENCY[chainId]!;
+
+    const totalGasCostNativeCurrency = CurrencyAmount.fromRawAmount(
+      wrappedCurrency,
+      baseGasCostWei.toString()
+    );
+
+    return {
+      totalGasCostNativeCurrency,
+      totalInitializedTicksCrossed,
+      baseGasUse,
+    };
+  }
+
+  /**
+   * To avoid having a call to optimism's L1 security fee contract for every route and amount combination,
+   * we replicate the gas cost accounting here.
+   */
+  private calculateOptimismToL1SecurityFee(
+    routes: V3RouteWithValidQuote[],
+    swapConfig: SwapOptionsUniversalRouter,
+    gasData: OptimismGasData
+  ): [BigNumber, BigNumber] {
+    const { l1BaseFee, scalar, decimals, overhead } = gasData;
+
+    const route: V3RouteWithValidQuote = routes[0]!;
+    const amountToken =
+      route.tradeType == TradeType.EXACT_INPUT
+        ? route.amount.currency
+        : route.quote.currency;
+    const outputToken =
+      route.tradeType == TradeType.EXACT_INPUT
+        ? route.quote.currency
+        : route.amount.currency;
+
+    // build trade for swap calldata
+    const trade = buildTrade(amountToken, outputToken, route.tradeType, routes);
+    const data = buildSwapMethodParameters(
+      trade,
+      swapConfig,
+      ChainId.OPTIMISM
+    ).calldata;
+    const l1GasUsed = getL2ToL1GasUsed(data, overhead);
+    // l1BaseFee is L1 Gas Price on etherscan
+    const l1Fee = l1GasUsed.mul(l1BaseFee);
+    const unscaled = l1Fee.mul(scalar);
+    // scaled = unscaled / (10 ** decimals)
+    const scaledConversion = BigNumber.from(10).pow(decimals);
+    const scaled = unscaled.div(scaledConversion);
+    return [l1GasUsed, scaled];
+  }
+
+  private calculateArbitrumToL1SecurityFee(
+    routes: V3RouteWithValidQuote[],
+    swapConfig: SwapOptionsUniversalRouter,
+    gasData: ArbitrumGasData
+  ): [BigNumber, BigNumber] {
+    const { perL2TxFee, perL1CalldataFee } = gasData;
+
+    const route: V3RouteWithValidQuote = routes[0]!;
+
+    const amountToken =
+      route.tradeType == TradeType.EXACT_INPUT
+        ? route.amount.currency
+        : route.quote.currency;
+    const outputToken =
+      route.tradeType == TradeType.EXACT_INPUT
+        ? route.quote.currency
+        : route.amount.currency;
+
+    // build trade for swap calldata
+    const trade = buildTrade(amountToken, outputToken, route.tradeType, routes);
+    const data = buildSwapMethodParameters(
+      trade,
+      swapConfig,
+      ChainId.ARBITRUM_ONE
+    ).calldata;
+    // calculates gas amounts based on bytes of calldata, use 0 as overhead.
+    const l1GasUsed = getL2ToL1GasUsed(data, BigNumber.from(0));
+    // multiply by the fee per calldata and add the flat l2 fee
+    let l1Fee = l1GasUsed.mul(perL1CalldataFee);
+    l1Fee = l1Fee.add(perL2TxFee);
+    return [l1GasUsed, l1Fee];
+  }
+}
diff --git a/lib/sor/routers/alpha-router/index.ts b/lib/sor/routers/alpha-router/index.ts
new file mode 100644
index 0000000..9f57d42
--- /dev/null
+++ b/lib/sor/routers/alpha-router/index.ts
@@ -0,0 +1,4 @@
+export * from './alpha-router';
+export * from './entities';
+export * from './gas-models';
+export * from './quoters';
diff --git a/lib/sor/routers/alpha-router/quoters/base-quoter.ts b/lib/sor/routers/alpha-router/quoters/base-quoter.ts
new file mode 100644
index 0000000..3c2595a
--- /dev/null
+++ b/lib/sor/routers/alpha-router/quoters/base-quoter.ts
@@ -0,0 +1,179 @@
+import { BigNumber } from '@ethersproject/bignumber'
+import { ChainId, Currency, Token, TradeType } from '@uniswap/sdk-core'
+import { Pair } from '@uniswap/v2-sdk'
+import { Pool } from '@uniswap/v3-sdk'
+import _ from 'lodash'
+
+import { ITokenListProvider, ITokenProvider, ITokenValidatorProvider, TokenValidationResult } from '../../../providers'
+import { CurrencyAmount, log, poolToString } from '../../../util'
+import { MixedRoute, V2Route, V3Route } from '../../router'
+import { AlphaRouterConfig } from '../alpha-router'
+import { RouteWithValidQuote } from '../entities/route-with-valid-quote'
+import { CandidatePoolsBySelectionCriteria, V2CandidatePools, V3CandidatePools } from '../functions/get-candidate-pools'
+import { IGasModel } from '../gas-models'
+
+import { GetQuotesResult, GetRoutesResult } from './model/results'
+import { CONTEXT } from '../../../../handlers/context'
+
+/**
+ * Interface for a Quoter.
+ * Defines the base dependencies, helper methods and interface for how to fetch quotes.
+ *
+ * @abstract
+ * @template CandidatePools
+ * @template Route
+ */
+export abstract class BaseQuoter<
+  CandidatePools extends V2CandidatePools | V3CandidatePools | [V3CandidatePools, V2CandidatePools],
+  Route extends V2Route | V3Route | MixedRoute
+> {
+  protected tokenProvider: ITokenProvider
+  protected chainId: ChainId
+  protected blockedTokenListProvider?: ITokenListProvider
+  protected tokenValidatorProvider?: ITokenValidatorProvider
+
+  constructor(
+    tokenProvider: ITokenProvider,
+    chainId: ChainId,
+    blockedTokenListProvider?: ITokenListProvider,
+    tokenValidatorProvider?: ITokenValidatorProvider
+  ) {
+    this.tokenProvider = tokenProvider
+    this.chainId = chainId
+    this.blockedTokenListProvider = blockedTokenListProvider
+    this.tokenValidatorProvider = tokenValidatorProvider
+  }
+
+  /**
+   * Protected method in charge of fetching the routes for the tokenIn/tokenOut pair.
+   *
+   * @protected
+   * @abstract
+   * @param tokenIn The token that the user wants to provide
+   * @param tokenOut The token that the usaw wants to receive
+   * @param candidatePools the candidate pools that are used to generate the routes
+   * @param tradeType The type of quote the user wants. He could want to provide exactly X tokenIn or receive exactly X tokenOut
+   * @param routingConfig
+   * @returns Promise<GetRoutesResult<Route>>
+   */
+  protected abstract getRoutes(
+    tokenIn: Token,
+    tokenOut: Token,
+    candidatePools: CandidatePools,
+    tradeType: TradeType,
+    routingConfig: AlphaRouterConfig
+  ): Promise<GetRoutesResult<Route>>
+
+  /**
+   * Public method that will fetch quotes for the combination of every route and every amount.
+   *
+   * @param routes the list of route that can be used to fetch a quote.
+   * @param amounts the list of amounts to query for EACH route.
+   * @param percents the percentage of each amount.
+   * @param quoteToken
+   * @param tradeType
+   * @param routingConfig
+   * @param candidatePools the candidate pools that were used to generate the routes
+   * @param gasModel the gasModel to be used for estimating gas cost
+   * @param gasPriceWei instead of passing gasModel, gasPriceWei is used to generate a gasModel
+   * @returns Promise<GetQuotesResult<Route>>
+   */
+  abstract getQuotes(
+    routes: Route[],
+    amounts: CurrencyAmount[],
+    percents: number[],
+    quoteToken: Token,
+    tradeType: TradeType,
+    routingConfig: AlphaRouterConfig,
+    candidatePools?: CandidatePoolsBySelectionCriteria,
+    gasModel?: IGasModel<RouteWithValidQuote>,
+    gasPriceWei?: BigNumber
+  ): Promise<GetQuotesResult>
+
+  /**
+   * Public method which would first get the routes and then get the quotes.
+   *
+   * @param tokenIn The token that the user wants to provide
+   * @param tokenOut The token that the usaw wants to receive
+   * @param amounts the list of amounts to query for EACH route.
+   * @param percents the percentage of each amount.
+   * @param quoteToken
+   * @param candidatePools
+   * @param tradeType
+   * @param routingConfig
+   * @param gasModel the gasModel to be used for estimating gas cost
+   * @param gasPriceWei instead of passing gasModel, gasPriceWei is used to generate a gasModel
+   */
+  public async getRoutesThenQuotes(
+    tokenIn: Token,
+    tokenOut: Token,
+    amounts: CurrencyAmount[],
+    percents: number[],
+    quoteToken: Token,
+    candidatePools: CandidatePools,
+    tradeType: TradeType,
+    routingConfig: AlphaRouterConfig,
+    gasModel?: IGasModel<RouteWithValidQuote>,
+    gasPriceWei?: BigNumber
+  ): Promise<GetQuotesResult> {
+    const routeStart = Date.now()
+    const routesResult = await this.getRoutes(tokenIn, tokenOut, candidatePools, tradeType, routingConfig)
+    const routeEnd = Date.now()
+
+    CONTEXT['Base Quoter: getRoutes'] = routeEnd - routeStart
+
+    const quoteStart = Date.now()
+    const quoteResults = await this.getQuotes(
+      routesResult.routes,
+      amounts,
+      percents,
+      quoteToken,
+      tradeType,
+      routingConfig,
+      routesResult.candidatePools,
+      gasModel,
+      gasPriceWei
+    )
+
+    const quoteEnd = Date.now()
+
+    CONTEXT['Base Quoter: getQuotes'] = quoteEnd - quoteStart
+
+    return quoteResults
+  }
+
+  protected async applyTokenValidatorToPools<T extends Pool | Pair>(
+    pools: T[],
+    isInvalidFn: (token: Currency, tokenValidation: TokenValidationResult | undefined) => boolean
+  ): Promise<T[]> {
+    if (!this.tokenValidatorProvider) {
+      return pools
+    }
+
+    log.info(`Running token validator on ${pools.length} pools`)
+
+    const tokens = _.flatMap(pools, (pool) => [pool.token0, pool.token1])
+
+    const tokenValidationResults = await this.tokenValidatorProvider.validateTokens(tokens)
+
+    const poolsFiltered = _.filter(pools, (pool: T) => {
+      const token0Validation = tokenValidationResults.getValidationByToken(pool.token0)
+      const token1Validation = tokenValidationResults.getValidationByToken(pool.token1)
+
+      const token0Invalid = isInvalidFn(pool.token0, token0Validation)
+      const token1Invalid = isInvalidFn(pool.token1, token1Validation)
+
+      if (token0Invalid || token1Invalid) {
+        log.info(
+          `Dropping pool ${poolToString(pool)} because token is invalid. ${pool.token0.symbol}: ${token0Validation}, ${
+            pool.token1.symbol
+          }: ${token1Validation}`
+        )
+      }
+
+      return !token0Invalid && !token1Invalid
+    })
+
+    return poolsFiltered
+  }
+}
diff --git a/lib/sor/routers/alpha-router/quoters/index.ts b/lib/sor/routers/alpha-router/quoters/index.ts
new file mode 100644
index 0000000..64f49d2
--- /dev/null
+++ b/lib/sor/routers/alpha-router/quoters/index.ts
@@ -0,0 +1,5 @@
+export * from './model/';
+export * from './base-quoter';
+export * from './v2-quoter';
+export * from './v3-quoter';
+export * from './mixed-quoter';
\ No newline at end of file
diff --git a/lib/sor/routers/alpha-router/quoters/mixed-quoter.ts b/lib/sor/routers/alpha-router/quoters/mixed-quoter.ts
new file mode 100644
index 0000000..5d13198
--- /dev/null
+++ b/lib/sor/routers/alpha-router/quoters/mixed-quoter.ts
@@ -0,0 +1,247 @@
+import { ChainId, Currency, Token, TradeType } from '@uniswap/sdk-core';
+import _ from 'lodash';
+
+import {
+  IOnChainQuoteProvider,
+  ITokenListProvider,
+  ITokenProvider,
+  ITokenValidatorProvider,
+  IV2PoolProvider,
+  IV2SubgraphProvider,
+  IV3PoolProvider,
+  IV3SubgraphProvider,
+  TokenValidationResult
+} from '../../../providers';
+import { CurrencyAmount, log, metric, MetricLoggerUnit, routeToString } from '../../../util';
+import { MixedRoute } from '../../router';
+import { AlphaRouterConfig } from '../alpha-router';
+import { MixedRouteWithValidQuote } from '../entities';
+import { computeAllMixedRoutes } from '../functions/compute-all-routes';
+import {
+  CandidatePoolsBySelectionCriteria,
+  getMixedRouteCandidatePools,
+  V2CandidatePools,
+  V3CandidatePools
+} from '../functions/get-candidate-pools';
+import { IGasModel } from '../gas-models';
+
+import { BaseQuoter } from './base-quoter';
+import { GetQuotesResult, GetRoutesResult } from './model';
+
+export class MixedQuoter extends BaseQuoter<[V3CandidatePools, V2CandidatePools], MixedRoute> {
+  protected v3SubgraphProvider: IV3SubgraphProvider;
+  protected v3PoolProvider: IV3PoolProvider;
+  protected v2SubgraphProvider: IV2SubgraphProvider;
+  protected v2PoolProvider: IV2PoolProvider;
+  protected onChainQuoteProvider: IOnChainQuoteProvider;
+
+  constructor(
+    v3SubgraphProvider: IV3SubgraphProvider,
+    v3PoolProvider: IV3PoolProvider,
+    v2SubgraphProvider: IV2SubgraphProvider,
+    v2PoolProvider: IV2PoolProvider,
+    onChainQuoteProvider: IOnChainQuoteProvider,
+    tokenProvider: ITokenProvider,
+    chainId: ChainId,
+    blockedTokenListProvider?: ITokenListProvider,
+    tokenValidatorProvider?: ITokenValidatorProvider
+  ) {
+    super(tokenProvider, chainId, blockedTokenListProvider, tokenValidatorProvider);
+    this.v3SubgraphProvider = v3SubgraphProvider;
+    this.v3PoolProvider = v3PoolProvider;
+    this.v2SubgraphProvider = v2SubgraphProvider;
+    this.v2PoolProvider = v2PoolProvider;
+    this.onChainQuoteProvider = onChainQuoteProvider;
+  }
+
+  protected async getRoutes(
+    tokenIn: Token,
+    tokenOut: Token,
+    v3v2candidatePools: [V3CandidatePools, V2CandidatePools],
+    tradeType: TradeType,
+    routingConfig: AlphaRouterConfig
+  ): Promise<GetRoutesResult<MixedRoute>> {
+    const beforeGetRoutes = Date.now();
+
+    if (tradeType != TradeType.EXACT_INPUT) {
+      throw new Error('Mixed route quotes are not supported for EXACT_OUTPUT');
+    }
+
+    const [v3CandidatePools, v2CandidatePools] = v3v2candidatePools;
+
+    const {
+      V2poolAccessor,
+      V3poolAccessor,
+      candidatePools: mixedRouteCandidatePools,
+    } = await getMixedRouteCandidatePools({
+      v3CandidatePools,
+      v2CandidatePools,
+      tokenProvider: this.tokenProvider,
+      v3poolProvider: this.v3PoolProvider,
+      v2poolProvider: this.v2PoolProvider,
+      routingConfig,
+      chainId: this.chainId
+    });
+
+    const V3poolsRaw = V3poolAccessor.getAllPools();
+    const V2poolsRaw = V2poolAccessor.getAllPools();
+
+    const poolsRaw = [...V3poolsRaw, ...V2poolsRaw];
+
+    const candidatePools = mixedRouteCandidatePools;
+
+    // Drop any pools that contain fee on transfer tokens (not supported by v3) or have issues with being transferred.
+    const pools = await this.applyTokenValidatorToPools(
+      poolsRaw,
+      (
+        token: Currency,
+        tokenValidation: TokenValidationResult | undefined
+      ): boolean => {
+        // If there is no available validation result we assume the token is fine.
+        if (!tokenValidation) {
+          return false;
+        }
+
+        // Only filters out *intermediate* pools that involve tokens that we detect
+        // cant be transferred. This prevents us trying to route through tokens that may
+        // not be transferrable, but allows users to still swap those tokens if they
+        // specify.
+        //
+        if (
+          tokenValidation == TokenValidationResult.STF &&
+          (token.equals(tokenIn) || token.equals(tokenOut))
+        ) {
+          return false;
+        }
+
+        return (
+          tokenValidation == TokenValidationResult.FOT ||
+          tokenValidation == TokenValidationResult.STF
+        );
+      }
+    );
+
+    const { maxSwapsPerPath } = routingConfig;
+
+    const routes = computeAllMixedRoutes(
+      tokenIn,
+      tokenOut,
+      pools,
+      maxSwapsPerPath
+    );
+
+    metric.putMetric('MixedGetRoutesLoad', Date.now() - beforeGetRoutes, MetricLoggerUnit.Milliseconds);
+
+    return {
+      routes,
+      candidatePools
+    };
+  }
+
+  public async getQuotes(
+    routes: MixedRoute[],
+    amounts: CurrencyAmount[],
+    percents: number[],
+    quoteToken: Token,
+    tradeType: TradeType,
+    routingConfig: AlphaRouterConfig,
+    candidatePools?: CandidatePoolsBySelectionCriteria,
+    gasModel?: IGasModel<MixedRouteWithValidQuote>
+  ): Promise<GetQuotesResult> {
+    const beforeGetQuotes = Date.now();
+    log.info('Starting to get mixed quotes');
+    if (gasModel === undefined) {
+      throw new Error('GasModel for MixedRouteWithValidQuote is required to getQuotes');
+    }
+    if (routes.length == 0) {
+      return { routesWithValidQuotes: [], candidatePools };
+    }
+
+    // For all our routes, and all the fractional amounts, fetch quotes on-chain.
+    const quoteFn = this.onChainQuoteProvider.getQuotesManyExactIn.bind(
+      this.onChainQuoteProvider
+    );
+
+    const beforeQuotes = Date.now();
+    log.info(
+      `Getting quotes for mixed for ${routes.length} routes with ${amounts.length} amounts per route.`
+    );
+
+    const { routesWithQuotes } = await quoteFn<MixedRoute>(amounts, routes, {
+      blockNumber: routingConfig.blockNumber,
+    });
+
+    metric.putMetric(
+      'MixedQuotesLoad',
+      Date.now() - beforeQuotes,
+      MetricLoggerUnit.Milliseconds
+    );
+
+    metric.putMetric(
+      'MixedQuotesFetched',
+      _(routesWithQuotes)
+        .map(([, quotes]) => quotes.length)
+        .sum(),
+      MetricLoggerUnit.Count
+    );
+
+    const routesWithValidQuotes = [];
+
+    for (const routeWithQuote of routesWithQuotes) {
+      const [route, quotes] = routeWithQuote;
+
+      for (let i = 0; i < quotes.length; i++) {
+        const percent = percents[i]!;
+        const amountQuote = quotes[i]!;
+        const {
+          quote,
+          amount,
+          sqrtPriceX96AfterList,
+          initializedTicksCrossedList,
+          gasEstimate,
+        } = amountQuote;
+
+        if (
+          !quote ||
+          !sqrtPriceX96AfterList ||
+          !initializedTicksCrossedList ||
+          !gasEstimate
+        ) {
+          log.debug(
+            {
+              route: routeToString(route),
+              amountQuote,
+            },
+            'Dropping a null mixed quote for route.'
+          );
+          continue;
+        }
+
+        const routeWithValidQuote = new MixedRouteWithValidQuote({
+          route,
+          rawQuote: quote,
+          amount,
+          percent,
+          sqrtPriceX96AfterList,
+          initializedTicksCrossedList,
+          quoterGasEstimate: gasEstimate,
+          mixedRouteGasModel: gasModel,
+          quoteToken,
+          tradeType,
+          v3PoolProvider: this.v3PoolProvider,
+          v2PoolProvider: this.v2PoolProvider,
+        });
+
+        routesWithValidQuotes.push(routeWithValidQuote);
+      }
+    }
+
+    metric.putMetric('MixedGetQuotesLoad', Date.now() - beforeGetQuotes, MetricLoggerUnit.Milliseconds);
+
+    return {
+      routesWithValidQuotes,
+      candidatePools
+    };
+  }
+
+}
\ No newline at end of file
diff --git a/lib/sor/routers/alpha-router/quoters/model/index.ts b/lib/sor/routers/alpha-router/quoters/model/index.ts
new file mode 100644
index 0000000..c6b39b2
--- /dev/null
+++ b/lib/sor/routers/alpha-router/quoters/model/index.ts
@@ -0,0 +1 @@
+export * from './results';
\ No newline at end of file
diff --git a/lib/sor/routers/alpha-router/quoters/model/results/get-quotes-result.ts b/lib/sor/routers/alpha-router/quoters/model/results/get-quotes-result.ts
new file mode 100644
index 0000000..f4a3a44
--- /dev/null
+++ b/lib/sor/routers/alpha-router/quoters/model/results/get-quotes-result.ts
@@ -0,0 +1,7 @@
+import { RouteWithValidQuote } from '../../../entities';
+import { CandidatePoolsBySelectionCriteria } from '../../../functions/get-candidate-pools';
+
+export interface GetQuotesResult {
+  routesWithValidQuotes: RouteWithValidQuote[];
+  candidatePools?: CandidatePoolsBySelectionCriteria;
+}
diff --git a/lib/sor/routers/alpha-router/quoters/model/results/get-routes-result.ts b/lib/sor/routers/alpha-router/quoters/model/results/get-routes-result.ts
new file mode 100644
index 0000000..aeece9a
--- /dev/null
+++ b/lib/sor/routers/alpha-router/quoters/model/results/get-routes-result.ts
@@ -0,0 +1,7 @@
+import { MixedRoute, V2Route, V3Route } from '../../../../router';
+import { CandidatePoolsBySelectionCriteria } from '../../../functions/get-candidate-pools';
+
+export interface GetRoutesResult<Route extends V2Route | V3Route | MixedRoute> {
+  routes: Route[];
+  candidatePools: CandidatePoolsBySelectionCriteria;
+}
diff --git a/lib/sor/routers/alpha-router/quoters/model/results/index.ts b/lib/sor/routers/alpha-router/quoters/model/results/index.ts
new file mode 100644
index 0000000..436f313
--- /dev/null
+++ b/lib/sor/routers/alpha-router/quoters/model/results/index.ts
@@ -0,0 +1,2 @@
+export * from './get-routes-result';
+export * from './get-quotes-result';
\ No newline at end of file
diff --git a/lib/sor/routers/alpha-router/quoters/v2-quoter.ts b/lib/sor/routers/alpha-router/quoters/v2-quoter.ts
new file mode 100644
index 0000000..56372d3
--- /dev/null
+++ b/lib/sor/routers/alpha-router/quoters/v2-quoter.ts
@@ -0,0 +1,298 @@
+import { BigNumber } from '@ethersproject/bignumber'
+import { ChainId, Currency, Token, TradeType } from '@uniswap/sdk-core'
+import _ from 'lodash'
+
+import {
+  ITokenListProvider,
+  ITokenProvider,
+  ITokenValidatorProvider,
+  IV2PoolProvider,
+  IV2QuoteProvider,
+  IV2SubgraphProvider,
+  TokenValidationResult,
+} from '../../../providers'
+import { CurrencyAmount, log, metric, MetricLoggerUnit, routeToString } from '../../../util'
+import { V2Route } from '../../router'
+import { AlphaRouterConfig } from '../alpha-router'
+import { V2RouteWithValidQuote } from '../entities'
+import { computeAllV2Routes } from '../functions/compute-all-routes'
+import { CandidatePoolsBySelectionCriteria, V2CandidatePools } from '../functions/get-candidate-pools'
+import { IGasModel, IV2GasModelFactory } from '../gas-models'
+
+import { BaseQuoter } from './base-quoter'
+import { GetQuotesResult } from './model/results/get-quotes-result'
+import { GetRoutesResult } from './model/results/get-routes-result'
+import { CONTEXT } from '../../../../handlers/context'
+
+export class V2Quoter extends BaseQuoter<V2CandidatePools, V2Route> {
+  protected v2SubgraphProvider: IV2SubgraphProvider
+  protected v2PoolProvider: IV2PoolProvider
+  protected v2QuoteProvider: IV2QuoteProvider
+  protected v2GasModelFactory: IV2GasModelFactory
+
+  constructor(
+    v2SubgraphProvider: IV2SubgraphProvider,
+    v2PoolProvider: IV2PoolProvider,
+    v2QuoteProvider: IV2QuoteProvider,
+    v2GasModelFactory: IV2GasModelFactory,
+    tokenProvider: ITokenProvider,
+    chainId: ChainId,
+    blockedTokenListProvider?: ITokenListProvider,
+    tokenValidatorProvider?: ITokenValidatorProvider
+  ) {
+    super(tokenProvider, chainId, blockedTokenListProvider, tokenValidatorProvider)
+    this.v2SubgraphProvider = v2SubgraphProvider
+    this.v2PoolProvider = v2PoolProvider
+    this.v2QuoteProvider = v2QuoteProvider
+    this.v2GasModelFactory = v2GasModelFactory
+  }
+
+  protected async getRoutes(
+    tokenIn: Token,
+    tokenOut: Token,
+    v2CandidatePools: V2CandidatePools,
+    _tradeType: TradeType,
+    routingConfig: AlphaRouterConfig
+  ): Promise<GetRoutesResult<V2Route>> {
+    const getRoutesStart = Date.now()
+
+    const beforeGetRoutes = Date.now()
+    // Fetch all the pools that we will consider routing via. There are thousands
+    // of pools, so we filter them to a set of candidate pools that we expect will
+    // result in good prices.
+
+    const { poolAccessor, candidatePools } = v2CandidatePools
+
+    const beforeGetAllPools = Date.now()
+    const poolsRaw = poolAccessor.getAllPools()
+    const afterGetAllPools = Date.now()
+
+    const beforeTokenValidation = Date.now()
+    // Drop any pools that contain tokens that can not be transferred according to the token validator.
+    const pools = await this.applyTokenValidatorToPools(
+      poolsRaw,
+      (token: Currency, tokenValidation: TokenValidationResult | undefined): boolean => {
+        // If there is no available validation result we assume the token is fine.
+        if (!tokenValidation) {
+          return false
+        }
+
+        // Only filters out *intermediate* pools that involve tokens that we detect
+        // cant be transferred. This prevents us trying to route through tokens that may
+        // not be transferrable, but allows users to still swap those tokens if they
+        // specify.
+        if (tokenValidation == TokenValidationResult.STF && (token.equals(tokenIn) || token.equals(tokenOut))) {
+          return false
+        }
+
+        return tokenValidation == TokenValidationResult.STF
+      }
+    )
+    const afterTokenValidation = Date.now()
+
+    // Given all our candidate pools, compute all the possible ways to route from tokenIn to tokenOut.
+    const { maxSwapsPerPath } = routingConfig
+
+    const computeRoutesStart = Date.now()
+    const routes = computeAllV2Routes(tokenIn, tokenOut, pools, maxSwapsPerPath)
+    const computeRoutesEnd = Date.now()
+
+    const getRoutesEnd = Date.now()
+
+    metric.putMetric('V2GetRoutesLoad', Date.now() - beforeGetRoutes, MetricLoggerUnit.Milliseconds)
+
+    CONTEXT['V2 Quoter: getRoutes'] = {
+      dataSize: {
+        poolsRaw: poolsRaw.length,
+      },
+      durations: {
+        getAllPoolsDuration: afterGetAllPools - beforeGetAllPools,
+        tokenValidationDuration: afterTokenValidation - beforeTokenValidation,
+        computeRoutesDuration: computeRoutesEnd - computeRoutesStart,
+        totalDuration: getRoutesEnd - getRoutesStart,
+      },
+    }
+
+    return {
+      routes,
+      candidatePools,
+    }
+  }
+
+  public async getQuotes(
+    routes: V2Route[],
+    amounts: CurrencyAmount[],
+    percents: number[],
+    quoteToken: Token,
+    tradeType: TradeType,
+    _routingConfig: AlphaRouterConfig,
+    candidatePools?: CandidatePoolsBySelectionCriteria,
+    _gasModel?: IGasModel<V2RouteWithValidQuote>,
+    gasPriceWei?: BigNumber
+  ): Promise<GetQuotesResult> {
+    const startTime = Date.now()
+    const beforeGetQuotes = Date.now()
+    log.info('Starting to get V2 quotes')
+    if (gasPriceWei === undefined) {
+      throw new Error('GasPriceWei for V2Routes is required to getQuotes')
+    }
+    if (routes.length == 0) {
+      return { routesWithValidQuotes: [], candidatePools }
+    }
+
+    // For all our routes, and all the fractional amounts, fetch quotes on-chain.
+    const quoteFn =
+      tradeType == TradeType.EXACT_INPUT
+        ? this.v2QuoteProvider.getQuotesManyExactIn.bind(this.v2QuoteProvider)
+        : this.v2QuoteProvider.getQuotesManyExactOut.bind(this.v2QuoteProvider)
+
+    const beforeQuotes = Date.now()
+    const quoteFnStart = Date.now()
+    log.info(`Getting quotes for V2 for ${routes.length} routes with ${amounts.length} amounts per route.`)
+    const { routesWithQuotes } = await quoteFn(amounts, routes)
+    const quoteFnEnd = Date.now()
+
+    const buildGasModelStart = Date.now()
+
+    const v2GasModel = await this.v2GasModelFactory.buildGasModel({
+      chainId: this.chainId,
+      gasPriceWei,
+      poolProvider: this.v2PoolProvider,
+      token: quoteToken,
+    })
+    const buildGasModelEnd = Date.now()
+
+    metric.putMetric('V2QuotesLoad', Date.now() - beforeQuotes, MetricLoggerUnit.Milliseconds)
+
+    metric.putMetric(
+      'V2QuotesFetched',
+      _(routesWithQuotes)
+        .map(([, quotes]) => quotes.length)
+        .sum(),
+      MetricLoggerUnit.Count
+    )
+
+    const buildRouteStart = Date.now()
+
+    const routesWithValidQuotes = []
+
+    for (const routeWithQuote of routesWithQuotes) {
+      const [route, quotes] = routeWithQuote
+
+      for (let i = 0; i < quotes.length; i++) {
+        const percent = percents[i]!
+        const amountQuote = quotes[i]!
+        const { quote, amount } = amountQuote
+
+        if (!quote) {
+          log.debug(
+            {
+              route: routeToString(route),
+              amountQuote,
+            },
+            'Dropping a null V2 quote for route.'
+          )
+          continue
+        }
+
+        const routeWithValidQuote = new V2RouteWithValidQuote({
+          route,
+          rawQuote: quote,
+          amount,
+          percent,
+          gasModel: v2GasModel,
+          quoteToken,
+          tradeType,
+          v2PoolProvider: this.v2PoolProvider,
+        })
+
+        routesWithValidQuotes.push(routeWithValidQuote)
+      }
+    }
+
+    const buildRouteEnd = Date.now()
+
+    metric.putMetric('V2GetQuotesLoad', Date.now() - beforeGetQuotes, MetricLoggerUnit.Milliseconds)
+
+    const endTime = Date.now()
+    CONTEXT['V2 Quoter: getQuotes'] = {
+      dataSize: {
+        routes: routes.length,
+        amounts: amounts.length,
+      },
+      duration: {
+        buildGasModelDuration: buildGasModelEnd - buildGasModelStart,
+        buildRouteDuration: buildRouteEnd - buildRouteStart,
+        quoteFunctionDuration: quoteFnEnd - quoteFnStart,
+        totalDuration: endTime - startTime,
+      },
+    }
+
+    return {
+      routesWithValidQuotes,
+      candidatePools,
+    }
+  }
+
+  public async refreshRoutesThenGetQuotes(
+    tokenIn: Token,
+    tokenOut: Token,
+    routes: V2Route[],
+    amounts: CurrencyAmount[],
+    percents: number[],
+    quoteToken: Token,
+    tradeType: TradeType,
+    routingConfig: AlphaRouterConfig,
+    gasPriceWei?: BigNumber
+  ): Promise<GetQuotesResult> {
+    const tokenPairs: [Token, Token][] = []
+
+    const buildTokenPairsStart = Date.now()
+    routes.forEach((route) => route.pairs.forEach((pair) => tokenPairs.push([pair.token0, pair.token1])))
+    const buildTokenPairsEnd = Date.now()
+
+    const getPoolsStart = Date.now()
+    const poolAccesor = await this.v2PoolProvider.getPools(tokenPairs, routingConfig)
+    const getPoolsEnd = Date.now()
+
+    const computeV2Routes = Date.now()
+    const fetchedRoutes = computeAllV2Routes(
+      tokenIn,
+      tokenOut,
+      poolAccesor.getAllPools(),
+      routingConfig.maxSwapsPerPath
+    )
+    const computeV2RoutesEnd = Date.now()
+
+    const getQuotesStart = Date.now()
+    const result = await this.getQuotes(
+      fetchedRoutes,
+      amounts,
+      percents,
+      quoteToken,
+      tradeType,
+      routingConfig,
+      undefined,
+      undefined,
+      gasPriceWei
+    )
+    const getQuotesEnd = Date.now()
+
+    CONTEXT['V2 Quoter: refreshRoutesThenGetQuotes'] = {
+      amounts: {
+        routes: routes.length,
+        amounts,
+        percents,
+        tokenPairs: tokenPairs.length,
+      },
+      duration: {
+        buildTokenPairsDuration: buildTokenPairsEnd - buildTokenPairsStart,
+        getPoolsDuration: getPoolsEnd - getPoolsStart,
+        computeV2RoutesDuration: computeV2RoutesEnd - computeV2Routes,
+        getQuotesDuration: getQuotesEnd - getQuotesStart,
+      },
+    }
+
+    return result
+  }
+}
diff --git a/lib/sor/routers/alpha-router/quoters/v3-quoter.ts b/lib/sor/routers/alpha-router/quoters/v3-quoter.ts
new file mode 100644
index 0000000..e289b56
--- /dev/null
+++ b/lib/sor/routers/alpha-router/quoters/v3-quoter.ts
@@ -0,0 +1,218 @@
+import { ChainId, Currency, Token, TradeType } from '@uniswap/sdk-core';
+import _ from 'lodash';
+
+import {
+  IOnChainQuoteProvider,
+  ITokenListProvider,
+  ITokenProvider,
+  ITokenValidatorProvider,
+  IV3PoolProvider,
+  IV3SubgraphProvider,
+  TokenValidationResult
+} from '../../../providers';
+import { CurrencyAmount, log, metric, MetricLoggerUnit, routeToString } from '../../../util';
+import { V3Route } from '../../router';
+import { AlphaRouterConfig } from '../alpha-router';
+import { V3RouteWithValidQuote } from '../entities';
+import { computeAllV3Routes } from '../functions/compute-all-routes';
+import { CandidatePoolsBySelectionCriteria, V3CandidatePools } from '../functions/get-candidate-pools';
+import { IGasModel } from '../gas-models';
+
+import { BaseQuoter } from './base-quoter';
+import { GetQuotesResult } from './model/results/get-quotes-result';
+import { GetRoutesResult } from './model/results/get-routes-result';
+
+export class V3Quoter extends BaseQuoter<V3CandidatePools, V3Route> {
+  protected v3SubgraphProvider: IV3SubgraphProvider;
+  protected v3PoolProvider: IV3PoolProvider;
+  protected onChainQuoteProvider: IOnChainQuoteProvider;
+
+  constructor(
+    v3SubgraphProvider: IV3SubgraphProvider,
+    v3PoolProvider: IV3PoolProvider,
+    onChainQuoteProvider: IOnChainQuoteProvider,
+    tokenProvider: ITokenProvider,
+    chainId: ChainId,
+    blockedTokenListProvider?: ITokenListProvider,
+    tokenValidatorProvider?: ITokenValidatorProvider
+  ) {
+    super(tokenProvider, chainId, blockedTokenListProvider, tokenValidatorProvider);
+    this.v3SubgraphProvider = v3SubgraphProvider;
+    this.v3PoolProvider = v3PoolProvider;
+    this.onChainQuoteProvider = onChainQuoteProvider;
+  }
+
+  protected async getRoutes(
+    tokenIn: Token,
+    tokenOut: Token,
+    v3CandidatePools: V3CandidatePools,
+    _tradeType: TradeType,
+    routingConfig: AlphaRouterConfig
+  ): Promise<GetRoutesResult<V3Route>> {
+    const beforeGetRoutes = Date.now();
+    // Fetch all the pools that we will consider routing via. There are thousands
+    // of pools, so we filter them to a set of candidate pools that we expect will
+    // result in good prices.
+    const { poolAccessor, candidatePools } = v3CandidatePools;
+    const poolsRaw = poolAccessor.getAllPools();
+
+    // Drop any pools that contain fee on transfer tokens (not supported by v3) or have issues with being transferred.
+    const pools = await this.applyTokenValidatorToPools(
+      poolsRaw,
+      (
+        token: Currency,
+        tokenValidation: TokenValidationResult | undefined
+      ): boolean => {
+        // If there is no available validation result we assume the token is fine.
+        if (!tokenValidation) {
+          return false;
+        }
+
+        // Only filters out *intermediate* pools that involve tokens that we detect
+        // cant be transferred. This prevents us trying to route through tokens that may
+        // not be transferrable, but allows users to still swap those tokens if they
+        // specify.
+        //
+        if (
+          tokenValidation == TokenValidationResult.STF &&
+          (token.equals(tokenIn) || token.equals(tokenOut))
+        ) {
+          return false;
+        }
+
+        return (
+          tokenValidation == TokenValidationResult.FOT ||
+          tokenValidation == TokenValidationResult.STF
+        );
+      }
+    );
+
+    // Given all our candidate pools, compute all the possible ways to route from tokenIn to tokenOut.
+    const { maxSwapsPerPath } = routingConfig;
+    const routes = computeAllV3Routes(
+      tokenIn,
+      tokenOut,
+      pools,
+      maxSwapsPerPath
+    );
+
+    metric.putMetric('V3GetRoutesLoad', Date.now() - beforeGetRoutes, MetricLoggerUnit.Milliseconds);
+
+    return {
+      routes,
+      candidatePools,
+    };
+  }
+
+  public async getQuotes(
+    routes: V3Route[],
+    amounts: CurrencyAmount[],
+    percents: number[],
+    quoteToken: Token,
+    tradeType: TradeType,
+    routingConfig: AlphaRouterConfig,
+    candidatePools?: CandidatePoolsBySelectionCriteria,
+    gasModel?: IGasModel<V3RouteWithValidQuote>
+  ): Promise<GetQuotesResult> {
+    const beforeGetQuotes = Date.now();
+    log.info('Starting to get V3 quotes');
+
+    if (gasModel === undefined) {
+      throw new Error('GasModel for V3RouteWithValidQuote is required to getQuotes');
+    }
+
+    if (routes.length == 0) {
+      return { routesWithValidQuotes: [], candidatePools };
+    }
+
+    // For all our routes, and all the fractional amounts, fetch quotes on-chain.
+    const quoteFn =
+      tradeType == TradeType.EXACT_INPUT
+        ? this.onChainQuoteProvider.getQuotesManyExactIn.bind(
+          this.onChainQuoteProvider
+        )
+        : this.onChainQuoteProvider.getQuotesManyExactOut.bind(
+          this.onChainQuoteProvider
+        );
+
+    const beforeQuotes = Date.now();
+    log.info(
+      `Getting quotes for V3 for ${routes.length} routes with ${amounts.length} amounts per route.`
+    );
+
+    const { routesWithQuotes } = await quoteFn<V3Route>(amounts, routes, {
+      blockNumber: routingConfig.blockNumber,
+    });
+
+    metric.putMetric(
+      'V3QuotesLoad',
+      Date.now() - beforeQuotes,
+      MetricLoggerUnit.Milliseconds
+    );
+
+    metric.putMetric(
+      'V3QuotesFetched',
+      _(routesWithQuotes)
+        .map(([, quotes]) => quotes.length)
+        .sum(),
+      MetricLoggerUnit.Count
+    );
+
+    const routesWithValidQuotes = [];
+
+    for (const routeWithQuote of routesWithQuotes) {
+      const [route, quotes] = routeWithQuote;
+
+      for (let i = 0; i < quotes.length; i++) {
+        const percent = percents[i]!;
+        const amountQuote = quotes[i]!;
+        const {
+          quote,
+          amount,
+          sqrtPriceX96AfterList,
+          initializedTicksCrossedList,
+          gasEstimate,
+        } = amountQuote;
+
+        if (
+          !quote ||
+          !sqrtPriceX96AfterList ||
+          !initializedTicksCrossedList ||
+          !gasEstimate
+        ) {
+          log.debug(
+            {
+              route: routeToString(route),
+              amountQuote,
+            },
+            'Dropping a null V3 quote for route.'
+          );
+          continue;
+        }
+
+        const routeWithValidQuote = new V3RouteWithValidQuote({
+          route,
+          rawQuote: quote,
+          amount,
+          percent,
+          sqrtPriceX96AfterList,
+          initializedTicksCrossedList,
+          quoterGasEstimate: gasEstimate,
+          gasModel,
+          quoteToken,
+          tradeType,
+          v3PoolProvider: this.v3PoolProvider,
+        });
+
+        routesWithValidQuotes.push(routeWithValidQuote);
+      }
+    }
+
+    metric.putMetric('V3GetQuotesLoad', Date.now() - beforeGetQuotes, MetricLoggerUnit.Milliseconds);
+
+    return {
+      routesWithValidQuotes,
+      candidatePools
+    };
+  }
+}
\ No newline at end of file
diff --git a/lib/sor/routers/index.ts b/lib/sor/routers/index.ts
new file mode 100644
index 0000000..f560f24
--- /dev/null
+++ b/lib/sor/routers/index.ts
@@ -0,0 +1,4 @@
+export * from '../util/metric';
+export * from './alpha-router';
+export * from './legacy-router';
+export * from './router';
diff --git a/lib/sor/routers/legacy-router/bases.ts b/lib/sor/routers/legacy-router/bases.ts
new file mode 100644
index 0000000..8f98f09
--- /dev/null
+++ b/lib/sor/routers/legacy-router/bases.ts
@@ -0,0 +1,169 @@
+/* eslint-disable @typescript-eslint/no-non-null-assertion */
+import { ChainId, Token } from '@uniswap/sdk-core';
+
+import {
+  BTC_BNB,
+  BUSD_BNB,
+  DAI_AVAX,
+  DAI_BNB,
+  DAI_MAINNET,
+  ITokenProvider,
+  USDC_AVAX,
+  USDC_BASE,
+  USDC_BNB,
+  USDC_MAINNET,
+  USDT_BNB,
+  USDT_MAINNET,
+  WBTC_MAINNET,
+  WMATIC_POLYGON,
+  WMATIC_POLYGON_MUMBAI,
+
+} from '../../providers/token-provider';
+import { WRAPPED_NATIVE_CURRENCY } from '../../util/chains';
+
+type ChainTokenList = {
+  readonly [chainId in ChainId]: Token[];
+};
+
+export const BASES_TO_CHECK_TRADES_AGAINST = (
+  _tokenProvider: ITokenProvider
+): ChainTokenList => {
+  return {
+    [ChainId.MAINNET]: [
+      WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET]!,
+      DAI_MAINNET,
+      USDC_MAINNET,
+      USDT_MAINNET,
+      WBTC_MAINNET,
+    ],
+    [ChainId.GOERLI]: [WRAPPED_NATIVE_CURRENCY[ChainId.GOERLI]!],
+    [ChainId.SEPOLIA]: [WRAPPED_NATIVE_CURRENCY[ChainId.SEPOLIA]!],
+    [ChainId.OPTIMISM]: [WRAPPED_NATIVE_CURRENCY[ChainId.OPTIMISM]!],
+    [ChainId.OPTIMISM_GOERLI]: [
+      WRAPPED_NATIVE_CURRENCY[ChainId.OPTIMISM_GOERLI]!,
+    ],
+    [ChainId.ARBITRUM_ONE]: [WRAPPED_NATIVE_CURRENCY[ChainId.ARBITRUM_ONE]!],
+    [ChainId.ARBITRUM_GOERLI]: [
+      WRAPPED_NATIVE_CURRENCY[ChainId.ARBITRUM_GOERLI]!,
+    ],
+    [ChainId.POLYGON]: [WMATIC_POLYGON],
+    [ChainId.POLYGON_MUMBAI]: [WMATIC_POLYGON_MUMBAI],
+    [ChainId.CELO]: [WRAPPED_NATIVE_CURRENCY[ChainId.CELO]],
+    [ChainId.CELO_ALFAJORES]: [WRAPPED_NATIVE_CURRENCY[ChainId.CELO_ALFAJORES]],
+    [ChainId.GNOSIS]: [WRAPPED_NATIVE_CURRENCY[ChainId.GNOSIS]],
+    [ChainId.MOONBEAM]: [WRAPPED_NATIVE_CURRENCY[ChainId.MOONBEAM]],
+    [ChainId.BNB]: [
+      WRAPPED_NATIVE_CURRENCY[ChainId.BNB]!,
+      BUSD_BNB,
+      DAI_BNB,
+      USDC_BNB,
+      USDT_BNB,
+      BTC_BNB,
+    ],
+    [ChainId.AVALANCHE]: [WRAPPED_NATIVE_CURRENCY[ChainId.AVALANCHE]!, USDC_AVAX, DAI_AVAX],
+    [ChainId.BASE]: [WRAPPED_NATIVE_CURRENCY[ChainId.BASE]!, USDC_BASE],
+    [ChainId.BASE_GOERLI]: [WRAPPED_NATIVE_CURRENCY[ChainId.BASE_GOERLI]!],
+  };
+};
+
+const getBasePairByAddress = async (
+  tokenProvider: ITokenProvider,
+  _chainId: ChainId,
+  fromAddress: string,
+  toAddress: string
+): Promise<{ [tokenAddress: string]: Token[] }> => {
+  const accessor = await tokenProvider.getTokens([toAddress]);
+  const toToken: Token | undefined = accessor.getTokenByAddress(toAddress);
+
+  if (!toToken) return {};
+
+  return {
+    [fromAddress]: [toToken],
+  };
+};
+
+export const ADDITIONAL_BASES = async (
+  tokenProvider: ITokenProvider
+): Promise<{
+  [chainId in ChainId]?: { [tokenAddress: string]: Token[] };
+}> => {
+  return {
+    [ChainId.MAINNET]: {
+      ...(await getBasePairByAddress(
+        tokenProvider,
+        ChainId.MAINNET,
+        '0xA948E86885e12Fb09AfEF8C52142EBDbDf73cD18',
+        '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984'
+      )),
+      ...(await getBasePairByAddress(
+        tokenProvider,
+        ChainId.MAINNET,
+        '0x561a4717537ff4AF5c687328c0f7E90a319705C0',
+        '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984'
+      )),
+      ...(await getBasePairByAddress(
+        tokenProvider,
+        ChainId.MAINNET,
+        '0x956F47F50A910163D8BF957Cf5846D573E7f87CA',
+        '0xc7283b66Eb1EB5FB86327f08e1B5816b0720212B'
+      )),
+      ...(await getBasePairByAddress(
+        tokenProvider,
+        ChainId.MAINNET,
+        '0xc7283b66Eb1EB5FB86327f08e1B5816b0720212B',
+        '0x956F47F50A910163D8BF957Cf5846D573E7f87CA'
+      )),
+      ...(await getBasePairByAddress(
+        tokenProvider,
+        ChainId.MAINNET,
+        '0x853d955acef822db058eb8505911ed77f175b99e',
+        '0x3432b6a60d23ca0dfca7761b7ab56459d9c964d0'
+      )),
+      ...(await getBasePairByAddress(
+        tokenProvider,
+        ChainId.MAINNET,
+        '0x3432b6a60d23ca0dfca7761b7ab56459d9c964d0',
+        '0x853d955acef822db058eb8505911ed77f175b99e'
+      )),
+      ...(await getBasePairByAddress(
+        tokenProvider,
+        ChainId.MAINNET,
+        '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599',
+        '0xeb4c2781e4eba804ce9a9803c67d0893436bb27d'
+      )),
+      ...(await getBasePairByAddress(
+        tokenProvider,
+        ChainId.MAINNET,
+        '0xeb4c2781e4eba804ce9a9803c67d0893436bb27d',
+        '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599'
+      )),
+    },
+  };
+};
+
+/**
+ * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these
+ * tokens.
+ */
+export const CUSTOM_BASES = async (
+  tokenProvider: ITokenProvider
+): Promise<{
+  [chainId in ChainId]?: { [tokenAddress: string]: Token[] };
+}> => {
+  return {
+    [ChainId.MAINNET]: {
+      ...(await getBasePairByAddress(
+        tokenProvider,
+        ChainId.MAINNET,
+        '0xd46ba6d942050d489dbd938a2c909a5d5039a161',
+        DAI_MAINNET.address
+      )),
+      ...(await getBasePairByAddress(
+        tokenProvider,
+        ChainId.MAINNET,
+        '0xd46ba6d942050d489dbd938a2c909a5d5039a161',
+        WRAPPED_NATIVE_CURRENCY[1]!.address
+      )),
+    },
+  };
+};
diff --git a/lib/sor/routers/legacy-router/index.ts b/lib/sor/routers/legacy-router/index.ts
new file mode 100644
index 0000000..ab05697
--- /dev/null
+++ b/lib/sor/routers/legacy-router/index.ts
@@ -0,0 +1 @@
+export * from './legacy-router';
diff --git a/lib/sor/routers/legacy-router/legacy-router.ts b/lib/sor/routers/legacy-router/legacy-router.ts
new file mode 100644
index 0000000..3519ff0
--- /dev/null
+++ b/lib/sor/routers/legacy-router/legacy-router.ts
@@ -0,0 +1,578 @@
+import { BigNumber } from '@ethersproject/bignumber';
+import { Logger } from '@ethersproject/logger';
+import { SwapRouter, Trade } from '@uniswap/router-sdk';
+import { ChainId, Currency, Token, TradeType } from '@uniswap/sdk-core';
+import { FeeAmount, MethodParameters, Pool, Route } from '@uniswap/v3-sdk';
+import _ from 'lodash';
+
+import { IOnChainQuoteProvider, RouteWithQuotes } from '../../providers';
+import { IMulticallProvider } from '../../providers/multicall-provider';
+import {
+  DAI_MAINNET,
+  ITokenProvider,
+  USDC_MAINNET,
+} from '../../providers/token-provider';
+import { IV3PoolProvider } from '../../providers/v3/pool-provider';
+import { SWAP_ROUTER_02_ADDRESSES } from '../../util';
+import { CurrencyAmount } from '../../util/amounts';
+import { log } from '../../util/log';
+import { routeToString } from '../../util/routes';
+import { V3RouteWithValidQuote } from '../alpha-router';
+import { SwapOptionsSwapRouter02, SwapRoute, V3Route } from '../router';
+
+import {
+  ADDITIONAL_BASES,
+  BASES_TO_CHECK_TRADES_AGAINST,
+  CUSTOM_BASES,
+} from './bases';
+
+export type LegacyRouterParams = {
+  chainId: ChainId;
+  multicall2Provider: IMulticallProvider;
+  poolProvider: IV3PoolProvider;
+  quoteProvider: IOnChainQuoteProvider;
+  tokenProvider: ITokenProvider;
+};
+
+// Interface defaults to 2.
+const MAX_HOPS = 2;
+
+export type LegacyRoutingConfig = {
+  blockNumber?: number;
+};
+
+/**
+ * Replicates the router implemented in the V3 interface.
+ * Code is mostly a copy from https://github.com/Uniswap/uniswap-interface/blob/0190b5a408c13016c87e1030ffc59326c085f389/src/hooks/useBestV3Trade.ts#L22-L23
+ * with React/Redux hooks removed, and refactoring to allow re-use in other routers.
+ */
+export class LegacyRouter {
+  protected chainId: ChainId;
+  protected multicall2Provider: IMulticallProvider;
+  protected poolProvider: IV3PoolProvider;
+  protected quoteProvider: IOnChainQuoteProvider;
+  protected tokenProvider: ITokenProvider;
+
+  constructor({
+    chainId,
+    multicall2Provider,
+    poolProvider,
+    quoteProvider,
+    tokenProvider,
+  }: LegacyRouterParams) {
+    this.chainId = chainId;
+    this.multicall2Provider = multicall2Provider;
+    this.poolProvider = poolProvider;
+    this.quoteProvider = quoteProvider;
+    this.tokenProvider = tokenProvider;
+  }
+  public async route(
+    amount: CurrencyAmount,
+    quoteCurrency: Currency,
+    swapType: TradeType,
+    swapConfig?: SwapOptionsSwapRouter02,
+    partialRoutingConfig?: Partial<LegacyRoutingConfig>
+  ): Promise<SwapRoute | null> {
+    if (swapType == TradeType.EXACT_INPUT) {
+      return this.routeExactIn(
+        amount.currency,
+        quoteCurrency,
+        amount,
+        swapConfig,
+        partialRoutingConfig
+      );
+    }
+
+    return this.routeExactOut(
+      quoteCurrency,
+      amount.currency,
+      amount,
+      swapConfig,
+      partialRoutingConfig
+    );
+  }
+
+  public async routeExactIn(
+    currencyIn: Currency,
+    currencyOut: Currency,
+    amountIn: CurrencyAmount,
+    swapConfig?: SwapOptionsSwapRouter02,
+    routingConfig?: LegacyRoutingConfig
+  ): Promise<SwapRoute | null> {
+    const tokenIn = currencyIn.wrapped;
+    const tokenOut = currencyOut.wrapped;
+    const routes = await this.getAllRoutes(tokenIn, tokenOut, routingConfig);
+    const routeQuote = await this.findBestRouteExactIn(
+      amountIn,
+      tokenOut,
+      routes,
+      routingConfig
+    );
+
+    if (!routeQuote) {
+      return null;
+    }
+
+    const trade = this.buildTrade<TradeType.EXACT_INPUT>(
+      currencyIn,
+      currencyOut,
+      TradeType.EXACT_INPUT,
+      routeQuote
+    );
+
+    return {
+      quote: routeQuote.quote,
+      quoteGasAdjusted: routeQuote.quote,
+      route: [routeQuote],
+      estimatedGasUsed: BigNumber.from(0),
+      estimatedGasUsedQuoteToken: CurrencyAmount.fromFractionalAmount(
+        tokenOut,
+        0,
+        1
+      ),
+      estimatedGasUsedUSD: CurrencyAmount.fromFractionalAmount(
+        DAI_MAINNET!,
+        0,
+        1
+      ),
+      gasPriceWei: BigNumber.from(0),
+      trade,
+      methodParameters: swapConfig
+        ? {
+            ...this.buildMethodParameters(trade, swapConfig),
+            to: SWAP_ROUTER_02_ADDRESSES(this.chainId),
+          }
+        : undefined,
+      blockNumber: BigNumber.from(0),
+    };
+  }
+
+  public async routeExactOut(
+    currencyIn: Currency,
+    currencyOut: Currency,
+    amountOut: CurrencyAmount,
+    swapConfig?: SwapOptionsSwapRouter02,
+    routingConfig?: LegacyRoutingConfig
+  ): Promise<SwapRoute | null> {
+    const tokenIn = currencyIn.wrapped;
+    const tokenOut = currencyOut.wrapped;
+    const routes = await this.getAllRoutes(tokenIn, tokenOut, routingConfig);
+    const routeQuote = await this.findBestRouteExactOut(
+      amountOut,
+      tokenIn,
+      routes,
+      routingConfig
+    );
+
+    if (!routeQuote) {
+      return null;
+    }
+
+    const trade = this.buildTrade<TradeType.EXACT_OUTPUT>(
+      currencyIn,
+      currencyOut,
+      TradeType.EXACT_OUTPUT,
+      routeQuote
+    );
+
+    return {
+      quote: routeQuote.quote,
+      quoteGasAdjusted: routeQuote.quote,
+      route: [routeQuote],
+      estimatedGasUsed: BigNumber.from(0),
+      estimatedGasUsedQuoteToken: CurrencyAmount.fromFractionalAmount(
+        tokenIn,
+        0,
+        1
+      ),
+      estimatedGasUsedUSD: CurrencyAmount.fromFractionalAmount(
+        DAI_MAINNET,
+        0,
+        1
+      ),
+      gasPriceWei: BigNumber.from(0),
+      trade,
+      methodParameters: swapConfig
+        ? {
+            ...this.buildMethodParameters(trade, swapConfig),
+            to: SWAP_ROUTER_02_ADDRESSES(this.chainId),
+          }
+        : undefined,
+      blockNumber: BigNumber.from(0),
+    };
+  }
+
+  private async findBestRouteExactIn(
+    amountIn: CurrencyAmount,
+    tokenOut: Token,
+    routes: V3Route[],
+    routingConfig?: LegacyRoutingConfig
+  ): Promise<V3RouteWithValidQuote | null> {
+    const { routesWithQuotes: quotesRaw } =
+      await this.quoteProvider.getQuotesManyExactIn<V3Route>(
+        [amountIn],
+        routes,
+        {
+          blockNumber: routingConfig?.blockNumber,
+        }
+      );
+
+    const quotes100Percent = _.map(
+      quotesRaw,
+      ([route, quotes]: RouteWithQuotes<V3Route>) =>
+        `${routeToString(route)} : ${quotes[0]?.quote?.toString()}`
+    );
+    log.info({ quotes100Percent }, '100% Quotes');
+
+    const bestQuote = await this.getBestQuote(
+      routes,
+      quotesRaw,
+      tokenOut,
+      TradeType.EXACT_INPUT
+    );
+
+    return bestQuote;
+  }
+
+  private async findBestRouteExactOut(
+    amountOut: CurrencyAmount,
+    tokenIn: Token,
+    routes: V3Route[],
+    routingConfig?: LegacyRoutingConfig
+  ): Promise<V3RouteWithValidQuote | null> {
+    const { routesWithQuotes: quotesRaw } =
+      await this.quoteProvider.getQuotesManyExactOut<V3Route>(
+        [amountOut],
+        routes,
+        {
+          blockNumber: routingConfig?.blockNumber,
+        }
+      );
+    const bestQuote = await this.getBestQuote(
+      routes,
+      quotesRaw,
+      tokenIn,
+      TradeType.EXACT_OUTPUT
+    );
+
+    return bestQuote;
+  }
+
+  private async getBestQuote(
+    routes: V3Route[],
+    quotesRaw: RouteWithQuotes<V3Route>[],
+    quoteToken: Token,
+    routeType: TradeType
+  ): Promise<V3RouteWithValidQuote | null> {
+    log.debug(
+      `Got ${
+        _.filter(quotesRaw, ([_, quotes]) => !!quotes[0]).length
+      } valid quotes from ${routes.length} possible routes.`
+    );
+
+    const routeQuotesRaw: {
+      route: V3Route;
+      quote: BigNumber;
+      amount: CurrencyAmount;
+    }[] = [];
+
+    for (let i = 0; i < quotesRaw.length; i++) {
+      const [route, quotes] = quotesRaw[i]!;
+      const { quote, amount } = quotes[0]!;
+
+      if (!quote) {
+        Logger.globalLogger().debug(`No quote for ${routeToString(route)}`);
+        continue;
+      }
+
+      routeQuotesRaw.push({ route, quote, amount });
+    }
+
+    if (routeQuotesRaw.length == 0) {
+      return null;
+    }
+
+    routeQuotesRaw.sort((routeQuoteA, routeQuoteB) => {
+      if (routeType == TradeType.EXACT_INPUT) {
+        return routeQuoteA.quote.gt(routeQuoteB.quote) ? -1 : 1;
+      } else {
+        return routeQuoteA.quote.lt(routeQuoteB.quote) ? -1 : 1;
+      }
+    });
+
+    const routeQuotes = _.map(routeQuotesRaw, ({ route, quote, amount }) => {
+      return new V3RouteWithValidQuote({
+        route,
+        rawQuote: quote,
+        amount,
+        percent: 100,
+        gasModel: {
+          estimateGasCost: () => ({
+            gasCostInToken: CurrencyAmount.fromRawAmount(quoteToken, 0),
+            gasCostInUSD: CurrencyAmount.fromRawAmount(USDC_MAINNET, 0),
+            gasEstimate: BigNumber.from(0),
+          }),
+        },
+        sqrtPriceX96AfterList: [],
+        initializedTicksCrossedList: [],
+        quoterGasEstimate: BigNumber.from(0),
+        tradeType: routeType,
+        quoteToken,
+        v3PoolProvider: this.poolProvider,
+      });
+    });
+
+    for (const rq of routeQuotes) {
+      log.debug(
+        `Quote: ${rq.amount.toFixed(
+          Math.min(rq.amount.currency.decimals, 2)
+        )} Route: ${routeToString(rq.route)}`
+      );
+    }
+
+    return routeQuotes[0]!;
+  }
+
+  private async getAllRoutes(
+    tokenIn: Token,
+    tokenOut: Token,
+    routingConfig?: LegacyRoutingConfig
+  ): Promise<V3Route[]> {
+    const tokenPairs: [Token, Token, FeeAmount][] =
+      await this.getAllPossiblePairings(tokenIn, tokenOut);
+
+    const poolAccessor = await this.poolProvider.getPools(tokenPairs, {
+      blockNumber: routingConfig?.blockNumber,
+    });
+    const pools = poolAccessor.getAllPools();
+
+    const routes: V3Route[] = this.computeAllRoutes(
+      tokenIn,
+      tokenOut,
+      pools,
+      this.chainId,
+      [],
+      [],
+      tokenIn,
+      MAX_HOPS
+    );
+
+    log.info(
+      { routes: _.map(routes, routeToString) },
+      `Computed ${routes.length} possible routes.`
+    );
+
+    return routes;
+  }
+
+  private async getAllPossiblePairings(
+    tokenIn: Token,
+    tokenOut: Token
+  ): Promise<[Token, Token, FeeAmount][]> {
+    const common =
+      BASES_TO_CHECK_TRADES_AGAINST(this.tokenProvider)[this.chainId] ?? [];
+    const additionalA =
+      (await ADDITIONAL_BASES(this.tokenProvider))[this.chainId]?.[
+        tokenIn.address
+      ] ?? [];
+    const additionalB =
+      (await ADDITIONAL_BASES(this.tokenProvider))[this.chainId]?.[
+        tokenOut.address
+      ] ?? [];
+    const bases = [...common, ...additionalA, ...additionalB];
+
+    const basePairs: [Token, Token][] = _.flatMap(
+      bases,
+      (base): [Token, Token][] => bases.map((otherBase) => [base, otherBase])
+    );
+
+    const customBases = (await CUSTOM_BASES(this.tokenProvider))[this.chainId];
+
+    const allPairs: [Token, Token, FeeAmount][] = _([
+      // the direct pair
+      [tokenIn, tokenOut],
+      // token A against all bases
+      ...bases.map((base): [Token, Token] => [tokenIn, base]),
+      // token B against all bases
+      ...bases.map((base): [Token, Token] => [tokenOut, base]),
+      // each base against all bases
+      ...basePairs,
+    ])
+      .filter((tokens): tokens is [Token, Token] =>
+        Boolean(tokens[0] && tokens[1])
+      )
+      .filter(
+        ([tokenA, tokenB]) =>
+          tokenA.address !== tokenB.address && !tokenA.equals(tokenB)
+      )
+      .filter(([tokenA, tokenB]) => {
+        const customBasesA: Token[] | undefined = customBases?.[tokenA.address];
+        const customBasesB: Token[] | undefined = customBases?.[tokenB.address];
+
+        if (!customBasesA && !customBasesB) return true;
+
+        if (customBasesA && !customBasesA.find((base) => tokenB.equals(base)))
+          return false;
+        if (customBasesB && !customBasesB.find((base) => tokenA.equals(base)))
+          return false;
+
+        return true;
+      })
+      .flatMap<[Token, Token, FeeAmount]>(([tokenA, tokenB]) => {
+        return [
+          [tokenA, tokenB, FeeAmount.LOW],
+          [tokenA, tokenB, FeeAmount.MEDIUM],
+          [tokenA, tokenB, FeeAmount.HIGH],
+        ];
+      })
+      .value();
+
+    return allPairs;
+  }
+
+  private computeAllRoutes(
+    tokenIn: Token,
+    tokenOut: Token,
+    pools: Pool[],
+    chainId: ChainId,
+    currentPath: Pool[] = [],
+    allPaths: V3Route[] = [],
+    startTokenIn: Token = tokenIn,
+    maxHops = 2
+  ): V3Route[] {
+    for (const pool of pools) {
+      if (currentPath.indexOf(pool) !== -1 || !pool.involvesToken(tokenIn))
+        continue;
+
+      const outputToken = pool.token0.equals(tokenIn)
+        ? pool.token1
+        : pool.token0;
+      if (outputToken.equals(tokenOut)) {
+        allPaths.push(
+          new V3Route([...currentPath, pool], startTokenIn, tokenOut)
+        );
+      } else if (maxHops > 1) {
+        this.computeAllRoutes(
+          outputToken,
+          tokenOut,
+          pools,
+          chainId,
+          [...currentPath, pool],
+          allPaths,
+          startTokenIn,
+          maxHops - 1
+        );
+      }
+    }
+
+    return allPaths;
+  }
+
+  private buildTrade<TTradeType extends TradeType>(
+    tokenInCurrency: Currency,
+    tokenOutCurrency: Currency,
+    tradeType: TTradeType,
+    routeAmount: V3RouteWithValidQuote
+  ): Trade<Currency, Currency, TTradeType> {
+    const { route, amount, quote } = routeAmount;
+
+    // The route, amount and quote are all in terms of wrapped tokens.
+    // When constructing the Trade object the inputAmount/outputAmount must
+    // use native currencies if necessary. This is so that the Trade knows to wrap/unwrap.
+    if (tradeType == TradeType.EXACT_INPUT) {
+      const amountCurrency = CurrencyAmount.fromFractionalAmount(
+        tokenInCurrency,
+        amount.numerator,
+        amount.denominator
+      );
+      const quoteCurrency = CurrencyAmount.fromFractionalAmount(
+        tokenOutCurrency,
+        quote.numerator,
+        quote.denominator
+      );
+
+      const routeCurrency = new Route(
+        route.pools,
+        amountCurrency.currency,
+        quoteCurrency.currency
+      );
+
+      return new Trade({
+        v3Routes: [
+          {
+            routev3: routeCurrency,
+            inputAmount: amountCurrency,
+            outputAmount: quoteCurrency,
+          },
+        ],
+        v2Routes: [],
+        tradeType: tradeType,
+      });
+    } else {
+      const quoteCurrency = CurrencyAmount.fromFractionalAmount(
+        tokenInCurrency,
+        quote.numerator,
+        quote.denominator
+      );
+
+      const amountCurrency = CurrencyAmount.fromFractionalAmount(
+        tokenOutCurrency,
+        amount.numerator,
+        amount.denominator
+      );
+
+      const routeCurrency = new Route(
+        route.pools,
+        quoteCurrency.currency,
+        amountCurrency.currency
+      );
+
+      return new Trade({
+        v3Routes: [
+          {
+            routev3: routeCurrency,
+            inputAmount: quoteCurrency,
+            outputAmount: amountCurrency,
+          },
+        ],
+        v2Routes: [],
+        tradeType: tradeType,
+      });
+    }
+  }
+
+  private buildMethodParameters<TTradeType extends TradeType>(
+    trade: Trade<Currency, Currency, TTradeType>,
+    swapConfig: SwapOptionsSwapRouter02
+  ): MethodParameters {
+    const { recipient, slippageTolerance, deadline } = swapConfig;
+
+    const methodParameters = SwapRouter.swapCallParameters(trade, {
+      recipient,
+      slippageTolerance,
+      deadlineOrPreviousBlockhash: deadline,
+      // ...(signatureData
+      //   ? {
+      //       inputTokenPermit:
+      //         'allowed' in signatureData
+      //           ? {
+      //               expiry: signatureData.deadline,
+      //               nonce: signatureData.nonce,
+      //               s: signatureData.s,
+      //               r: signatureData.r,
+      //               v: signatureData.v as any,
+      //             }
+      //           : {
+      //               deadline: signatureData.deadline,
+      //               amount: signatureData.amount,
+      //               s: signatureData.s,
+      //               r: signatureData.r,
+      //               v: signatureData.v as any,
+      //             },
+      //     }
+      //   : {}),
+    });
+
+    return methodParameters;
+  }
+}
diff --git a/lib/sor/routers/router.ts b/lib/sor/routers/router.ts
new file mode 100644
index 0000000..44dcf4f
--- /dev/null
+++ b/lib/sor/routers/router.ts
@@ -0,0 +1,207 @@
+import { BigNumber } from '@ethersproject/bignumber'
+import { CondensedAddLiquidityOptions, MixedRouteSDK, Protocol, Trade } from '@uniswap/router-sdk'
+import { Currency, Fraction, Percent, Token, TradeType } from '@uniswap/sdk-core'
+import { SwapOptions as UniversalRouterSwapOptions } from '@uniswap/universal-router-sdk'
+import { Route as V2RouteRaw } from '@uniswap/v2-sdk'
+import { Pool, Position, MethodParameters as SDKMethodParameters, Route as V3RouteRaw } from '@uniswap/v3-sdk'
+
+import { SimulationStatus } from '../providers'
+import { CurrencyAmount } from '../util/amounts'
+
+import { RouteWithValidQuote } from './alpha-router'
+
+export class V3Route extends V3RouteRaw<Token, Token> {
+  protocol: Protocol.V3 = Protocol.V3
+}
+export class V2Route extends V2RouteRaw<Token, Token> {
+  protocol: Protocol.V2 = Protocol.V2
+}
+export class MixedRoute extends MixedRouteSDK<Token, Token> {
+  protocol: Protocol.MIXED = Protocol.MIXED
+}
+
+export type SwapRoute = {
+  /**
+   * The quote for the swap.
+   * For EXACT_IN swaps this will be an amount of token out.
+   * For EXACT_OUT this will be an amount of token in.
+   */
+  quote: CurrencyAmount
+  /**
+   * The quote adjusted for the estimated gas used by the swap.
+   * This is computed by estimating the amount of gas used by the swap, converting
+   * this estimate to be in terms of the quote token, and subtracting that from the quote.
+   * i.e. quoteGasAdjusted = quote - estimatedGasUsedQuoteToken
+   */
+  quoteGasAdjusted: CurrencyAmount
+  /**
+   * The estimate of the gas used by the swap.
+   */
+  estimatedGasUsed: BigNumber
+  /**
+   * The estimate of the gas used by the swap in terms of the quote token.
+   */
+  estimatedGasUsedQuoteToken: CurrencyAmount
+  /**
+   * The estimate of the gas used by the swap in USD.
+   */
+  estimatedGasUsedUSD: CurrencyAmount
+  /**
+   * The gas price used when computing quoteGasAdjusted, estimatedGasUsedQuoteToken, etc.
+   */
+  gasPriceWei: BigNumber
+  /**
+   * The Trade object representing the swap.
+   */
+  trade: Trade<Currency, Currency, TradeType>
+  /**
+   * The routes of the swap.
+   */
+  route: RouteWithValidQuote[]
+  /**
+   * The block number used when computing the swap.
+   */
+  blockNumber: BigNumber
+  /**
+   * The calldata to execute the swap. Only returned if swapConfig was provided when calling the router.
+   */
+  methodParameters?: MethodParameters
+  /**
+   * Enum that is returned if simulation was requested
+   * 0 if simulation was not attempted
+   * 1 if simulation was attempted and failed
+   * 2 if simulation was successful (simulated gas estimates are returned)
+   */
+  simulationStatus?: SimulationStatus
+}
+
+export type MethodParameters = SDKMethodParameters & { to: string }
+
+export type SwapToRatioRoute = SwapRoute & {
+  optimalRatio: Fraction
+  postSwapTargetPool: Pool
+}
+
+export enum SwapToRatioStatus {
+  SUCCESS = 1,
+  NO_ROUTE_FOUND = 2,
+  NO_SWAP_NEEDED = 3,
+}
+
+export type SwapToRatioSuccess = {
+  status: SwapToRatioStatus.SUCCESS
+  result: SwapToRatioRoute
+}
+
+export type SwapToRatioFail = {
+  status: SwapToRatioStatus.NO_ROUTE_FOUND
+  error: string
+}
+
+export type SwapToRatioNoSwapNeeded = {
+  status: SwapToRatioStatus.NO_SWAP_NEEDED
+}
+
+export type SwapToRatioResponse = SwapToRatioSuccess | SwapToRatioFail | SwapToRatioNoSwapNeeded
+
+export enum SwapType {
+  UNIVERSAL_ROUTER,
+  SWAP_ROUTER_02,
+}
+
+// Swap options for Universal Router and Permit2.
+export type SwapOptionsUniversalRouter = UniversalRouterSwapOptions & {
+  type: SwapType.UNIVERSAL_ROUTER
+  simulate?: { fromAddress: string }
+}
+
+// Swap options for router-sdk and SwapRouter02.
+export type SwapOptionsSwapRouter02 = {
+  type: SwapType.SWAP_ROUTER_02
+  recipient: string
+  slippageTolerance: Percent
+  deadline: number
+  simulate?: { fromAddress: string }
+  inputTokenPermit?: {
+    v: 0 | 1 | 27 | 28
+    r: string
+    s: string
+  } & (
+    | {
+        amount: string
+        deadline: string
+      }
+    | {
+        nonce: string
+        expiry: string
+      }
+  )
+}
+
+export type SwapOptions = SwapOptionsUniversalRouter | SwapOptionsSwapRouter02
+
+// Config passed in to determine configurations on acceptable liquidity
+// to add to a position and max iterations on the route-finding algorithm
+export type SwapAndAddConfig = {
+  maxIterations: number
+  ratioErrorTolerance: Fraction
+}
+
+// Options for executing the swap and add.
+// If provided, calldata for executing the swap and add will also be returned.
+export type SwapAndAddOptions = {
+  swapOptions: SwapOptionsSwapRouter02
+  addLiquidityOptions: CondensedAddLiquidityOptions
+}
+
+// SwapAndAddOptions plus all other parameters needed to encode the
+// on-chain swap-and-add process
+export type SwapAndAddParameters = {
+  // starting balance for tokenIn which will inform the tokenIn position amount
+  initialBalanceTokenIn: CurrencyAmount
+  // starting balance for tokenOut which will inform the tokenOut position amount
+  initialBalanceTokenOut: CurrencyAmount
+  // position details needed to create a new Position with the known liquidity amounts
+  preLiquidityPosition: Position
+}
+
+/**
+ * Provides functionality for finding optimal swap routes on the Uniswap protocol.
+ *
+ * @export
+ * @abstract
+ * @class IRouter
+ */
+export abstract class IRouter<RoutingConfig> {
+  /**
+   * Finds the optimal way to swap tokens, and returns the route as well as a quote for the swap.
+   * Considers split routes, multi-hop swaps, and gas costs.
+   *
+   * @abstract
+   * @param amount The amount specified by the user. For EXACT_IN swaps, this is the input token amount. For EXACT_OUT swaps, this is the output token.
+   * @param quoteCurrency The currency of the token we are returning a quote for. For EXACT_IN swaps, this is the output token. For EXACT_OUT, this is the input token.
+   * @param tradeType The type of the trade, either exact in or exact out.
+   * @param [swapOptions] Optional config for executing the swap. If provided, calldata for executing the swap will also be returned.
+   * @param [partialRoutingConfig] Optional config for finding the optimal route.
+   * @returns The swap route.
+   */
+  abstract route(
+    amount: CurrencyAmount,
+    quoteCurrency: Currency,
+    swapType: TradeType,
+    swapOptions?: SwapOptions,
+    partialRoutingConfig?: Partial<RoutingConfig>,
+    cannedRoutingConfig?: Partial<RoutingConfig>
+  ): Promise<SwapRoute | null>
+}
+
+export abstract class ISwapToRatio<RoutingConfig, SwapAndAddConfig> {
+  abstract routeToRatio(
+    token0Balance: CurrencyAmount,
+    token1Balance: CurrencyAmount,
+    position: Position,
+    swapAndAddConfig: SwapAndAddConfig,
+    swapAndAddOptions?: SwapAndAddOptions,
+    routingConfig?: RoutingConfig
+  ): Promise<SwapToRatioResponse>
+}
diff --git a/lib/sor/types/other/Erc20.d.ts b/lib/sor/types/other/Erc20.d.ts
new file mode 100644
index 0000000..188c9fd
--- /dev/null
+++ b/lib/sor/types/other/Erc20.d.ts
@@ -0,0 +1,335 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface Erc20Interface extends ethers.utils.Interface {
+  functions: {
+    "name()": FunctionFragment;
+    "approve(address,uint256)": FunctionFragment;
+    "totalSupply()": FunctionFragment;
+    "transferFrom(address,address,uint256)": FunctionFragment;
+    "decimals()": FunctionFragment;
+    "balanceOf(address)": FunctionFragment;
+    "symbol()": FunctionFragment;
+    "transfer(address,uint256)": FunctionFragment;
+    "allowance(address,address)": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "name", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "approve",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "totalSupply",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "transferFrom",
+    values: [string, string, BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
+  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
+  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "transfer",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "allowance",
+    values: [string, string]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "totalSupply",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "transferFrom",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
+
+  events: {
+    "Approval(address,address,uint256)": EventFragment;
+    "Transfer(address,address,uint256)": EventFragment;
+  };
+
+  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
+}
+
+export class Erc20 extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: Erc20Interface;
+
+  functions: {
+    name(overrides?: CallOverrides): Promise<[string]>;
+
+    approve(
+      _spender: string,
+      _value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    transferFrom(
+      _from: string,
+      _to: string,
+      _value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    decimals(overrides?: CallOverrides): Promise<[number]>;
+
+    balanceOf(
+      _owner: string,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber] & { balance: BigNumber }>;
+
+    symbol(overrides?: CallOverrides): Promise<[string]>;
+
+    transfer(
+      _to: string,
+      _value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    allowance(
+      _owner: string,
+      _spender: string,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber]>;
+  };
+
+  name(overrides?: CallOverrides): Promise<string>;
+
+  approve(
+    _spender: string,
+    _value: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+  transferFrom(
+    _from: string,
+    _to: string,
+    _value: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  decimals(overrides?: CallOverrides): Promise<number>;
+
+  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+  symbol(overrides?: CallOverrides): Promise<string>;
+
+  transfer(
+    _to: string,
+    _value: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  allowance(
+    _owner: string,
+    _spender: string,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  callStatic: {
+    name(overrides?: CallOverrides): Promise<string>;
+
+    approve(
+      _spender: string,
+      _value: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+    transferFrom(
+      _from: string,
+      _to: string,
+      _value: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    decimals(overrides?: CallOverrides): Promise<number>;
+
+    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    symbol(overrides?: CallOverrides): Promise<string>;
+
+    transfer(
+      _to: string,
+      _value: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    allowance(
+      _owner: string,
+      _spender: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+  };
+
+  filters: {
+    Approval(
+      owner?: string | null,
+      spender?: string | null,
+      value?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber],
+      { owner: string; spender: string; value: BigNumber }
+    >;
+
+    Transfer(
+      from?: string | null,
+      to?: string | null,
+      value?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber],
+      { from: string; to: string; value: BigNumber }
+    >;
+  };
+
+  estimateGas: {
+    name(overrides?: CallOverrides): Promise<BigNumber>;
+
+    approve(
+      _spender: string,
+      _value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+    transferFrom(
+      _from: string,
+      _to: string,
+      _value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    decimals(overrides?: CallOverrides): Promise<BigNumber>;
+
+    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    symbol(overrides?: CallOverrides): Promise<BigNumber>;
+
+    transfer(
+      _to: string,
+      _value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    allowance(
+      _owner: string,
+      _spender: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    approve(
+      _spender: string,
+      _value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    transferFrom(
+      _from: string,
+      _to: string,
+      _value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    balanceOf(
+      _owner: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    transfer(
+      _to: string,
+      _value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    allowance(
+      _owner: string,
+      _spender: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/GasDataArbitrum.d.ts b/lib/sor/types/other/GasDataArbitrum.d.ts
new file mode 100644
index 0000000..546d40c
--- /dev/null
+++ b/lib/sor/types/other/GasDataArbitrum.d.ts
@@ -0,0 +1,110 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  CallOverrides,
+  ethers,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface GasDataArbitrumInterface extends ethers.utils.Interface {
+  functions: {
+    "getPricesInWei()": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "getPricesInWei",
+    values?: undefined
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "getPricesInWei",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class GasDataArbitrum extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: GasDataArbitrumInterface;
+
+  functions: {
+    getPricesInWei(
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
+    >;
+  };
+
+  getPricesInWei(
+    overrides?: CallOverrides
+  ): Promise<
+    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
+  >;
+
+  callStatic: {
+    getPricesInWei(
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
+    >;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    getPricesInWei(overrides?: CallOverrides): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    getPricesInWei(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/GasPriceOracle.d.ts b/lib/sor/types/other/GasPriceOracle.d.ts
new file mode 100644
index 0000000..5a512b0
--- /dev/null
+++ b/lib/sor/types/other/GasPriceOracle.d.ts
@@ -0,0 +1,474 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface GasPriceOracleInterface extends ethers.utils.Interface {
+  functions: {
+    "decimals()": FunctionFragment;
+    "gasPrice()": FunctionFragment;
+    "getL1Fee(bytes)": FunctionFragment;
+    "getL1GasUsed(bytes)": FunctionFragment;
+    "l1BaseFee()": FunctionFragment;
+    "overhead()": FunctionFragment;
+    "owner()": FunctionFragment;
+    "renounceOwnership()": FunctionFragment;
+    "scalar()": FunctionFragment;
+    "setDecimals(uint256)": FunctionFragment;
+    "setGasPrice(uint256)": FunctionFragment;
+    "setL1BaseFee(uint256)": FunctionFragment;
+    "setOverhead(uint256)": FunctionFragment;
+    "setScalar(uint256)": FunctionFragment;
+    "transferOwnership(address)": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
+  encodeFunctionData(functionFragment: "gasPrice", values?: undefined): string;
+  encodeFunctionData(functionFragment: "getL1Fee", values: [BytesLike]): string;
+  encodeFunctionData(
+    functionFragment: "getL1GasUsed",
+    values: [BytesLike]
+  ): string;
+  encodeFunctionData(functionFragment: "l1BaseFee", values?: undefined): string;
+  encodeFunctionData(functionFragment: "overhead", values?: undefined): string;
+  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "renounceOwnership",
+    values?: undefined
+  ): string;
+  encodeFunctionData(functionFragment: "scalar", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "setDecimals",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "setGasPrice",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "setL1BaseFee",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "setOverhead",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "setScalar",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "transferOwnership",
+    values: [string]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "gasPrice", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "getL1Fee", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "getL1GasUsed",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "l1BaseFee", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "overhead", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "renounceOwnership",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "scalar", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "setDecimals",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "setGasPrice",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "setL1BaseFee",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "setOverhead",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "setScalar", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "transferOwnership",
+    data: BytesLike
+  ): Result;
+
+  events: {
+    "DecimalsUpdated(uint256)": EventFragment;
+    "GasPriceUpdated(uint256)": EventFragment;
+    "L1BaseFeeUpdated(uint256)": EventFragment;
+    "OverheadUpdated(uint256)": EventFragment;
+    "OwnershipTransferred(address,address)": EventFragment;
+    "ScalarUpdated(uint256)": EventFragment;
+  };
+
+  getEvent(nameOrSignatureOrTopic: "DecimalsUpdated"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "GasPriceUpdated"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "L1BaseFeeUpdated"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "OverheadUpdated"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "ScalarUpdated"): EventFragment;
+}
+
+export class GasPriceOracle extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: GasPriceOracleInterface;
+
+  functions: {
+    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    gasPrice(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    getL1Fee(_data: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    getL1GasUsed(
+      _data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber]>;
+
+    l1BaseFee(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    overhead(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    owner(overrides?: CallOverrides): Promise<[string]>;
+
+    renounceOwnership(
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    scalar(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    setDecimals(
+      _decimals: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    setGasPrice(
+      _gasPrice: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    setL1BaseFee(
+      _baseFee: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    setOverhead(
+      _overhead: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    setScalar(
+      _scalar: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    transferOwnership(
+      newOwner: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  decimals(overrides?: CallOverrides): Promise<BigNumber>;
+
+  gasPrice(overrides?: CallOverrides): Promise<BigNumber>;
+
+  getL1Fee(_data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
+
+  getL1GasUsed(_data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
+
+  l1BaseFee(overrides?: CallOverrides): Promise<BigNumber>;
+
+  overhead(overrides?: CallOverrides): Promise<BigNumber>;
+
+  owner(overrides?: CallOverrides): Promise<string>;
+
+  renounceOwnership(
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  scalar(overrides?: CallOverrides): Promise<BigNumber>;
+
+  setDecimals(
+    _decimals: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  setGasPrice(
+    _gasPrice: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  setL1BaseFee(
+    _baseFee: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  setOverhead(
+    _overhead: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  setScalar(
+    _scalar: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  transferOwnership(
+    newOwner: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    decimals(overrides?: CallOverrides): Promise<BigNumber>;
+
+    gasPrice(overrides?: CallOverrides): Promise<BigNumber>;
+
+    getL1Fee(_data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
+
+    getL1GasUsed(
+      _data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    l1BaseFee(overrides?: CallOverrides): Promise<BigNumber>;
+
+    overhead(overrides?: CallOverrides): Promise<BigNumber>;
+
+    owner(overrides?: CallOverrides): Promise<string>;
+
+    renounceOwnership(overrides?: CallOverrides): Promise<void>;
+
+    scalar(overrides?: CallOverrides): Promise<BigNumber>;
+
+    setDecimals(
+      _decimals: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    setGasPrice(
+      _gasPrice: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    setL1BaseFee(
+      _baseFee: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    setOverhead(
+      _overhead: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    setScalar(_scalar: BigNumberish, overrides?: CallOverrides): Promise<void>;
+
+    transferOwnership(
+      newOwner: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {
+    DecimalsUpdated(
+      undefined?: null
+    ): TypedEventFilter<[BigNumber], { arg0: BigNumber }>;
+
+    GasPriceUpdated(
+      undefined?: null
+    ): TypedEventFilter<[BigNumber], { arg0: BigNumber }>;
+
+    L1BaseFeeUpdated(
+      undefined?: null
+    ): TypedEventFilter<[BigNumber], { arg0: BigNumber }>;
+
+    OverheadUpdated(
+      undefined?: null
+    ): TypedEventFilter<[BigNumber], { arg0: BigNumber }>;
+
+    OwnershipTransferred(
+      previousOwner?: string | null,
+      newOwner?: string | null
+    ): TypedEventFilter<
+      [string, string],
+      { previousOwner: string; newOwner: string }
+    >;
+
+    ScalarUpdated(
+      undefined?: null
+    ): TypedEventFilter<[BigNumber], { arg0: BigNumber }>;
+  };
+
+  estimateGas: {
+    decimals(overrides?: CallOverrides): Promise<BigNumber>;
+
+    gasPrice(overrides?: CallOverrides): Promise<BigNumber>;
+
+    getL1Fee(_data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
+
+    getL1GasUsed(
+      _data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    l1BaseFee(overrides?: CallOverrides): Promise<BigNumber>;
+
+    overhead(overrides?: CallOverrides): Promise<BigNumber>;
+
+    owner(overrides?: CallOverrides): Promise<BigNumber>;
+
+    renounceOwnership(
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    scalar(overrides?: CallOverrides): Promise<BigNumber>;
+
+    setDecimals(
+      _decimals: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    setGasPrice(
+      _gasPrice: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    setL1BaseFee(
+      _baseFee: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    setOverhead(
+      _overhead: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    setScalar(
+      _scalar: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    transferOwnership(
+      newOwner: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    gasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    getL1Fee(
+      _data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    getL1GasUsed(
+      _data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    l1BaseFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    overhead(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    renounceOwnership(
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    scalar(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    setDecimals(
+      _decimals: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    setGasPrice(
+      _gasPrice: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    setL1BaseFee(
+      _baseFee: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    setOverhead(
+      _overhead: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    setScalar(
+      _scalar: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    transferOwnership(
+      newOwner: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/IApproveAndCall.d.ts b/lib/sor/types/other/IApproveAndCall.d.ts
new file mode 100644
index 0000000..72aaac4
--- /dev/null
+++ b/lib/sor/types/other/IApproveAndCall.d.ts
@@ -0,0 +1,436 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IApproveAndCallInterface extends ethers.utils.Interface {
+  functions: {
+    "approveMax(address)": FunctionFragment;
+    "approveMaxMinusOne(address)": FunctionFragment;
+    "approveZeroThenMax(address)": FunctionFragment;
+    "approveZeroThenMaxMinusOne(address)": FunctionFragment;
+    "callPositionManager(bytes)": FunctionFragment;
+    "getApprovalType(address,uint256)": FunctionFragment;
+    "increaseLiquidity(tuple)": FunctionFragment;
+    "mint(tuple)": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "approveMax", values: [string]): string;
+  encodeFunctionData(
+    functionFragment: "approveMaxMinusOne",
+    values: [string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "approveZeroThenMax",
+    values: [string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "approveZeroThenMaxMinusOne",
+    values: [string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "callPositionManager",
+    values: [BytesLike]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getApprovalType",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "increaseLiquidity",
+    values: [
+      {
+        token0: string;
+        token1: string;
+        tokenId: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "mint",
+    values: [
+      {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+      }
+    ]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "approveMax", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "approveMaxMinusOne",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "approveZeroThenMax",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "approveZeroThenMaxMinusOne",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "callPositionManager",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "getApprovalType",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "increaseLiquidity",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
+
+  events: {};
+}
+
+export class IApproveAndCall extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IApproveAndCallInterface;
+
+  functions: {
+    approveMax(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    approveMaxMinusOne(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    approveZeroThenMax(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    approveZeroThenMaxMinusOne(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    callPositionManager(
+      data: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    getApprovalType(
+      token: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    increaseLiquidity(
+      params: {
+        token0: string;
+        token1: string;
+        tokenId: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    mint(
+      params: {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  approveMax(
+    token: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  approveMaxMinusOne(
+    token: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  approveZeroThenMax(
+    token: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  approveZeroThenMaxMinusOne(
+    token: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callPositionManager(
+    data: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  getApprovalType(
+    token: string,
+    amount: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  increaseLiquidity(
+    params: {
+      token0: string;
+      token1: string;
+      tokenId: BigNumberish;
+      amount0Min: BigNumberish;
+      amount1Min: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  mint(
+    params: {
+      token0: string;
+      token1: string;
+      fee: BigNumberish;
+      tickLower: BigNumberish;
+      tickUpper: BigNumberish;
+      amount0Min: BigNumberish;
+      amount1Min: BigNumberish;
+      recipient: string;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    approveMax(token: string, overrides?: CallOverrides): Promise<void>;
+
+    approveMaxMinusOne(token: string, overrides?: CallOverrides): Promise<void>;
+
+    approveZeroThenMax(token: string, overrides?: CallOverrides): Promise<void>;
+
+    approveZeroThenMaxMinusOne(
+      token: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    callPositionManager(
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<string>;
+
+    getApprovalType(
+      token: string,
+      amount: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<number>;
+
+    increaseLiquidity(
+      params: {
+        token0: string;
+        token1: string;
+        tokenId: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<string>;
+
+    mint(
+      params: {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+      },
+      overrides?: CallOverrides
+    ): Promise<string>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    approveMax(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    approveMaxMinusOne(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    approveZeroThenMax(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    approveZeroThenMaxMinusOne(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    callPositionManager(
+      data: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    getApprovalType(
+      token: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    increaseLiquidity(
+      params: {
+        token0: string;
+        token1: string;
+        tokenId: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    mint(
+      params: {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    approveMax(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    approveMaxMinusOne(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    approveZeroThenMax(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    approveZeroThenMaxMinusOne(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    callPositionManager(
+      data: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    getApprovalType(
+      token: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    increaseLiquidity(
+      params: {
+        token0: string;
+        token1: string;
+        tokenId: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    mint(
+      params: {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/IImmutableState.d.ts b/lib/sor/types/other/IImmutableState.d.ts
new file mode 100644
index 0000000..1dd4b1b
--- /dev/null
+++ b/lib/sor/types/other/IImmutableState.d.ts
@@ -0,0 +1,111 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  CallOverrides,
+  ethers,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IImmutableStateInterface extends ethers.utils.Interface {
+  functions: {
+    "factoryV2()": FunctionFragment;
+    "positionManager()": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "factoryV2", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "positionManager",
+    values?: undefined
+  ): string;
+
+  decodeFunctionResult(functionFragment: "factoryV2", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "positionManager",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class IImmutableState extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IImmutableStateInterface;
+
+  functions: {
+    factoryV2(overrides?: CallOverrides): Promise<[string]>;
+
+    positionManager(overrides?: CallOverrides): Promise<[string]>;
+  };
+
+  factoryV2(overrides?: CallOverrides): Promise<string>;
+
+  positionManager(overrides?: CallOverrides): Promise<string>;
+
+  callStatic: {
+    factoryV2(overrides?: CallOverrides): Promise<string>;
+
+    positionManager(overrides?: CallOverrides): Promise<string>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    factoryV2(overrides?: CallOverrides): Promise<BigNumber>;
+
+    positionManager(overrides?: CallOverrides): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    factoryV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    positionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/IMixedRouteQuoterV1.d.ts b/lib/sor/types/other/IMixedRouteQuoterV1.d.ts
new file mode 100644
index 0000000..7f52be1
--- /dev/null
+++ b/lib/sor/types/other/IMixedRouteQuoterV1.d.ts
@@ -0,0 +1,241 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IMixedRouteQuoterV1Interface extends ethers.utils.Interface {
+  functions: {
+    "quoteExactInput(bytes,uint256)": FunctionFragment;
+    "quoteExactInputSingleV2(tuple)": FunctionFragment;
+    "quoteExactInputSingleV3(tuple)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "quoteExactInput",
+    values: [BytesLike, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactInputSingleV2",
+    values: [{ tokenIn: string; tokenOut: string; amountIn: BigNumberish }]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactInputSingleV3",
+    values: [
+      {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      }
+    ]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "quoteExactInput",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactInputSingleV2",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactInputSingleV3",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class IMixedRouteQuoterV1 extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IMixedRouteQuoterV1Interface;
+
+  functions: {
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactInputSingleV2(
+      params: { tokenIn: string; tokenOut: string; amountIn: BigNumberish },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactInputSingleV3(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  quoteExactInput(
+    path: BytesLike,
+    amountIn: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactInputSingleV2(
+    params: { tokenIn: string; tokenOut: string; amountIn: BigNumberish },
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactInputSingleV3(
+    params: {
+      tokenIn: string;
+      tokenOut: string;
+      amountIn: BigNumberish;
+      fee: BigNumberish;
+      sqrtPriceLimitX96: BigNumberish;
+    },
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber[], number[], BigNumber] & {
+        amountOut: BigNumber;
+        v3SqrtPriceX96AfterList: BigNumber[];
+        v3InitializedTicksCrossedList: number[];
+        v3SwapGasEstimate: BigNumber;
+      }
+    >;
+
+    quoteExactInputSingleV2(
+      params: { tokenIn: string; tokenOut: string; amountIn: BigNumberish },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    quoteExactInputSingleV3(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, number, BigNumber] & {
+        amountOut: BigNumber;
+        sqrtPriceX96After: BigNumber;
+        initializedTicksCrossed: number;
+        gasEstimate: BigNumber;
+      }
+    >;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactInputSingleV2(
+      params: { tokenIn: string; tokenOut: string; amountIn: BigNumberish },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactInputSingleV3(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactInputSingleV2(
+      params: { tokenIn: string; tokenOut: string; amountIn: BigNumberish },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactInputSingleV3(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/IMulticallExtended.d.ts b/lib/sor/types/other/IMulticallExtended.d.ts
new file mode 100644
index 0000000..0998cd1
--- /dev/null
+++ b/lib/sor/types/other/IMulticallExtended.d.ts
@@ -0,0 +1,173 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IMulticallExtendedInterface extends ethers.utils.Interface {
+  functions: {
+    "multicall(bytes32,bytes[])": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "multicall",
+    values: [BytesLike, BytesLike[]]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
+
+  events: {};
+}
+
+export class IMulticallExtended extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IMulticallExtendedInterface;
+
+  functions: {
+    "multicall(bytes32,bytes[])"(
+      previousBlockhash: BytesLike,
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "multicall(uint256,bytes[])"(
+      deadline: BigNumberish,
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "multicall(bytes[])"(
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  "multicall(bytes32,bytes[])"(
+    previousBlockhash: BytesLike,
+    data: BytesLike[],
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "multicall(uint256,bytes[])"(
+    deadline: BigNumberish,
+    data: BytesLike[],
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "multicall(bytes[])"(
+    data: BytesLike[],
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    "multicall(bytes32,bytes[])"(
+      previousBlockhash: BytesLike,
+      data: BytesLike[],
+      overrides?: CallOverrides
+    ): Promise<string[]>;
+
+    "multicall(uint256,bytes[])"(
+      deadline: BigNumberish,
+      data: BytesLike[],
+      overrides?: CallOverrides
+    ): Promise<string[]>;
+
+    "multicall(bytes[])"(
+      data: BytesLike[],
+      overrides?: CallOverrides
+    ): Promise<string[]>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    "multicall(bytes32,bytes[])"(
+      previousBlockhash: BytesLike,
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "multicall(uint256,bytes[])"(
+      deadline: BigNumberish,
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "multicall(bytes[])"(
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    "multicall(bytes32,bytes[])"(
+      previousBlockhash: BytesLike,
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "multicall(uint256,bytes[])"(
+      deadline: BigNumberish,
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "multicall(bytes[])"(
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/IOracleSlippage.d.ts b/lib/sor/types/other/IOracleSlippage.d.ts
new file mode 100644
index 0000000..fe96d5d
--- /dev/null
+++ b/lib/sor/types/other/IOracleSlippage.d.ts
@@ -0,0 +1,164 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ethers,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IOracleSlippageInterface extends ethers.utils.Interface {
+  functions: {
+    "checkOracleSlippage(bytes[],uint128[],uint24,uint32)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "checkOracleSlippage",
+    values: [BytesLike[], BigNumberish[], BigNumberish, BigNumberish]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "checkOracleSlippage",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class IOracleSlippage extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IOracleSlippageInterface;
+
+  functions: {
+    "checkOracleSlippage(bytes[],uint128[],uint24,uint32)"(
+      paths: BytesLike[],
+      amounts: BigNumberish[],
+      maximumTickDivergence: BigNumberish,
+      secondsAgo: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[void]>;
+
+    "checkOracleSlippage(bytes,uint24,uint32)"(
+      path: BytesLike,
+      maximumTickDivergence: BigNumberish,
+      secondsAgo: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[void]>;
+  };
+
+  "checkOracleSlippage(bytes[],uint128[],uint24,uint32)"(
+    paths: BytesLike[],
+    amounts: BigNumberish[],
+    maximumTickDivergence: BigNumberish,
+    secondsAgo: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<void>;
+
+  "checkOracleSlippage(bytes,uint24,uint32)"(
+    path: BytesLike,
+    maximumTickDivergence: BigNumberish,
+    secondsAgo: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<void>;
+
+  callStatic: {
+    "checkOracleSlippage(bytes[],uint128[],uint24,uint32)"(
+      paths: BytesLike[],
+      amounts: BigNumberish[],
+      maximumTickDivergence: BigNumberish,
+      secondsAgo: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "checkOracleSlippage(bytes,uint24,uint32)"(
+      path: BytesLike,
+      maximumTickDivergence: BigNumberish,
+      secondsAgo: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    "checkOracleSlippage(bytes[],uint128[],uint24,uint32)"(
+      paths: BytesLike[],
+      amounts: BigNumberish[],
+      maximumTickDivergence: BigNumberish,
+      secondsAgo: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    "checkOracleSlippage(bytes,uint24,uint32)"(
+      path: BytesLike,
+      maximumTickDivergence: BigNumberish,
+      secondsAgo: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    "checkOracleSlippage(bytes[],uint128[],uint24,uint32)"(
+      paths: BytesLike[],
+      amounts: BigNumberish[],
+      maximumTickDivergence: BigNumberish,
+      secondsAgo: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    "checkOracleSlippage(bytes,uint24,uint32)"(
+      path: BytesLike,
+      maximumTickDivergence: BigNumberish,
+      secondsAgo: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/IPeripheryPaymentsExtended.d.ts b/lib/sor/types/other/IPeripheryPaymentsExtended.d.ts
new file mode 100644
index 0000000..7b46917
--- /dev/null
+++ b/lib/sor/types/other/IPeripheryPaymentsExtended.d.ts
@@ -0,0 +1,302 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IPeripheryPaymentsExtendedInterface extends ethers.utils.Interface {
+  functions: {
+    "pull(address,uint256)": FunctionFragment;
+    "refundETH()": FunctionFragment;
+    "sweepToken(address,uint256,address)": FunctionFragment;
+    "unwrapWETH9(uint256,address)": FunctionFragment;
+    "wrapETH(uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "pull",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "refundETH", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "sweepToken",
+    values: [string, BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "unwrapWETH9",
+    values: [BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "wrapETH",
+    values: [BigNumberish]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "pull", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "refundETH", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "unwrapWETH9",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "wrapETH", data: BytesLike): Result;
+
+  events: {};
+}
+
+export class IPeripheryPaymentsExtended extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IPeripheryPaymentsExtendedInterface;
+
+  functions: {
+    pull(
+      token: string,
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "sweepToken(address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "sweepToken(address,uint256)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "unwrapWETH9(uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "unwrapWETH9(uint256)"(
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    wrapETH(
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  pull(
+    token: string,
+    value: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  refundETH(
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "sweepToken(address,uint256,address)"(
+    token: string,
+    amountMinimum: BigNumberish,
+    recipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "sweepToken(address,uint256)"(
+    token: string,
+    amountMinimum: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "unwrapWETH9(uint256,address)"(
+    amountMinimum: BigNumberish,
+    recipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "unwrapWETH9(uint256)"(
+    amountMinimum: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  wrapETH(
+    value: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    pull(
+      token: string,
+      value: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    refundETH(overrides?: CallOverrides): Promise<void>;
+
+    "sweepToken(address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "sweepToken(address,uint256)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "unwrapWETH9(uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "unwrapWETH9(uint256)"(
+      amountMinimum: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    wrapETH(value: BigNumberish, overrides?: CallOverrides): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    pull(
+      token: string,
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "sweepToken(address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "sweepToken(address,uint256)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "unwrapWETH9(uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "unwrapWETH9(uint256)"(
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    wrapETH(
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    pull(
+      token: string,
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "sweepToken(address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "sweepToken(address,uint256)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "unwrapWETH9(uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "unwrapWETH9(uint256)"(
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    wrapETH(
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/IPeripheryPaymentsWithFeeExtended.d.ts b/lib/sor/types/other/IPeripheryPaymentsWithFeeExtended.d.ts
new file mode 100644
index 0000000..435fa35
--- /dev/null
+++ b/lib/sor/types/other/IPeripheryPaymentsWithFeeExtended.d.ts
@@ -0,0 +1,481 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IPeripheryPaymentsWithFeeExtendedInterface
+  extends ethers.utils.Interface {
+  functions: {
+    "pull(address,uint256)": FunctionFragment;
+    "refundETH()": FunctionFragment;
+    "sweepToken(address,uint256,address)": FunctionFragment;
+    "sweepTokenWithFee(address,uint256,uint256,address)": FunctionFragment;
+    "unwrapWETH9(uint256,address)": FunctionFragment;
+    "unwrapWETH9WithFee(uint256,address,uint256,address)": FunctionFragment;
+    "wrapETH(uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "pull",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "refundETH", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "sweepToken",
+    values: [string, BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "sweepTokenWithFee",
+    values: [string, BigNumberish, BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "unwrapWETH9",
+    values: [BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "unwrapWETH9WithFee",
+    values: [BigNumberish, string, BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "wrapETH",
+    values: [BigNumberish]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "pull", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "refundETH", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "sweepTokenWithFee",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "unwrapWETH9",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "unwrapWETH9WithFee",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "wrapETH", data: BytesLike): Result;
+
+  events: {};
+}
+
+export class IPeripheryPaymentsWithFeeExtended extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IPeripheryPaymentsWithFeeExtendedInterface;
+
+  functions: {
+    pull(
+      token: string,
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "sweepToken(address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "sweepToken(address,uint256)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "sweepTokenWithFee(address,uint256,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "sweepTokenWithFee(address,uint256,address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "unwrapWETH9(uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "unwrapWETH9(uint256)"(
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "unwrapWETH9WithFee(uint256,address,uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "unwrapWETH9WithFee(uint256,uint256,address)"(
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    wrapETH(
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  pull(
+    token: string,
+    value: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  refundETH(
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "sweepToken(address,uint256,address)"(
+    token: string,
+    amountMinimum: BigNumberish,
+    recipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "sweepToken(address,uint256)"(
+    token: string,
+    amountMinimum: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "sweepTokenWithFee(address,uint256,uint256,address)"(
+    token: string,
+    amountMinimum: BigNumberish,
+    feeBips: BigNumberish,
+    feeRecipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "sweepTokenWithFee(address,uint256,address,uint256,address)"(
+    token: string,
+    amountMinimum: BigNumberish,
+    recipient: string,
+    feeBips: BigNumberish,
+    feeRecipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "unwrapWETH9(uint256,address)"(
+    amountMinimum: BigNumberish,
+    recipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "unwrapWETH9(uint256)"(
+    amountMinimum: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "unwrapWETH9WithFee(uint256,address,uint256,address)"(
+    amountMinimum: BigNumberish,
+    recipient: string,
+    feeBips: BigNumberish,
+    feeRecipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "unwrapWETH9WithFee(uint256,uint256,address)"(
+    amountMinimum: BigNumberish,
+    feeBips: BigNumberish,
+    feeRecipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  wrapETH(
+    value: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    pull(
+      token: string,
+      value: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    refundETH(overrides?: CallOverrides): Promise<void>;
+
+    "sweepToken(address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "sweepToken(address,uint256)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "sweepTokenWithFee(address,uint256,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "sweepTokenWithFee(address,uint256,address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "unwrapWETH9(uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "unwrapWETH9(uint256)"(
+      amountMinimum: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "unwrapWETH9WithFee(uint256,address,uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "unwrapWETH9WithFee(uint256,uint256,address)"(
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    wrapETH(value: BigNumberish, overrides?: CallOverrides): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    pull(
+      token: string,
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "sweepToken(address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "sweepToken(address,uint256)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "sweepTokenWithFee(address,uint256,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "sweepTokenWithFee(address,uint256,address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "unwrapWETH9(uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "unwrapWETH9(uint256)"(
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "unwrapWETH9WithFee(uint256,address,uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "unwrapWETH9WithFee(uint256,uint256,address)"(
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    wrapETH(
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    pull(
+      token: string,
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "sweepToken(address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "sweepToken(address,uint256)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "sweepTokenWithFee(address,uint256,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "sweepTokenWithFee(address,uint256,address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "unwrapWETH9(uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "unwrapWETH9(uint256)"(
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "unwrapWETH9WithFee(uint256,address,uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "unwrapWETH9WithFee(uint256,uint256,address)"(
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    wrapETH(
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/IQuoter.d.ts b/lib/sor/types/other/IQuoter.d.ts
new file mode 100644
index 0000000..00b3ac6
--- /dev/null
+++ b/lib/sor/types/other/IQuoter.d.ts
@@ -0,0 +1,268 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IQuoterInterface extends ethers.utils.Interface {
+  functions: {
+    "quoteExactInput(bytes,uint256)": FunctionFragment;
+    "quoteExactInputSingle(address,address,uint24,uint256,uint160)": FunctionFragment;
+    "quoteExactOutput(bytes,uint256)": FunctionFragment;
+    "quoteExactOutputSingle(address,address,uint24,uint256,uint160)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "quoteExactInput",
+    values: [BytesLike, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactInputSingle",
+    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactOutput",
+    values: [BytesLike, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactOutputSingle",
+    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "quoteExactInput",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactInputSingle",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactOutput",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactOutputSingle",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class IQuoter extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IQuoterInterface;
+
+  functions: {
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactInputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountIn: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactOutputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountOut: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  quoteExactInput(
+    path: BytesLike,
+    amountIn: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactInputSingle(
+    tokenIn: string,
+    tokenOut: string,
+    fee: BigNumberish,
+    amountIn: BigNumberish,
+    sqrtPriceLimitX96: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactOutput(
+    path: BytesLike,
+    amountOut: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactOutputSingle(
+    tokenIn: string,
+    tokenOut: string,
+    fee: BigNumberish,
+    amountOut: BigNumberish,
+    sqrtPriceLimitX96: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    quoteExactInputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountIn: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    quoteExactOutputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountOut: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactInputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountIn: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactOutputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountOut: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactInputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountIn: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactOutputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountOut: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/IQuoterV2.d.ts b/lib/sor/types/other/IQuoterV2.d.ts
new file mode 100644
index 0000000..a474831
--- /dev/null
+++ b/lib/sor/types/other/IQuoterV2.d.ts
@@ -0,0 +1,332 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IQuoterV2Interface extends ethers.utils.Interface {
+  functions: {
+    "quoteExactInput(bytes,uint256)": FunctionFragment;
+    "quoteExactInputSingle(tuple)": FunctionFragment;
+    "quoteExactOutput(bytes,uint256)": FunctionFragment;
+    "quoteExactOutputSingle(tuple)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "quoteExactInput",
+    values: [BytesLike, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactInputSingle",
+    values: [
+      {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactOutput",
+    values: [BytesLike, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactOutputSingle",
+    values: [
+      {
+        tokenIn: string;
+        tokenOut: string;
+        amount: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      }
+    ]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "quoteExactInput",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactInputSingle",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactOutput",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactOutputSingle",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class IQuoterV2 extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IQuoterV2Interface;
+
+  functions: {
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amount: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  quoteExactInput(
+    path: BytesLike,
+    amountIn: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactInputSingle(
+    params: {
+      tokenIn: string;
+      tokenOut: string;
+      amountIn: BigNumberish;
+      fee: BigNumberish;
+      sqrtPriceLimitX96: BigNumberish;
+    },
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactOutput(
+    path: BytesLike,
+    amountOut: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactOutputSingle(
+    params: {
+      tokenIn: string;
+      tokenOut: string;
+      amount: BigNumberish;
+      fee: BigNumberish;
+      sqrtPriceLimitX96: BigNumberish;
+    },
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber[], number[], BigNumber] & {
+        amountOut: BigNumber;
+        sqrtPriceX96AfterList: BigNumber[];
+        initializedTicksCrossedList: number[];
+        gasEstimate: BigNumber;
+      }
+    >;
+
+    quoteExactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, number, BigNumber] & {
+        amountOut: BigNumber;
+        sqrtPriceX96After: BigNumber;
+        initializedTicksCrossed: number;
+        gasEstimate: BigNumber;
+      }
+    >;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber[], number[], BigNumber] & {
+        amountIn: BigNumber;
+        sqrtPriceX96AfterList: BigNumber[];
+        initializedTicksCrossedList: number[];
+        gasEstimate: BigNumber;
+      }
+    >;
+
+    quoteExactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amount: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, number, BigNumber] & {
+        amountIn: BigNumber;
+        sqrtPriceX96After: BigNumber;
+        initializedTicksCrossed: number;
+        gasEstimate: BigNumber;
+      }
+    >;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amount: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amount: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/ISwapRouter02.d.ts b/lib/sor/types/other/ISwapRouter02.d.ts
new file mode 100644
index 0000000..ed64b37
--- /dev/null
+++ b/lib/sor/types/other/ISwapRouter02.d.ts
@@ -0,0 +1,1227 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface ISwapRouter02Interface extends ethers.utils.Interface {
+  functions: {
+    "approveMax(address)": FunctionFragment;
+    "approveMaxMinusOne(address)": FunctionFragment;
+    "approveZeroThenMax(address)": FunctionFragment;
+    "approveZeroThenMaxMinusOne(address)": FunctionFragment;
+    "callPositionManager(bytes)": FunctionFragment;
+    "exactInput(tuple)": FunctionFragment;
+    "exactInputSingle(tuple)": FunctionFragment;
+    "exactOutput(tuple)": FunctionFragment;
+    "exactOutputSingle(tuple)": FunctionFragment;
+    "getApprovalType(address,uint256)": FunctionFragment;
+    "increaseLiquidity(tuple)": FunctionFragment;
+    "mint(tuple)": FunctionFragment;
+    "multicall(bytes32,bytes[])": FunctionFragment;
+    "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "swapExactTokensForTokens(uint256,uint256,address[],address)": FunctionFragment;
+    "swapTokensForExactTokens(uint256,uint256,address[],address)": FunctionFragment;
+    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "approveMax", values: [string]): string;
+  encodeFunctionData(
+    functionFragment: "approveMaxMinusOne",
+    values: [string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "approveZeroThenMax",
+    values: [string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "approveZeroThenMaxMinusOne",
+    values: [string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "callPositionManager",
+    values: [BytesLike]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "exactInput",
+    values: [
+      {
+        path: BytesLike;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "exactInputSingle",
+    values: [
+      {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "exactOutput",
+    values: [
+      {
+        path: BytesLike;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "exactOutputSingle",
+    values: [
+      {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getApprovalType",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "increaseLiquidity",
+    values: [
+      {
+        token0: string;
+        token1: string;
+        tokenId: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "mint",
+    values: [
+      {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "multicall",
+    values: [BytesLike, BytesLike[]]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermit",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermitAllowed",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermitAllowedIfNecessary",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermitIfNecessary",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapExactTokensForTokens",
+    values: [BigNumberish, BigNumberish, string[], string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapTokensForExactTokens",
+    values: [BigNumberish, BigNumberish, string[], string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "uniswapV3SwapCallback",
+    values: [BigNumberish, BigNumberish, BytesLike]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "approveMax", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "approveMaxMinusOne",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "approveZeroThenMax",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "approveZeroThenMaxMinusOne",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "callPositionManager",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "exactInput", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "exactInputSingle",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "exactOutput",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "exactOutputSingle",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "getApprovalType",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "increaseLiquidity",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "selfPermit", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "selfPermitAllowed",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "selfPermitAllowedIfNecessary",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "selfPermitIfNecessary",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapExactTokensForTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapTokensForExactTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "uniswapV3SwapCallback",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class ISwapRouter02 extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: ISwapRouter02Interface;
+
+  functions: {
+    approveMax(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    approveMaxMinusOne(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    approveZeroThenMax(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    approveZeroThenMaxMinusOne(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    callPositionManager(
+      data: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    exactInput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    exactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    exactOutput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    exactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    getApprovalType(
+      token: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    increaseLiquidity(
+      params: {
+        token0: string;
+        token1: string;
+        tokenId: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    mint(
+      params: {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "multicall(bytes32,bytes[])"(
+      previousBlockhash: BytesLike,
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "multicall(uint256,bytes[])"(
+      deadline: BigNumberish,
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "multicall(bytes[])"(
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  approveMax(
+    token: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  approveMaxMinusOne(
+    token: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  approveZeroThenMax(
+    token: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  approveZeroThenMaxMinusOne(
+    token: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callPositionManager(
+    data: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  exactInput(
+    params: {
+      path: BytesLike;
+      recipient: string;
+      amountIn: BigNumberish;
+      amountOutMinimum: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  exactInputSingle(
+    params: {
+      tokenIn: string;
+      tokenOut: string;
+      fee: BigNumberish;
+      recipient: string;
+      amountIn: BigNumberish;
+      amountOutMinimum: BigNumberish;
+      sqrtPriceLimitX96: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  exactOutput(
+    params: {
+      path: BytesLike;
+      recipient: string;
+      amountOut: BigNumberish;
+      amountInMaximum: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  exactOutputSingle(
+    params: {
+      tokenIn: string;
+      tokenOut: string;
+      fee: BigNumberish;
+      recipient: string;
+      amountOut: BigNumberish;
+      amountInMaximum: BigNumberish;
+      sqrtPriceLimitX96: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  getApprovalType(
+    token: string,
+    amount: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  increaseLiquidity(
+    params: {
+      token0: string;
+      token1: string;
+      tokenId: BigNumberish;
+      amount0Min: BigNumberish;
+      amount1Min: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  mint(
+    params: {
+      token0: string;
+      token1: string;
+      fee: BigNumberish;
+      tickLower: BigNumberish;
+      tickUpper: BigNumberish;
+      amount0Min: BigNumberish;
+      amount1Min: BigNumberish;
+      recipient: string;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "multicall(bytes32,bytes[])"(
+    previousBlockhash: BytesLike,
+    data: BytesLike[],
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "multicall(uint256,bytes[])"(
+    deadline: BigNumberish,
+    data: BytesLike[],
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "multicall(bytes[])"(
+    data: BytesLike[],
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermit(
+    token: string,
+    value: BigNumberish,
+    deadline: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermitAllowed(
+    token: string,
+    nonce: BigNumberish,
+    expiry: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermitAllowedIfNecessary(
+    token: string,
+    nonce: BigNumberish,
+    expiry: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermitIfNecessary(
+    token: string,
+    value: BigNumberish,
+    deadline: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapExactTokensForTokens(
+    amountIn: BigNumberish,
+    amountOutMin: BigNumberish,
+    path: string[],
+    to: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapTokensForExactTokens(
+    amountOut: BigNumberish,
+    amountInMax: BigNumberish,
+    path: string[],
+    to: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  uniswapV3SwapCallback(
+    amount0Delta: BigNumberish,
+    amount1Delta: BigNumberish,
+    data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    approveMax(token: string, overrides?: CallOverrides): Promise<void>;
+
+    approveMaxMinusOne(token: string, overrides?: CallOverrides): Promise<void>;
+
+    approveZeroThenMax(token: string, overrides?: CallOverrides): Promise<void>;
+
+    approveZeroThenMaxMinusOne(
+      token: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    callPositionManager(
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<string>;
+
+    exactInput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    exactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    exactOutput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    exactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    getApprovalType(
+      token: string,
+      amount: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<number>;
+
+    increaseLiquidity(
+      params: {
+        token0: string;
+        token1: string;
+        tokenId: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<string>;
+
+    mint(
+      params: {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+      },
+      overrides?: CallOverrides
+    ): Promise<string>;
+
+    "multicall(bytes32,bytes[])"(
+      previousBlockhash: BytesLike,
+      data: BytesLike[],
+      overrides?: CallOverrides
+    ): Promise<string[]>;
+
+    "multicall(uint256,bytes[])"(
+      deadline: BigNumberish,
+      data: BytesLike[],
+      overrides?: CallOverrides
+    ): Promise<string[]>;
+
+    "multicall(bytes[])"(
+      data: BytesLike[],
+      overrides?: CallOverrides
+    ): Promise<string[]>;
+
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    approveMax(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    approveMaxMinusOne(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    approveZeroThenMax(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    approveZeroThenMaxMinusOne(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    callPositionManager(
+      data: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    exactInput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    exactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    exactOutput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    exactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    getApprovalType(
+      token: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    increaseLiquidity(
+      params: {
+        token0: string;
+        token1: string;
+        tokenId: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    mint(
+      params: {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "multicall(bytes32,bytes[])"(
+      previousBlockhash: BytesLike,
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "multicall(uint256,bytes[])"(
+      deadline: BigNumberish,
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "multicall(bytes[])"(
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    approveMax(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    approveMaxMinusOne(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    approveZeroThenMax(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    approveZeroThenMaxMinusOne(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    callPositionManager(
+      data: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    exactInput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    exactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    exactOutput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    exactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    getApprovalType(
+      token: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    increaseLiquidity(
+      params: {
+        token0: string;
+        token1: string;
+        tokenId: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    mint(
+      params: {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "multicall(bytes32,bytes[])"(
+      previousBlockhash: BytesLike,
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "multicall(uint256,bytes[])"(
+      deadline: BigNumberish,
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "multicall(bytes[])"(
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/ITokenValidator.d.ts b/lib/sor/types/other/ITokenValidator.d.ts
new file mode 100644
index 0000000..f4bfb16
--- /dev/null
+++ b/lib/sor/types/other/ITokenValidator.d.ts
@@ -0,0 +1,167 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface ITokenValidatorInterface extends ethers.utils.Interface {
+  functions: {
+    "batchValidate(address[],address[],uint256)": FunctionFragment;
+    "validate(address,address[],uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "batchValidate",
+    values: [string[], string[], BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "validate",
+    values: [string, string[], BigNumberish]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "batchValidate",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "validate", data: BytesLike): Result;
+
+  events: {};
+}
+
+export class ITokenValidator extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: ITokenValidatorInterface;
+
+  functions: {
+    batchValidate(
+      tokens: string[],
+      baseTokens: string[],
+      amountToBorrow: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    validate(
+      token: string,
+      baseTokens: string[],
+      amountToBorrow: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  batchValidate(
+    tokens: string[],
+    baseTokens: string[],
+    amountToBorrow: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  validate(
+    token: string,
+    baseTokens: string[],
+    amountToBorrow: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    batchValidate(
+      tokens: string[],
+      baseTokens: string[],
+      amountToBorrow: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<number[]>;
+
+    validate(
+      token: string,
+      baseTokens: string[],
+      amountToBorrow: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<number>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    batchValidate(
+      tokens: string[],
+      baseTokens: string[],
+      amountToBorrow: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    validate(
+      token: string,
+      baseTokens: string[],
+      amountToBorrow: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    batchValidate(
+      tokens: string[],
+      baseTokens: string[],
+      amountToBorrow: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    validate(
+      token: string,
+      baseTokens: string[],
+      amountToBorrow: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/IV2SwapRouter.d.ts b/lib/sor/types/other/IV2SwapRouter.d.ts
new file mode 100644
index 0000000..2569b5e
--- /dev/null
+++ b/lib/sor/types/other/IV2SwapRouter.d.ts
@@ -0,0 +1,180 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IV2SwapRouterInterface extends ethers.utils.Interface {
+  functions: {
+    "swapExactTokensForTokens(uint256,uint256,address[],address)": FunctionFragment;
+    "swapTokensForExactTokens(uint256,uint256,address[],address)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "swapExactTokensForTokens",
+    values: [BigNumberish, BigNumberish, string[], string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapTokensForExactTokens",
+    values: [BigNumberish, BigNumberish, string[], string]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "swapExactTokensForTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapTokensForExactTokens",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class IV2SwapRouter extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IV2SwapRouterInterface;
+
+  functions: {
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  swapExactTokensForTokens(
+    amountIn: BigNumberish,
+    amountOutMin: BigNumberish,
+    path: string[],
+    to: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapTokensForExactTokens(
+    amountOut: BigNumberish,
+    amountInMax: BigNumberish,
+    path: string[],
+    to: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/IV3SwapRouter.d.ts b/lib/sor/types/other/IV3SwapRouter.d.ts
new file mode 100644
index 0000000..4320d28
--- /dev/null
+++ b/lib/sor/types/other/IV3SwapRouter.d.ts
@@ -0,0 +1,424 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IV3SwapRouterInterface extends ethers.utils.Interface {
+  functions: {
+    "exactInput(tuple)": FunctionFragment;
+    "exactInputSingle(tuple)": FunctionFragment;
+    "exactOutput(tuple)": FunctionFragment;
+    "exactOutputSingle(tuple)": FunctionFragment;
+    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "exactInput",
+    values: [
+      {
+        path: BytesLike;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "exactInputSingle",
+    values: [
+      {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "exactOutput",
+    values: [
+      {
+        path: BytesLike;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "exactOutputSingle",
+    values: [
+      {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "uniswapV3SwapCallback",
+    values: [BigNumberish, BigNumberish, BytesLike]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "exactInput", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "exactInputSingle",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "exactOutput",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "exactOutputSingle",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "uniswapV3SwapCallback",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class IV3SwapRouter extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IV3SwapRouterInterface;
+
+  functions: {
+    exactInput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    exactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    exactOutput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    exactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  exactInput(
+    params: {
+      path: BytesLike;
+      recipient: string;
+      amountIn: BigNumberish;
+      amountOutMinimum: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  exactInputSingle(
+    params: {
+      tokenIn: string;
+      tokenOut: string;
+      fee: BigNumberish;
+      recipient: string;
+      amountIn: BigNumberish;
+      amountOutMinimum: BigNumberish;
+      sqrtPriceLimitX96: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  exactOutput(
+    params: {
+      path: BytesLike;
+      recipient: string;
+      amountOut: BigNumberish;
+      amountInMaximum: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  exactOutputSingle(
+    params: {
+      tokenIn: string;
+      tokenOut: string;
+      fee: BigNumberish;
+      recipient: string;
+      amountOut: BigNumberish;
+      amountInMaximum: BigNumberish;
+      sqrtPriceLimitX96: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  uniswapV3SwapCallback(
+    amount0Delta: BigNumberish,
+    amount1Delta: BigNumberish,
+    data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    exactInput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    exactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    exactOutput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    exactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    exactInput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    exactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    exactOutput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    exactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    exactInput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    exactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    exactOutput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    exactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/IWETH.d.ts b/lib/sor/types/other/IWETH.d.ts
new file mode 100644
index 0000000..96b6c85
--- /dev/null
+++ b/lib/sor/types/other/IWETH.d.ts
@@ -0,0 +1,168 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IWETHInterface extends ethers.utils.Interface {
+  functions: {
+    "deposit()": FunctionFragment;
+    "transfer(address,uint256)": FunctionFragment;
+    "withdraw(uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "transfer",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "withdraw",
+    values: [BigNumberish]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
+
+  events: {};
+}
+
+export class IWETH extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IWETHInterface;
+
+  functions: {
+    deposit(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    transfer(
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    withdraw(
+      arg0: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  deposit(
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  transfer(
+    to: string,
+    value: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  withdraw(
+    arg0: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    deposit(overrides?: CallOverrides): Promise<void>;
+
+    transfer(
+      to: string,
+      value: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    withdraw(arg0: BigNumberish, overrides?: CallOverrides): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    deposit(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    transfer(
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    withdraw(
+      arg0: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    deposit(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    transfer(
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    withdraw(
+      arg0: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/MixedRouteQuoterV1.d.ts b/lib/sor/types/other/MixedRouteQuoterV1.d.ts
new file mode 100644
index 0000000..d113b3d
--- /dev/null
+++ b/lib/sor/types/other/MixedRouteQuoterV1.d.ts
@@ -0,0 +1,324 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface MixedRouteQuoterV1Interface extends ethers.utils.Interface {
+  functions: {
+    "WETH9()": FunctionFragment;
+    "factory()": FunctionFragment;
+    "factoryV2()": FunctionFragment;
+    "quoteExactInput(bytes,uint256)": FunctionFragment;
+    "quoteExactInputSingleV2(tuple)": FunctionFragment;
+    "quoteExactInputSingleV3(tuple)": FunctionFragment;
+    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
+  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
+  encodeFunctionData(functionFragment: "factoryV2", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactInput",
+    values: [BytesLike, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactInputSingleV2",
+    values: [{ tokenIn: string; tokenOut: string; amountIn: BigNumberish }]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactInputSingleV3",
+    values: [
+      {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "uniswapV3SwapCallback",
+    values: [BigNumberish, BigNumberish, BytesLike]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "factoryV2", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactInput",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactInputSingleV2",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactInputSingleV3",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "uniswapV3SwapCallback",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class MixedRouteQuoterV1 extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: MixedRouteQuoterV1Interface;
+
+  functions: {
+    WETH9(overrides?: CallOverrides): Promise<[string]>;
+
+    factory(overrides?: CallOverrides): Promise<[string]>;
+
+    factoryV2(overrides?: CallOverrides): Promise<[string]>;
+
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactInputSingleV2(
+      params: { tokenIn: string; tokenOut: string; amountIn: BigNumberish },
+      overrides?: CallOverrides
+    ): Promise<[BigNumber] & { amountOut: BigNumber }>;
+
+    quoteExactInputSingleV3(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      path: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<[void]>;
+  };
+
+  WETH9(overrides?: CallOverrides): Promise<string>;
+
+  factory(overrides?: CallOverrides): Promise<string>;
+
+  factoryV2(overrides?: CallOverrides): Promise<string>;
+
+  quoteExactInput(
+    path: BytesLike,
+    amountIn: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactInputSingleV2(
+    params: { tokenIn: string; tokenOut: string; amountIn: BigNumberish },
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  quoteExactInputSingleV3(
+    params: {
+      tokenIn: string;
+      tokenOut: string;
+      amountIn: BigNumberish;
+      fee: BigNumberish;
+      sqrtPriceLimitX96: BigNumberish;
+    },
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  uniswapV3SwapCallback(
+    amount0Delta: BigNumberish,
+    amount1Delta: BigNumberish,
+    path: BytesLike,
+    overrides?: CallOverrides
+  ): Promise<void>;
+
+  callStatic: {
+    WETH9(overrides?: CallOverrides): Promise<string>;
+
+    factory(overrides?: CallOverrides): Promise<string>;
+
+    factoryV2(overrides?: CallOverrides): Promise<string>;
+
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber[], number[], BigNumber] & {
+        amountOut: BigNumber;
+        v3SqrtPriceX96AfterList: BigNumber[];
+        v3InitializedTicksCrossedList: number[];
+        v3SwapGasEstimate: BigNumber;
+      }
+    >;
+
+    quoteExactInputSingleV2(
+      params: { tokenIn: string; tokenOut: string; amountIn: BigNumberish },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    quoteExactInputSingleV3(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, number, BigNumber] & {
+        amountOut: BigNumber;
+        sqrtPriceX96After: BigNumber;
+        initializedTicksCrossed: number;
+        gasEstimate: BigNumber;
+      }
+    >;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      path: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    WETH9(overrides?: CallOverrides): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<BigNumber>;
+
+    factoryV2(overrides?: CallOverrides): Promise<BigNumber>;
+
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactInputSingleV2(
+      params: { tokenIn: string; tokenOut: string; amountIn: BigNumberish },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    quoteExactInputSingleV3(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      path: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    WETH9(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    factoryV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactInputSingleV2(
+      params: { tokenIn: string; tokenOut: string; amountIn: BigNumberish },
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactInputSingleV3(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      path: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/Multicall2.d.ts b/lib/sor/types/other/Multicall2.d.ts
new file mode 100644
index 0000000..591a307
--- /dev/null
+++ b/lib/sor/types/other/Multicall2.d.ts
@@ -0,0 +1,448 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface Multicall2Interface extends ethers.utils.Interface {
+  functions: {
+    "aggregate(tuple[])": FunctionFragment;
+    "blockAndAggregate(tuple[])": FunctionFragment;
+    "getBlockHash(uint256)": FunctionFragment;
+    "getBlockNumber()": FunctionFragment;
+    "getCurrentBlockCoinbase()": FunctionFragment;
+    "getCurrentBlockDifficulty()": FunctionFragment;
+    "getCurrentBlockGasLimit()": FunctionFragment;
+    "getCurrentBlockTimestamp()": FunctionFragment;
+    "getEthBalance(address)": FunctionFragment;
+    "getLastBlockHash()": FunctionFragment;
+    "tryAggregate(bool,tuple[])": FunctionFragment;
+    "tryBlockAndAggregate(bool,tuple[])": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "aggregate",
+    values: [{ target: string; callData: BytesLike }[]]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "blockAndAggregate",
+    values: [{ target: string; callData: BytesLike }[]]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getBlockHash",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getBlockNumber",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getCurrentBlockCoinbase",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getCurrentBlockDifficulty",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getCurrentBlockGasLimit",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getCurrentBlockTimestamp",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getEthBalance",
+    values: [string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getLastBlockHash",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "tryAggregate",
+    values: [boolean, { target: string; callData: BytesLike }[]]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "tryBlockAndAggregate",
+    values: [boolean, { target: string; callData: BytesLike }[]]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "aggregate", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "blockAndAggregate",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "getBlockHash",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "getBlockNumber",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "getCurrentBlockCoinbase",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "getCurrentBlockDifficulty",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "getCurrentBlockGasLimit",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "getCurrentBlockTimestamp",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "getEthBalance",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "getLastBlockHash",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "tryAggregate",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "tryBlockAndAggregate",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class Multicall2 extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: Multicall2Interface;
+
+  functions: {
+    aggregate(
+      calls: { target: string; callData: BytesLike }[],
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    blockAndAggregate(
+      calls: { target: string; callData: BytesLike }[],
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    getBlockHash(
+      blockNumber: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[string] & { blockHash: string }>;
+
+    getBlockNumber(
+      overrides?: CallOverrides
+    ): Promise<[BigNumber] & { blockNumber: BigNumber }>;
+
+    getCurrentBlockCoinbase(
+      overrides?: CallOverrides
+    ): Promise<[string] & { coinbase: string }>;
+
+    getCurrentBlockDifficulty(
+      overrides?: CallOverrides
+    ): Promise<[BigNumber] & { difficulty: BigNumber }>;
+
+    getCurrentBlockGasLimit(
+      overrides?: CallOverrides
+    ): Promise<[BigNumber] & { gaslimit: BigNumber }>;
+
+    getCurrentBlockTimestamp(
+      overrides?: CallOverrides
+    ): Promise<[BigNumber] & { timestamp: BigNumber }>;
+
+    getEthBalance(
+      addr: string,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber] & { balance: BigNumber }>;
+
+    getLastBlockHash(
+      overrides?: CallOverrides
+    ): Promise<[string] & { blockHash: string }>;
+
+    tryAggregate(
+      requireSuccess: boolean,
+      calls: { target: string; callData: BytesLike }[],
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    tryBlockAndAggregate(
+      requireSuccess: boolean,
+      calls: { target: string; callData: BytesLike }[],
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  aggregate(
+    calls: { target: string; callData: BytesLike }[],
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  blockAndAggregate(
+    calls: { target: string; callData: BytesLike }[],
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  getBlockHash(
+    blockNumber: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<string>;
+
+  getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;
+
+  getCurrentBlockCoinbase(overrides?: CallOverrides): Promise<string>;
+
+  getCurrentBlockDifficulty(overrides?: CallOverrides): Promise<BigNumber>;
+
+  getCurrentBlockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;
+
+  getCurrentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;
+
+  getEthBalance(addr: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+  getLastBlockHash(overrides?: CallOverrides): Promise<string>;
+
+  tryAggregate(
+    requireSuccess: boolean,
+    calls: { target: string; callData: BytesLike }[],
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  tryBlockAndAggregate(
+    requireSuccess: boolean,
+    calls: { target: string; callData: BytesLike }[],
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    aggregate(
+      calls: { target: string; callData: BytesLike }[],
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, string[]] & { blockNumber: BigNumber; returnData: string[] }
+    >;
+
+    blockAndAggregate(
+      calls: { target: string; callData: BytesLike }[],
+      overrides?: CallOverrides
+    ): Promise<
+      [
+        BigNumber,
+        string,
+        ([boolean, string] & { success: boolean; returnData: string })[]
+      ] & {
+        blockNumber: BigNumber;
+        blockHash: string;
+        returnData: ([boolean, string] & {
+          success: boolean;
+          returnData: string;
+        })[];
+      }
+    >;
+
+    getBlockHash(
+      blockNumber: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<string>;
+
+    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;
+
+    getCurrentBlockCoinbase(overrides?: CallOverrides): Promise<string>;
+
+    getCurrentBlockDifficulty(overrides?: CallOverrides): Promise<BigNumber>;
+
+    getCurrentBlockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;
+
+    getCurrentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;
+
+    getEthBalance(addr: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    getLastBlockHash(overrides?: CallOverrides): Promise<string>;
+
+    tryAggregate(
+      requireSuccess: boolean,
+      calls: { target: string; callData: BytesLike }[],
+      overrides?: CallOverrides
+    ): Promise<
+      ([boolean, string] & { success: boolean; returnData: string })[]
+    >;
+
+    tryBlockAndAggregate(
+      requireSuccess: boolean,
+      calls: { target: string; callData: BytesLike }[],
+      overrides?: CallOverrides
+    ): Promise<
+      [
+        BigNumber,
+        string,
+        ([boolean, string] & { success: boolean; returnData: string })[]
+      ] & {
+        blockNumber: BigNumber;
+        blockHash: string;
+        returnData: ([boolean, string] & {
+          success: boolean;
+          returnData: string;
+        })[];
+      }
+    >;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    aggregate(
+      calls: { target: string; callData: BytesLike }[],
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    blockAndAggregate(
+      calls: { target: string; callData: BytesLike }[],
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    getBlockHash(
+      blockNumber: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;
+
+    getCurrentBlockCoinbase(overrides?: CallOverrides): Promise<BigNumber>;
+
+    getCurrentBlockDifficulty(overrides?: CallOverrides): Promise<BigNumber>;
+
+    getCurrentBlockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;
+
+    getCurrentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;
+
+    getEthBalance(addr: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    getLastBlockHash(overrides?: CallOverrides): Promise<BigNumber>;
+
+    tryAggregate(
+      requireSuccess: boolean,
+      calls: { target: string; callData: BytesLike }[],
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    tryBlockAndAggregate(
+      requireSuccess: boolean,
+      calls: { target: string; callData: BytesLike }[],
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    aggregate(
+      calls: { target: string; callData: BytesLike }[],
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    blockAndAggregate(
+      calls: { target: string; callData: BytesLike }[],
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    getBlockHash(
+      blockNumber: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    getBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    getCurrentBlockCoinbase(
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    getCurrentBlockDifficulty(
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    getCurrentBlockGasLimit(
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    getCurrentBlockTimestamp(
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    getEthBalance(
+      addr: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    getLastBlockHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    tryAggregate(
+      requireSuccess: boolean,
+      calls: { target: string; callData: BytesLike }[],
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    tryBlockAndAggregate(
+      requireSuccess: boolean,
+      calls: { target: string; callData: BytesLike }[],
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/Permit2.d.ts b/lib/sor/types/other/Permit2.d.ts
new file mode 100644
index 0000000..ab82dfb
--- /dev/null
+++ b/lib/sor/types/other/Permit2.d.ts
@@ -0,0 +1,1020 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface Permit2Interface extends ethers.utils.Interface {
+  functions: {
+    "DOMAIN_SEPARATOR()": FunctionFragment;
+    "allowance(address,address,address)": FunctionFragment;
+    "approve(address,address,uint160,uint48)": FunctionFragment;
+    "invalidateNonces(address,address,uint48)": FunctionFragment;
+    "invalidateUnorderedNonces(uint256,uint256)": FunctionFragment;
+    "lockdown(tuple[])": FunctionFragment;
+    "nonceBitmap(address,uint256)": FunctionFragment;
+    "permit(address,tuple,bytes)": FunctionFragment;
+    "permitTransferFrom(tuple,tuple,address,bytes)": FunctionFragment;
+    "permitWitnessTransferFrom(tuple,tuple,address,bytes32,string,bytes)": FunctionFragment;
+    "transferFrom(tuple[])": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "DOMAIN_SEPARATOR",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "allowance",
+    values: [string, string, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "approve",
+    values: [string, string, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "invalidateNonces",
+    values: [string, string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "invalidateUnorderedNonces",
+    values: [BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "lockdown",
+    values: [{ token: string; spender: string }[]]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "nonceBitmap",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "permit",
+    values: [
+      string,
+      {
+        details: {
+          token: string;
+          amount: BigNumberish;
+          expiration: BigNumberish;
+          nonce: BigNumberish;
+        }[];
+        spender: string;
+        sigDeadline: BigNumberish;
+      },
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "permitTransferFrom",
+    values: [
+      {
+        permitted: { token: string; amount: BigNumberish };
+        nonce: BigNumberish;
+        deadline: BigNumberish;
+      },
+      { to: string; requestedAmount: BigNumberish },
+      string,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "permitWitnessTransferFrom",
+    values: [
+      {
+        permitted: { token: string; amount: BigNumberish };
+        nonce: BigNumberish;
+        deadline: BigNumberish;
+      },
+      { to: string; requestedAmount: BigNumberish },
+      string,
+      BytesLike,
+      string,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "transferFrom",
+    values: [
+      { from: string; to: string; amount: BigNumberish; token: string }[]
+    ]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "DOMAIN_SEPARATOR",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "invalidateNonces",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "invalidateUnorderedNonces",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "lockdown", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "nonceBitmap",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "permitTransferFrom",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "permitWitnessTransferFrom",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "transferFrom",
+    data: BytesLike
+  ): Result;
+
+  events: {
+    "Approval(address,address,address,uint160,uint48)": EventFragment;
+    "Lockdown(address,address,address)": EventFragment;
+    "NonceInvalidation(address,address,address,uint48,uint48)": EventFragment;
+    "Permit(address,address,address,uint160,uint48,uint48)": EventFragment;
+    "UnorderedNonceInvalidation(address,uint256,uint256)": EventFragment;
+  };
+
+  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Lockdown"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "NonceInvalidation"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Permit"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "UnorderedNonceInvalidation"): EventFragment;
+}
+
+export class Permit2 extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: Permit2Interface;
+
+  functions: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;
+
+    allowance(
+      arg0: string,
+      arg1: string,
+      arg2: string,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, number, number] & {
+        amount: BigNumber;
+        expiration: number;
+        nonce: number;
+      }
+    >;
+
+    approve(
+      token: string,
+      spender: string,
+      amount: BigNumberish,
+      expiration: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    invalidateNonces(
+      token: string,
+      spender: string,
+      newNonce: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    invalidateUnorderedNonces(
+      wordPos: BigNumberish,
+      mask: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    lockdown(
+      approvals: { token: string; spender: string }[],
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    nonceBitmap(
+      arg0: string,
+      arg1: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber]>;
+
+    "permit(address,(tuple[],address,uint256),bytes)"(
+      owner: string,
+      permitBatch: {
+        details: {
+          token: string;
+          amount: BigNumberish;
+          expiration: BigNumberish;
+          nonce: BigNumberish;
+        }[];
+        spender: string;
+        sigDeadline: BigNumberish;
+      },
+      signature: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)"(
+      owner: string,
+      permitSingle: {
+        details: {
+          token: string;
+          amount: BigNumberish;
+          expiration: BigNumberish;
+          nonce: BigNumberish;
+        };
+        spender: string;
+        sigDeadline: BigNumberish;
+      },
+      signature: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)"(
+      permit: {
+        permitted: { token: string; amount: BigNumberish };
+        nonce: BigNumberish;
+        deadline: BigNumberish;
+      },
+      transferDetails: { to: string; requestedAmount: BigNumberish },
+      owner: string,
+      signature: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "permitTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes)"(
+      permit: {
+        permitted: { token: string; amount: BigNumberish }[];
+        nonce: BigNumberish;
+        deadline: BigNumberish;
+      },
+      transferDetails: { to: string; requestedAmount: BigNumberish }[],
+      owner: string,
+      signature: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)"(
+      permit: {
+        permitted: { token: string; amount: BigNumberish };
+        nonce: BigNumberish;
+        deadline: BigNumberish;
+      },
+      transferDetails: { to: string; requestedAmount: BigNumberish },
+      owner: string,
+      witness: BytesLike,
+      witnessTypeString: string,
+      signature: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "permitWitnessTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes32,string,bytes)"(
+      permit: {
+        permitted: { token: string; amount: BigNumberish }[];
+        nonce: BigNumberish;
+        deadline: BigNumberish;
+      },
+      transferDetails: { to: string; requestedAmount: BigNumberish }[],
+      owner: string,
+      witness: BytesLike,
+      witnessTypeString: string,
+      signature: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "transferFrom(tuple[])"(
+      transferDetails: {
+        from: string;
+        to: string;
+        amount: BigNumberish;
+        token: string;
+      }[],
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "transferFrom(address,address,uint160,address)"(
+      from: string,
+      to: string,
+      amount: BigNumberish,
+      token: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;
+
+  allowance(
+    arg0: string,
+    arg1: string,
+    arg2: string,
+    overrides?: CallOverrides
+  ): Promise<
+    [BigNumber, number, number] & {
+      amount: BigNumber;
+      expiration: number;
+      nonce: number;
+    }
+  >;
+
+  approve(
+    token: string,
+    spender: string,
+    amount: BigNumberish,
+    expiration: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  invalidateNonces(
+    token: string,
+    spender: string,
+    newNonce: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  invalidateUnorderedNonces(
+    wordPos: BigNumberish,
+    mask: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  lockdown(
+    approvals: { token: string; spender: string }[],
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  nonceBitmap(
+    arg0: string,
+    arg1: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  "permit(address,(tuple[],address,uint256),bytes)"(
+    owner: string,
+    permitBatch: {
+      details: {
+        token: string;
+        amount: BigNumberish;
+        expiration: BigNumberish;
+        nonce: BigNumberish;
+      }[];
+      spender: string;
+      sigDeadline: BigNumberish;
+    },
+    signature: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)"(
+    owner: string,
+    permitSingle: {
+      details: {
+        token: string;
+        amount: BigNumberish;
+        expiration: BigNumberish;
+        nonce: BigNumberish;
+      };
+      spender: string;
+      sigDeadline: BigNumberish;
+    },
+    signature: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)"(
+    permit: {
+      permitted: { token: string; amount: BigNumberish };
+      nonce: BigNumberish;
+      deadline: BigNumberish;
+    },
+    transferDetails: { to: string; requestedAmount: BigNumberish },
+    owner: string,
+    signature: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "permitTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes)"(
+    permit: {
+      permitted: { token: string; amount: BigNumberish }[];
+      nonce: BigNumberish;
+      deadline: BigNumberish;
+    },
+    transferDetails: { to: string; requestedAmount: BigNumberish }[],
+    owner: string,
+    signature: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)"(
+    permit: {
+      permitted: { token: string; amount: BigNumberish };
+      nonce: BigNumberish;
+      deadline: BigNumberish;
+    },
+    transferDetails: { to: string; requestedAmount: BigNumberish },
+    owner: string,
+    witness: BytesLike,
+    witnessTypeString: string,
+    signature: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "permitWitnessTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes32,string,bytes)"(
+    permit: {
+      permitted: { token: string; amount: BigNumberish }[];
+      nonce: BigNumberish;
+      deadline: BigNumberish;
+    },
+    transferDetails: { to: string; requestedAmount: BigNumberish }[],
+    owner: string,
+    witness: BytesLike,
+    witnessTypeString: string,
+    signature: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "transferFrom(tuple[])"(
+    transferDetails: {
+      from: string;
+      to: string;
+      amount: BigNumberish;
+      token: string;
+    }[],
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "transferFrom(address,address,uint160,address)"(
+    from: string,
+    to: string,
+    amount: BigNumberish,
+    token: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;
+
+    allowance(
+      arg0: string,
+      arg1: string,
+      arg2: string,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, number, number] & {
+        amount: BigNumber;
+        expiration: number;
+        nonce: number;
+      }
+    >;
+
+    approve(
+      token: string,
+      spender: string,
+      amount: BigNumberish,
+      expiration: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    invalidateNonces(
+      token: string,
+      spender: string,
+      newNonce: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    invalidateUnorderedNonces(
+      wordPos: BigNumberish,
+      mask: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    lockdown(
+      approvals: { token: string; spender: string }[],
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    nonceBitmap(
+      arg0: string,
+      arg1: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    "permit(address,(tuple[],address,uint256),bytes)"(
+      owner: string,
+      permitBatch: {
+        details: {
+          token: string;
+          amount: BigNumberish;
+          expiration: BigNumberish;
+          nonce: BigNumberish;
+        }[];
+        spender: string;
+        sigDeadline: BigNumberish;
+      },
+      signature: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)"(
+      owner: string,
+      permitSingle: {
+        details: {
+          token: string;
+          amount: BigNumberish;
+          expiration: BigNumberish;
+          nonce: BigNumberish;
+        };
+        spender: string;
+        sigDeadline: BigNumberish;
+      },
+      signature: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)"(
+      permit: {
+        permitted: { token: string; amount: BigNumberish };
+        nonce: BigNumberish;
+        deadline: BigNumberish;
+      },
+      transferDetails: { to: string; requestedAmount: BigNumberish },
+      owner: string,
+      signature: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "permitTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes)"(
+      permit: {
+        permitted: { token: string; amount: BigNumberish }[];
+        nonce: BigNumberish;
+        deadline: BigNumberish;
+      },
+      transferDetails: { to: string; requestedAmount: BigNumberish }[],
+      owner: string,
+      signature: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)"(
+      permit: {
+        permitted: { token: string; amount: BigNumberish };
+        nonce: BigNumberish;
+        deadline: BigNumberish;
+      },
+      transferDetails: { to: string; requestedAmount: BigNumberish },
+      owner: string,
+      witness: BytesLike,
+      witnessTypeString: string,
+      signature: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "permitWitnessTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes32,string,bytes)"(
+      permit: {
+        permitted: { token: string; amount: BigNumberish }[];
+        nonce: BigNumberish;
+        deadline: BigNumberish;
+      },
+      transferDetails: { to: string; requestedAmount: BigNumberish }[],
+      owner: string,
+      witness: BytesLike,
+      witnessTypeString: string,
+      signature: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "transferFrom(tuple[])"(
+      transferDetails: {
+        from: string;
+        to: string;
+        amount: BigNumberish;
+        token: string;
+      }[],
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "transferFrom(address,address,uint160,address)"(
+      from: string,
+      to: string,
+      amount: BigNumberish,
+      token: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {
+    Approval(
+      owner?: string | null,
+      token?: string | null,
+      spender?: string | null,
+      amount?: null,
+      expiration?: null
+    ): TypedEventFilter<
+      [string, string, string, BigNumber, number],
+      {
+        owner: string;
+        token: string;
+        spender: string;
+        amount: BigNumber;
+        expiration: number;
+      }
+    >;
+
+    Lockdown(
+      owner?: string | null,
+      token?: null,
+      spender?: null
+    ): TypedEventFilter<
+      [string, string, string],
+      { owner: string; token: string; spender: string }
+    >;
+
+    NonceInvalidation(
+      owner?: string | null,
+      token?: string | null,
+      spender?: string | null,
+      newNonce?: null,
+      oldNonce?: null
+    ): TypedEventFilter<
+      [string, string, string, number, number],
+      {
+        owner: string;
+        token: string;
+        spender: string;
+        newNonce: number;
+        oldNonce: number;
+      }
+    >;
+
+    Permit(
+      owner?: string | null,
+      token?: string | null,
+      spender?: string | null,
+      amount?: null,
+      expiration?: null,
+      nonce?: null
+    ): TypedEventFilter<
+      [string, string, string, BigNumber, number, number],
+      {
+        owner: string;
+        token: string;
+        spender: string;
+        amount: BigNumber;
+        expiration: number;
+        nonce: number;
+      }
+    >;
+
+    UnorderedNonceInvalidation(
+      owner?: string | null,
+      word?: null,
+      mask?: null
+    ): TypedEventFilter<
+      [string, BigNumber, BigNumber],
+      { owner: string; word: BigNumber; mask: BigNumber }
+    >;
+  };
+
+  estimateGas: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;
+
+    allowance(
+      arg0: string,
+      arg1: string,
+      arg2: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    approve(
+      token: string,
+      spender: string,
+      amount: BigNumberish,
+      expiration: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    invalidateNonces(
+      token: string,
+      spender: string,
+      newNonce: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    invalidateUnorderedNonces(
+      wordPos: BigNumberish,
+      mask: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    lockdown(
+      approvals: { token: string; spender: string }[],
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    nonceBitmap(
+      arg0: string,
+      arg1: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    "permit(address,(tuple[],address,uint256),bytes)"(
+      owner: string,
+      permitBatch: {
+        details: {
+          token: string;
+          amount: BigNumberish;
+          expiration: BigNumberish;
+          nonce: BigNumberish;
+        }[];
+        spender: string;
+        sigDeadline: BigNumberish;
+      },
+      signature: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)"(
+      owner: string,
+      permitSingle: {
+        details: {
+          token: string;
+          amount: BigNumberish;
+          expiration: BigNumberish;
+          nonce: BigNumberish;
+        };
+        spender: string;
+        sigDeadline: BigNumberish;
+      },
+      signature: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)"(
+      permit: {
+        permitted: { token: string; amount: BigNumberish };
+        nonce: BigNumberish;
+        deadline: BigNumberish;
+      },
+      transferDetails: { to: string; requestedAmount: BigNumberish },
+      owner: string,
+      signature: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "permitTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes)"(
+      permit: {
+        permitted: { token: string; amount: BigNumberish }[];
+        nonce: BigNumberish;
+        deadline: BigNumberish;
+      },
+      transferDetails: { to: string; requestedAmount: BigNumberish }[],
+      owner: string,
+      signature: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)"(
+      permit: {
+        permitted: { token: string; amount: BigNumberish };
+        nonce: BigNumberish;
+        deadline: BigNumberish;
+      },
+      transferDetails: { to: string; requestedAmount: BigNumberish },
+      owner: string,
+      witness: BytesLike,
+      witnessTypeString: string,
+      signature: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "permitWitnessTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes32,string,bytes)"(
+      permit: {
+        permitted: { token: string; amount: BigNumberish }[];
+        nonce: BigNumberish;
+        deadline: BigNumberish;
+      },
+      transferDetails: { to: string; requestedAmount: BigNumberish }[],
+      owner: string,
+      witness: BytesLike,
+      witnessTypeString: string,
+      signature: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "transferFrom(tuple[])"(
+      transferDetails: {
+        from: string;
+        to: string;
+        amount: BigNumberish;
+        token: string;
+      }[],
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "transferFrom(address,address,uint160,address)"(
+      from: string,
+      to: string,
+      amount: BigNumberish,
+      token: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    allowance(
+      arg0: string,
+      arg1: string,
+      arg2: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    approve(
+      token: string,
+      spender: string,
+      amount: BigNumberish,
+      expiration: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    invalidateNonces(
+      token: string,
+      spender: string,
+      newNonce: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    invalidateUnorderedNonces(
+      wordPos: BigNumberish,
+      mask: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    lockdown(
+      approvals: { token: string; spender: string }[],
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    nonceBitmap(
+      arg0: string,
+      arg1: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    "permit(address,(tuple[],address,uint256),bytes)"(
+      owner: string,
+      permitBatch: {
+        details: {
+          token: string;
+          amount: BigNumberish;
+          expiration: BigNumberish;
+          nonce: BigNumberish;
+        }[];
+        spender: string;
+        sigDeadline: BigNumberish;
+      },
+      signature: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)"(
+      owner: string,
+      permitSingle: {
+        details: {
+          token: string;
+          amount: BigNumberish;
+          expiration: BigNumberish;
+          nonce: BigNumberish;
+        };
+        spender: string;
+        sigDeadline: BigNumberish;
+      },
+      signature: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)"(
+      permit: {
+        permitted: { token: string; amount: BigNumberish };
+        nonce: BigNumberish;
+        deadline: BigNumberish;
+      },
+      transferDetails: { to: string; requestedAmount: BigNumberish },
+      owner: string,
+      signature: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "permitTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes)"(
+      permit: {
+        permitted: { token: string; amount: BigNumberish }[];
+        nonce: BigNumberish;
+        deadline: BigNumberish;
+      },
+      transferDetails: { to: string; requestedAmount: BigNumberish }[],
+      owner: string,
+      signature: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)"(
+      permit: {
+        permitted: { token: string; amount: BigNumberish };
+        nonce: BigNumberish;
+        deadline: BigNumberish;
+      },
+      transferDetails: { to: string; requestedAmount: BigNumberish },
+      owner: string,
+      witness: BytesLike,
+      witnessTypeString: string,
+      signature: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "permitWitnessTransferFrom((tuple[],uint256,uint256),tuple[],address,bytes32,string,bytes)"(
+      permit: {
+        permitted: { token: string; amount: BigNumberish }[];
+        nonce: BigNumberish;
+        deadline: BigNumberish;
+      },
+      transferDetails: { to: string; requestedAmount: BigNumberish }[],
+      owner: string,
+      witness: BytesLike,
+      witnessTypeString: string,
+      signature: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "transferFrom(tuple[])"(
+      transferDetails: {
+        from: string;
+        to: string;
+        amount: BigNumberish;
+        token: string;
+      }[],
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "transferFrom(address,address,uint160,address)"(
+      from: string,
+      to: string,
+      amount: BigNumberish,
+      token: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/Quoter.d.ts b/lib/sor/types/other/Quoter.d.ts
new file mode 100644
index 0000000..643e2ad
--- /dev/null
+++ b/lib/sor/types/other/Quoter.d.ts
@@ -0,0 +1,338 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface QuoterInterface extends ethers.utils.Interface {
+  functions: {
+    "WETH9()": FunctionFragment;
+    "factory()": FunctionFragment;
+    "quoteExactInput(bytes,uint256)": FunctionFragment;
+    "quoteExactInputSingle(address,address,uint24,uint256,uint160)": FunctionFragment;
+    "quoteExactOutput(bytes,uint256)": FunctionFragment;
+    "quoteExactOutputSingle(address,address,uint24,uint256,uint160)": FunctionFragment;
+    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
+  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactInput",
+    values: [BytesLike, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactInputSingle",
+    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactOutput",
+    values: [BytesLike, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactOutputSingle",
+    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "uniswapV3SwapCallback",
+    values: [BigNumberish, BigNumberish, BytesLike]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactInput",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactInputSingle",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactOutput",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactOutputSingle",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "uniswapV3SwapCallback",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class Quoter extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: QuoterInterface;
+
+  functions: {
+    WETH9(overrides?: CallOverrides): Promise<[string]>;
+
+    factory(overrides?: CallOverrides): Promise<[string]>;
+
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactInputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountIn: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactOutputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountOut: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      path: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<[void]>;
+  };
+
+  WETH9(overrides?: CallOverrides): Promise<string>;
+
+  factory(overrides?: CallOverrides): Promise<string>;
+
+  quoteExactInput(
+    path: BytesLike,
+    amountIn: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactInputSingle(
+    tokenIn: string,
+    tokenOut: string,
+    fee: BigNumberish,
+    amountIn: BigNumberish,
+    sqrtPriceLimitX96: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactOutput(
+    path: BytesLike,
+    amountOut: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactOutputSingle(
+    tokenIn: string,
+    tokenOut: string,
+    fee: BigNumberish,
+    amountOut: BigNumberish,
+    sqrtPriceLimitX96: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  uniswapV3SwapCallback(
+    amount0Delta: BigNumberish,
+    amount1Delta: BigNumberish,
+    path: BytesLike,
+    overrides?: CallOverrides
+  ): Promise<void>;
+
+  callStatic: {
+    WETH9(overrides?: CallOverrides): Promise<string>;
+
+    factory(overrides?: CallOverrides): Promise<string>;
+
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    quoteExactInputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountIn: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    quoteExactOutputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountOut: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      path: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    WETH9(overrides?: CallOverrides): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<BigNumber>;
+
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactInputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountIn: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactOutputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountOut: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      path: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    WETH9(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactInputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountIn: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactOutputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountOut: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      path: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/QuoterV2.d.ts b/lib/sor/types/other/QuoterV2.d.ts
new file mode 100644
index 0000000..cc489a0
--- /dev/null
+++ b/lib/sor/types/other/QuoterV2.d.ts
@@ -0,0 +1,402 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface QuoterV2Interface extends ethers.utils.Interface {
+  functions: {
+    "WETH9()": FunctionFragment;
+    "factory()": FunctionFragment;
+    "quoteExactInput(bytes,uint256)": FunctionFragment;
+    "quoteExactInputSingle(tuple)": FunctionFragment;
+    "quoteExactOutput(bytes,uint256)": FunctionFragment;
+    "quoteExactOutputSingle(tuple)": FunctionFragment;
+    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
+  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactInput",
+    values: [BytesLike, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactInputSingle",
+    values: [
+      {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactOutput",
+    values: [BytesLike, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactOutputSingle",
+    values: [
+      {
+        tokenIn: string;
+        tokenOut: string;
+        amount: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "uniswapV3SwapCallback",
+    values: [BigNumberish, BigNumberish, BytesLike]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactInput",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactInputSingle",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactOutput",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactOutputSingle",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "uniswapV3SwapCallback",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class QuoterV2 extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: QuoterV2Interface;
+
+  functions: {
+    WETH9(overrides?: CallOverrides): Promise<[string]>;
+
+    factory(overrides?: CallOverrides): Promise<[string]>;
+
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amount: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      path: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<[void]>;
+  };
+
+  WETH9(overrides?: CallOverrides): Promise<string>;
+
+  factory(overrides?: CallOverrides): Promise<string>;
+
+  quoteExactInput(
+    path: BytesLike,
+    amountIn: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactInputSingle(
+    params: {
+      tokenIn: string;
+      tokenOut: string;
+      amountIn: BigNumberish;
+      fee: BigNumberish;
+      sqrtPriceLimitX96: BigNumberish;
+    },
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactOutput(
+    path: BytesLike,
+    amountOut: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactOutputSingle(
+    params: {
+      tokenIn: string;
+      tokenOut: string;
+      amount: BigNumberish;
+      fee: BigNumberish;
+      sqrtPriceLimitX96: BigNumberish;
+    },
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  uniswapV3SwapCallback(
+    amount0Delta: BigNumberish,
+    amount1Delta: BigNumberish,
+    path: BytesLike,
+    overrides?: CallOverrides
+  ): Promise<void>;
+
+  callStatic: {
+    WETH9(overrides?: CallOverrides): Promise<string>;
+
+    factory(overrides?: CallOverrides): Promise<string>;
+
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber[], number[], BigNumber] & {
+        amountOut: BigNumber;
+        sqrtPriceX96AfterList: BigNumber[];
+        initializedTicksCrossedList: number[];
+        gasEstimate: BigNumber;
+      }
+    >;
+
+    quoteExactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, number, BigNumber] & {
+        amountOut: BigNumber;
+        sqrtPriceX96After: BigNumber;
+        initializedTicksCrossed: number;
+        gasEstimate: BigNumber;
+      }
+    >;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber[], number[], BigNumber] & {
+        amountIn: BigNumber;
+        sqrtPriceX96AfterList: BigNumber[];
+        initializedTicksCrossedList: number[];
+        gasEstimate: BigNumber;
+      }
+    >;
+
+    quoteExactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amount: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, number, BigNumber] & {
+        amountIn: BigNumber;
+        sqrtPriceX96After: BigNumber;
+        initializedTicksCrossed: number;
+        gasEstimate: BigNumber;
+      }
+    >;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      path: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    WETH9(overrides?: CallOverrides): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<BigNumber>;
+
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amount: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      path: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    WETH9(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amount: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      path: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/SwapRouter02.d.ts b/lib/sor/types/other/SwapRouter02.d.ts
new file mode 100644
index 0000000..76e711c
--- /dev/null
+++ b/lib/sor/types/other/SwapRouter02.d.ts
@@ -0,0 +1,1767 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface SwapRouter02Interface extends ethers.utils.Interface {
+  functions: {
+    "WETH9()": FunctionFragment;
+    "approveMax(address)": FunctionFragment;
+    "approveMaxMinusOne(address)": FunctionFragment;
+    "approveZeroThenMax(address)": FunctionFragment;
+    "approveZeroThenMaxMinusOne(address)": FunctionFragment;
+    "callPositionManager(bytes)": FunctionFragment;
+    "checkOracleSlippage(bytes[],uint128[],uint24,uint32)": FunctionFragment;
+    "exactInput(tuple)": FunctionFragment;
+    "exactInputSingle(tuple)": FunctionFragment;
+    "exactOutput(tuple)": FunctionFragment;
+    "exactOutputSingle(tuple)": FunctionFragment;
+    "factory()": FunctionFragment;
+    "factoryV2()": FunctionFragment;
+    "getApprovalType(address,uint256)": FunctionFragment;
+    "increaseLiquidity(tuple)": FunctionFragment;
+    "mint(tuple)": FunctionFragment;
+    "multicall(bytes32,bytes[])": FunctionFragment;
+    "positionManager()": FunctionFragment;
+    "pull(address,uint256)": FunctionFragment;
+    "refundETH()": FunctionFragment;
+    "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "swapExactTokensForTokens(uint256,uint256,address[],address)": FunctionFragment;
+    "swapTokensForExactTokens(uint256,uint256,address[],address)": FunctionFragment;
+    "sweepToken(address,uint256,address)": FunctionFragment;
+    "sweepTokenWithFee(address,uint256,uint256,address)": FunctionFragment;
+    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
+    "unwrapWETH9(uint256,address)": FunctionFragment;
+    "unwrapWETH9WithFee(uint256,address,uint256,address)": FunctionFragment;
+    "wrapETH(uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
+  encodeFunctionData(functionFragment: "approveMax", values: [string]): string;
+  encodeFunctionData(
+    functionFragment: "approveMaxMinusOne",
+    values: [string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "approveZeroThenMax",
+    values: [string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "approveZeroThenMaxMinusOne",
+    values: [string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "callPositionManager",
+    values: [BytesLike]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "checkOracleSlippage",
+    values: [BytesLike[], BigNumberish[], BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "exactInput",
+    values: [
+      {
+        path: BytesLike;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "exactInputSingle",
+    values: [
+      {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "exactOutput",
+    values: [
+      {
+        path: BytesLike;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "exactOutputSingle",
+    values: [
+      {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
+  encodeFunctionData(functionFragment: "factoryV2", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "getApprovalType",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "increaseLiquidity",
+    values: [
+      {
+        token0: string;
+        token1: string;
+        tokenId: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "mint",
+    values: [
+      {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "multicall",
+    values: [BytesLike, BytesLike[]]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "positionManager",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "pull",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "refundETH", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "selfPermit",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermitAllowed",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermitAllowedIfNecessary",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermitIfNecessary",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapExactTokensForTokens",
+    values: [BigNumberish, BigNumberish, string[], string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapTokensForExactTokens",
+    values: [BigNumberish, BigNumberish, string[], string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "sweepToken",
+    values: [string, BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "sweepTokenWithFee",
+    values: [string, BigNumberish, BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "uniswapV3SwapCallback",
+    values: [BigNumberish, BigNumberish, BytesLike]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "unwrapWETH9",
+    values: [BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "unwrapWETH9WithFee",
+    values: [BigNumberish, string, BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "wrapETH",
+    values: [BigNumberish]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "approveMax", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "approveMaxMinusOne",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "approveZeroThenMax",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "approveZeroThenMaxMinusOne",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "callPositionManager",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "checkOracleSlippage",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "exactInput", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "exactInputSingle",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "exactOutput",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "exactOutputSingle",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "factoryV2", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "getApprovalType",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "increaseLiquidity",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "positionManager",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "pull", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "refundETH", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "selfPermit", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "selfPermitAllowed",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "selfPermitAllowedIfNecessary",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "selfPermitIfNecessary",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapExactTokensForTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapTokensForExactTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "sweepTokenWithFee",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "uniswapV3SwapCallback",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "unwrapWETH9",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "unwrapWETH9WithFee",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "wrapETH", data: BytesLike): Result;
+
+  events: {};
+}
+
+export class SwapRouter02 extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: SwapRouter02Interface;
+
+  functions: {
+    WETH9(overrides?: CallOverrides): Promise<[string]>;
+
+    approveMax(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    approveMaxMinusOne(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    approveZeroThenMax(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    approveZeroThenMaxMinusOne(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    callPositionManager(
+      data: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "checkOracleSlippage(bytes[],uint128[],uint24,uint32)"(
+      paths: BytesLike[],
+      amounts: BigNumberish[],
+      maximumTickDivergence: BigNumberish,
+      secondsAgo: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[void]>;
+
+    "checkOracleSlippage(bytes,uint24,uint32)"(
+      path: BytesLike,
+      maximumTickDivergence: BigNumberish,
+      secondsAgo: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[void]>;
+
+    exactInput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    exactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    exactOutput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    exactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<[string]>;
+
+    factoryV2(overrides?: CallOverrides): Promise<[string]>;
+
+    getApprovalType(
+      token: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    increaseLiquidity(
+      params: {
+        token0: string;
+        token1: string;
+        tokenId: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    mint(
+      params: {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "multicall(bytes32,bytes[])"(
+      previousBlockhash: BytesLike,
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "multicall(uint256,bytes[])"(
+      deadline: BigNumberish,
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "multicall(bytes[])"(
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    positionManager(overrides?: CallOverrides): Promise<[string]>;
+
+    pull(
+      token: string,
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "sweepToken(address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "sweepToken(address,uint256)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "sweepTokenWithFee(address,uint256,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "sweepTokenWithFee(address,uint256,address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      _data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "unwrapWETH9(uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "unwrapWETH9(uint256)"(
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "unwrapWETH9WithFee(uint256,address,uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "unwrapWETH9WithFee(uint256,uint256,address)"(
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    wrapETH(
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  WETH9(overrides?: CallOverrides): Promise<string>;
+
+  approveMax(
+    token: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  approveMaxMinusOne(
+    token: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  approveZeroThenMax(
+    token: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  approveZeroThenMaxMinusOne(
+    token: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callPositionManager(
+    data: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "checkOracleSlippage(bytes[],uint128[],uint24,uint32)"(
+    paths: BytesLike[],
+    amounts: BigNumberish[],
+    maximumTickDivergence: BigNumberish,
+    secondsAgo: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<void>;
+
+  "checkOracleSlippage(bytes,uint24,uint32)"(
+    path: BytesLike,
+    maximumTickDivergence: BigNumberish,
+    secondsAgo: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<void>;
+
+  exactInput(
+    params: {
+      path: BytesLike;
+      recipient: string;
+      amountIn: BigNumberish;
+      amountOutMinimum: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  exactInputSingle(
+    params: {
+      tokenIn: string;
+      tokenOut: string;
+      fee: BigNumberish;
+      recipient: string;
+      amountIn: BigNumberish;
+      amountOutMinimum: BigNumberish;
+      sqrtPriceLimitX96: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  exactOutput(
+    params: {
+      path: BytesLike;
+      recipient: string;
+      amountOut: BigNumberish;
+      amountInMaximum: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  exactOutputSingle(
+    params: {
+      tokenIn: string;
+      tokenOut: string;
+      fee: BigNumberish;
+      recipient: string;
+      amountOut: BigNumberish;
+      amountInMaximum: BigNumberish;
+      sqrtPriceLimitX96: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  factory(overrides?: CallOverrides): Promise<string>;
+
+  factoryV2(overrides?: CallOverrides): Promise<string>;
+
+  getApprovalType(
+    token: string,
+    amount: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  increaseLiquidity(
+    params: {
+      token0: string;
+      token1: string;
+      tokenId: BigNumberish;
+      amount0Min: BigNumberish;
+      amount1Min: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  mint(
+    params: {
+      token0: string;
+      token1: string;
+      fee: BigNumberish;
+      tickLower: BigNumberish;
+      tickUpper: BigNumberish;
+      amount0Min: BigNumberish;
+      amount1Min: BigNumberish;
+      recipient: string;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "multicall(bytes32,bytes[])"(
+    previousBlockhash: BytesLike,
+    data: BytesLike[],
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "multicall(uint256,bytes[])"(
+    deadline: BigNumberish,
+    data: BytesLike[],
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "multicall(bytes[])"(
+    data: BytesLike[],
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  positionManager(overrides?: CallOverrides): Promise<string>;
+
+  pull(
+    token: string,
+    value: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  refundETH(
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermit(
+    token: string,
+    value: BigNumberish,
+    deadline: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermitAllowed(
+    token: string,
+    nonce: BigNumberish,
+    expiry: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermitAllowedIfNecessary(
+    token: string,
+    nonce: BigNumberish,
+    expiry: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermitIfNecessary(
+    token: string,
+    value: BigNumberish,
+    deadline: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapExactTokensForTokens(
+    amountIn: BigNumberish,
+    amountOutMin: BigNumberish,
+    path: string[],
+    to: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapTokensForExactTokens(
+    amountOut: BigNumberish,
+    amountInMax: BigNumberish,
+    path: string[],
+    to: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "sweepToken(address,uint256,address)"(
+    token: string,
+    amountMinimum: BigNumberish,
+    recipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "sweepToken(address,uint256)"(
+    token: string,
+    amountMinimum: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "sweepTokenWithFee(address,uint256,uint256,address)"(
+    token: string,
+    amountMinimum: BigNumberish,
+    feeBips: BigNumberish,
+    feeRecipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "sweepTokenWithFee(address,uint256,address,uint256,address)"(
+    token: string,
+    amountMinimum: BigNumberish,
+    recipient: string,
+    feeBips: BigNumberish,
+    feeRecipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  uniswapV3SwapCallback(
+    amount0Delta: BigNumberish,
+    amount1Delta: BigNumberish,
+    _data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "unwrapWETH9(uint256,address)"(
+    amountMinimum: BigNumberish,
+    recipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "unwrapWETH9(uint256)"(
+    amountMinimum: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "unwrapWETH9WithFee(uint256,address,uint256,address)"(
+    amountMinimum: BigNumberish,
+    recipient: string,
+    feeBips: BigNumberish,
+    feeRecipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "unwrapWETH9WithFee(uint256,uint256,address)"(
+    amountMinimum: BigNumberish,
+    feeBips: BigNumberish,
+    feeRecipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  wrapETH(
+    value: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    WETH9(overrides?: CallOverrides): Promise<string>;
+
+    approveMax(token: string, overrides?: CallOverrides): Promise<void>;
+
+    approveMaxMinusOne(token: string, overrides?: CallOverrides): Promise<void>;
+
+    approveZeroThenMax(token: string, overrides?: CallOverrides): Promise<void>;
+
+    approveZeroThenMaxMinusOne(
+      token: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    callPositionManager(
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<string>;
+
+    "checkOracleSlippage(bytes[],uint128[],uint24,uint32)"(
+      paths: BytesLike[],
+      amounts: BigNumberish[],
+      maximumTickDivergence: BigNumberish,
+      secondsAgo: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "checkOracleSlippage(bytes,uint24,uint32)"(
+      path: BytesLike,
+      maximumTickDivergence: BigNumberish,
+      secondsAgo: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    exactInput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    exactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    exactOutput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    exactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<string>;
+
+    factoryV2(overrides?: CallOverrides): Promise<string>;
+
+    getApprovalType(
+      token: string,
+      amount: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<number>;
+
+    increaseLiquidity(
+      params: {
+        token0: string;
+        token1: string;
+        tokenId: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<string>;
+
+    mint(
+      params: {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+      },
+      overrides?: CallOverrides
+    ): Promise<string>;
+
+    "multicall(bytes32,bytes[])"(
+      previousBlockhash: BytesLike,
+      data: BytesLike[],
+      overrides?: CallOverrides
+    ): Promise<string[]>;
+
+    "multicall(uint256,bytes[])"(
+      deadline: BigNumberish,
+      data: BytesLike[],
+      overrides?: CallOverrides
+    ): Promise<string[]>;
+
+    "multicall(bytes[])"(
+      data: BytesLike[],
+      overrides?: CallOverrides
+    ): Promise<string[]>;
+
+    positionManager(overrides?: CallOverrides): Promise<string>;
+
+    pull(
+      token: string,
+      value: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    refundETH(overrides?: CallOverrides): Promise<void>;
+
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    "sweepToken(address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "sweepToken(address,uint256)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "sweepTokenWithFee(address,uint256,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "sweepTokenWithFee(address,uint256,address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      _data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "unwrapWETH9(uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "unwrapWETH9(uint256)"(
+      amountMinimum: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "unwrapWETH9WithFee(uint256,address,uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "unwrapWETH9WithFee(uint256,uint256,address)"(
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    wrapETH(value: BigNumberish, overrides?: CallOverrides): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    WETH9(overrides?: CallOverrides): Promise<BigNumber>;
+
+    approveMax(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    approveMaxMinusOne(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    approveZeroThenMax(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    approveZeroThenMaxMinusOne(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    callPositionManager(
+      data: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "checkOracleSlippage(bytes[],uint128[],uint24,uint32)"(
+      paths: BytesLike[],
+      amounts: BigNumberish[],
+      maximumTickDivergence: BigNumberish,
+      secondsAgo: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    "checkOracleSlippage(bytes,uint24,uint32)"(
+      path: BytesLike,
+      maximumTickDivergence: BigNumberish,
+      secondsAgo: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    exactInput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    exactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    exactOutput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    exactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<BigNumber>;
+
+    factoryV2(overrides?: CallOverrides): Promise<BigNumber>;
+
+    getApprovalType(
+      token: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    increaseLiquidity(
+      params: {
+        token0: string;
+        token1: string;
+        tokenId: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    mint(
+      params: {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "multicall(bytes32,bytes[])"(
+      previousBlockhash: BytesLike,
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "multicall(uint256,bytes[])"(
+      deadline: BigNumberish,
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "multicall(bytes[])"(
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    positionManager(overrides?: CallOverrides): Promise<BigNumber>;
+
+    pull(
+      token: string,
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "sweepToken(address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "sweepToken(address,uint256)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "sweepTokenWithFee(address,uint256,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "sweepTokenWithFee(address,uint256,address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      _data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "unwrapWETH9(uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "unwrapWETH9(uint256)"(
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "unwrapWETH9WithFee(uint256,address,uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "unwrapWETH9WithFee(uint256,uint256,address)"(
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    wrapETH(
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    WETH9(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    approveMax(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    approveMaxMinusOne(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    approveZeroThenMax(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    approveZeroThenMaxMinusOne(
+      token: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    callPositionManager(
+      data: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "checkOracleSlippage(bytes[],uint128[],uint24,uint32)"(
+      paths: BytesLike[],
+      amounts: BigNumberish[],
+      maximumTickDivergence: BigNumberish,
+      secondsAgo: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    "checkOracleSlippage(bytes,uint24,uint32)"(
+      path: BytesLike,
+      maximumTickDivergence: BigNumberish,
+      secondsAgo: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    exactInput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    exactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    exactOutput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    exactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    factoryV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    getApprovalType(
+      token: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    increaseLiquidity(
+      params: {
+        token0: string;
+        token1: string;
+        tokenId: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    mint(
+      params: {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "multicall(bytes32,bytes[])"(
+      previousBlockhash: BytesLike,
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "multicall(uint256,bytes[])"(
+      deadline: BigNumberish,
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "multicall(bytes[])"(
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    positionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    pull(
+      token: string,
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "sweepToken(address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "sweepToken(address,uint256)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "sweepTokenWithFee(address,uint256,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "sweepTokenWithFee(address,uint256,address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      _data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "unwrapWETH9(uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "unwrapWETH9(uint256)"(
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "unwrapWETH9WithFee(uint256,address,uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "unwrapWETH9WithFee(uint256,uint256,address)"(
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    wrapETH(
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/TokenFeeDetector.d.ts b/lib/sor/types/other/TokenFeeDetector.d.ts
new file mode 100644
index 0000000..fa25956
--- /dev/null
+++ b/lib/sor/types/other/TokenFeeDetector.d.ts
@@ -0,0 +1,223 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface TokenFeeDetectorInterface extends ethers.utils.Interface {
+  functions: {
+    "batchValidate(address[],address,uint256)": FunctionFragment;
+    "uniswapV2Call(address,uint256,uint256,bytes)": FunctionFragment;
+    "validate(address,address,uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "batchValidate",
+    values: [string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "uniswapV2Call",
+    values: [string, BigNumberish, BigNumberish, BytesLike]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "validate",
+    values: [string, string, BigNumberish]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "batchValidate",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "uniswapV2Call",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "validate", data: BytesLike): Result;
+
+  events: {};
+}
+
+export class TokenFeeDetector extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: TokenFeeDetectorInterface;
+
+  functions: {
+    batchValidate(
+      tokens: string[],
+      baseToken: string,
+      amountToBorrow: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    uniswapV2Call(
+      arg0: string,
+      amount0: BigNumberish,
+      arg2: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    validate(
+      token: string,
+      baseToken: string,
+      amountToBorrow: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  batchValidate(
+    tokens: string[],
+    baseToken: string,
+    amountToBorrow: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  uniswapV2Call(
+    arg0: string,
+    amount0: BigNumberish,
+    arg2: BigNumberish,
+    data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  validate(
+    token: string,
+    baseToken: string,
+    amountToBorrow: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    batchValidate(
+      tokens: string[],
+      baseToken: string,
+      amountToBorrow: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      ([BigNumber, BigNumber] & {
+        buyFeeBps: BigNumber;
+        sellFeeBps: BigNumber;
+      })[]
+    >;
+
+    uniswapV2Call(
+      arg0: string,
+      amount0: BigNumberish,
+      arg2: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    validate(
+      token: string,
+      baseToken: string,
+      amountToBorrow: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { buyFeeBps: BigNumber; sellFeeBps: BigNumber }
+    >;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    batchValidate(
+      tokens: string[],
+      baseToken: string,
+      amountToBorrow: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    uniswapV2Call(
+      arg0: string,
+      amount0: BigNumberish,
+      arg2: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    validate(
+      token: string,
+      baseToken: string,
+      amountToBorrow: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    batchValidate(
+      tokens: string[],
+      baseToken: string,
+      amountToBorrow: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    uniswapV2Call(
+      arg0: string,
+      amount0: BigNumberish,
+      arg2: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    validate(
+      token: string,
+      baseToken: string,
+      amountToBorrow: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/TokenValidator.d.ts b/lib/sor/types/other/TokenValidator.d.ts
new file mode 100644
index 0000000..697d141
--- /dev/null
+++ b/lib/sor/types/other/TokenValidator.d.ts
@@ -0,0 +1,248 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface TokenValidatorInterface extends ethers.utils.Interface {
+  functions: {
+    "batchValidate(address[],address[],uint256)": FunctionFragment;
+    "factoryV2()": FunctionFragment;
+    "positionManager()": FunctionFragment;
+    "uniswapV2Call(address,uint256,uint256,bytes)": FunctionFragment;
+    "validate(address,address[],uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "batchValidate",
+    values: [string[], string[], BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "factoryV2", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "positionManager",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "uniswapV2Call",
+    values: [string, BigNumberish, BigNumberish, BytesLike]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "validate",
+    values: [string, string[], BigNumberish]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "batchValidate",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "factoryV2", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "positionManager",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "uniswapV2Call",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "validate", data: BytesLike): Result;
+
+  events: {};
+}
+
+export class TokenValidator extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: TokenValidatorInterface;
+
+  functions: {
+    batchValidate(
+      tokens: string[],
+      baseTokens: string[],
+      amountToBorrow: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    factoryV2(overrides?: CallOverrides): Promise<[string]>;
+
+    positionManager(overrides?: CallOverrides): Promise<[string]>;
+
+    uniswapV2Call(
+      arg0: string,
+      amount0: BigNumberish,
+      arg2: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<[void]>;
+
+    validate(
+      token: string,
+      baseTokens: string[],
+      amountToBorrow: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  batchValidate(
+    tokens: string[],
+    baseTokens: string[],
+    amountToBorrow: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  factoryV2(overrides?: CallOverrides): Promise<string>;
+
+  positionManager(overrides?: CallOverrides): Promise<string>;
+
+  uniswapV2Call(
+    arg0: string,
+    amount0: BigNumberish,
+    arg2: BigNumberish,
+    data: BytesLike,
+    overrides?: CallOverrides
+  ): Promise<void>;
+
+  validate(
+    token: string,
+    baseTokens: string[],
+    amountToBorrow: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    batchValidate(
+      tokens: string[],
+      baseTokens: string[],
+      amountToBorrow: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<number[]>;
+
+    factoryV2(overrides?: CallOverrides): Promise<string>;
+
+    positionManager(overrides?: CallOverrides): Promise<string>;
+
+    uniswapV2Call(
+      arg0: string,
+      amount0: BigNumberish,
+      arg2: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    validate(
+      token: string,
+      baseTokens: string[],
+      amountToBorrow: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<number>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    batchValidate(
+      tokens: string[],
+      baseTokens: string[],
+      amountToBorrow: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    factoryV2(overrides?: CallOverrides): Promise<BigNumber>;
+
+    positionManager(overrides?: CallOverrides): Promise<BigNumber>;
+
+    uniswapV2Call(
+      arg0: string,
+      amount0: BigNumberish,
+      arg2: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    validate(
+      token: string,
+      baseTokens: string[],
+      amountToBorrow: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    batchValidate(
+      tokens: string[],
+      baseTokens: string[],
+      amountToBorrow: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    factoryV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    positionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    uniswapV2Call(
+      arg0: string,
+      amount0: BigNumberish,
+      arg2: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    validate(
+      token: string,
+      baseTokens: string[],
+      amountToBorrow: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/V2SwapRouter.d.ts b/lib/sor/types/other/V2SwapRouter.d.ts
new file mode 100644
index 0000000..449b6a8
--- /dev/null
+++ b/lib/sor/types/other/V2SwapRouter.d.ts
@@ -0,0 +1,636 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface V2SwapRouterInterface extends ethers.utils.Interface {
+  functions: {
+    "WETH9()": FunctionFragment;
+    "factory()": FunctionFragment;
+    "factoryV2()": FunctionFragment;
+    "positionManager()": FunctionFragment;
+    "pull(address,uint256)": FunctionFragment;
+    "refundETH()": FunctionFragment;
+    "swapExactTokensForTokens(uint256,uint256,address[],address)": FunctionFragment;
+    "swapTokensForExactTokens(uint256,uint256,address[],address)": FunctionFragment;
+    "sweepToken(address,uint256,address)": FunctionFragment;
+    "sweepTokenWithFee(address,uint256,uint256,address)": FunctionFragment;
+    "unwrapWETH9(uint256,address)": FunctionFragment;
+    "unwrapWETH9WithFee(uint256,address,uint256,address)": FunctionFragment;
+    "wrapETH(uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
+  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
+  encodeFunctionData(functionFragment: "factoryV2", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "positionManager",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "pull",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "refundETH", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "swapExactTokensForTokens",
+    values: [BigNumberish, BigNumberish, string[], string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapTokensForExactTokens",
+    values: [BigNumberish, BigNumberish, string[], string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "sweepToken",
+    values: [string, BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "sweepTokenWithFee",
+    values: [string, BigNumberish, BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "unwrapWETH9",
+    values: [BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "unwrapWETH9WithFee",
+    values: [BigNumberish, string, BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "wrapETH",
+    values: [BigNumberish]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "factoryV2", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "positionManager",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "pull", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "refundETH", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "swapExactTokensForTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapTokensForExactTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "sweepTokenWithFee",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "unwrapWETH9",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "unwrapWETH9WithFee",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "wrapETH", data: BytesLike): Result;
+
+  events: {};
+}
+
+export class V2SwapRouter extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: V2SwapRouterInterface;
+
+  functions: {
+    WETH9(overrides?: CallOverrides): Promise<[string]>;
+
+    factory(overrides?: CallOverrides): Promise<[string]>;
+
+    factoryV2(overrides?: CallOverrides): Promise<[string]>;
+
+    positionManager(overrides?: CallOverrides): Promise<[string]>;
+
+    pull(
+      token: string,
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "sweepToken(address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "sweepToken(address,uint256)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "sweepTokenWithFee(address,uint256,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "sweepTokenWithFee(address,uint256,address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "unwrapWETH9(uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "unwrapWETH9(uint256)"(
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "unwrapWETH9WithFee(uint256,address,uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "unwrapWETH9WithFee(uint256,uint256,address)"(
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    wrapETH(
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  WETH9(overrides?: CallOverrides): Promise<string>;
+
+  factory(overrides?: CallOverrides): Promise<string>;
+
+  factoryV2(overrides?: CallOverrides): Promise<string>;
+
+  positionManager(overrides?: CallOverrides): Promise<string>;
+
+  pull(
+    token: string,
+    value: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  refundETH(
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapExactTokensForTokens(
+    amountIn: BigNumberish,
+    amountOutMin: BigNumberish,
+    path: string[],
+    to: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapTokensForExactTokens(
+    amountOut: BigNumberish,
+    amountInMax: BigNumberish,
+    path: string[],
+    to: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "sweepToken(address,uint256,address)"(
+    token: string,
+    amountMinimum: BigNumberish,
+    recipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "sweepToken(address,uint256)"(
+    token: string,
+    amountMinimum: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "sweepTokenWithFee(address,uint256,uint256,address)"(
+    token: string,
+    amountMinimum: BigNumberish,
+    feeBips: BigNumberish,
+    feeRecipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "sweepTokenWithFee(address,uint256,address,uint256,address)"(
+    token: string,
+    amountMinimum: BigNumberish,
+    recipient: string,
+    feeBips: BigNumberish,
+    feeRecipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "unwrapWETH9(uint256,address)"(
+    amountMinimum: BigNumberish,
+    recipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "unwrapWETH9(uint256)"(
+    amountMinimum: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "unwrapWETH9WithFee(uint256,address,uint256,address)"(
+    amountMinimum: BigNumberish,
+    recipient: string,
+    feeBips: BigNumberish,
+    feeRecipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "unwrapWETH9WithFee(uint256,uint256,address)"(
+    amountMinimum: BigNumberish,
+    feeBips: BigNumberish,
+    feeRecipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  wrapETH(
+    value: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    WETH9(overrides?: CallOverrides): Promise<string>;
+
+    factory(overrides?: CallOverrides): Promise<string>;
+
+    factoryV2(overrides?: CallOverrides): Promise<string>;
+
+    positionManager(overrides?: CallOverrides): Promise<string>;
+
+    pull(
+      token: string,
+      value: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    refundETH(overrides?: CallOverrides): Promise<void>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    "sweepToken(address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "sweepToken(address,uint256)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "sweepTokenWithFee(address,uint256,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "sweepTokenWithFee(address,uint256,address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "unwrapWETH9(uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "unwrapWETH9(uint256)"(
+      amountMinimum: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "unwrapWETH9WithFee(uint256,address,uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "unwrapWETH9WithFee(uint256,uint256,address)"(
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    wrapETH(value: BigNumberish, overrides?: CallOverrides): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    WETH9(overrides?: CallOverrides): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<BigNumber>;
+
+    factoryV2(overrides?: CallOverrides): Promise<BigNumber>;
+
+    positionManager(overrides?: CallOverrides): Promise<BigNumber>;
+
+    pull(
+      token: string,
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "sweepToken(address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "sweepToken(address,uint256)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "sweepTokenWithFee(address,uint256,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "sweepTokenWithFee(address,uint256,address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "unwrapWETH9(uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "unwrapWETH9(uint256)"(
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "unwrapWETH9WithFee(uint256,address,uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "unwrapWETH9WithFee(uint256,uint256,address)"(
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    wrapETH(
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    WETH9(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    factoryV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    positionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    pull(
+      token: string,
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "sweepToken(address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "sweepToken(address,uint256)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "sweepTokenWithFee(address,uint256,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "sweepTokenWithFee(address,uint256,address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "unwrapWETH9(uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "unwrapWETH9(uint256)"(
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "unwrapWETH9WithFee(uint256,address,uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "unwrapWETH9WithFee(uint256,uint256,address)"(
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    wrapETH(
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/V3SwapRouter.d.ts b/lib/sor/types/other/V3SwapRouter.d.ts
new file mode 100644
index 0000000..98b60f3
--- /dev/null
+++ b/lib/sor/types/other/V3SwapRouter.d.ts
@@ -0,0 +1,932 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface V3SwapRouterInterface extends ethers.utils.Interface {
+  functions: {
+    "WETH9()": FunctionFragment;
+    "checkOracleSlippage(bytes[],uint128[],uint24,uint32)": FunctionFragment;
+    "exactInput(tuple)": FunctionFragment;
+    "exactInputSingle(tuple)": FunctionFragment;
+    "exactOutput(tuple)": FunctionFragment;
+    "exactOutputSingle(tuple)": FunctionFragment;
+    "factory()": FunctionFragment;
+    "pull(address,uint256)": FunctionFragment;
+    "refundETH()": FunctionFragment;
+    "sweepToken(address,uint256,address)": FunctionFragment;
+    "sweepTokenWithFee(address,uint256,uint256,address)": FunctionFragment;
+    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
+    "unwrapWETH9(uint256,address)": FunctionFragment;
+    "unwrapWETH9WithFee(uint256,address,uint256,address)": FunctionFragment;
+    "wrapETH(uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "checkOracleSlippage",
+    values: [BytesLike[], BigNumberish[], BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "exactInput",
+    values: [
+      {
+        path: BytesLike;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "exactInputSingle",
+    values: [
+      {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "exactOutput",
+    values: [
+      {
+        path: BytesLike;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "exactOutputSingle",
+    values: [
+      {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "pull",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "refundETH", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "sweepToken",
+    values: [string, BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "sweepTokenWithFee",
+    values: [string, BigNumberish, BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "uniswapV3SwapCallback",
+    values: [BigNumberish, BigNumberish, BytesLike]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "unwrapWETH9",
+    values: [BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "unwrapWETH9WithFee",
+    values: [BigNumberish, string, BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "wrapETH",
+    values: [BigNumberish]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "checkOracleSlippage",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "exactInput", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "exactInputSingle",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "exactOutput",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "exactOutputSingle",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "pull", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "refundETH", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "sweepTokenWithFee",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "uniswapV3SwapCallback",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "unwrapWETH9",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "unwrapWETH9WithFee",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "wrapETH", data: BytesLike): Result;
+
+  events: {};
+}
+
+export class V3SwapRouter extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: V3SwapRouterInterface;
+
+  functions: {
+    WETH9(overrides?: CallOverrides): Promise<[string]>;
+
+    "checkOracleSlippage(bytes[],uint128[],uint24,uint32)"(
+      paths: BytesLike[],
+      amounts: BigNumberish[],
+      maximumTickDivergence: BigNumberish,
+      secondsAgo: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[void]>;
+
+    "checkOracleSlippage(bytes,uint24,uint32)"(
+      path: BytesLike,
+      maximumTickDivergence: BigNumberish,
+      secondsAgo: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[void]>;
+
+    exactInput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    exactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    exactOutput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    exactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<[string]>;
+
+    pull(
+      token: string,
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "sweepToken(address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "sweepToken(address,uint256)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "sweepTokenWithFee(address,uint256,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "sweepTokenWithFee(address,uint256,address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      _data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "unwrapWETH9(uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "unwrapWETH9(uint256)"(
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "unwrapWETH9WithFee(uint256,address,uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "unwrapWETH9WithFee(uint256,uint256,address)"(
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    wrapETH(
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  WETH9(overrides?: CallOverrides): Promise<string>;
+
+  "checkOracleSlippage(bytes[],uint128[],uint24,uint32)"(
+    paths: BytesLike[],
+    amounts: BigNumberish[],
+    maximumTickDivergence: BigNumberish,
+    secondsAgo: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<void>;
+
+  "checkOracleSlippage(bytes,uint24,uint32)"(
+    path: BytesLike,
+    maximumTickDivergence: BigNumberish,
+    secondsAgo: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<void>;
+
+  exactInput(
+    params: {
+      path: BytesLike;
+      recipient: string;
+      amountIn: BigNumberish;
+      amountOutMinimum: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  exactInputSingle(
+    params: {
+      tokenIn: string;
+      tokenOut: string;
+      fee: BigNumberish;
+      recipient: string;
+      amountIn: BigNumberish;
+      amountOutMinimum: BigNumberish;
+      sqrtPriceLimitX96: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  exactOutput(
+    params: {
+      path: BytesLike;
+      recipient: string;
+      amountOut: BigNumberish;
+      amountInMaximum: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  exactOutputSingle(
+    params: {
+      tokenIn: string;
+      tokenOut: string;
+      fee: BigNumberish;
+      recipient: string;
+      amountOut: BigNumberish;
+      amountInMaximum: BigNumberish;
+      sqrtPriceLimitX96: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  factory(overrides?: CallOverrides): Promise<string>;
+
+  pull(
+    token: string,
+    value: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  refundETH(
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "sweepToken(address,uint256,address)"(
+    token: string,
+    amountMinimum: BigNumberish,
+    recipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "sweepToken(address,uint256)"(
+    token: string,
+    amountMinimum: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "sweepTokenWithFee(address,uint256,uint256,address)"(
+    token: string,
+    amountMinimum: BigNumberish,
+    feeBips: BigNumberish,
+    feeRecipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "sweepTokenWithFee(address,uint256,address,uint256,address)"(
+    token: string,
+    amountMinimum: BigNumberish,
+    recipient: string,
+    feeBips: BigNumberish,
+    feeRecipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  uniswapV3SwapCallback(
+    amount0Delta: BigNumberish,
+    amount1Delta: BigNumberish,
+    _data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "unwrapWETH9(uint256,address)"(
+    amountMinimum: BigNumberish,
+    recipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "unwrapWETH9(uint256)"(
+    amountMinimum: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "unwrapWETH9WithFee(uint256,address,uint256,address)"(
+    amountMinimum: BigNumberish,
+    recipient: string,
+    feeBips: BigNumberish,
+    feeRecipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "unwrapWETH9WithFee(uint256,uint256,address)"(
+    amountMinimum: BigNumberish,
+    feeBips: BigNumberish,
+    feeRecipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  wrapETH(
+    value: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    WETH9(overrides?: CallOverrides): Promise<string>;
+
+    "checkOracleSlippage(bytes[],uint128[],uint24,uint32)"(
+      paths: BytesLike[],
+      amounts: BigNumberish[],
+      maximumTickDivergence: BigNumberish,
+      secondsAgo: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "checkOracleSlippage(bytes,uint24,uint32)"(
+      path: BytesLike,
+      maximumTickDivergence: BigNumberish,
+      secondsAgo: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    exactInput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    exactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    exactOutput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    exactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<string>;
+
+    pull(
+      token: string,
+      value: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    refundETH(overrides?: CallOverrides): Promise<void>;
+
+    "sweepToken(address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "sweepToken(address,uint256)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "sweepTokenWithFee(address,uint256,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "sweepTokenWithFee(address,uint256,address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      _data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "unwrapWETH9(uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "unwrapWETH9(uint256)"(
+      amountMinimum: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "unwrapWETH9WithFee(uint256,address,uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "unwrapWETH9WithFee(uint256,uint256,address)"(
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    wrapETH(value: BigNumberish, overrides?: CallOverrides): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    WETH9(overrides?: CallOverrides): Promise<BigNumber>;
+
+    "checkOracleSlippage(bytes[],uint128[],uint24,uint32)"(
+      paths: BytesLike[],
+      amounts: BigNumberish[],
+      maximumTickDivergence: BigNumberish,
+      secondsAgo: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    "checkOracleSlippage(bytes,uint24,uint32)"(
+      path: BytesLike,
+      maximumTickDivergence: BigNumberish,
+      secondsAgo: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    exactInput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    exactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    exactOutput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    exactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<BigNumber>;
+
+    pull(
+      token: string,
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "sweepToken(address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "sweepToken(address,uint256)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "sweepTokenWithFee(address,uint256,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "sweepTokenWithFee(address,uint256,address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      _data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "unwrapWETH9(uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "unwrapWETH9(uint256)"(
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "unwrapWETH9WithFee(uint256,address,uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "unwrapWETH9WithFee(uint256,uint256,address)"(
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    wrapETH(
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    WETH9(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    "checkOracleSlippage(bytes[],uint128[],uint24,uint32)"(
+      paths: BytesLike[],
+      amounts: BigNumberish[],
+      maximumTickDivergence: BigNumberish,
+      secondsAgo: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    "checkOracleSlippage(bytes,uint24,uint32)"(
+      path: BytesLike,
+      maximumTickDivergence: BigNumberish,
+      secondsAgo: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    exactInput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    exactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    exactOutput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    exactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    pull(
+      token: string,
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "sweepToken(address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "sweepToken(address,uint256)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "sweepTokenWithFee(address,uint256,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "sweepTokenWithFee(address,uint256,address,uint256,address)"(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      _data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "unwrapWETH9(uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "unwrapWETH9(uint256)"(
+      amountMinimum: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "unwrapWETH9WithFee(uint256,address,uint256,address)"(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "unwrapWETH9WithFee(uint256,uint256,address)"(
+      amountMinimum: BigNumberish,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    wrapETH(
+      value: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/other/commons.ts b/lib/sor/types/other/commons.ts
new file mode 100644
index 0000000..ceb0535
--- /dev/null
+++ b/lib/sor/types/other/commons.ts
@@ -0,0 +1,36 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Result } from "@ethersproject/abi";
+import { Event, EventFilter } from "ethers";
+
+export interface TypedEventFilter<_EventArgsArray, _EventArgsObject>
+  extends EventFilter {}
+
+export interface TypedEvent<EventArgs extends Result> extends Event {
+  args: EventArgs;
+}
+
+export type TypedListener<
+  EventArgsArray extends Array<any>,
+  EventArgsObject
+> = (
+  ...listenerArg: [
+    ...EventArgsArray,
+    TypedEvent<EventArgsArray & EventArgsObject>
+  ]
+) => void;
+
+export type MinEthersFactory<C, ARGS> = {
+  deploy(...a: ARGS[]): Promise<C>;
+};
+export type GetContractTypeFromFactory<F> = F extends MinEthersFactory<
+  infer C,
+  any
+>
+  ? C
+  : never;
+export type GetARGsTypeFromFactory<F> = F extends MinEthersFactory<any, any>
+  ? Parameters<F["deploy"]>
+  : never;
diff --git a/lib/sor/types/other/factories/Erc20__factory.ts b/lib/sor/types/other/factories/Erc20__factory.ts
new file mode 100644
index 0000000..5f89ebe
--- /dev/null
+++ b/lib/sor/types/other/factories/Erc20__factory.ts
@@ -0,0 +1,240 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type { Erc20, Erc20Interface } from "../Erc20";
+
+const _abi = [
+  {
+    constant: true,
+    inputs: [],
+    name: "name",
+    outputs: [
+      {
+        name: "",
+        type: "string",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: false,
+    inputs: [
+      {
+        name: "_spender",
+        type: "address",
+      },
+      {
+        name: "_value",
+        type: "uint256",
+      },
+    ],
+    name: "approve",
+    outputs: [
+      {
+        name: "",
+        type: "bool",
+      },
+    ],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "totalSupply",
+    outputs: [
+      {
+        name: "",
+        type: "uint256",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: false,
+    inputs: [
+      {
+        name: "_from",
+        type: "address",
+      },
+      {
+        name: "_to",
+        type: "address",
+      },
+      {
+        name: "_value",
+        type: "uint256",
+      },
+    ],
+    name: "transferFrom",
+    outputs: [
+      {
+        name: "",
+        type: "bool",
+      },
+    ],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "decimals",
+    outputs: [
+      {
+        name: "",
+        type: "uint8",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [
+      {
+        name: "_owner",
+        type: "address",
+      },
+    ],
+    name: "balanceOf",
+    outputs: [
+      {
+        name: "balance",
+        type: "uint256",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "symbol",
+    outputs: [
+      {
+        name: "",
+        type: "string",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: false,
+    inputs: [
+      {
+        name: "_to",
+        type: "address",
+      },
+      {
+        name: "_value",
+        type: "uint256",
+      },
+    ],
+    name: "transfer",
+    outputs: [
+      {
+        name: "",
+        type: "bool",
+      },
+    ],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [
+      {
+        name: "_owner",
+        type: "address",
+      },
+      {
+        name: "_spender",
+        type: "address",
+      },
+    ],
+    name: "allowance",
+    outputs: [
+      {
+        name: "",
+        type: "uint256",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    payable: true,
+    stateMutability: "payable",
+    type: "fallback",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        name: "spender",
+        type: "address",
+      },
+      {
+        indexed: false,
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "Approval",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        name: "from",
+        type: "address",
+      },
+      {
+        indexed: true,
+        name: "to",
+        type: "address",
+      },
+      {
+        indexed: false,
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "Transfer",
+    type: "event",
+  },
+];
+
+export class Erc20__factory {
+  static readonly abi = _abi;
+  static createInterface(): Erc20Interface {
+    return new utils.Interface(_abi) as Erc20Interface;
+  }
+  static connect(address: string, signerOrProvider: Signer | Provider): Erc20 {
+    return new Contract(address, _abi, signerOrProvider) as Erc20;
+  }
+}
diff --git a/lib/sor/types/other/factories/GasDataArbitrum__factory.ts b/lib/sor/types/other/factories/GasDataArbitrum__factory.ts
new file mode 100644
index 0000000..9bec037
--- /dev/null
+++ b/lib/sor/types/other/factories/GasDataArbitrum__factory.ts
@@ -0,0 +1,64 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  GasDataArbitrum,
+  GasDataArbitrumInterface,
+} from "../GasDataArbitrum";
+
+const _abi = [
+  {
+    inputs: [],
+    name: "getPricesInWei",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+];
+
+export class GasDataArbitrum__factory {
+  static readonly abi = _abi;
+  static createInterface(): GasDataArbitrumInterface {
+    return new utils.Interface(_abi) as GasDataArbitrumInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): GasDataArbitrum {
+    return new Contract(address, _abi, signerOrProvider) as GasDataArbitrum;
+  }
+}
diff --git a/lib/sor/types/other/factories/GasPriceOracle__factory.ts b/lib/sor/types/other/factories/GasPriceOracle__factory.ts
new file mode 100644
index 0000000..1176106
--- /dev/null
+++ b/lib/sor/types/other/factories/GasPriceOracle__factory.ts
@@ -0,0 +1,322 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  GasPriceOracle,
+  GasPriceOracleInterface,
+} from "../GasPriceOracle";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "_owner",
+        type: "address",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "constructor",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    name: "DecimalsUpdated",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    name: "GasPriceUpdated",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    name: "L1BaseFeeUpdated",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    name: "OverheadUpdated",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "previousOwner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "newOwner",
+        type: "address",
+      },
+    ],
+    name: "OwnershipTransferred",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    name: "ScalarUpdated",
+    type: "event",
+  },
+  {
+    inputs: [],
+    name: "decimals",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "gasPrice",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "_data",
+        type: "bytes",
+      },
+    ],
+    name: "getL1Fee",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "_data",
+        type: "bytes",
+      },
+    ],
+    name: "getL1GasUsed",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "l1BaseFee",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "overhead",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "owner",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "renounceOwnership",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "scalar",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "_decimals",
+        type: "uint256",
+      },
+    ],
+    name: "setDecimals",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "_gasPrice",
+        type: "uint256",
+      },
+    ],
+    name: "setGasPrice",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "_baseFee",
+        type: "uint256",
+      },
+    ],
+    name: "setL1BaseFee",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "_overhead",
+        type: "uint256",
+      },
+    ],
+    name: "setOverhead",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "_scalar",
+        type: "uint256",
+      },
+    ],
+    name: "setScalar",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "newOwner",
+        type: "address",
+      },
+    ],
+    name: "transferOwnership",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class GasPriceOracle__factory {
+  static readonly abi = _abi;
+  static createInterface(): GasPriceOracleInterface {
+    return new utils.Interface(_abi) as GasPriceOracleInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): GasPriceOracle {
+    return new Contract(address, _abi, signerOrProvider) as GasPriceOracle;
+  }
+}
diff --git a/lib/sor/types/other/factories/IApproveAndCall__factory.ts b/lib/sor/types/other/factories/IApproveAndCall__factory.ts
new file mode 100644
index 0000000..49a143c
--- /dev/null
+++ b/lib/sor/types/other/factories/IApproveAndCall__factory.ts
@@ -0,0 +1,228 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IApproveAndCall,
+  IApproveAndCallInterface,
+} from "../IApproveAndCall";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+    ],
+    name: "approveMax",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+    ],
+    name: "approveMaxMinusOne",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+    ],
+    name: "approveZeroThenMax",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+    ],
+    name: "approveZeroThenMaxMinusOne",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "callPositionManager",
+    outputs: [
+      {
+        internalType: "bytes",
+        name: "result",
+        type: "bytes",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amount",
+        type: "uint256",
+      },
+    ],
+    name: "getApprovalType",
+    outputs: [
+      {
+        internalType: "enum IApproveAndCall.ApprovalType",
+        name: "",
+        type: "uint8",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "token0",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "token1",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "tokenId",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount0Min",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount1Min",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct IApproveAndCall.IncreaseLiquidityParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "increaseLiquidity",
+    outputs: [
+      {
+        internalType: "bytes",
+        name: "result",
+        type: "bytes",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "token0",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "token1",
+            type: "address",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "int24",
+            name: "tickLower",
+            type: "int24",
+          },
+          {
+            internalType: "int24",
+            name: "tickUpper",
+            type: "int24",
+          },
+          {
+            internalType: "uint256",
+            name: "amount0Min",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount1Min",
+            type: "uint256",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+        ],
+        internalType: "struct IApproveAndCall.MintParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "mint",
+    outputs: [
+      {
+        internalType: "bytes",
+        name: "result",
+        type: "bytes",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+];
+
+export class IApproveAndCall__factory {
+  static readonly abi = _abi;
+  static createInterface(): IApproveAndCallInterface {
+    return new utils.Interface(_abi) as IApproveAndCallInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IApproveAndCall {
+    return new Contract(address, _abi, signerOrProvider) as IApproveAndCall;
+  }
+}
diff --git a/lib/sor/types/other/factories/IImmutableState__factory.ts b/lib/sor/types/other/factories/IImmutableState__factory.ts
new file mode 100644
index 0000000..a84767e
--- /dev/null
+++ b/lib/sor/types/other/factories/IImmutableState__factory.ts
@@ -0,0 +1,52 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IImmutableState,
+  IImmutableStateInterface,
+} from "../IImmutableState";
+
+const _abi = [
+  {
+    inputs: [],
+    name: "factoryV2",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "positionManager",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+];
+
+export class IImmutableState__factory {
+  static readonly abi = _abi;
+  static createInterface(): IImmutableStateInterface {
+    return new utils.Interface(_abi) as IImmutableStateInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IImmutableState {
+    return new Contract(address, _abi, signerOrProvider) as IImmutableState;
+  }
+}
diff --git a/lib/sor/types/other/factories/IMixedRouteQuoterV1__factory.ts b/lib/sor/types/other/factories/IMixedRouteQuoterV1__factory.ts
new file mode 100644
index 0000000..7ade3b8
--- /dev/null
+++ b/lib/sor/types/other/factories/IMixedRouteQuoterV1__factory.ts
@@ -0,0 +1,164 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IMixedRouteQuoterV1,
+  IMixedRouteQuoterV1Interface,
+} from "../IMixedRouteQuoterV1";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    name: "quoteExactInput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160[]",
+        name: "v3SqrtPriceX96AfterList",
+        type: "uint160[]",
+      },
+      {
+        internalType: "uint32[]",
+        name: "v3InitializedTicksCrossedList",
+        type: "uint32[]",
+      },
+      {
+        internalType: "uint256",
+        name: "v3SwapGasEstimate",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "tokenIn",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "tokenOut",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amountIn",
+            type: "uint256",
+          },
+        ],
+        internalType:
+          "struct IMixedRouteQuoterV1.QuoteExactInputSingleV2Params",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "quoteExactInputSingleV2",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "tokenIn",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "tokenOut",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amountIn",
+            type: "uint256",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "uint160",
+            name: "sqrtPriceLimitX96",
+            type: "uint160",
+          },
+        ],
+        internalType:
+          "struct IMixedRouteQuoterV1.QuoteExactInputSingleV3Params",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "quoteExactInputSingleV3",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceX96After",
+        type: "uint160",
+      },
+      {
+        internalType: "uint32",
+        name: "initializedTicksCrossed",
+        type: "uint32",
+      },
+      {
+        internalType: "uint256",
+        name: "gasEstimate",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IMixedRouteQuoterV1__factory {
+  static readonly abi = _abi;
+  static createInterface(): IMixedRouteQuoterV1Interface {
+    return new utils.Interface(_abi) as IMixedRouteQuoterV1Interface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IMixedRouteQuoterV1 {
+    return new Contract(address, _abi, signerOrProvider) as IMixedRouteQuoterV1;
+  }
+}
diff --git a/lib/sor/types/other/factories/IMulticallExtended__factory.ts b/lib/sor/types/other/factories/IMulticallExtended__factory.ts
new file mode 100644
index 0000000..243aee9
--- /dev/null
+++ b/lib/sor/types/other/factories/IMulticallExtended__factory.ts
@@ -0,0 +1,93 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IMulticallExtended,
+  IMulticallExtendedInterface,
+} from "../IMulticallExtended";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "bytes32",
+        name: "previousBlockhash",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes[]",
+        name: "data",
+        type: "bytes[]",
+      },
+    ],
+    name: "multicall",
+    outputs: [
+      {
+        internalType: "bytes[]",
+        name: "results",
+        type: "bytes[]",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "bytes[]",
+        name: "data",
+        type: "bytes[]",
+      },
+    ],
+    name: "multicall",
+    outputs: [
+      {
+        internalType: "bytes[]",
+        name: "results",
+        type: "bytes[]",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes[]",
+        name: "data",
+        type: "bytes[]",
+      },
+    ],
+    name: "multicall",
+    outputs: [
+      {
+        internalType: "bytes[]",
+        name: "results",
+        type: "bytes[]",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+];
+
+export class IMulticallExtended__factory {
+  static readonly abi = _abi;
+  static createInterface(): IMulticallExtendedInterface {
+    return new utils.Interface(_abi) as IMulticallExtendedInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IMulticallExtended {
+    return new Contract(address, _abi, signerOrProvider) as IMulticallExtended;
+  }
+}
diff --git a/lib/sor/types/other/factories/IOracleSlippage__factory.ts b/lib/sor/types/other/factories/IOracleSlippage__factory.ts
new file mode 100644
index 0000000..afe8f98
--- /dev/null
+++ b/lib/sor/types/other/factories/IOracleSlippage__factory.ts
@@ -0,0 +1,77 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IOracleSlippage,
+  IOracleSlippageInterface,
+} from "../IOracleSlippage";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "bytes[]",
+        name: "paths",
+        type: "bytes[]",
+      },
+      {
+        internalType: "uint128[]",
+        name: "amounts",
+        type: "uint128[]",
+      },
+      {
+        internalType: "uint24",
+        name: "maximumTickDivergence",
+        type: "uint24",
+      },
+      {
+        internalType: "uint32",
+        name: "secondsAgo",
+        type: "uint32",
+      },
+    ],
+    name: "checkOracleSlippage",
+    outputs: [],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+      {
+        internalType: "uint24",
+        name: "maximumTickDivergence",
+        type: "uint24",
+      },
+      {
+        internalType: "uint32",
+        name: "secondsAgo",
+        type: "uint32",
+      },
+    ],
+    name: "checkOracleSlippage",
+    outputs: [],
+    stateMutability: "view",
+    type: "function",
+  },
+];
+
+export class IOracleSlippage__factory {
+  static readonly abi = _abi;
+  static createInterface(): IOracleSlippageInterface {
+    return new utils.Interface(_abi) as IOracleSlippageInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IOracleSlippage {
+    return new Contract(address, _abi, signerOrProvider) as IOracleSlippage;
+  }
+}
diff --git a/lib/sor/types/other/factories/IPeripheryPaymentsExtended__factory.ts b/lib/sor/types/other/factories/IPeripheryPaymentsExtended__factory.ts
new file mode 100644
index 0000000..645c83d
--- /dev/null
+++ b/lib/sor/types/other/factories/IPeripheryPaymentsExtended__factory.ts
@@ -0,0 +1,140 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IPeripheryPaymentsExtended,
+  IPeripheryPaymentsExtendedInterface,
+} from "../IPeripheryPaymentsExtended";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "pull",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "refundETH",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+    ],
+    name: "sweepToken",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+    ],
+    name: "sweepToken",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+    ],
+    name: "unwrapWETH9",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+    ],
+    name: "unwrapWETH9",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "wrapETH",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+];
+
+export class IPeripheryPaymentsExtended__factory {
+  static readonly abi = _abi;
+  static createInterface(): IPeripheryPaymentsExtendedInterface {
+    return new utils.Interface(_abi) as IPeripheryPaymentsExtendedInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IPeripheryPaymentsExtended {
+    return new Contract(
+      address,
+      _abi,
+      signerOrProvider
+    ) as IPeripheryPaymentsExtended;
+  }
+}
diff --git a/lib/sor/types/other/factories/IPeripheryPaymentsWithFeeExtended__factory.ts b/lib/sor/types/other/factories/IPeripheryPaymentsWithFeeExtended__factory.ts
new file mode 100644
index 0000000..a63aa08
--- /dev/null
+++ b/lib/sor/types/other/factories/IPeripheryPaymentsWithFeeExtended__factory.ts
@@ -0,0 +1,254 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IPeripheryPaymentsWithFeeExtended,
+  IPeripheryPaymentsWithFeeExtendedInterface,
+} from "../IPeripheryPaymentsWithFeeExtended";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "pull",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "refundETH",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+    ],
+    name: "sweepToken",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+    ],
+    name: "sweepToken",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "feeBips",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "feeRecipient",
+        type: "address",
+      },
+    ],
+    name: "sweepTokenWithFee",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "feeBips",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "feeRecipient",
+        type: "address",
+      },
+    ],
+    name: "sweepTokenWithFee",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+    ],
+    name: "unwrapWETH9",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+    ],
+    name: "unwrapWETH9",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "feeBips",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "feeRecipient",
+        type: "address",
+      },
+    ],
+    name: "unwrapWETH9WithFee",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "feeBips",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "feeRecipient",
+        type: "address",
+      },
+    ],
+    name: "unwrapWETH9WithFee",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "wrapETH",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+];
+
+export class IPeripheryPaymentsWithFeeExtended__factory {
+  static readonly abi = _abi;
+  static createInterface(): IPeripheryPaymentsWithFeeExtendedInterface {
+    return new utils.Interface(
+      _abi
+    ) as IPeripheryPaymentsWithFeeExtendedInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IPeripheryPaymentsWithFeeExtended {
+    return new Contract(
+      address,
+      _abi,
+      signerOrProvider
+    ) as IPeripheryPaymentsWithFeeExtended;
+  }
+}
diff --git a/lib/sor/types/other/factories/IQuoterV2__factory.ts b/lib/sor/types/other/factories/IQuoterV2__factory.ts
new file mode 100644
index 0000000..e16bef9
--- /dev/null
+++ b/lib/sor/types/other/factories/IQuoterV2__factory.ts
@@ -0,0 +1,223 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type { IQuoterV2, IQuoterV2Interface } from "../IQuoterV2";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    name: "quoteExactInput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160[]",
+        name: "sqrtPriceX96AfterList",
+        type: "uint160[]",
+      },
+      {
+        internalType: "uint32[]",
+        name: "initializedTicksCrossedList",
+        type: "uint32[]",
+      },
+      {
+        internalType: "uint256",
+        name: "gasEstimate",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "tokenIn",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "tokenOut",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amountIn",
+            type: "uint256",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "uint160",
+            name: "sqrtPriceLimitX96",
+            type: "uint160",
+          },
+        ],
+        internalType: "struct IQuoterV2.QuoteExactInputSingleParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "quoteExactInputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceX96After",
+        type: "uint160",
+      },
+      {
+        internalType: "uint32",
+        name: "initializedTicksCrossed",
+        type: "uint32",
+      },
+      {
+        internalType: "uint256",
+        name: "gasEstimate",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    name: "quoteExactOutput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160[]",
+        name: "sqrtPriceX96AfterList",
+        type: "uint160[]",
+      },
+      {
+        internalType: "uint32[]",
+        name: "initializedTicksCrossedList",
+        type: "uint32[]",
+      },
+      {
+        internalType: "uint256",
+        name: "gasEstimate",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "tokenIn",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "tokenOut",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amount",
+            type: "uint256",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "uint160",
+            name: "sqrtPriceLimitX96",
+            type: "uint160",
+          },
+        ],
+        internalType: "struct IQuoterV2.QuoteExactOutputSingleParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "quoteExactOutputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceX96After",
+        type: "uint160",
+      },
+      {
+        internalType: "uint32",
+        name: "initializedTicksCrossed",
+        type: "uint32",
+      },
+      {
+        internalType: "uint256",
+        name: "gasEstimate",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IQuoterV2__factory {
+  static readonly abi = _abi;
+  static createInterface(): IQuoterV2Interface {
+    return new utils.Interface(_abi) as IQuoterV2Interface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IQuoterV2 {
+    return new Contract(address, _abi, signerOrProvider) as IQuoterV2;
+  }
+}
diff --git a/lib/sor/types/other/factories/IQuoter__factory.ts b/lib/sor/types/other/factories/IQuoter__factory.ts
new file mode 100644
index 0000000..e80f69a
--- /dev/null
+++ b/lib/sor/types/other/factories/IQuoter__factory.ts
@@ -0,0 +1,149 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type { IQuoter, IQuoterInterface } from "../IQuoter";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    name: "quoteExactInput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenIn",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenOut",
+        type: "address",
+      },
+      {
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceLimitX96",
+        type: "uint160",
+      },
+    ],
+    name: "quoteExactInputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    name: "quoteExactOutput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenIn",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenOut",
+        type: "address",
+      },
+      {
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceLimitX96",
+        type: "uint160",
+      },
+    ],
+    name: "quoteExactOutputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IQuoter__factory {
+  static readonly abi = _abi;
+  static createInterface(): IQuoterInterface {
+    return new utils.Interface(_abi) as IQuoterInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IQuoter {
+    return new Contract(address, _abi, signerOrProvider) as IQuoter;
+  }
+}
diff --git a/lib/sor/types/other/factories/ISwapRouter02__factory.ts b/lib/sor/types/other/factories/ISwapRouter02__factory.ts
new file mode 100644
index 0000000..2806e71
--- /dev/null
+++ b/lib/sor/types/other/factories/ISwapRouter02__factory.ts
@@ -0,0 +1,729 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type { ISwapRouter02, ISwapRouter02Interface } from "../ISwapRouter02";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+    ],
+    name: "approveMax",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+    ],
+    name: "approveMaxMinusOne",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+    ],
+    name: "approveZeroThenMax",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+    ],
+    name: "approveZeroThenMaxMinusOne",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "callPositionManager",
+    outputs: [
+      {
+        internalType: "bytes",
+        name: "result",
+        type: "bytes",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "bytes",
+            name: "path",
+            type: "bytes",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amountIn",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountOutMinimum",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct IV3SwapRouter.ExactInputParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "exactInput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "tokenIn",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "tokenOut",
+            type: "address",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amountIn",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountOutMinimum",
+            type: "uint256",
+          },
+          {
+            internalType: "uint160",
+            name: "sqrtPriceLimitX96",
+            type: "uint160",
+          },
+        ],
+        internalType: "struct IV3SwapRouter.ExactInputSingleParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "exactInputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "bytes",
+            name: "path",
+            type: "bytes",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amountOut",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountInMaximum",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct IV3SwapRouter.ExactOutputParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "exactOutput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "tokenIn",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "tokenOut",
+            type: "address",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amountOut",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountInMaximum",
+            type: "uint256",
+          },
+          {
+            internalType: "uint160",
+            name: "sqrtPriceLimitX96",
+            type: "uint160",
+          },
+        ],
+        internalType: "struct IV3SwapRouter.ExactOutputSingleParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "exactOutputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amount",
+        type: "uint256",
+      },
+    ],
+    name: "getApprovalType",
+    outputs: [
+      {
+        internalType: "enum IApproveAndCall.ApprovalType",
+        name: "",
+        type: "uint8",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "token0",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "token1",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "tokenId",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount0Min",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount1Min",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct IApproveAndCall.IncreaseLiquidityParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "increaseLiquidity",
+    outputs: [
+      {
+        internalType: "bytes",
+        name: "result",
+        type: "bytes",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "token0",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "token1",
+            type: "address",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "int24",
+            name: "tickLower",
+            type: "int24",
+          },
+          {
+            internalType: "int24",
+            name: "tickUpper",
+            type: "int24",
+          },
+          {
+            internalType: "uint256",
+            name: "amount0Min",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount1Min",
+            type: "uint256",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+        ],
+        internalType: "struct IApproveAndCall.MintParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "mint",
+    outputs: [
+      {
+        internalType: "bytes",
+        name: "result",
+        type: "bytes",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes32",
+        name: "previousBlockhash",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes[]",
+        name: "data",
+        type: "bytes[]",
+      },
+    ],
+    name: "multicall",
+    outputs: [
+      {
+        internalType: "bytes[]",
+        name: "results",
+        type: "bytes[]",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "bytes[]",
+        name: "data",
+        type: "bytes[]",
+      },
+    ],
+    name: "multicall",
+    outputs: [
+      {
+        internalType: "bytes[]",
+        name: "results",
+        type: "bytes[]",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes[]",
+        name: "data",
+        type: "bytes[]",
+      },
+    ],
+    name: "multicall",
+    outputs: [
+      {
+        internalType: "bytes[]",
+        name: "results",
+        type: "bytes[]",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermit",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "nonce",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "expiry",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermitAllowed",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "nonce",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "expiry",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermitAllowedIfNecessary",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermitIfNecessary",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOutMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+    ],
+    name: "swapExactTokensForTokens",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountInMax",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+    ],
+    name: "swapTokensForExactTokens",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "int256",
+        name: "amount0Delta",
+        type: "int256",
+      },
+      {
+        internalType: "int256",
+        name: "amount1Delta",
+        type: "int256",
+      },
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "uniswapV3SwapCallback",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class ISwapRouter02__factory {
+  static readonly abi = _abi;
+  static createInterface(): ISwapRouter02Interface {
+    return new utils.Interface(_abi) as ISwapRouter02Interface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): ISwapRouter02 {
+    return new Contract(address, _abi, signerOrProvider) as ISwapRouter02;
+  }
+}
diff --git a/lib/sor/types/other/factories/ITokenValidator__factory.ts b/lib/sor/types/other/factories/ITokenValidator__factory.ts
new file mode 100644
index 0000000..66df5ed
--- /dev/null
+++ b/lib/sor/types/other/factories/ITokenValidator__factory.ts
@@ -0,0 +1,84 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  ITokenValidator,
+  ITokenValidatorInterface,
+} from "../ITokenValidator";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address[]",
+        name: "tokens",
+        type: "address[]",
+      },
+      {
+        internalType: "address[]",
+        name: "baseTokens",
+        type: "address[]",
+      },
+      {
+        internalType: "uint256",
+        name: "amountToBorrow",
+        type: "uint256",
+      },
+    ],
+    name: "batchValidate",
+    outputs: [
+      {
+        internalType: "enum ITokenValidator.Status[]",
+        name: "",
+        type: "uint8[]",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "address[]",
+        name: "baseTokens",
+        type: "address[]",
+      },
+      {
+        internalType: "uint256",
+        name: "amountToBorrow",
+        type: "uint256",
+      },
+    ],
+    name: "validate",
+    outputs: [
+      {
+        internalType: "enum ITokenValidator.Status",
+        name: "",
+        type: "uint8",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class ITokenValidator__factory {
+  static readonly abi = _abi;
+  static createInterface(): ITokenValidatorInterface {
+    return new utils.Interface(_abi) as ITokenValidatorInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): ITokenValidator {
+    return new Contract(address, _abi, signerOrProvider) as ITokenValidator;
+  }
+}
diff --git a/lib/sor/types/other/factories/IV2SwapRouter__factory.ts b/lib/sor/types/other/factories/IV2SwapRouter__factory.ts
new file mode 100644
index 0000000..d20adce
--- /dev/null
+++ b/lib/sor/types/other/factories/IV2SwapRouter__factory.ts
@@ -0,0 +1,91 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type { IV2SwapRouter, IV2SwapRouterInterface } from "../IV2SwapRouter";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOutMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+    ],
+    name: "swapExactTokensForTokens",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountInMax",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+    ],
+    name: "swapTokensForExactTokens",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+];
+
+export class IV2SwapRouter__factory {
+  static readonly abi = _abi;
+  static createInterface(): IV2SwapRouterInterface {
+    return new utils.Interface(_abi) as IV2SwapRouterInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IV2SwapRouter {
+    return new Contract(address, _abi, signerOrProvider) as IV2SwapRouter;
+  }
+}
diff --git a/lib/sor/types/other/factories/IV3SwapRouter__factory.ts b/lib/sor/types/other/factories/IV3SwapRouter__factory.ts
new file mode 100644
index 0000000..38c89c3
--- /dev/null
+++ b/lib/sor/types/other/factories/IV3SwapRouter__factory.ts
@@ -0,0 +1,240 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type { IV3SwapRouter, IV3SwapRouterInterface } from "../IV3SwapRouter";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "bytes",
+            name: "path",
+            type: "bytes",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amountIn",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountOutMinimum",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct IV3SwapRouter.ExactInputParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "exactInput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "tokenIn",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "tokenOut",
+            type: "address",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amountIn",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountOutMinimum",
+            type: "uint256",
+          },
+          {
+            internalType: "uint160",
+            name: "sqrtPriceLimitX96",
+            type: "uint160",
+          },
+        ],
+        internalType: "struct IV3SwapRouter.ExactInputSingleParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "exactInputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "bytes",
+            name: "path",
+            type: "bytes",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amountOut",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountInMaximum",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct IV3SwapRouter.ExactOutputParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "exactOutput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "tokenIn",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "tokenOut",
+            type: "address",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amountOut",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountInMaximum",
+            type: "uint256",
+          },
+          {
+            internalType: "uint160",
+            name: "sqrtPriceLimitX96",
+            type: "uint160",
+          },
+        ],
+        internalType: "struct IV3SwapRouter.ExactOutputSingleParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "exactOutputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "int256",
+        name: "amount0Delta",
+        type: "int256",
+      },
+      {
+        internalType: "int256",
+        name: "amount1Delta",
+        type: "int256",
+      },
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "uniswapV3SwapCallback",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IV3SwapRouter__factory {
+  static readonly abi = _abi;
+  static createInterface(): IV3SwapRouterInterface {
+    return new utils.Interface(_abi) as IV3SwapRouterInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IV3SwapRouter {
+    return new Contract(address, _abi, signerOrProvider) as IV3SwapRouter;
+  }
+}
diff --git a/lib/sor/types/other/factories/IWETH__factory.ts b/lib/sor/types/other/factories/IWETH__factory.ts
new file mode 100644
index 0000000..e0a6c51
--- /dev/null
+++ b/lib/sor/types/other/factories/IWETH__factory.ts
@@ -0,0 +1,64 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type { IWETH, IWETHInterface } from "../IWETH";
+
+const _abi = [
+  {
+    inputs: [],
+    name: "deposit",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "transfer",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    name: "withdraw",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IWETH__factory {
+  static readonly abi = _abi;
+  static createInterface(): IWETHInterface {
+    return new utils.Interface(_abi) as IWETHInterface;
+  }
+  static connect(address: string, signerOrProvider: Signer | Provider): IWETH {
+    return new Contract(address, _abi, signerOrProvider) as IWETH;
+  }
+}
diff --git a/lib/sor/types/other/factories/MixedRouteQuoterV1__factory.ts b/lib/sor/types/other/factories/MixedRouteQuoterV1__factory.ts
new file mode 100644
index 0000000..e0e324c
--- /dev/null
+++ b/lib/sor/types/other/factories/MixedRouteQuoterV1__factory.ts
@@ -0,0 +1,287 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider, TransactionRequest } from "@ethersproject/providers";
+import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
+import type {
+  MixedRouteQuoterV1,
+  MixedRouteQuoterV1Interface,
+} from "../MixedRouteQuoterV1";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "_factory",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "_factoryV2",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "_WETH9",
+        type: "address",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "constructor",
+  },
+  {
+    inputs: [],
+    name: "WETH9",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factory",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factoryV2",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    name: "quoteExactInput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160[]",
+        name: "v3SqrtPriceX96AfterList",
+        type: "uint160[]",
+      },
+      {
+        internalType: "uint32[]",
+        name: "v3InitializedTicksCrossedList",
+        type: "uint32[]",
+      },
+      {
+        internalType: "uint256",
+        name: "v3SwapGasEstimate",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "tokenIn",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "tokenOut",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amountIn",
+            type: "uint256",
+          },
+        ],
+        internalType:
+          "struct IMixedRouteQuoterV1.QuoteExactInputSingleV2Params",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "quoteExactInputSingleV2",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "tokenIn",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "tokenOut",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amountIn",
+            type: "uint256",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "uint160",
+            name: "sqrtPriceLimitX96",
+            type: "uint160",
+          },
+        ],
+        internalType:
+          "struct IMixedRouteQuoterV1.QuoteExactInputSingleV3Params",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "quoteExactInputSingleV3",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceX96After",
+        type: "uint160",
+      },
+      {
+        internalType: "uint32",
+        name: "initializedTicksCrossed",
+        type: "uint32",
+      },
+      {
+        internalType: "uint256",
+        name: "gasEstimate",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "int256",
+        name: "amount0Delta",
+        type: "int256",
+      },
+      {
+        internalType: "int256",
+        name: "amount1Delta",
+        type: "int256",
+      },
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+    ],
+    name: "uniswapV3SwapCallback",
+    outputs: [],
+    stateMutability: "view",
+    type: "function",
+  },
+];
+
+const _bytecode =
+  "0x60e06040523480156200001157600080fd5b506040516200225438038062002254833981016040819052620000349162000078565b6001600160601b0319606093841b811660805290831b811660a052911b1660c052620000c1565b80516001600160a01b03811681146200007357600080fd5b919050565b6000806000606084860312156200008d578283fd5b62000098846200005b565b9250620000a8602085016200005b565b9150620000b8604085016200005b565b90509250925092565b60805160601c60a05160601c60c05160601c61214e620001066000398061015152806107b052508061012d52508061036d528061061252806107f6525061214e6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b174a0a71161005b578063b174a0a7146100c8578063c45a0155146100eb578063cdca1753146100f3578063fa461e33146101165761007d565b80634aa4a4fc1461008257806368e0d4e1146100a05780638a499286146100a8575b600080fd5b61008a61012b565b6040516100979190611ea7565b60405180910390f35b61008a61014f565b6100bb6100b6366004611c32565b610173565b6040516100979190611fa0565b6100db6100d6366004611c96565b610192565b6040516100979493929190612051565b61008a61036b565b610106610101366004611b14565b61038f565b6040516100979493929190611fa9565b610129610124366004611b7a565b6105e1565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061018c8260400151836000015184602001516107a6565b92915050565b60208101518151606083015160009283928392839273ffffffffffffffffffffffffffffffffffffffff808216908416109284926101d092906107ef565b905060005a90508173ffffffffffffffffffffffffffffffffffffffff1663128acb0830856102028c6040015161082d565b60808d015173ffffffffffffffffffffffffffffffffffffffff161561022c578c60800151610252565b8761024b5773fffd8963efd1fc6a506488495d951d5263988d25610252565b6401000276a45b8d600001518e606001518f6020015160405160200161027393929190611e41565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016102a2959493929190611ec8565b6040805180830381600087803b1580156102bb57600080fd5b505af1925050508015610309575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261030691810190611b57565b60015b61035e573d808015610337576040519150601f19603f3d011682016040523d82523d6000602084013e61033c565b606091505b505a8203945061034d81848761085f565b975097509750975050505050610364565b50505050505b9193509193565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000606080600061039f86610933565b67ffffffffffffffff811180156103b557600080fd5b506040519080825280602002602001820160405280156103df578160200160208202803683370190505b5092506103eb86610933565b67ffffffffffffffff8111801561040157600080fd5b5060405190808252806020026020018201604052801561042b578160200160208202803683370190505b50915060005b600080600061043f8a610962565b91945092509050628000008116156104a7576104a060405180606001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018b815250610173565b98506105a0565b6000806000806105246040518060a001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018f81526020018762ffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815250610192565b9350935093509350828b898151811061053957fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818a898151811061058057fe5b63ffffffff90921660209283029190910190910152929b50505094909401935b6001909301926105af8a610993565b156105c4576105bd8a61099b565b99506105d0565b889750505050506105d8565b505050610431565b92959194509250565b60008313806105f05750600082135b6105f957600080fd5b600080600061060784610962565b9250925092506106397f00000000000000000000000000000000000000000000000000000000000000008484846109d0565b506000806000881361067d578473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610886000036106b1565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610876000035b9150915060006106c28686866107ef565b90506000808273ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561070d57600080fd5b505afa158015610721573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107459190611d23565b505050505091509150841561076b57604051848152826020820152816040820152606081fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079d90611f6b565b60405180910390fd5b60008060006107d67f000000000000000000000000000000000000000000000000000000000000000086866109ef565b915091506107e5868383610ad7565b9695505050505050565b60006108257f0000000000000000000000000000000000000000000000000000000000000000610820868686610bad565b610c2a565b949350505050565b60007f8000000000000000000000000000000000000000000000000000000000000000821061085b57600080fd5b5090565b6000806000806000808773ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b1580156108ae57600080fd5b505afa1580156108c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e69190611d23565b509396506108fb94508d9350610d6092505050565b9197509550905061092373ffffffffffffffffffffffffffffffffffffffff89168383610e18565b9350869250505093509350935093565b805160177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec909101045b919050565b600080806109708482611470565b925061097d846014611570565b905061098a846017611470565b91509193909250565b516042111590565b805160609061018c9083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe901611660565b60006109e6856109e1868686610bad565b611847565b95945050505050565b60008060006109fe8585611877565b509050600080610a0f88888861191c565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610a5457600080fd5b505afa158015610a68573d6000803e3d6000fd5b505050506040513d6060811015610a7e57600080fd5b5080516020909101516dffffffffffffffffffffffffffff918216935016905073ffffffffffffffffffffffffffffffffffffffff87811690841614610ac5578082610ac8565b81815b90999098509650505050505050565b6000808411610b4757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b600083118015610b575750600082115b610b6057600080fd5b6000610b6e856103e5611a07565b90506000610b7c8285611a07565b90506000610b9683610b90886103e8611a07565b90611a2b565b9050808281610ba157fe5b04979650505050505050565b610bb5611a74565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115610bed579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015262ffffff169181019190915290565b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1610610c6c57600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b60008060008351606014610df757604484511015610daa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079d90611f34565b60048401935083806020019051810190610dc49190611bc8565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079d9190611f1a565b83806020019051810190610e0b9190611dba565b9250925092509193909250565b60008060008060008060008060088b73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6c57600080fd5b505afa158015610e80573d6000803e3d6000fd5b505050506040513d6020811015610e9657600080fd5b5051600290810b908c900b81610ea857fe5b0560020b901d905060006101008c73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610efb57600080fd5b505afa158015610f0f573d6000803e3d6000fd5b505050506040513d6020811015610f2557600080fd5b5051600290810b908d900b81610f3757fe5b0560020b81610f4257fe5b079050600060088d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8f57600080fd5b505afa158015610fa3573d6000803e3d6000fd5b505050506040513d6020811015610fb957600080fd5b5051600290810b908d900b81610fcb57fe5b0560020b901d905060006101008e73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561101e57600080fd5b505afa158015611032573d6000803e3d6000fd5b505050506040513d602081101561104857600080fd5b5051600290810b908e900b8161105a57fe5b0560020b8161106557fe5b07905060008160ff166001901b8f73ffffffffffffffffffffffffffffffffffffffff16635339c296856040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156110c657600080fd5b505afa1580156110da573d6000803e3d6000fd5b505050506040513d60208110156110f057600080fd5b50511611801561118357508d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561114157600080fd5b505afa158015611155573d6000803e3d6000fd5b505050506040513d602081101561116b57600080fd5b5051600290810b908d900b8161117d57fe5b0760020b155b801561119457508b60020b8d60020b135b945060008360ff166001901b8f73ffffffffffffffffffffffffffffffffffffffff16635339c296876040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156111f457600080fd5b505afa158015611208573d6000803e3d6000fd5b505050506040513d602081101561121e57600080fd5b5051161180156112b157508d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561126f57600080fd5b505afa158015611283573d6000803e3d6000fd5b505050506040513d602081101561129957600080fd5b5051600290810b908e900b816112ab57fe5b0760020b155b80156112c257508b60020b8d60020b125b95508160010b8460010b12806112ee57508160010b8460010b1480156112ee57508060ff168360ff1611155b1561130457839950829750819850809650611311565b8199508097508398508296505b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff87161b9150505b8560010b8760010b13611448578560010b8760010b1415611382577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff858103161c165b6000818c73ffffffffffffffffffffffffffffffffffffffff16635339c2968a6040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156113d957600080fd5b505afa1580156113ed573d6000803e3d6000fd5b505050506040513d602081101561140357600080fd5b505116905061141181611a3b565b61ffff16989098019750506001909501947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61133d565b8115611455576001880397505b8215611462576001880397505b505050505050509392505050565b6000818260140110156114e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b816014018351101561155757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b6000818260030110156115e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b816003018351101561165757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f0110156116d457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b82828401101561174557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b818301845110156117b757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b6060821580156117d6576040519150600082526020820160405261183e565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561180f5780518352602092830192016117f7565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b60006118538383610c2a565b90503373ffffffffffffffffffffffffffffffffffffffff82161461018c57600080fd5b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156118b357600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16106118ed5782846118f0565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff821661191557600080fd5b9250929050565b600080600061192b8585611877565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501207fff0000000000000000000000000000000000000000000000000000000000000060688401529a90941b9093166069840152607d8301989098527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b6000821580611a2257505081810281838281611a1f57fe5b04145b61018c57600080fd5b8082018281101561018c57600080fd5b6000805b821561018c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff830190921691600101611a3f565b604080516060810182526000808252602082018190529181019190915290565b600082601f830112611aa4578081fd5b8135611ab7611ab2826120ac565b612088565b818152846020838601011115611acb578283fd5b816020850160208301379081016020019190915292915050565b8051600281900b811461095d57600080fd5b803561095d8161211c565b805161ffff8116811461095d57600080fd5b60008060408385031215611b26578182fd5b823567ffffffffffffffff811115611b3c578283fd5b611b4885828601611a94565b95602094909401359450505050565b60008060408385031215611b69578182fd5b505080516020909101519092909150565b600080600060608486031215611b8e578081fd5b8335925060208401359150604084013567ffffffffffffffff811115611bb2578182fd5b611bbe86828701611a94565b9150509250925092565b600060208284031215611bd9578081fd5b815167ffffffffffffffff811115611bef578182fd5b8201601f81018413611bff578182fd5b8051611c0d611ab2826120ac565b818152856020838501011115611c21578384fd5b6109e68260208301602086016120ec565b600060608284031215611c43578081fd5b6040516060810181811067ffffffffffffffff82111715611c6057fe5b6040528235611c6e8161211c565b81526020830135611c7e8161211c565b60208201526040928301359281019290925250919050565b600060a08284031215611ca7578081fd5b60405160a0810181811067ffffffffffffffff82111715611cc457fe5b6040528235611cd28161211c565b81526020830135611ce28161211c565b602082015260408381013590820152606083013562ffffff81168114611d06578283fd5b6060820152611d1760808401611af7565b60808201529392505050565b600080600080600080600060e0888a031215611d3d578283fd5b8751611d488161211c565b9650611d5660208901611ae5565b9550611d6460408901611b02565b9450611d7260608901611b02565b9350611d8060808901611b02565b925060a088015160ff81168114611d95578283fd5b60c08901519092508015158114611daa578182fd5b8091505092959891949750929550565b600080600060608486031215611dce578081fd5b835192506020840151611de08161211c565b9150611dee60408501611ae5565b90509250925092565b60008151808452611e0f8160208601602086016120ec565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b606093841b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a06080830152611f0f60a0830184611df7565b979650505050505050565b600060208252611f2d6020830184611df7565b9392505050565b60208082526010908201527f556e6578706563746564206572726f7200000000000000000000000000000000604082015260600190565b6020808252818101527f4578616374206f75747075742071756f7465206e6f7420737570706f72746564604082015260600190565b90815260200190565b600060808201868352602060808185015281875180845260a0860191508289019350845b81811015611fff57845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101611fcd565b505084810360408601528651808252908201925081870190845b8181101561203b57825163ffffffff1685529383019391830191600101612019565b5050505060609290920192909252949350505050565b93845273ffffffffffffffffffffffffffffffffffffffff92909216602084015263ffffffff166040830152606082015260800190565b60405181810167ffffffffffffffff811182821017156120a457fe5b604052919050565b600067ffffffffffffffff8211156120c057fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b838110156121075781810151838201526020016120ef565b83811115612116576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461213e57600080fd5b5056fea164736f6c6343000706000a";
+
+export class MixedRouteQuoterV1__factory extends ContractFactory {
+  constructor(signer?: Signer) {
+    super(_abi, _bytecode, signer);
+  }
+
+  deploy(
+    _factory: string,
+    _factoryV2: string,
+    _WETH9: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<MixedRouteQuoterV1> {
+    return super.deploy(
+      _factory,
+      _factoryV2,
+      _WETH9,
+      overrides || {}
+    ) as Promise<MixedRouteQuoterV1>;
+  }
+  getDeployTransaction(
+    _factory: string,
+    _factoryV2: string,
+    _WETH9: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): TransactionRequest {
+    return super.getDeployTransaction(
+      _factory,
+      _factoryV2,
+      _WETH9,
+      overrides || {}
+    );
+  }
+  attach(address: string): MixedRouteQuoterV1 {
+    return super.attach(address) as MixedRouteQuoterV1;
+  }
+  connect(signer: Signer): MixedRouteQuoterV1__factory {
+    return super.connect(signer) as MixedRouteQuoterV1__factory;
+  }
+  static readonly bytecode = _bytecode;
+  static readonly abi = _abi;
+  static createInterface(): MixedRouteQuoterV1Interface {
+    return new utils.Interface(_abi) as MixedRouteQuoterV1Interface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): MixedRouteQuoterV1 {
+    return new Contract(address, _abi, signerOrProvider) as MixedRouteQuoterV1;
+  }
+}
diff --git a/lib/sor/types/other/factories/Multicall2__factory.ts b/lib/sor/types/other/factories/Multicall2__factory.ts
new file mode 100644
index 0000000..15738a8
--- /dev/null
+++ b/lib/sor/types/other/factories/Multicall2__factory.ts
@@ -0,0 +1,334 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type { Multicall2, Multicall2Interface } from "../Multicall2";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "target",
+            type: "address",
+          },
+          {
+            internalType: "bytes",
+            name: "callData",
+            type: "bytes",
+          },
+        ],
+        internalType: "struct Multicall2.Call[]",
+        name: "calls",
+        type: "tuple[]",
+      },
+    ],
+    name: "aggregate",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "blockNumber",
+        type: "uint256",
+      },
+      {
+        internalType: "bytes[]",
+        name: "returnData",
+        type: "bytes[]",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "target",
+            type: "address",
+          },
+          {
+            internalType: "bytes",
+            name: "callData",
+            type: "bytes",
+          },
+        ],
+        internalType: "struct Multicall2.Call[]",
+        name: "calls",
+        type: "tuple[]",
+      },
+    ],
+    name: "blockAndAggregate",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "blockNumber",
+        type: "uint256",
+      },
+      {
+        internalType: "bytes32",
+        name: "blockHash",
+        type: "bytes32",
+      },
+      {
+        components: [
+          {
+            internalType: "bool",
+            name: "success",
+            type: "bool",
+          },
+          {
+            internalType: "bytes",
+            name: "returnData",
+            type: "bytes",
+          },
+        ],
+        internalType: "struct Multicall2.Result[]",
+        name: "returnData",
+        type: "tuple[]",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "blockNumber",
+        type: "uint256",
+      },
+    ],
+    name: "getBlockHash",
+    outputs: [
+      {
+        internalType: "bytes32",
+        name: "blockHash",
+        type: "bytes32",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "getBlockNumber",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "blockNumber",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "getCurrentBlockCoinbase",
+    outputs: [
+      {
+        internalType: "address",
+        name: "coinbase",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "getCurrentBlockDifficulty",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "difficulty",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "getCurrentBlockGasLimit",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "gaslimit",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "getCurrentBlockTimestamp",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "timestamp",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "addr",
+        type: "address",
+      },
+    ],
+    name: "getEthBalance",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "balance",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "getLastBlockHash",
+    outputs: [
+      {
+        internalType: "bytes32",
+        name: "blockHash",
+        type: "bytes32",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bool",
+        name: "requireSuccess",
+        type: "bool",
+      },
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "target",
+            type: "address",
+          },
+          {
+            internalType: "bytes",
+            name: "callData",
+            type: "bytes",
+          },
+        ],
+        internalType: "struct Multicall2.Call[]",
+        name: "calls",
+        type: "tuple[]",
+      },
+    ],
+    name: "tryAggregate",
+    outputs: [
+      {
+        components: [
+          {
+            internalType: "bool",
+            name: "success",
+            type: "bool",
+          },
+          {
+            internalType: "bytes",
+            name: "returnData",
+            type: "bytes",
+          },
+        ],
+        internalType: "struct Multicall2.Result[]",
+        name: "returnData",
+        type: "tuple[]",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bool",
+        name: "requireSuccess",
+        type: "bool",
+      },
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "target",
+            type: "address",
+          },
+          {
+            internalType: "bytes",
+            name: "callData",
+            type: "bytes",
+          },
+        ],
+        internalType: "struct Multicall2.Call[]",
+        name: "calls",
+        type: "tuple[]",
+      },
+    ],
+    name: "tryBlockAndAggregate",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "blockNumber",
+        type: "uint256",
+      },
+      {
+        internalType: "bytes32",
+        name: "blockHash",
+        type: "bytes32",
+      },
+      {
+        components: [
+          {
+            internalType: "bool",
+            name: "success",
+            type: "bool",
+          },
+          {
+            internalType: "bytes",
+            name: "returnData",
+            type: "bytes",
+          },
+        ],
+        internalType: "struct Multicall2.Result[]",
+        name: "returnData",
+        type: "tuple[]",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class Multicall2__factory {
+  static readonly abi = _abi;
+  static createInterface(): Multicall2Interface {
+    return new utils.Interface(_abi) as Multicall2Interface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): Multicall2 {
+    return new Contract(address, _abi, signerOrProvider) as Multicall2;
+  }
+}
diff --git a/lib/sor/types/other/factories/Permit2__factory.ts b/lib/sor/types/other/factories/Permit2__factory.ts
new file mode 100644
index 0000000..5ccabcb
--- /dev/null
+++ b/lib/sor/types/other/factories/Permit2__factory.ts
@@ -0,0 +1,946 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider, TransactionRequest } from "@ethersproject/providers";
+import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
+import type { Permit2, Permit2Interface } from "../Permit2";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "AllowanceExpired",
+    type: "error",
+  },
+  {
+    inputs: [],
+    name: "ExcessiveInvalidation",
+    type: "error",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amount",
+        type: "uint256",
+      },
+    ],
+    name: "InsufficientAllowance",
+    type: "error",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "maxAmount",
+        type: "uint256",
+      },
+    ],
+    name: "InvalidAmount",
+    type: "error",
+  },
+  {
+    inputs: [],
+    name: "InvalidContractSignature",
+    type: "error",
+  },
+  {
+    inputs: [],
+    name: "InvalidNonce",
+    type: "error",
+  },
+  {
+    inputs: [],
+    name: "InvalidSignature",
+    type: "error",
+  },
+  {
+    inputs: [],
+    name: "InvalidSignatureLength",
+    type: "error",
+  },
+  {
+    inputs: [],
+    name: "InvalidSigner",
+    type: "error",
+  },
+  {
+    inputs: [],
+    name: "LengthMismatch",
+    type: "error",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "signatureDeadline",
+        type: "uint256",
+      },
+    ],
+    name: "SignatureExpired",
+    type: "error",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint160",
+        name: "amount",
+        type: "uint160",
+      },
+      {
+        indexed: false,
+        internalType: "uint48",
+        name: "expiration",
+        type: "uint48",
+      },
+    ],
+    name: "Approval",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+    ],
+    name: "Lockdown",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint48",
+        name: "newNonce",
+        type: "uint48",
+      },
+      {
+        indexed: false,
+        internalType: "uint48",
+        name: "oldNonce",
+        type: "uint48",
+      },
+    ],
+    name: "NonceInvalidation",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint160",
+        name: "amount",
+        type: "uint160",
+      },
+      {
+        indexed: false,
+        internalType: "uint48",
+        name: "expiration",
+        type: "uint48",
+      },
+      {
+        indexed: false,
+        internalType: "uint48",
+        name: "nonce",
+        type: "uint48",
+      },
+    ],
+    name: "Permit",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "word",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "mask",
+        type: "uint256",
+      },
+    ],
+    name: "UnorderedNonceInvalidation",
+    type: "event",
+  },
+  {
+    inputs: [],
+    name: "DOMAIN_SEPARATOR",
+    outputs: [
+      {
+        internalType: "bytes32",
+        name: "",
+        type: "bytes32",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    name: "allowance",
+    outputs: [
+      {
+        internalType: "uint160",
+        name: "amount",
+        type: "uint160",
+      },
+      {
+        internalType: "uint48",
+        name: "expiration",
+        type: "uint48",
+      },
+      {
+        internalType: "uint48",
+        name: "nonce",
+        type: "uint48",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        internalType: "uint160",
+        name: "amount",
+        type: "uint160",
+      },
+      {
+        internalType: "uint48",
+        name: "expiration",
+        type: "uint48",
+      },
+    ],
+    name: "approve",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        internalType: "uint48",
+        name: "newNonce",
+        type: "uint48",
+      },
+    ],
+    name: "invalidateNonces",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "wordPos",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "mask",
+        type: "uint256",
+      },
+    ],
+    name: "invalidateUnorderedNonces",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "token",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "spender",
+            type: "address",
+          },
+        ],
+        internalType: "struct IAllowanceTransfer.TokenSpenderPair[]",
+        name: "approvals",
+        type: "tuple[]",
+      },
+    ],
+    name: "lockdown",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    name: "nonceBitmap",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        components: [
+          {
+            components: [
+              {
+                internalType: "address",
+                name: "token",
+                type: "address",
+              },
+              {
+                internalType: "uint160",
+                name: "amount",
+                type: "uint160",
+              },
+              {
+                internalType: "uint48",
+                name: "expiration",
+                type: "uint48",
+              },
+              {
+                internalType: "uint48",
+                name: "nonce",
+                type: "uint48",
+              },
+            ],
+            internalType: "struct IAllowanceTransfer.PermitDetails[]",
+            name: "details",
+            type: "tuple[]",
+          },
+          {
+            internalType: "address",
+            name: "spender",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "sigDeadline",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct IAllowanceTransfer.PermitBatch",
+        name: "permitBatch",
+        type: "tuple",
+      },
+      {
+        internalType: "bytes",
+        name: "signature",
+        type: "bytes",
+      },
+    ],
+    name: "permit",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        components: [
+          {
+            components: [
+              {
+                internalType: "address",
+                name: "token",
+                type: "address",
+              },
+              {
+                internalType: "uint160",
+                name: "amount",
+                type: "uint160",
+              },
+              {
+                internalType: "uint48",
+                name: "expiration",
+                type: "uint48",
+              },
+              {
+                internalType: "uint48",
+                name: "nonce",
+                type: "uint48",
+              },
+            ],
+            internalType: "struct IAllowanceTransfer.PermitDetails",
+            name: "details",
+            type: "tuple",
+          },
+          {
+            internalType: "address",
+            name: "spender",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "sigDeadline",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct IAllowanceTransfer.PermitSingle",
+        name: "permitSingle",
+        type: "tuple",
+      },
+      {
+        internalType: "bytes",
+        name: "signature",
+        type: "bytes",
+      },
+    ],
+    name: "permit",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            components: [
+              {
+                internalType: "address",
+                name: "token",
+                type: "address",
+              },
+              {
+                internalType: "uint256",
+                name: "amount",
+                type: "uint256",
+              },
+            ],
+            internalType: "struct ISignatureTransfer.TokenPermissions",
+            name: "permitted",
+            type: "tuple",
+          },
+          {
+            internalType: "uint256",
+            name: "nonce",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "deadline",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct ISignatureTransfer.PermitTransferFrom",
+        name: "permit",
+        type: "tuple",
+      },
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "to",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "requestedAmount",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct ISignatureTransfer.SignatureTransferDetails",
+        name: "transferDetails",
+        type: "tuple",
+      },
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        internalType: "bytes",
+        name: "signature",
+        type: "bytes",
+      },
+    ],
+    name: "permitTransferFrom",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            components: [
+              {
+                internalType: "address",
+                name: "token",
+                type: "address",
+              },
+              {
+                internalType: "uint256",
+                name: "amount",
+                type: "uint256",
+              },
+            ],
+            internalType: "struct ISignatureTransfer.TokenPermissions[]",
+            name: "permitted",
+            type: "tuple[]",
+          },
+          {
+            internalType: "uint256",
+            name: "nonce",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "deadline",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct ISignatureTransfer.PermitBatchTransferFrom",
+        name: "permit",
+        type: "tuple",
+      },
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "to",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "requestedAmount",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct ISignatureTransfer.SignatureTransferDetails[]",
+        name: "transferDetails",
+        type: "tuple[]",
+      },
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        internalType: "bytes",
+        name: "signature",
+        type: "bytes",
+      },
+    ],
+    name: "permitTransferFrom",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            components: [
+              {
+                internalType: "address",
+                name: "token",
+                type: "address",
+              },
+              {
+                internalType: "uint256",
+                name: "amount",
+                type: "uint256",
+              },
+            ],
+            internalType: "struct ISignatureTransfer.TokenPermissions",
+            name: "permitted",
+            type: "tuple",
+          },
+          {
+            internalType: "uint256",
+            name: "nonce",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "deadline",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct ISignatureTransfer.PermitTransferFrom",
+        name: "permit",
+        type: "tuple",
+      },
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "to",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "requestedAmount",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct ISignatureTransfer.SignatureTransferDetails",
+        name: "transferDetails",
+        type: "tuple",
+      },
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        internalType: "bytes32",
+        name: "witness",
+        type: "bytes32",
+      },
+      {
+        internalType: "string",
+        name: "witnessTypeString",
+        type: "string",
+      },
+      {
+        internalType: "bytes",
+        name: "signature",
+        type: "bytes",
+      },
+    ],
+    name: "permitWitnessTransferFrom",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            components: [
+              {
+                internalType: "address",
+                name: "token",
+                type: "address",
+              },
+              {
+                internalType: "uint256",
+                name: "amount",
+                type: "uint256",
+              },
+            ],
+            internalType: "struct ISignatureTransfer.TokenPermissions[]",
+            name: "permitted",
+            type: "tuple[]",
+          },
+          {
+            internalType: "uint256",
+            name: "nonce",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "deadline",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct ISignatureTransfer.PermitBatchTransferFrom",
+        name: "permit",
+        type: "tuple",
+      },
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "to",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "requestedAmount",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct ISignatureTransfer.SignatureTransferDetails[]",
+        name: "transferDetails",
+        type: "tuple[]",
+      },
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        internalType: "bytes32",
+        name: "witness",
+        type: "bytes32",
+      },
+      {
+        internalType: "string",
+        name: "witnessTypeString",
+        type: "string",
+      },
+      {
+        internalType: "bytes",
+        name: "signature",
+        type: "bytes",
+      },
+    ],
+    name: "permitWitnessTransferFrom",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "from",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "to",
+            type: "address",
+          },
+          {
+            internalType: "uint160",
+            name: "amount",
+            type: "uint160",
+          },
+          {
+            internalType: "address",
+            name: "token",
+            type: "address",
+          },
+        ],
+        internalType: "struct IAllowanceTransfer.AllowanceTransferDetails[]",
+        name: "transferDetails",
+        type: "tuple[]",
+      },
+    ],
+    name: "transferFrom",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "from",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint160",
+        name: "amount",
+        type: "uint160",
+      },
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+    ],
+    name: "transferFrom",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+const _bytecode =
+  "0x60c0346100bb574660a052602081017f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681527f9ac997416e8ff9d2ff6bebeb7149f65cdae5e32e2b90440b566bb3044041d36a60408301524660608301523060808301526080825260a082019180831060018060401b038411176100a557826040525190206080526123c090816100c1823960805181611a90015260a05181611a6a0152f35b634e487b7160e01b600052604160045260246000fd5b600080fdfe6040608081526004908136101561001557600080fd5b600090813560e01c80630d58b1db1461126c578063137c29fe146110755780632a2d80d114610db75780632b67b57014610bde57806330f28b7a14610ade5780633644e51514610a9d57806336c7851614610a285780633ff9dcb1146109a85780634fe02b441461093f57806365d9723c146107ac57806387517c451461067a578063927da105146105c3578063cc53287f146104a3578063edd9444b1461033a5763fe8ec1a7146100c657600080fd5b346103365760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103365767ffffffffffffffff833581811161033257610114903690860161164b565b60243582811161032e5761012b903690870161161a565b6101336114e6565b9160843585811161032a5761014b9036908a016115c1565b98909560a43590811161032657610164913691016115c1565b969095815190610173826113ff565b606b82527f5065726d697442617463685769746e6573735472616e7366657246726f6d285460208301527f6f6b656e5065726d697373696f6e735b5d207065726d69747465642c61646472838301527f657373207370656e6465722c75696e74323536206e6f6e63652c75696e74323560608301527f3620646561646c696e652c000000000000000000000000000000000000000000608083015282519a8b9181610222602085018096611edc565b918237018a8152039961025b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09b8c8101835282611437565b5190209085515161026b81611e04565b908a5b8181106102f95750506102f6999a6102ed9183516102a081610294602082018095611eaf565b03848101835282611437565b519020602089810151858b015195519182019687526040820192909252336060820152608081019190915260a081019390935260643560c08401528260e081015b03908101835282611437565b51902093611c40565b80f35b8061031161030b610321938c5161175e565b51611f9d565b61031b828661175e565b52611e53565b61026e565b8880fd5b8780fd5b8480fd5b8380fd5b5080fd5b5091346103365760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103365767ffffffffffffffff9080358281116103325761038b903690830161164b565b60243583811161032e576103a2903690840161161a565b9390926103ad6114e6565b9160643590811161049f576103c4913691016115c1565b949093835151976103d489611e04565b98885b81811061047d5750506102f697988151610425816103f9602082018095611eaf565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282611437565b5190206020860151828701519083519260208401947ffcf35f5ac6a2c28868dc44c302166470266239195f02b0ee408334829333b7668652840152336060840152608083015260a082015260a081526102ed8161141b565b808b61031b8261049461030b61049a968d5161175e565b9261175e565b6103d7565b8680fd5b5082346105bf57602090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103325780359067ffffffffffffffff821161032e576104f49136910161161a565b929091845b848110610504578580f35b8061051a61051560019388886118b5565b6118c5565b61052f84610529848a8a6118b5565b016118c5565b3389528385528589209173ffffffffffffffffffffffffffffffffffffffff80911692838b528652868a20911690818a5285528589207fffffffffffffffffffffffff000000000000000000000000000000000000000081541690558551918252848201527f89b1add15eff56b3dfe299ad94e01f2b52fbcb80ae1a3baea6ae8c04cb2b98a4853392a2016104f9565b8280fd5b50346103365760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033657610676816105ff6114a0565b936106086114c3565b6106106114e6565b73ffffffffffffffffffffffffffffffffffffffff968716835260016020908152848420928816845291825283832090871683528152919020549251938316845260a083901c65ffffffffffff169084015260d09190911c604083015281906060820190565b0390f35b50346103365760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610336576106b26114a0565b906106bb6114c3565b916106c46114e6565b65ffffffffffff926064358481169081810361032a5779ffffffffffff0000000000000000000000000000000000000000947fda9fa7c1b00402c17d0161b249b1ab8bbec047c5a52207b9c112deffd817036b94338a5260016020527fffffffffffff0000000000000000000000000000000000000000000000000000858b209873ffffffffffffffffffffffffffffffffffffffff809416998a8d5260205283878d209b169a8b8d52602052868c209486156000146107a457504216925b8454921697889360a01b16911617179055815193845260208401523392a480f35b905092610783565b5082346105bf5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105bf576107e56114a0565b906107ee6114c3565b9265ffffffffffff604435818116939084810361032a57338852602091600183528489209673ffffffffffffffffffffffffffffffffffffffff80911697888b528452858a20981697888a5283528489205460d01c93848711156109175761ffff9085840316116108f05750907f55eb90d810e1700b35a8e7e25395ff7f2b2259abd7415ca2284dfb1c246418f393929133895260018252838920878a528252838920888a5282528389209079ffffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffffffff000000000000000000000000000000000000000000000000000083549260d01b16911617905582519485528401523392a480f35b84517f24d35a26000000000000000000000000000000000000000000000000000000008152fd5b5084517f756688fe000000000000000000000000000000000000000000000000000000008152fd5b503461033657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610336578060209273ffffffffffffffffffffffffffffffffffffffff61098f6114a0565b1681528084528181206024358252845220549051908152f35b5082346105bf57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105bf577f3704902f963766a4e561bbaab6e6cdc1b1dd12f6e9e99648da8843b3f46b918d90359160243533855284602052818520848652602052818520818154179055815193845260208401523392a280f35b8234610a9a5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610a9a57610a606114a0565b610a686114c3565b610a706114e6565b6064359173ffffffffffffffffffffffffffffffffffffffff8316830361032e576102f6936117a1565b80fd5b503461033657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033657602090610ad7611a67565b9051908152f35b508290346105bf576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105bf57610b1a3661152a565b90807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7c36011261033257610b4c611478565b9160e43567ffffffffffffffff8111610bda576102f694610b6f913691016115c1565b939092610b7c8351611f9d565b6020840151828501519083519260208401947f939c21a48a8dbe3a9a2404a1d46691e4d39f6583d6ec6b35714604c986d801068652840152336060840152608083015260a082015260a08152610bd18161141b565b51902091611b6e565b8580fd5b509134610336576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033657610c186114a0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc360160c08112610332576080855191610c51836113e3565b1261033257845190610c6282611398565b73ffffffffffffffffffffffffffffffffffffffff91602435838116810361049f578152604435838116810361049f57602082015265ffffffffffff606435818116810361032a5788830152608435908116810361049f576060820152815260a435938285168503610bda576020820194855260c4359087830182815260e43567ffffffffffffffff811161032657610cfe90369084016115c1565b929093804211610d88575050918591610d786102f6999a610d7e95610d238851611f07565b90898c511690519083519260208401947ff3841cd1ff0085026a6327b620b67997ce40f282c88a8e905a7a5626e310f3d086528401526060830152608082015260808152610d70816113ff565b519020611b22565b91612010565b51925116916118e6565b602492508a51917fcd21db4f000000000000000000000000000000000000000000000000000000008352820152fd5b5091346103365760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc93818536011261033257610df36114a0565b9260249081359267ffffffffffffffff9788851161032a578590853603011261049f578051978589018981108282111761104a578252848301358181116103265785019036602383011215610326578382013591610e50836115ef565b90610e5d85519283611437565b838252602093878584019160071b83010191368311611046578801905b828210610fe9575050508a526044610e93868801611509565b96838c01978852013594838b0191868352604435908111610fe557610ebb90369087016115c1565b959096804211610fba575050508998995151610ed681611e04565b908b5b818110610f9757505092889492610d7892610f6497958351610f02816103f98682018095611eaf565b5190209073ffffffffffffffffffffffffffffffffffffffff9a8b8b51169151928551948501957faf1b0d30d2cab0380e68f0689007e3254993c596f2fdd0aaa7f4d04f794408638752850152830152608082015260808152610d70816113ff565b51169082515192845b848110610f78578580f35b80610f918585610f8b600195875161175e565b516118e6565b01610f6d565b80610311610fac8e9f9e93610fb2945161175e565b51611f07565b9b9a9b610ed9565b8551917fcd21db4f000000000000000000000000000000000000000000000000000000008352820152fd5b8a80fd5b6080823603126110465785608091885161100281611398565b61100b85611509565b8152611018838601611509565b838201526110278a8601611607565b8a8201528d611037818701611607565b90820152815201910190610e7a565b8c80fd5b84896041867f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b5082346105bf576101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105bf576110b03661152a565b91807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7c360112610332576110e2611478565b67ffffffffffffffff93906101043585811161049f5761110590369086016115c1565b90936101243596871161032a57611125610bd1966102f6983691016115c1565b969095825190611134826113ff565b606482527f5065726d69745769746e6573735472616e7366657246726f6d28546f6b656e5060208301527f65726d697373696f6e73207065726d69747465642c6164647265737320737065848301527f6e6465722c75696e74323536206e6f6e63652c75696e7432353620646561646c60608301527f696e652c0000000000000000000000000000000000000000000000000000000060808301528351948591816111e3602085018096611edc565b918237018b8152039361121c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe095868101835282611437565b5190209261122a8651611f9d565b6020878101518589015195519182019687526040820192909252336060820152608081019190915260a081019390935260e43560c08401528260e081016102e1565b5082346105bf576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261033257813567ffffffffffffffff92838211610bda5736602383011215610bda5781013592831161032e576024906007368386831b8401011161049f57865b8581106112e5578780f35b80821b83019060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc83360301126103265761139288876001946060835161132c81611398565b611368608461133c8d8601611509565b9485845261134c60448201611509565b809785015261135d60648201611509565b809885015201611509565b918291015273ffffffffffffffffffffffffffffffffffffffff80808093169516931691166117a1565b016112da565b6080810190811067ffffffffffffffff8211176113b457604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff8211176113b457604052565b60a0810190811067ffffffffffffffff8211176113b457604052565b60c0810190811067ffffffffffffffff8211176113b457604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176113b457604052565b60c4359073ffffffffffffffffffffffffffffffffffffffff8216820361149b57565b600080fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361149b57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361149b57565b6044359073ffffffffffffffffffffffffffffffffffffffff8216820361149b57565b359073ffffffffffffffffffffffffffffffffffffffff8216820361149b57565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01906080821261149b576040805190611563826113e3565b8082941261149b57805181810181811067ffffffffffffffff8211176113b457825260043573ffffffffffffffffffffffffffffffffffffffff8116810361149b578152602435602082015282526044356020830152606435910152565b9181601f8401121561149b5782359167ffffffffffffffff831161149b576020838186019501011161149b57565b67ffffffffffffffff81116113b45760051b60200190565b359065ffffffffffff8216820361149b57565b9181601f8401121561149b5782359167ffffffffffffffff831161149b576020808501948460061b01011161149b57565b91909160608184031261149b576040805191611666836113e3565b8294813567ffffffffffffffff9081811161149b57830182601f8201121561149b578035611693816115ef565b926116a087519485611437565b818452602094858086019360061b8501019381851161149b579086899897969594939201925b8484106116e3575050505050855280820135908501520135910152565b90919293949596978483031261149b578851908982019082821085831117611730578a928992845261171487611509565b81528287013583820152815201930191908897969594936116c6565b602460007f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b80518210156117725760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b92919273ffffffffffffffffffffffffffffffffffffffff604060008284168152600160205282828220961695868252602052818120338252602052209485549565ffffffffffff8760a01c16804211611884575082871696838803611812575b5050611810955016926122fc565b565b878484161160001461184f57602488604051907ff96fb0710000000000000000000000000000000000000000000000000000000082526004820152fd5b7fffffffffffffffffffffffff000000000000000000000000000000000000000084846118109a031691161790553880611802565b602490604051907fd81b2f2e0000000000000000000000000000000000000000000000000000000082526004820152fd5b91908110156117725760061b0190565b3573ffffffffffffffffffffffffffffffffffffffff8116810361149b5790565b9065ffffffffffff908160608401511673ffffffffffffffffffffffffffffffffffffffff908185511694826020820151169280866040809401511695169560009187835260016020528383208984526020528383209916988983526020528282209184835460d01c03611a3e579185611a1794927fc6a377bfc4eb120024a8ac08eef205be16b817020812c73223e81d1bdb9708ec98979694508715600014611a1c5779ffffffffffff00000000000000000000000000000000000000009042165b60a01b167fffffffffffff00000000000000000000000000000000000000000000000000006001860160d01b1617179055519384938491604091949373ffffffffffffffffffffffffffffffffffffffff606085019616845265ffffffffffff809216602085015216910152565b0390a4565b5079ffffffffffff0000000000000000000000000000000000000000876119a9565b600484517f756688fe000000000000000000000000000000000000000000000000000000008152fd5b467f000000000000000000000000000000000000000000000000000000000000000003611ab2577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86682527f9ac997416e8ff9d2ff6bebeb7149f65cdae5e32e2b90440b566bb3044041d36a604082015246606082015230608082015260808152611b1c816113ff565b51902090565b611b2a611a67565b906040519060208201927f190100000000000000000000000000000000000000000000000000000000000084526022830152604282015260428152611b1c81611398565b9192909360a435936040840151804211611c0f5750602084510151808611611bde5750918591610d78611bae94611ba9602088015186611d90565b611b22565b73ffffffffffffffffffffffffffffffffffffffff809151511692608435918216820361149b57611810936122fc565b602490604051907f3728b83d0000000000000000000000000000000000000000000000000000000082526004820152fd5b602490604051907fcd21db4f0000000000000000000000000000000000000000000000000000000082526004820152fd5b959093958051519560409283830151804211611d605750848803611d3757611c77918691610d7860209b611ba98d88015186611d90565b60005b868110611c8b575050505050505050565b611c9681835161175e565b5188611ca383878a6118b5565b01359089810151808311611d07575091818888886001968596611ccd575b50505050505001611c7a565b611cfc95611cf69273ffffffffffffffffffffffffffffffffffffffff610515935116956118b5565b916122fc565b803888888883611cc1565b6024908651907f3728b83d0000000000000000000000000000000000000000000000000000000082526004820152fd5b600484517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b6024908551907fcd21db4f0000000000000000000000000000000000000000000000000000000082526004820152fd5b9073ffffffffffffffffffffffffffffffffffffffff600160ff83161b9216600052600060205260406000209060081c6000526020526040600020818154188091551615611dda57565b60046040517f756688fe000000000000000000000000000000000000000000000000000000008152fd5b90611e0e826115ef565b611e1b6040519182611437565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0611e4982946115ef565b0190602036910137565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611e805760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b805160208092019160005b828110611ec8575050505090565b835185529381019392810192600101611eba565b9081519160005b838110611ef4575050016000815290565b8060208092840101518185015201611ee3565b60405160208101917f65626cad6cb96493bf6f5ebea28756c966f023ab9e8a83a7101849d5573b3678835273ffffffffffffffffffffffffffffffffffffffff8082511660408401526020820151166060830152606065ffffffffffff9182604082015116608085015201511660a082015260a0815260c0810181811067ffffffffffffffff8211176113b45760405251902090565b6040516020808201927f618358ac3db8dc274f0cd8829da7e234bd48cd73c4a740aede1adec9846d06a1845273ffffffffffffffffffffffffffffffffffffffff81511660408401520151606082015260608152611b1c81611398565b919082604091031261149b576020823592013590565b6000843b6121775750604182036120f55761202d82820182611ffa565b939092604010156117725760209360009360ff6040608095013560f81c5b60405194855216868401526040830152606082015282805260015afa156120e95773ffffffffffffffffffffffffffffffffffffffff80600051169182156120bf57160361209557565b60046040517f815e1d64000000000000000000000000000000000000000000000000000000008152fd5b60046040517f8baa579f000000000000000000000000000000000000000000000000000000008152fd5b6040513d6000823e3d90fd5b6040820361214d5761210991810190611ffa565b91601b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84169360ff1c019060ff8211611e805760209360009360ff60809461204b565b60046040517f4be6321b000000000000000000000000000000000000000000000000000000008152fd5b929391601f928173ffffffffffffffffffffffffffffffffffffffff60646020957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0604051988997889687947f1626ba7e000000000000000000000000000000000000000000000000000000009e8f8752600487015260406024870152816044870152868601378b85828601015201168101030192165afa9081156122f1578291612273575b507fffffffff000000000000000000000000000000000000000000000000000000009150160361224957565b60046040517fb0669cbc000000000000000000000000000000000000000000000000000000008152fd5b90506020813d82116122e9575b8161228d60209383611437565b810103126103365751907fffffffff0000000000000000000000000000000000000000000000000000000082168203610a9a57507fffffffff00000000000000000000000000000000000000000000000000000000903861221d565b3d9150612280565b6040513d84823e3d90fd5b9060006064926020958295604051947f23b872dd0000000000000000000000000000000000000000000000000000000086526004860152602485015260448401525af13d15601f3d116001600051141617161561235557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152fdfea164736f6c6343000811000a";
+
+export class Permit2__factory extends ContractFactory {
+  constructor(signer?: Signer) {
+    super(_abi, _bytecode, signer);
+  }
+
+  deploy(
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<Permit2> {
+    return super.deploy(overrides || {}) as Promise<Permit2>;
+  }
+  getDeployTransaction(
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): TransactionRequest {
+    return super.getDeployTransaction(overrides || {});
+  }
+  attach(address: string): Permit2 {
+    return super.attach(address) as Permit2;
+  }
+  connect(signer: Signer): Permit2__factory {
+    return super.connect(signer) as Permit2__factory;
+  }
+  static readonly bytecode = _bytecode;
+  static readonly abi = _abi;
+  static createInterface(): Permit2Interface {
+    return new utils.Interface(_abi) as Permit2Interface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): Permit2 {
+    return new Contract(address, _abi, signerOrProvider) as Permit2;
+  }
+}
diff --git a/lib/sor/types/other/factories/QuoterV2__factory.ts b/lib/sor/types/other/factories/QuoterV2__factory.ts
new file mode 100644
index 0000000..12fd845
--- /dev/null
+++ b/lib/sor/types/other/factories/QuoterV2__factory.ts
@@ -0,0 +1,316 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider, TransactionRequest } from "@ethersproject/providers";
+import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
+import type { QuoterV2, QuoterV2Interface } from "../QuoterV2";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "_factory",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "_WETH9",
+        type: "address",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "constructor",
+  },
+  {
+    inputs: [],
+    name: "WETH9",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factory",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    name: "quoteExactInput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160[]",
+        name: "sqrtPriceX96AfterList",
+        type: "uint160[]",
+      },
+      {
+        internalType: "uint32[]",
+        name: "initializedTicksCrossedList",
+        type: "uint32[]",
+      },
+      {
+        internalType: "uint256",
+        name: "gasEstimate",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "tokenIn",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "tokenOut",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amountIn",
+            type: "uint256",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "uint160",
+            name: "sqrtPriceLimitX96",
+            type: "uint160",
+          },
+        ],
+        internalType: "struct IQuoterV2.QuoteExactInputSingleParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "quoteExactInputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceX96After",
+        type: "uint160",
+      },
+      {
+        internalType: "uint32",
+        name: "initializedTicksCrossed",
+        type: "uint32",
+      },
+      {
+        internalType: "uint256",
+        name: "gasEstimate",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    name: "quoteExactOutput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160[]",
+        name: "sqrtPriceX96AfterList",
+        type: "uint160[]",
+      },
+      {
+        internalType: "uint32[]",
+        name: "initializedTicksCrossedList",
+        type: "uint32[]",
+      },
+      {
+        internalType: "uint256",
+        name: "gasEstimate",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "tokenIn",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "tokenOut",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amount",
+            type: "uint256",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "uint160",
+            name: "sqrtPriceLimitX96",
+            type: "uint160",
+          },
+        ],
+        internalType: "struct IQuoterV2.QuoteExactOutputSingleParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "quoteExactOutputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceX96After",
+        type: "uint160",
+      },
+      {
+        internalType: "uint32",
+        name: "initializedTicksCrossed",
+        type: "uint32",
+      },
+      {
+        internalType: "uint256",
+        name: "gasEstimate",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "int256",
+        name: "amount0Delta",
+        type: "int256",
+      },
+      {
+        internalType: "int256",
+        name: "amount1Delta",
+        type: "int256",
+      },
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+    ],
+    name: "uniswapV3SwapCallback",
+    outputs: [],
+    stateMutability: "view",
+    type: "function",
+  },
+];
+
+const _bytecode =
+  "0x60c06040523480156200001157600080fd5b506040516200212c3803806200212c833981016040819052620000349162000070565b6001600160601b0319606092831b8116608052911b1660a052620000a7565b80516001600160a01b03811681146200006b57600080fd5b919050565b6000806040838503121562000083578182fd5b6200008e8362000053565b91506200009e6020840162000053565b90509250929050565b60805160601c60a05160601c612051620000db60003980610321525080610577528061095d5280610b9252506120516000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c45a01551161005b578063c45a0155146100e6578063c6a5026a146100ee578063cdca175314610101578063fa461e33146101145761007d565b80632f80bb1d146100825780634aa4a4fc146100ae578063bd21704a146100c3575b600080fd5b610095610090366004611b2b565b610129565b6040516100a59493929190611eac565b60405180910390f35b6100b661031f565b6040516100a59190611def565b6100d66100d1366004611c49565b610343565b6040516100a59493929190611f54565b6100b6610575565b6100d66100fc366004611c49565b610599565b61009561010f366004611b2b565b610754565b610127610122366004611b91565b61092c565b005b6000606080600061013986610ae8565b67ffffffffffffffff8111801561014f57600080fd5b50604051908082528060200260200182016040528015610179578160200160208202803683370190505b50925061018586610ae8565b67ffffffffffffffff8111801561019b57600080fd5b506040519080825280602002602001820160405280156101c5578160200160208202803683370190505b50915060005b60008060006101d98a610b17565b92509250925060008060008061025c6040518060a001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018f81526020018762ffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815250610343565b9350935093509350828b898151811061027157fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818a89815181106102b857fe5b63ffffffff90921660209283029190910190910152929b50968201966001909601958b926102e58e610b48565b156102fa576102f38e610b50565b9d5061030a565b8c9b505050505050505050610316565b505050505050506101cb565b92959194509250565b7f000000000000000000000000000000000000000000000000000000000000000081565b60208101518151606083015160009283928392839273ffffffffffffffffffffffffffffffffffffffff808216908416109284926103819290610b8b565b9050866080015173ffffffffffffffffffffffffffffffffffffffff16600014156103af5760408701516000555b60005a90508173ffffffffffffffffffffffffffffffffffffffff1663128acb0830856103df8c60400151610bc9565b6000038c6080015173ffffffffffffffffffffffffffffffffffffffff1660001461040e578c60800151610434565b8761042d5773fffd8963efd1fc6a506488495d951d5263988d25610434565b6401000276a45b8d602001518e606001518f6000015160405160200161045593929190611d89565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401610484959493929190611e10565b6040805180830381600087803b15801561049d57600080fd5b505af19250505080156104eb575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526104e891810190611b6e565b60015b610568573d808015610519576040519150601f19603f3d011682016040523d82523d6000602084013e61051e565b606091505b505a82039450886080015173ffffffffffffffffffffffffffffffffffffffff166000141561054c57600080555b610557818487610bfb565b97509750975097505050505061056e565b50505050505b9193509193565b7f000000000000000000000000000000000000000000000000000000000000000081565b60208101518151606083015160009283928392839273ffffffffffffffffffffffffffffffffffffffff808216908416109284926105d79290610b8b565b905060005a90508173ffffffffffffffffffffffffffffffffffffffff1663128acb0830856106098c60400151610bc9565b60808d015173ffffffffffffffffffffffffffffffffffffffff1615610633578c60800151610659565b876106525773fffd8963efd1fc6a506488495d951d5263988d25610659565b6401000276a45b8d600001518e606001518f6020015160405160200161067a93929190611d89565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016106a9959493929190611e10565b6040805180830381600087803b1580156106c257600080fd5b505af1925050508015610710575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261070d91810190611b6e565b60015b610568573d80801561073e576040519150601f19603f3d011682016040523d82523d6000602084013e610743565b606091505b505a82039450610557818487610bfb565b6000606080600061076486610ae8565b67ffffffffffffffff8111801561077a57600080fd5b506040519080825280602002602001820160405280156107a4578160200160208202803683370190505b5092506107b086610ae8565b67ffffffffffffffff811180156107c657600080fd5b506040519080825280602002602001820160405280156107f0578160200160208202803683370190505b50915060005b60008060006108048a610b17565b9250925092506000806000806108876040518060a001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018f81526020018762ffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815250610599565b9350935093509350828b898151811061089c57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818a89815181106108e357fe5b63ffffffff90921660209283029190910190910152929b50968201966001909601958b926109108e610b48565b156102fa5761091e8e610b50565b9d50505050505050506107f6565b600083138061093b5750600082135b61094457600080fd5b600080600061095284610b17565b9250925092506109847f0000000000000000000000000000000000000000000000000000000000000000848484610ccf565b5060008060008089136109ca578573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610888a6000036109ff565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161089896000035b9250925092506000610a12878787610b8b565b90506000808273ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610a5d57600080fd5b505afa158015610a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a959190611c6b565b5050505050915091508515610abb57604051848152826020820152816040820152606081fd5b60005415610ad1576000548414610ad157600080fd5b604051858152826020820152816040820152606081fd5b805160177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec909101045b919050565b60008080610b258482610cee565b9250610b32846014610dee565b9050610b3f846017610cee565b91509193909250565b516042111590565b8051606090610b859083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe901610ede565b92915050565b6000610bc17f0000000000000000000000000000000000000000000000000000000000000000610bbc8686866110c5565b611142565b949350505050565b60007f80000000000000000000000000000000000000000000000000000000000000008210610bf757600080fd5b5090565b6000806000806000808773ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610c4a57600080fd5b505afa158015610c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c829190611c6b565b50939650610c9794508d935061127892505050565b91975095509050610cbf73ffffffffffffffffffffffffffffffffffffffff89168383611339565b9350869250505093509350935093565b6000610ce585610ce08686866110c5565b611991565b95945050505050565b600081826014011015610d6257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b8160140183511015610dd557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b600081826003011015610e6257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b8160030183511015610ed557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f011015610f5257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015610fc357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b8183018451101561103557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b60608215801561105457604051915060008252602082016040526110bc565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561108d578051835260209283019201611075565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b6110cd6119fa565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115611105579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015262ffffff169181019190915290565b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161061118457600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b60008060008351606014611318576044845110156112cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c290611e75565b60405180910390fd5b600484019350838060200190518101906112e59190611bdf565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c29190611e62565b8380602001905181019061132c9190611d02565b9250925092509193909250565b60008060008060008060008060088b73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561138d57600080fd5b505afa1580156113a1573d6000803e3d6000fd5b505050506040513d60208110156113b757600080fd5b5051600290810b908c900b816113c957fe5b0560020b901d905060006101008c73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561141c57600080fd5b505afa158015611430573d6000803e3d6000fd5b505050506040513d602081101561144657600080fd5b5051600290810b908d900b8161145857fe5b0560020b8161146357fe5b079050600060088d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b057600080fd5b505afa1580156114c4573d6000803e3d6000fd5b505050506040513d60208110156114da57600080fd5b5051600290810b908d900b816114ec57fe5b0560020b901d905060006101008e73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561153f57600080fd5b505afa158015611553573d6000803e3d6000fd5b505050506040513d602081101561156957600080fd5b5051600290810b908e900b8161157b57fe5b0560020b8161158657fe5b07905060008160ff166001901b8f73ffffffffffffffffffffffffffffffffffffffff16635339c296856040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156115e757600080fd5b505afa1580156115fb573d6000803e3d6000fd5b505050506040513d602081101561161157600080fd5b5051161180156116a457508d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561166257600080fd5b505afa158015611676573d6000803e3d6000fd5b505050506040513d602081101561168c57600080fd5b5051600290810b908d900b8161169e57fe5b0760020b155b80156116b557508b60020b8d60020b135b945060008360ff166001901b8f73ffffffffffffffffffffffffffffffffffffffff16635339c296876040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b15801561171557600080fd5b505afa158015611729573d6000803e3d6000fd5b505050506040513d602081101561173f57600080fd5b5051161180156117d257508d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561179057600080fd5b505afa1580156117a4573d6000803e3d6000fd5b505050506040513d60208110156117ba57600080fd5b5051600290810b908e900b816117cc57fe5b0760020b155b80156117e357508b60020b8d60020b125b95508160010b8460010b128061180f57508160010b8460010b14801561180f57508060ff168360ff1611155b1561182557839950829750819850809650611832565b8199508097508398508296505b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff87161b9150505b8560010b8760010b13611969578560010b8760010b14156118a3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff858103161c165b6000818c73ffffffffffffffffffffffffffffffffffffffff16635339c2968a6040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156118fa57600080fd5b505afa15801561190e573d6000803e3d6000fd5b505050506040513d602081101561192457600080fd5b5051169050611932816119c1565b61ffff16989098019750506001909501947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61185e565b8115611976576001880397505b8215611983576001880397505b505050505050509392505050565b600061199d8383611142565b90503373ffffffffffffffffffffffffffffffffffffffff821614610b8557600080fd5b6000805b8215610b85577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301909216916001016119c5565b604080516060810182526000808252602082018190529181019190915290565b600082601f830112611a2a578081fd5b8135611a3d611a3882611faf565b611f8b565b818152846020838601011115611a51578283fd5b816020850160208301379081016020019190915292915050565b8051600281900b8114610b1257600080fd5b600060a08284031215611a8e578081fd5b60405160a0810181811067ffffffffffffffff82111715611aab57fe5b6040529050808235611abc8161201f565b81526020830135611acc8161201f565b602082015260408381013590820152606083013562ffffff81168114611af157600080fd5b6060820152611b0260808401611b0e565b60808201525092915050565b8035610b128161201f565b805161ffff81168114610b1257600080fd5b60008060408385031215611b3d578182fd5b823567ffffffffffffffff811115611b53578283fd5b611b5f85828601611a1a565b95602094909401359450505050565b60008060408385031215611b80578182fd5b505080516020909101519092909150565b600080600060608486031215611ba5578081fd5b8335925060208401359150604084013567ffffffffffffffff811115611bc9578182fd5b611bd586828701611a1a565b9150509250925092565b600060208284031215611bf0578081fd5b815167ffffffffffffffff811115611c06578182fd5b8201601f81018413611c16578182fd5b8051611c24611a3882611faf565b818152856020838501011115611c38578384fd5b610ce5826020830160208601611fef565b600060a08284031215611c5a578081fd5b611c648383611a7d565b9392505050565b600080600080600080600060e0888a031215611c85578283fd5b8751611c908161201f565b9650611c9e60208901611a6b565b9550611cac60408901611b19565b9450611cba60608901611b19565b9350611cc860808901611b19565b925060a088015160ff81168114611cdd578283fd5b60c08901519092508015158114611cf2578182fd5b8091505092959891949750929550565b600080600060608486031215611d16578081fd5b835192506020840151611d288161201f565b9150611d3660408501611a6b565b90509250925092565b60008151808452611d57816020860160208601611fef565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b606093841b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a06080830152611e5760a0830184611d3f565b979650505050505050565b600060208252611c646020830184611d3f565b60208082526010908201527f556e6578706563746564206572726f7200000000000000000000000000000000604082015260600190565b600060808201868352602060808185015281875180845260a0860191508289019350845b81811015611f0257845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101611ed0565b505084810360408601528651808252908201925081870190845b81811015611f3e57825163ffffffff1685529383019391830191600101611f1c565b5050505060609290920192909252949350505050565b93845273ffffffffffffffffffffffffffffffffffffffff92909216602084015263ffffffff166040830152606082015260800190565b60405181810167ffffffffffffffff81118282101715611fa757fe5b604052919050565b600067ffffffffffffffff821115611fc357fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b8381101561200a578181015183820152602001611ff2565b83811115612019576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461204157600080fd5b5056fea164736f6c6343000706000a";
+
+export class QuoterV2__factory extends ContractFactory {
+  constructor(signer?: Signer) {
+    super(_abi, _bytecode, signer);
+  }
+
+  deploy(
+    _factory: string,
+    _WETH9: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<QuoterV2> {
+    return super.deploy(_factory, _WETH9, overrides || {}) as Promise<QuoterV2>;
+  }
+  getDeployTransaction(
+    _factory: string,
+    _WETH9: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): TransactionRequest {
+    return super.getDeployTransaction(_factory, _WETH9, overrides || {});
+  }
+  attach(address: string): QuoterV2 {
+    return super.attach(address) as QuoterV2;
+  }
+  connect(signer: Signer): QuoterV2__factory {
+    return super.connect(signer) as QuoterV2__factory;
+  }
+  static readonly bytecode = _bytecode;
+  static readonly abi = _abi;
+  static createInterface(): QuoterV2Interface {
+    return new utils.Interface(_abi) as QuoterV2Interface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): QuoterV2 {
+    return new Contract(address, _abi, signerOrProvider) as QuoterV2;
+  }
+}
diff --git a/lib/sor/types/other/factories/Quoter__factory.ts b/lib/sor/types/other/factories/Quoter__factory.ts
new file mode 100644
index 0000000..0410454
--- /dev/null
+++ b/lib/sor/types/other/factories/Quoter__factory.ts
@@ -0,0 +1,239 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider, TransactionRequest } from "@ethersproject/providers";
+import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
+import type { Quoter, QuoterInterface } from "../Quoter";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "_factory",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "_WETH9",
+        type: "address",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "constructor",
+  },
+  {
+    inputs: [],
+    name: "WETH9",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factory",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    name: "quoteExactInput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenIn",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenOut",
+        type: "address",
+      },
+      {
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceLimitX96",
+        type: "uint160",
+      },
+    ],
+    name: "quoteExactInputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    name: "quoteExactOutput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenIn",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenOut",
+        type: "address",
+      },
+      {
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceLimitX96",
+        type: "uint160",
+      },
+    ],
+    name: "quoteExactOutputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "int256",
+        name: "amount0Delta",
+        type: "int256",
+      },
+      {
+        internalType: "int256",
+        name: "amount1Delta",
+        type: "int256",
+      },
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+    ],
+    name: "uniswapV3SwapCallback",
+    outputs: [],
+    stateMutability: "view",
+    type: "function",
+  },
+];
+
+const _bytecode =
+  "0x60c060405234801561001057600080fd5b506040516112e53803806112e583398101604081905261002f91610069565b6001600160601b0319606092831b8116608052911b1660a05261009b565b80516001600160a01b038116811461006457600080fd5b919050565b6000806040838503121561007b578182fd5b6100848361004d565b91506100926020840161004d565b90509250929050565b60805160601c60a05160601c6112176100ce60003980610342525080610366528061058652806106d552506112176000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c45a01551161005b578063c45a0155146100d3578063cdca1753146100db578063f7729d43146100ee578063fa461e33146101015761007d565b80632f80bb1d1461008257806330d07f21146100ab5780634aa4a4fc146100be575b600080fd5b610095610090366004610e9e565b610116565b6040516100a29190611148565b60405180910390f35b6100956100b9366004610e30565b61017b565b6100c6610340565b6040516100a29190611084565b6100c6610364565b6100956100e9366004610e9e565b610388565b6100956100fc366004610e30565b6103d6565b61011461010f366004610f04565b610555565b005b60005b600061012484610660565b9050600080600061013487610668565b92509250925061014882848389600061017b565b955083156101605761015987610699565b965061016c565b85945050505050610175565b50505050610119565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff808616878216109083166101a65760008490555b6101b18787876106ce565b73ffffffffffffffffffffffffffffffffffffffff1663128acb0830836101d78861070c565b60000373ffffffffffffffffffffffffffffffffffffffff8816156101fc5787610222565b8561021b5773fffd8963efd1fc6a506488495d951d5263988d25610222565b6401000276a45b8b8b8e6040516020016102379392919061101e565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016102669594939291906110a5565b6040805180830381600087803b15801561027f57600080fd5b505af19250505080156102cd575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526102ca91810190610ee1565b60015b610333573d8080156102fb576040519150601f19603f3d011682016040523d82523d6000602084013e610300565b606091505b5073ffffffffffffffffffffffffffffffffffffffff841661032157600080555b61032a8161073e565b92505050610337565b5050505b95945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005b600061039684610660565b905060008060006103a687610668565b9250925092506103ba8383838960006103d6565b95508315610160576103cb87610699565b96505050505061038b565b600073ffffffffffffffffffffffffffffffffffffffff808616908716106103ff8787876106ce565b73ffffffffffffffffffffffffffffffffffffffff1663128acb0830836104258861070c565b73ffffffffffffffffffffffffffffffffffffffff881615610447578761046d565b856104665773fffd8963efd1fc6a506488495d951d5263988d2561046d565b6401000276a45b8c8b8d6040516020016104829392919061101e565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016104b19594939291906110a5565b6040805180830381600087803b1580156104ca57600080fd5b505af1925050508015610518575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261051591810190610ee1565b60015b610333573d808015610546576040519150601f19603f3d011682016040523d82523d6000602084013e61054b565b606091505b5061032a8161073e565b60008313806105645750600082135b61056d57600080fd5b600080600061057b84610668565b9250925092506105ad7f00000000000000000000000000000000000000000000000000000000000000008484846107ef565b5060008060008089136105f3578573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610888a600003610628565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161089896000035b925092509250821561063f57604051818152602081fd5b6000541561065557600054811461065557600080fd5b604051828152602081fd5b516042111590565b600080806106768482610805565b9250610683846014610905565b9050610690846017610805565b91509193909250565b80516060906101759083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9016109f5565b60006107047f00000000000000000000000000000000000000000000000000000000000000006106ff868686610bdc565b610c59565b949350505050565b60007f8000000000000000000000000000000000000000000000000000000000000000821061073a57600080fd5b5090565b600081516020146107db5760448251101561078e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078590611111565b60405180910390fd5b600482019150818060200190518101906107a89190610f52565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078591906110f7565b818060200190518101906101759190610fbc565b600061033785610800868686610bdc565b610d8f565b60008182601401101561087957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b81601401835110156108ec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b60008182600301101561097957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b81600301835110156109ec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f011015610a6957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015610ada57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b81830184511015610b4c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b606082158015610b6b5760405191506000825260208201604052610bd3565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610ba4578051835260209283019201610b8c565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b610be4610dbf565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115610c1c579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015262ffffff169181019190915290565b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1610610c9b57600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b6000610d9b8383610c59565b90503373ffffffffffffffffffffffffffffffffffffffff82161461017557600080fd5b604080516060810182526000808252602082018190529181019190915290565b600082601f830112610def578081fd5b8135610e02610dfd82611175565b611151565b818152846020838601011115610e16578283fd5b816020850160208301379081016020019190915292915050565b600080600080600060a08688031215610e47578081fd5b8535610e52816111e5565b94506020860135610e62816111e5565b9350604086013562ffffff81168114610e79578182fd5b9250606086013591506080860135610e90816111e5565b809150509295509295909350565b60008060408385031215610eb0578182fd5b823567ffffffffffffffff811115610ec6578283fd5b610ed285828601610ddf565b95602094909401359450505050565b60008060408385031215610ef3578182fd5b505080516020909101519092909150565b600080600060608486031215610f18578283fd5b8335925060208401359150604084013567ffffffffffffffff811115610f3c578182fd5b610f4886828701610ddf565b9150509250925092565b600060208284031215610f63578081fd5b815167ffffffffffffffff811115610f79578182fd5b8201601f81018413610f89578182fd5b8051610f97610dfd82611175565b818152856020838501011115610fab578384fd5b6103378260208301602086016111b5565b600060208284031215610fcd578081fd5b5051919050565b60008151808452610fec8160208601602086016111b5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b606093841b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a060808301526110ec60a0830184610fd4565b979650505050505050565b60006020825261110a6020830184610fd4565b9392505050565b60208082526010908201527f556e6578706563746564206572726f7200000000000000000000000000000000604082015260600190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561116d57fe5b604052919050565b600067ffffffffffffffff82111561118957fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b838110156111d05781810151838201526020016111b8565b838111156111df576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461120757600080fd5b5056fea164736f6c6343000706000a";
+
+export class Quoter__factory extends ContractFactory {
+  constructor(signer?: Signer) {
+    super(_abi, _bytecode, signer);
+  }
+
+  deploy(
+    _factory: string,
+    _WETH9: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<Quoter> {
+    return super.deploy(_factory, _WETH9, overrides || {}) as Promise<Quoter>;
+  }
+  getDeployTransaction(
+    _factory: string,
+    _WETH9: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): TransactionRequest {
+    return super.getDeployTransaction(_factory, _WETH9, overrides || {});
+  }
+  attach(address: string): Quoter {
+    return super.attach(address) as Quoter;
+  }
+  connect(signer: Signer): Quoter__factory {
+    return super.connect(signer) as Quoter__factory;
+  }
+  static readonly bytecode = _bytecode;
+  static readonly abi = _abi;
+  static createInterface(): QuoterInterface {
+    return new utils.Interface(_abi) as QuoterInterface;
+  }
+  static connect(address: string, signerOrProvider: Signer | Provider): Quoter {
+    return new Contract(address, _abi, signerOrProvider) as Quoter;
+  }
+}
diff --git a/lib/sor/types/other/factories/SwapRouter02__factory.ts b/lib/sor/types/other/factories/SwapRouter02__factory.ts
new file mode 100644
index 0000000..f885ba3
--- /dev/null
+++ b/lib/sor/types/other/factories/SwapRouter02__factory.ts
@@ -0,0 +1,1128 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider, TransactionRequest } from "@ethersproject/providers";
+import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
+import type { SwapRouter02, SwapRouter02Interface } from "../SwapRouter02";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "_factoryV2",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "factoryV3",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "_positionManager",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "_WETH9",
+        type: "address",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "constructor",
+  },
+  {
+    inputs: [],
+    name: "WETH9",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+    ],
+    name: "approveMax",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+    ],
+    name: "approveMaxMinusOne",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+    ],
+    name: "approveZeroThenMax",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+    ],
+    name: "approveZeroThenMaxMinusOne",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "callPositionManager",
+    outputs: [
+      {
+        internalType: "bytes",
+        name: "result",
+        type: "bytes",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes[]",
+        name: "paths",
+        type: "bytes[]",
+      },
+      {
+        internalType: "uint128[]",
+        name: "amounts",
+        type: "uint128[]",
+      },
+      {
+        internalType: "uint24",
+        name: "maximumTickDivergence",
+        type: "uint24",
+      },
+      {
+        internalType: "uint32",
+        name: "secondsAgo",
+        type: "uint32",
+      },
+    ],
+    name: "checkOracleSlippage",
+    outputs: [],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+      {
+        internalType: "uint24",
+        name: "maximumTickDivergence",
+        type: "uint24",
+      },
+      {
+        internalType: "uint32",
+        name: "secondsAgo",
+        type: "uint32",
+      },
+    ],
+    name: "checkOracleSlippage",
+    outputs: [],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "bytes",
+            name: "path",
+            type: "bytes",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amountIn",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountOutMinimum",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct IV3SwapRouter.ExactInputParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "exactInput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "tokenIn",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "tokenOut",
+            type: "address",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amountIn",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountOutMinimum",
+            type: "uint256",
+          },
+          {
+            internalType: "uint160",
+            name: "sqrtPriceLimitX96",
+            type: "uint160",
+          },
+        ],
+        internalType: "struct IV3SwapRouter.ExactInputSingleParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "exactInputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "bytes",
+            name: "path",
+            type: "bytes",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amountOut",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountInMaximum",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct IV3SwapRouter.ExactOutputParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "exactOutput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "tokenIn",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "tokenOut",
+            type: "address",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amountOut",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountInMaximum",
+            type: "uint256",
+          },
+          {
+            internalType: "uint160",
+            name: "sqrtPriceLimitX96",
+            type: "uint160",
+          },
+        ],
+        internalType: "struct IV3SwapRouter.ExactOutputSingleParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "exactOutputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factory",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factoryV2",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amount",
+        type: "uint256",
+      },
+    ],
+    name: "getApprovalType",
+    outputs: [
+      {
+        internalType: "enum IApproveAndCall.ApprovalType",
+        name: "",
+        type: "uint8",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "token0",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "token1",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "tokenId",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount0Min",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount1Min",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct IApproveAndCall.IncreaseLiquidityParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "increaseLiquidity",
+    outputs: [
+      {
+        internalType: "bytes",
+        name: "result",
+        type: "bytes",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "token0",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "token1",
+            type: "address",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "int24",
+            name: "tickLower",
+            type: "int24",
+          },
+          {
+            internalType: "int24",
+            name: "tickUpper",
+            type: "int24",
+          },
+          {
+            internalType: "uint256",
+            name: "amount0Min",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount1Min",
+            type: "uint256",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+        ],
+        internalType: "struct IApproveAndCall.MintParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "mint",
+    outputs: [
+      {
+        internalType: "bytes",
+        name: "result",
+        type: "bytes",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes32",
+        name: "previousBlockhash",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes[]",
+        name: "data",
+        type: "bytes[]",
+      },
+    ],
+    name: "multicall",
+    outputs: [
+      {
+        internalType: "bytes[]",
+        name: "",
+        type: "bytes[]",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "bytes[]",
+        name: "data",
+        type: "bytes[]",
+      },
+    ],
+    name: "multicall",
+    outputs: [
+      {
+        internalType: "bytes[]",
+        name: "",
+        type: "bytes[]",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes[]",
+        name: "data",
+        type: "bytes[]",
+      },
+    ],
+    name: "multicall",
+    outputs: [
+      {
+        internalType: "bytes[]",
+        name: "results",
+        type: "bytes[]",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "positionManager",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "pull",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "refundETH",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermit",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "nonce",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "expiry",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermitAllowed",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "nonce",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "expiry",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermitAllowedIfNecessary",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermitIfNecessary",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOutMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+    ],
+    name: "swapExactTokensForTokens",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountInMax",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+    ],
+    name: "swapTokensForExactTokens",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+    ],
+    name: "sweepToken",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+    ],
+    name: "sweepToken",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "feeBips",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "feeRecipient",
+        type: "address",
+      },
+    ],
+    name: "sweepTokenWithFee",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "feeBips",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "feeRecipient",
+        type: "address",
+      },
+    ],
+    name: "sweepTokenWithFee",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "int256",
+        name: "amount0Delta",
+        type: "int256",
+      },
+      {
+        internalType: "int256",
+        name: "amount1Delta",
+        type: "int256",
+      },
+      {
+        internalType: "bytes",
+        name: "_data",
+        type: "bytes",
+      },
+    ],
+    name: "uniswapV3SwapCallback",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+    ],
+    name: "unwrapWETH9",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+    ],
+    name: "unwrapWETH9",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "feeBips",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "feeRecipient",
+        type: "address",
+      },
+    ],
+    name: "unwrapWETH9WithFee",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "feeBips",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "feeRecipient",
+        type: "address",
+      },
+    ],
+    name: "unwrapWETH9WithFee",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "wrapETH",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    stateMutability: "payable",
+    type: "receive",
+  },
+];
+
+const _bytecode =
+  "";
+
+export class SwapRouter02__factory extends ContractFactory {
+  constructor(signer?: Signer) {
+    super(_abi, _bytecode, signer);
+  }
+
+  deploy(
+    _factoryV2: string,
+    factoryV3: string,
+    _positionManager: string,
+    _WETH9: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<SwapRouter02> {
+    return super.deploy(
+      _factoryV2,
+      factoryV3,
+      _positionManager,
+      _WETH9,
+      overrides || {}
+    ) as Promise<SwapRouter02>;
+  }
+  getDeployTransaction(
+    _factoryV2: string,
+    factoryV3: string,
+    _positionManager: string,
+    _WETH9: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): TransactionRequest {
+    return super.getDeployTransaction(
+      _factoryV2,
+      factoryV3,
+      _positionManager,
+      _WETH9,
+      overrides || {}
+    );
+  }
+  attach(address: string): SwapRouter02 {
+    return super.attach(address) as SwapRouter02;
+  }
+  connect(signer: Signer): SwapRouter02__factory {
+    return super.connect(signer) as SwapRouter02__factory;
+  }
+  static readonly bytecode = _bytecode;
+  static readonly abi = _abi;
+  static createInterface(): SwapRouter02Interface {
+    return new utils.Interface(_abi) as SwapRouter02Interface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): SwapRouter02 {
+    return new Contract(address, _abi, signerOrProvider) as SwapRouter02;
+  }
+}
diff --git a/lib/sor/types/other/factories/TokenFeeDetector__factory.ts b/lib/sor/types/other/factories/TokenFeeDetector__factory.ts
new file mode 100644
index 0000000..fd20efc
--- /dev/null
+++ b/lib/sor/types/other/factories/TokenFeeDetector__factory.ts
@@ -0,0 +1,157 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  TokenFeeDetector,
+  TokenFeeDetectorInterface,
+} from "../TokenFeeDetector";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "_factoryV2",
+        type: "address",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "constructor",
+  },
+  {
+    inputs: [],
+    name: "PairLookupFailed",
+    type: "error",
+  },
+  {
+    inputs: [],
+    name: "SameToken",
+    type: "error",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address[]",
+        name: "tokens",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "baseToken",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountToBorrow",
+        type: "uint256",
+      },
+    ],
+    name: "batchValidate",
+    outputs: [
+      {
+        components: [
+          {
+            internalType: "uint256",
+            name: "buyFeeBps",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "sellFeeBps",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct TokenFees[]",
+        name: "fotResults",
+        type: "tuple[]",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "uniswapV2Call",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "baseToken",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountToBorrow",
+        type: "uint256",
+      },
+    ],
+    name: "validate",
+    outputs: [
+      {
+        components: [
+          {
+            internalType: "uint256",
+            name: "buyFeeBps",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "sellFeeBps",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct TokenFees",
+        name: "fotResult",
+        type: "tuple",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class TokenFeeDetector__factory {
+  static readonly abi = _abi;
+  static createInterface(): TokenFeeDetectorInterface {
+    return new utils.Interface(_abi) as TokenFeeDetectorInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): TokenFeeDetector {
+    return new Contract(address, _abi, signerOrProvider) as TokenFeeDetector;
+  }
+}
diff --git a/lib/sor/types/other/factories/TokenValidator__factory.ts b/lib/sor/types/other/factories/TokenValidator__factory.ts
new file mode 100644
index 0000000..4f071a2
--- /dev/null
+++ b/lib/sor/types/other/factories/TokenValidator__factory.ts
@@ -0,0 +1,190 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider, TransactionRequest } from "@ethersproject/providers";
+import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
+import type {
+  TokenValidator,
+  TokenValidatorInterface,
+} from "../TokenValidator";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "_factoryV2",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "_positionManager",
+        type: "address",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "constructor",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address[]",
+        name: "tokens",
+        type: "address[]",
+      },
+      {
+        internalType: "address[]",
+        name: "baseTokens",
+        type: "address[]",
+      },
+      {
+        internalType: "uint256",
+        name: "amountToBorrow",
+        type: "uint256",
+      },
+    ],
+    name: "batchValidate",
+    outputs: [
+      {
+        internalType: "enum ITokenValidator.Status[]",
+        name: "isFotResults",
+        type: "uint8[]",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factoryV2",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "positionManager",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "uniswapV2Call",
+    outputs: [],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "address[]",
+        name: "baseTokens",
+        type: "address[]",
+      },
+      {
+        internalType: "uint256",
+        name: "amountToBorrow",
+        type: "uint256",
+      },
+    ],
+    name: "validate",
+    outputs: [
+      {
+        internalType: "enum ITokenValidator.Status",
+        name: "",
+        type: "uint8",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+const _bytecode =
+  "0x60c060405234801561001057600080fd5b506040516110e03803806110e083398101604081905261002f91610069565b6001600160601b0319606092831b8116608052911b1660a05261009b565b80516001600160a01b038116811461006457600080fd5b919050565b6000806040838503121561007b578182fd5b6100848361004d565b91506100926020840161004d565b90509250929050565b60805160601c60a05160601c61101c6100c4600039806103f65250806103d2525061101c6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806368e0d4e11161005057806368e0d4e1146100aa578063791b98bc146100bf578063be7672e5146100c757610067565b80630143aace1461006c57806310d1e85c14610095575b600080fd5b61007f61007a366004610b75565b6100e7565b60405161008c9190610dea565b60405180910390f35b6100a86100a3366004610bcf565b61016c565b005b6100b26103d0565b60405161008c9190610d7e565b6100b26103f4565b6100da6100d5366004610c60565b610418565b60405161008c9190610d9f565b6000805b8381101561015e5760006101208787878581811061010557fe5b905060200201602081019061011a9190610b3d565b866104d6565b9050600181600281111561013057fe5b14806101475750600281600281111561014557fe5b145b156101555791506101649050565b506001016100eb565b50600090505b949350505050565b60003390506000808273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ba57600080fd5b505afa1580156101ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f29190610b59565b8373ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561023857600080fd5b505afa15801561024c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102709190610b59565b9150915060008088116102835781610285565b825b905060008061029687890189610ce9565b915091506000828473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102d69190610d7e565b60206040518083038186803b1580156102ee57600080fd5b505afa158015610302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103269190610cd1565b03905081811461039e57604080518082018252600381527f464f540000000000000000000000000000000000000000000000000000000000602082015290517f08c379a00000000000000000000000000000000000000000000000000000000081526103959190600401610dfe565b60405180910390fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039590610e11565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60608467ffffffffffffffff8111801561043157600080fd5b5060405190808252806020026020018201604052801561045b578160200160208202803683370190505b50905060005b858110156104cc5761049587878381811061047857fe5b905060200201602081019061048d9190610b3d565b8686866100e7565b8282815181106104a157fe5b602002602001019060028111156104b457fe5b908160028111156104c157fe5b905250600101610461565b5095945050505050565b60008273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561051457506000610895565b600061059e3073ffffffffffffffffffffffffffffffffffffffff166368e0d4e16040518163ffffffff1660e01b815260040160206040518083038186803b15801561055f57600080fd5b505afa158015610573573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105979190610b59565b868661089c565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f0dfe168100000000000000000000000000000000000000000000000000000000179052905191925060009173ffffffffffffffffffffffffffffffffffffffff84169161061d91610d62565b6000604051808303816000865af19150503d806000811461065a576040519150601f19603f3d011682016040523d82523d6000602084013e61065f565b606091505b5091505080516000141561067857600092505050610895565b60008180602001905181019061068e9190610b59565b90506000808273ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16146106ce576000876106d2565b8660005b9150915060008973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107119190610d7e565b60206040518083038186803b15801561072957600080fd5b505afa15801561073d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107619190610cd1565b905060008690508073ffffffffffffffffffffffffffffffffffffffff1663022c0d9f858530868e60405160200161079a929190610e7f565b6040516020818303038152906040526040518563ffffffff1660e01b81526004016107c89493929190610e8d565b600060405180830381600087803b1580156107e257600080fd5b505af19250505080156107f3575060015b610863576107ff610f08565b8061080a5750610859565b61081381610987565b1561082957600198505050505050505050610895565b610832816109ea565b1561084857600298505050505050505050610895565b600098505050505050505050610895565b3d6000803e3d6000fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039590610e48565b9392505050565b60008060006108ab8585610a56565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501207fff0000000000000000000000000000000000000000000000000000000000000060688401529a90941b9093166069840152607d8301989098527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b60408051808201909152600381527f464f5400000000000000000000000000000000000000000000000000000000006020918201528151908201207f0d441c7cb74abc94cc606c98870ca9174ef5b167b2f7ffed505658cf4574b003145b919050565b60408051808201909152600f8082527f5452414e534645525f4641494c45440000000000000000000000000000000000602083015282516000929180821015610a3957600093505050506109e5565b602092830181902091819003850190920191909120149050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610a9257600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610610acc578284610acf565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216610af457600080fd5b9250929050565b60008083601f840112610b0c578182fd5b50813567ffffffffffffffff811115610b23578182fd5b6020830191508360208083028501011115610af457600080fd5b600060208284031215610b4e578081fd5b813561089581610fea565b600060208284031215610b6a578081fd5b815161089581610fea565b60008060008060608587031215610b8a578283fd5b8435610b9581610fea565b9350602085013567ffffffffffffffff811115610bb0578384fd5b610bbc87828801610afb565b9598909750949560400135949350505050565b600080600080600060808688031215610be6578081fd5b8535610bf181610fea565b94506020860135935060408601359250606086013567ffffffffffffffff80821115610c1b578283fd5b818801915088601f830112610c2e578283fd5b813581811115610c3c578384fd5b896020828501011115610c4d578384fd5b9699959850939650602001949392505050565b600080600080600060608688031215610c77578081fd5b853567ffffffffffffffff80821115610c8e578283fd5b610c9a89838a01610afb565b90975095506020880135915080821115610cb2578283fd5b50610cbf88828901610afb565b96999598509660400135949350505050565b600060208284031215610ce2578081fd5b5051919050565b60008060408385031215610cfb578182fd5b50508035926020909101359150565b60008151808452610d22816020860160208601610ed2565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60038110610d5e57fe5b9052565b60008251610d74818460208701610ed2565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6020808252825182820181905260009190848201906040850190845b81811015610dde57610dce838551610d54565b9284019291840191600101610dbb565b50909695505050505050565b60208101610df88284610d54565b92915050565b6000602082526108956020830184610d0a565b60208082526007908201527f556e6b6e6f776e00000000000000000000000000000000000000000000000000604082015260600190565b60208082526010908201527f556e6578706563746564206572726f7200000000000000000000000000000000604082015260600190565b918252602082015260400190565b600085825284602083015273ffffffffffffffffffffffffffffffffffffffff8416604083015260806060830152610ec86080830184610d0a565b9695505050505050565b60005b83811015610eed578181015183820152602001610ed5565b83811115610efc576000848401525b50505050565b60e01c90565b600060443d1015610f1857610fe7565b600481823e6308c379a0610f2c8251610f02565b14610f3657610fe7565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3d016004823e80513d67ffffffffffffffff8160248401118184111715610f845750505050610fe7565b82840192508251915080821115610f9e5750505050610fe7565b503d83016020828401011115610fb657505050610fe7565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01681016020016040529150505b90565b73ffffffffffffffffffffffffffffffffffffffff8116811461100c57600080fd5b5056fea164736f6c6343000706000a";
+
+export class TokenValidator__factory extends ContractFactory {
+  constructor(signer?: Signer) {
+    super(_abi, _bytecode, signer);
+  }
+
+  deploy(
+    _factoryV2: string,
+    _positionManager: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<TokenValidator> {
+    return super.deploy(
+      _factoryV2,
+      _positionManager,
+      overrides || {}
+    ) as Promise<TokenValidator>;
+  }
+  getDeployTransaction(
+    _factoryV2: string,
+    _positionManager: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): TransactionRequest {
+    return super.getDeployTransaction(
+      _factoryV2,
+      _positionManager,
+      overrides || {}
+    );
+  }
+  attach(address: string): TokenValidator {
+    return super.attach(address) as TokenValidator;
+  }
+  connect(signer: Signer): TokenValidator__factory {
+    return super.connect(signer) as TokenValidator__factory;
+  }
+  static readonly bytecode = _bytecode;
+  static readonly abi = _abi;
+  static createInterface(): TokenValidatorInterface {
+    return new utils.Interface(_abi) as TokenValidatorInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): TokenValidator {
+    return new Contract(address, _abi, signerOrProvider) as TokenValidator;
+  }
+}
diff --git a/lib/sor/types/other/factories/V2SwapRouter__factory.ts b/lib/sor/types/other/factories/V2SwapRouter__factory.ts
new file mode 100644
index 0000000..b3c3bdf
--- /dev/null
+++ b/lib/sor/types/other/factories/V2SwapRouter__factory.ts
@@ -0,0 +1,369 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type { V2SwapRouter, V2SwapRouterInterface } from "../V2SwapRouter";
+
+const _abi = [
+  {
+    inputs: [],
+    name: "WETH9",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factory",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factoryV2",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "positionManager",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "pull",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "refundETH",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOutMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+    ],
+    name: "swapExactTokensForTokens",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountInMax",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+    ],
+    name: "swapTokensForExactTokens",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+    ],
+    name: "sweepToken",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+    ],
+    name: "sweepToken",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "feeBips",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "feeRecipient",
+        type: "address",
+      },
+    ],
+    name: "sweepTokenWithFee",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "feeBips",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "feeRecipient",
+        type: "address",
+      },
+    ],
+    name: "sweepTokenWithFee",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+    ],
+    name: "unwrapWETH9",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+    ],
+    name: "unwrapWETH9",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "feeBips",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "feeRecipient",
+        type: "address",
+      },
+    ],
+    name: "unwrapWETH9WithFee",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "feeBips",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "feeRecipient",
+        type: "address",
+      },
+    ],
+    name: "unwrapWETH9WithFee",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "wrapETH",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    stateMutability: "payable",
+    type: "receive",
+  },
+];
+
+export class V2SwapRouter__factory {
+  static readonly abi = _abi;
+  static createInterface(): V2SwapRouterInterface {
+    return new utils.Interface(_abi) as V2SwapRouterInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): V2SwapRouter {
+    return new Contract(address, _abi, signerOrProvider) as V2SwapRouter;
+  }
+}
diff --git a/lib/sor/types/other/factories/V3SwapRouter__factory.ts b/lib/sor/types/other/factories/V3SwapRouter__factory.ts
new file mode 100644
index 0000000..d4d0023
--- /dev/null
+++ b/lib/sor/types/other/factories/V3SwapRouter__factory.ts
@@ -0,0 +1,543 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type { V3SwapRouter, V3SwapRouterInterface } from "../V3SwapRouter";
+
+const _abi = [
+  {
+    inputs: [],
+    name: "WETH9",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes[]",
+        name: "paths",
+        type: "bytes[]",
+      },
+      {
+        internalType: "uint128[]",
+        name: "amounts",
+        type: "uint128[]",
+      },
+      {
+        internalType: "uint24",
+        name: "maximumTickDivergence",
+        type: "uint24",
+      },
+      {
+        internalType: "uint32",
+        name: "secondsAgo",
+        type: "uint32",
+      },
+    ],
+    name: "checkOracleSlippage",
+    outputs: [],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+      {
+        internalType: "uint24",
+        name: "maximumTickDivergence",
+        type: "uint24",
+      },
+      {
+        internalType: "uint32",
+        name: "secondsAgo",
+        type: "uint32",
+      },
+    ],
+    name: "checkOracleSlippage",
+    outputs: [],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "bytes",
+            name: "path",
+            type: "bytes",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amountIn",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountOutMinimum",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct IV3SwapRouter.ExactInputParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "exactInput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "tokenIn",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "tokenOut",
+            type: "address",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amountIn",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountOutMinimum",
+            type: "uint256",
+          },
+          {
+            internalType: "uint160",
+            name: "sqrtPriceLimitX96",
+            type: "uint160",
+          },
+        ],
+        internalType: "struct IV3SwapRouter.ExactInputSingleParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "exactInputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "bytes",
+            name: "path",
+            type: "bytes",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amountOut",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountInMaximum",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct IV3SwapRouter.ExactOutputParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "exactOutput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "tokenIn",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "tokenOut",
+            type: "address",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amountOut",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountInMaximum",
+            type: "uint256",
+          },
+          {
+            internalType: "uint160",
+            name: "sqrtPriceLimitX96",
+            type: "uint160",
+          },
+        ],
+        internalType: "struct IV3SwapRouter.ExactOutputSingleParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "exactOutputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factory",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "pull",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "refundETH",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+    ],
+    name: "sweepToken",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+    ],
+    name: "sweepToken",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "feeBips",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "feeRecipient",
+        type: "address",
+      },
+    ],
+    name: "sweepTokenWithFee",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "feeBips",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "feeRecipient",
+        type: "address",
+      },
+    ],
+    name: "sweepTokenWithFee",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "int256",
+        name: "amount0Delta",
+        type: "int256",
+      },
+      {
+        internalType: "int256",
+        name: "amount1Delta",
+        type: "int256",
+      },
+      {
+        internalType: "bytes",
+        name: "_data",
+        type: "bytes",
+      },
+    ],
+    name: "uniswapV3SwapCallback",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+    ],
+    name: "unwrapWETH9",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+    ],
+    name: "unwrapWETH9",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "feeBips",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "feeRecipient",
+        type: "address",
+      },
+    ],
+    name: "unwrapWETH9WithFee",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "feeBips",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "feeRecipient",
+        type: "address",
+      },
+    ],
+    name: "unwrapWETH9WithFee",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "wrapETH",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    stateMutability: "payable",
+    type: "receive",
+  },
+];
+
+export class V3SwapRouter__factory {
+  static readonly abi = _abi;
+  static createInterface(): V3SwapRouterInterface {
+    return new utils.Interface(_abi) as V3SwapRouterInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): V3SwapRouter {
+    return new Contract(address, _abi, signerOrProvider) as V3SwapRouter;
+  }
+}
diff --git a/lib/sor/types/other/index.ts b/lib/sor/types/other/index.ts
new file mode 100644
index 0000000..3b8b3ad
--- /dev/null
+++ b/lib/sor/types/other/index.ts
@@ -0,0 +1,45 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+export { IApproveAndCall__factory } from "./factories/IApproveAndCall__factory";
+export { IImmutableState__factory } from "./factories/IImmutableState__factory";
+export { IMixedRouteQuoterV1__factory } from "./factories/IMixedRouteQuoterV1__factory";
+export { IMulticallExtended__factory } from "./factories/IMulticallExtended__factory";
+export { IOracleSlippage__factory } from "./factories/IOracleSlippage__factory";
+export { IPeripheryPaymentsExtended__factory } from "./factories/IPeripheryPaymentsExtended__factory";
+export { IPeripheryPaymentsWithFeeExtended__factory } from "./factories/IPeripheryPaymentsWithFeeExtended__factory";
+export { IQuoterV2__factory } from "./factories/IQuoterV2__factory";
+export { IQuoter__factory } from "./factories/IQuoter__factory";
+export { ISwapRouter02__factory } from "./factories/ISwapRouter02__factory";
+export { ITokenValidator__factory } from "./factories/ITokenValidator__factory";
+export { IV2SwapRouter__factory } from "./factories/IV2SwapRouter__factory";
+export { IV3SwapRouter__factory } from "./factories/IV3SwapRouter__factory";
+export { IWETH__factory } from "./factories/IWETH__factory";
+export { MixedRouteQuoterV1__factory } from "./factories/MixedRouteQuoterV1__factory";
+export { QuoterV2__factory } from "./factories/QuoterV2__factory";
+export { Quoter__factory } from "./factories/Quoter__factory";
+export { SwapRouter02__factory } from "./factories/SwapRouter02__factory";
+export { TokenValidator__factory } from "./factories/TokenValidator__factory";
+export { V2SwapRouter__factory } from "./factories/V2SwapRouter__factory";
+export { V3SwapRouter__factory } from "./factories/V3SwapRouter__factory";
+export type { IApproveAndCall } from "./IApproveAndCall";
+export type { IImmutableState } from "./IImmutableState";
+export type { IMixedRouteQuoterV1 } from "./IMixedRouteQuoterV1";
+export type { IMulticallExtended } from "./IMulticallExtended";
+export type { IOracleSlippage } from "./IOracleSlippage";
+export type { IPeripheryPaymentsExtended } from "./IPeripheryPaymentsExtended";
+export type { IPeripheryPaymentsWithFeeExtended } from "./IPeripheryPaymentsWithFeeExtended";
+export type { IQuoter } from "./IQuoter";
+export type { IQuoterV2 } from "./IQuoterV2";
+export type { ISwapRouter02 } from "./ISwapRouter02";
+export type { ITokenValidator } from "./ITokenValidator";
+export type { IV2SwapRouter } from "./IV2SwapRouter";
+export type { IV3SwapRouter } from "./IV3SwapRouter";
+export type { IWETH } from "./IWETH";
+export type { MixedRouteQuoterV1 } from "./MixedRouteQuoterV1";
+export type { Quoter } from "./Quoter";
+export type { QuoterV2 } from "./QuoterV2";
+export type { SwapRouter02 } from "./SwapRouter02";
+export type { TokenValidator } from "./TokenValidator";
+export type { V2SwapRouter } from "./V2SwapRouter";
+export type { V3SwapRouter } from "./V3SwapRouter";
diff --git a/lib/sor/types/v2/IUniswapV2Callee.d.ts b/lib/sor/types/v2/IUniswapV2Callee.d.ts
new file mode 100644
index 0000000..2f9d297
--- /dev/null
+++ b/lib/sor/types/v2/IUniswapV2Callee.d.ts
@@ -0,0 +1,131 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IUniswapV2CalleeInterface extends ethers.utils.Interface {
+  functions: {
+    "uniswapV2Call(address,uint256,uint256,bytes)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "uniswapV2Call",
+    values: [string, BigNumberish, BigNumberish, BytesLike]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "uniswapV2Call",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class IUniswapV2Callee extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IUniswapV2CalleeInterface;
+
+  functions: {
+    uniswapV2Call(
+      sender: string,
+      amount0: BigNumberish,
+      amount1: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  uniswapV2Call(
+    sender: string,
+    amount0: BigNumberish,
+    amount1: BigNumberish,
+    data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    uniswapV2Call(
+      sender: string,
+      amount0: BigNumberish,
+      amount1: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    uniswapV2Call(
+      sender: string,
+      amount0: BigNumberish,
+      amount1: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    uniswapV2Call(
+      sender: string,
+      amount0: BigNumberish,
+      amount1: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v2/IUniswapV2ERC20.d.ts b/lib/sor/types/v2/IUniswapV2ERC20.d.ts
new file mode 100644
index 0000000..e08f796
--- /dev/null
+++ b/lib/sor/types/v2/IUniswapV2ERC20.d.ts
@@ -0,0 +1,455 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IUniswapV2ERC20Interface extends ethers.utils.Interface {
+  functions: {
+    "DOMAIN_SEPARATOR()": FunctionFragment;
+    "PERMIT_TYPEHASH()": FunctionFragment;
+    "allowance(address,address)": FunctionFragment;
+    "approve(address,uint256)": FunctionFragment;
+    "balanceOf(address)": FunctionFragment;
+    "decimals()": FunctionFragment;
+    "name()": FunctionFragment;
+    "nonces(address)": FunctionFragment;
+    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "symbol()": FunctionFragment;
+    "totalSupply()": FunctionFragment;
+    "transfer(address,uint256)": FunctionFragment;
+    "transferFrom(address,address,uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "DOMAIN_SEPARATOR",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "PERMIT_TYPEHASH",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "allowance",
+    values: [string, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "approve",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
+  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
+  encodeFunctionData(functionFragment: "name", values?: undefined): string;
+  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
+  encodeFunctionData(
+    functionFragment: "permit",
+    values: [
+      string,
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "totalSupply",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "transfer",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "transferFrom",
+    values: [string, string, BigNumberish]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "DOMAIN_SEPARATOR",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "PERMIT_TYPEHASH",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "totalSupply",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "transferFrom",
+    data: BytesLike
+  ): Result;
+
+  events: {
+    "Approval(address,address,uint256)": EventFragment;
+    "Transfer(address,address,uint256)": EventFragment;
+  };
+
+  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
+}
+
+export class IUniswapV2ERC20 extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IUniswapV2ERC20Interface;
+
+  functions: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;
+
+    allowance(
+      owner: string,
+      spender: string,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber]>;
+
+    approve(
+      spender: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    decimals(overrides?: CallOverrides): Promise<[number]>;
+
+    name(overrides?: CallOverrides): Promise<[string]>;
+
+    nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    permit(
+      owner: string,
+      spender: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    symbol(overrides?: CallOverrides): Promise<[string]>;
+
+    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    transfer(
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;
+
+  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;
+
+  allowance(
+    owner: string,
+    spender: string,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  approve(
+    spender: string,
+    value: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+  decimals(overrides?: CallOverrides): Promise<number>;
+
+  name(overrides?: CallOverrides): Promise<string>;
+
+  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+  permit(
+    owner: string,
+    spender: string,
+    value: BigNumberish,
+    deadline: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  symbol(overrides?: CallOverrides): Promise<string>;
+
+  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+  transfer(
+    to: string,
+    value: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  transferFrom(
+    from: string,
+    to: string,
+    value: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;
+
+    allowance(
+      owner: string,
+      spender: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    approve(
+      spender: string,
+      value: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    decimals(overrides?: CallOverrides): Promise<number>;
+
+    name(overrides?: CallOverrides): Promise<string>;
+
+    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    permit(
+      owner: string,
+      spender: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    symbol(overrides?: CallOverrides): Promise<string>;
+
+    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+    transfer(
+      to: string,
+      value: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      value: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+  };
+
+  filters: {
+    Approval(
+      owner?: string | null,
+      spender?: string | null,
+      value?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber],
+      { owner: string; spender: string; value: BigNumber }
+    >;
+
+    Transfer(
+      from?: string | null,
+      to?: string | null,
+      value?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber],
+      { from: string; to: string; value: BigNumber }
+    >;
+  };
+
+  estimateGas: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;
+
+    allowance(
+      owner: string,
+      spender: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    approve(
+      spender: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    decimals(overrides?: CallOverrides): Promise<BigNumber>;
+
+    name(overrides?: CallOverrides): Promise<BigNumber>;
+
+    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    permit(
+      owner: string,
+      spender: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    symbol(overrides?: CallOverrides): Promise<BigNumber>;
+
+    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+    transfer(
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    allowance(
+      owner: string,
+      spender: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    approve(
+      spender: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    balanceOf(
+      owner: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    nonces(
+      owner: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    permit(
+      owner: string,
+      spender: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    transfer(
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v2/IUniswapV2Factory.d.ts b/lib/sor/types/v2/IUniswapV2Factory.d.ts
new file mode 100644
index 0000000..73b30e9
--- /dev/null
+++ b/lib/sor/types/v2/IUniswapV2Factory.d.ts
@@ -0,0 +1,297 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IUniswapV2FactoryInterface extends ethers.utils.Interface {
+  functions: {
+    "allPairs(uint256)": FunctionFragment;
+    "allPairsLength()": FunctionFragment;
+    "createPair(address,address)": FunctionFragment;
+    "feeTo()": FunctionFragment;
+    "feeToSetter()": FunctionFragment;
+    "getPair(address,address)": FunctionFragment;
+    "setFeeTo(address)": FunctionFragment;
+    "setFeeToSetter(address)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "allPairs",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "allPairsLength",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "createPair",
+    values: [string, string]
+  ): string;
+  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "feeToSetter",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getPair",
+    values: [string, string]
+  ): string;
+  encodeFunctionData(functionFragment: "setFeeTo", values: [string]): string;
+  encodeFunctionData(
+    functionFragment: "setFeeToSetter",
+    values: [string]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "allPairs", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "allPairsLength",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "feeToSetter",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "setFeeToSetter",
+    data: BytesLike
+  ): Result;
+
+  events: {
+    "PairCreated(address,address,address,uint256)": EventFragment;
+  };
+
+  getEvent(nameOrSignatureOrTopic: "PairCreated"): EventFragment;
+}
+
+export class IUniswapV2Factory extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IUniswapV2FactoryInterface;
+
+  functions: {
+    allPairs(
+      arg0: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[string] & { pair: string }>;
+
+    allPairsLength(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    createPair(
+      tokenA: string,
+      tokenB: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    feeTo(overrides?: CallOverrides): Promise<[string]>;
+
+    feeToSetter(overrides?: CallOverrides): Promise<[string]>;
+
+    getPair(
+      tokenA: string,
+      tokenB: string,
+      overrides?: CallOverrides
+    ): Promise<[string] & { pair: string }>;
+
+    setFeeTo(
+      arg0: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    setFeeToSetter(
+      arg0: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
+
+  allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;
+
+  createPair(
+    tokenA: string,
+    tokenB: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  feeTo(overrides?: CallOverrides): Promise<string>;
+
+  feeToSetter(overrides?: CallOverrides): Promise<string>;
+
+  getPair(
+    tokenA: string,
+    tokenB: string,
+    overrides?: CallOverrides
+  ): Promise<string>;
+
+  setFeeTo(
+    arg0: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  setFeeToSetter(
+    arg0: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
+
+    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;
+
+    createPair(
+      tokenA: string,
+      tokenB: string,
+      overrides?: CallOverrides
+    ): Promise<string>;
+
+    feeTo(overrides?: CallOverrides): Promise<string>;
+
+    feeToSetter(overrides?: CallOverrides): Promise<string>;
+
+    getPair(
+      tokenA: string,
+      tokenB: string,
+      overrides?: CallOverrides
+    ): Promise<string>;
+
+    setFeeTo(arg0: string, overrides?: CallOverrides): Promise<void>;
+
+    setFeeToSetter(arg0: string, overrides?: CallOverrides): Promise<void>;
+  };
+
+  filters: {
+    PairCreated(
+      token0?: string | null,
+      token1?: string | null,
+      pair?: null,
+      undefined?: null
+    ): TypedEventFilter<
+      [string, string, string, BigNumber],
+      { token0: string; token1: string; pair: string; arg3: BigNumber }
+    >;
+  };
+
+  estimateGas: {
+    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
+
+    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;
+
+    createPair(
+      tokenA: string,
+      tokenB: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    feeTo(overrides?: CallOverrides): Promise<BigNumber>;
+
+    feeToSetter(overrides?: CallOverrides): Promise<BigNumber>;
+
+    getPair(
+      tokenA: string,
+      tokenB: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    setFeeTo(
+      arg0: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    setFeeToSetter(
+      arg0: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    allPairs(
+      arg0: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    allPairsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    createPair(
+      tokenA: string,
+      tokenB: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    feeToSetter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    getPair(
+      tokenA: string,
+      tokenB: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    setFeeTo(
+      arg0: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    setFeeToSetter(
+      arg0: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v2/IUniswapV2Migrator.d.ts b/lib/sor/types/v2/IUniswapV2Migrator.d.ts
new file mode 100644
index 0000000..834c35d
--- /dev/null
+++ b/lib/sor/types/v2/IUniswapV2Migrator.d.ts
@@ -0,0 +1,133 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IUniswapV2MigratorInterface extends ethers.utils.Interface {
+  functions: {
+    "migrate(address,uint256,uint256,address,uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "migrate",
+    values: [string, BigNumberish, BigNumberish, string, BigNumberish]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
+
+  events: {};
+}
+
+export class IUniswapV2Migrator extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IUniswapV2MigratorInterface;
+
+  functions: {
+    migrate(
+      token: string,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  migrate(
+    token: string,
+    amountTokenMin: BigNumberish,
+    amountETHMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    migrate(
+      token: string,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    migrate(
+      token: string,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    migrate(
+      token: string,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v2/IUniswapV2Pair.d.ts b/lib/sor/types/v2/IUniswapV2Pair.d.ts
new file mode 100644
index 0000000..3924be8
--- /dev/null
+++ b/lib/sor/types/v2/IUniswapV2Pair.d.ts
@@ -0,0 +1,848 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IUniswapV2PairInterface extends ethers.utils.Interface {
+  functions: {
+    "DOMAIN_SEPARATOR()": FunctionFragment;
+    "MINIMUM_LIQUIDITY()": FunctionFragment;
+    "PERMIT_TYPEHASH()": FunctionFragment;
+    "allowance(address,address)": FunctionFragment;
+    "approve(address,uint256)": FunctionFragment;
+    "balanceOf(address)": FunctionFragment;
+    "burn(address)": FunctionFragment;
+    "decimals()": FunctionFragment;
+    "factory()": FunctionFragment;
+    "getReserves()": FunctionFragment;
+    "initialize(address,address)": FunctionFragment;
+    "kLast()": FunctionFragment;
+    "mint(address)": FunctionFragment;
+    "name()": FunctionFragment;
+    "nonces(address)": FunctionFragment;
+    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "price0CumulativeLast()": FunctionFragment;
+    "price1CumulativeLast()": FunctionFragment;
+    "skim(address)": FunctionFragment;
+    "swap(uint256,uint256,address,bytes)": FunctionFragment;
+    "symbol()": FunctionFragment;
+    "sync()": FunctionFragment;
+    "token0()": FunctionFragment;
+    "token1()": FunctionFragment;
+    "totalSupply()": FunctionFragment;
+    "transfer(address,uint256)": FunctionFragment;
+    "transferFrom(address,address,uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "DOMAIN_SEPARATOR",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "MINIMUM_LIQUIDITY",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "PERMIT_TYPEHASH",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "allowance",
+    values: [string, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "approve",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
+  encodeFunctionData(functionFragment: "burn", values: [string]): string;
+  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
+  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "getReserves",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "initialize",
+    values: [string, string]
+  ): string;
+  encodeFunctionData(functionFragment: "kLast", values?: undefined): string;
+  encodeFunctionData(functionFragment: "mint", values: [string]): string;
+  encodeFunctionData(functionFragment: "name", values?: undefined): string;
+  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
+  encodeFunctionData(
+    functionFragment: "permit",
+    values: [
+      string,
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "price0CumulativeLast",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "price1CumulativeLast",
+    values?: undefined
+  ): string;
+  encodeFunctionData(functionFragment: "skim", values: [string]): string;
+  encodeFunctionData(
+    functionFragment: "swap",
+    values: [BigNumberish, BigNumberish, string, BytesLike]
+  ): string;
+  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
+  encodeFunctionData(functionFragment: "sync", values?: undefined): string;
+  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
+  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "totalSupply",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "transfer",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "transferFrom",
+    values: [string, string, BigNumberish]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "DOMAIN_SEPARATOR",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "MINIMUM_LIQUIDITY",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "PERMIT_TYPEHASH",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "getReserves",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "kLast", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "price0CumulativeLast",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "price1CumulativeLast",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "skim", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "totalSupply",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "transferFrom",
+    data: BytesLike
+  ): Result;
+
+  events: {
+    "Approval(address,address,uint256)": EventFragment;
+    "Burn(address,uint256,uint256,address)": EventFragment;
+    "Mint(address,uint256,uint256)": EventFragment;
+    "Swap(address,uint256,uint256,uint256,uint256,address)": EventFragment;
+    "Sync(uint112,uint112)": EventFragment;
+    "Transfer(address,address,uint256)": EventFragment;
+  };
+
+  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Sync"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
+}
+
+export class IUniswapV2Pair extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IUniswapV2PairInterface;
+
+  functions: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;
+
+    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;
+
+    allowance(
+      owner: string,
+      spender: string,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber]>;
+
+    approve(
+      spender: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    burn(
+      to: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    decimals(overrides?: CallOverrides): Promise<[number]>;
+
+    factory(overrides?: CallOverrides): Promise<[string]>;
+
+    getReserves(
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, number] & {
+        reserve0: BigNumber;
+        reserve1: BigNumber;
+        blockTimestampLast: number;
+      }
+    >;
+
+    initialize(
+      arg0: string,
+      arg1: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    kLast(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    mint(
+      to: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    name(overrides?: CallOverrides): Promise<[string]>;
+
+    nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    permit(
+      owner: string,
+      spender: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    price0CumulativeLast(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    price1CumulativeLast(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    skim(
+      to: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swap(
+      amount0Out: BigNumberish,
+      amount1Out: BigNumberish,
+      to: string,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    symbol(overrides?: CallOverrides): Promise<[string]>;
+
+    sync(
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    token0(overrides?: CallOverrides): Promise<[string]>;
+
+    token1(overrides?: CallOverrides): Promise<[string]>;
+
+    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    transfer(
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;
+
+  MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;
+
+  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;
+
+  allowance(
+    owner: string,
+    spender: string,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  approve(
+    spender: string,
+    value: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+  burn(
+    to: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  decimals(overrides?: CallOverrides): Promise<number>;
+
+  factory(overrides?: CallOverrides): Promise<string>;
+
+  getReserves(
+    overrides?: CallOverrides
+  ): Promise<
+    [BigNumber, BigNumber, number] & {
+      reserve0: BigNumber;
+      reserve1: BigNumber;
+      blockTimestampLast: number;
+    }
+  >;
+
+  initialize(
+    arg0: string,
+    arg1: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  kLast(overrides?: CallOverrides): Promise<BigNumber>;
+
+  mint(
+    to: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  name(overrides?: CallOverrides): Promise<string>;
+
+  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+  permit(
+    owner: string,
+    spender: string,
+    value: BigNumberish,
+    deadline: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  price0CumulativeLast(overrides?: CallOverrides): Promise<BigNumber>;
+
+  price1CumulativeLast(overrides?: CallOverrides): Promise<BigNumber>;
+
+  skim(
+    to: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swap(
+    amount0Out: BigNumberish,
+    amount1Out: BigNumberish,
+    to: string,
+    data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  symbol(overrides?: CallOverrides): Promise<string>;
+
+  sync(
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  token0(overrides?: CallOverrides): Promise<string>;
+
+  token1(overrides?: CallOverrides): Promise<string>;
+
+  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+  transfer(
+    to: string,
+    value: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  transferFrom(
+    from: string,
+    to: string,
+    value: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;
+
+    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;
+
+    allowance(
+      owner: string,
+      spender: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    approve(
+      spender: string,
+      value: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    burn(
+      to: string,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
+    >;
+
+    decimals(overrides?: CallOverrides): Promise<number>;
+
+    factory(overrides?: CallOverrides): Promise<string>;
+
+    getReserves(
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, number] & {
+        reserve0: BigNumber;
+        reserve1: BigNumber;
+        blockTimestampLast: number;
+      }
+    >;
+
+    initialize(
+      arg0: string,
+      arg1: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    kLast(overrides?: CallOverrides): Promise<BigNumber>;
+
+    mint(to: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    name(overrides?: CallOverrides): Promise<string>;
+
+    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    permit(
+      owner: string,
+      spender: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    price0CumulativeLast(overrides?: CallOverrides): Promise<BigNumber>;
+
+    price1CumulativeLast(overrides?: CallOverrides): Promise<BigNumber>;
+
+    skim(to: string, overrides?: CallOverrides): Promise<void>;
+
+    swap(
+      amount0Out: BigNumberish,
+      amount1Out: BigNumberish,
+      to: string,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    symbol(overrides?: CallOverrides): Promise<string>;
+
+    sync(overrides?: CallOverrides): Promise<void>;
+
+    token0(overrides?: CallOverrides): Promise<string>;
+
+    token1(overrides?: CallOverrides): Promise<string>;
+
+    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+    transfer(
+      to: string,
+      value: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      value: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+  };
+
+  filters: {
+    Approval(
+      owner?: string | null,
+      spender?: string | null,
+      value?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber],
+      { owner: string; spender: string; value: BigNumber }
+    >;
+
+    Burn(
+      sender?: string | null,
+      amount0?: null,
+      amount1?: null,
+      to?: string | null
+    ): TypedEventFilter<
+      [string, BigNumber, BigNumber, string],
+      { sender: string; amount0: BigNumber; amount1: BigNumber; to: string }
+    >;
+
+    Mint(
+      sender?: string | null,
+      amount0?: null,
+      amount1?: null
+    ): TypedEventFilter<
+      [string, BigNumber, BigNumber],
+      { sender: string; amount0: BigNumber; amount1: BigNumber }
+    >;
+
+    Swap(
+      sender?: string | null,
+      amount0In?: null,
+      amount1In?: null,
+      amount0Out?: null,
+      amount1Out?: null,
+      to?: string | null
+    ): TypedEventFilter<
+      [string, BigNumber, BigNumber, BigNumber, BigNumber, string],
+      {
+        sender: string;
+        amount0In: BigNumber;
+        amount1In: BigNumber;
+        amount0Out: BigNumber;
+        amount1Out: BigNumber;
+        to: string;
+      }
+    >;
+
+    Sync(
+      reserve0?: null,
+      reserve1?: null
+    ): TypedEventFilter<
+      [BigNumber, BigNumber],
+      { reserve0: BigNumber; reserve1: BigNumber }
+    >;
+
+    Transfer(
+      from?: string | null,
+      to?: string | null,
+      value?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber],
+      { from: string; to: string; value: BigNumber }
+    >;
+  };
+
+  estimateGas: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;
+
+    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;
+
+    allowance(
+      owner: string,
+      spender: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    approve(
+      spender: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    burn(
+      to: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    decimals(overrides?: CallOverrides): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<BigNumber>;
+
+    getReserves(overrides?: CallOverrides): Promise<BigNumber>;
+
+    initialize(
+      arg0: string,
+      arg1: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    kLast(overrides?: CallOverrides): Promise<BigNumber>;
+
+    mint(
+      to: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    name(overrides?: CallOverrides): Promise<BigNumber>;
+
+    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    permit(
+      owner: string,
+      spender: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    price0CumulativeLast(overrides?: CallOverrides): Promise<BigNumber>;
+
+    price1CumulativeLast(overrides?: CallOverrides): Promise<BigNumber>;
+
+    skim(
+      to: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swap(
+      amount0Out: BigNumberish,
+      amount1Out: BigNumberish,
+      to: string,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    symbol(overrides?: CallOverrides): Promise<BigNumber>;
+
+    sync(
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    token0(overrides?: CallOverrides): Promise<BigNumber>;
+
+    token1(overrides?: CallOverrides): Promise<BigNumber>;
+
+    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+    transfer(
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    allowance(
+      owner: string,
+      spender: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    approve(
+      spender: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    balanceOf(
+      owner: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    burn(
+      to: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    initialize(
+      arg0: string,
+      arg1: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    kLast(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    mint(
+      to: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    nonces(
+      owner: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    permit(
+      owner: string,
+      spender: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    price0CumulativeLast(
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    price1CumulativeLast(
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    skim(
+      to: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swap(
+      amount0Out: BigNumberish,
+      amount1Out: BigNumberish,
+      to: string,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    sync(
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    transfer(
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v2/IUniswapV2Router01.d.ts b/lib/sor/types/v2/IUniswapV2Router01.d.ts
new file mode 100644
index 0000000..f917781
--- /dev/null
+++ b/lib/sor/types/v2/IUniswapV2Router01.d.ts
@@ -0,0 +1,1118 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IUniswapV2Router01Interface extends ethers.utils.Interface {
+  functions: {
+    "WETH()": FunctionFragment;
+    "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
+    "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
+    "factory()": FunctionFragment;
+    "getAmountIn(uint256,uint256,uint256)": FunctionFragment;
+    "getAmountOut(uint256,uint256,uint256)": FunctionFragment;
+    "getAmountsIn(uint256,address[])": FunctionFragment;
+    "getAmountsOut(uint256,address[])": FunctionFragment;
+    "quote(uint256,uint256,uint256)": FunctionFragment;
+    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
+    "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
+    "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
+    "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
+    "swapETHForExactTokens(uint256,address[],address,uint256)": FunctionFragment;
+    "swapExactETHForTokens(uint256,address[],address,uint256)": FunctionFragment;
+    "swapExactTokensForETH(uint256,uint256,address[],address,uint256)": FunctionFragment;
+    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
+    "swapTokensForExactETH(uint256,uint256,address[],address,uint256)": FunctionFragment;
+    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "addLiquidity",
+    values: [
+      string,
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "addLiquidityETH",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish
+    ]
+  ): string;
+  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "getAmountIn",
+    values: [BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getAmountOut",
+    values: [BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getAmountsIn",
+    values: [BigNumberish, string[]]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getAmountsOut",
+    values: [BigNumberish, string[]]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quote",
+    values: [BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "removeLiquidity",
+    values: [
+      string,
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "removeLiquidityETH",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "removeLiquidityETHWithPermit",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish,
+      boolean,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "removeLiquidityWithPermit",
+    values: [
+      string,
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish,
+      boolean,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapETHForExactTokens",
+    values: [BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapExactETHForTokens",
+    values: [BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapExactTokensForETH",
+    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapExactTokensForTokens",
+    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapTokensForExactETH",
+    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapTokensForExactTokens",
+    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "addLiquidity",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "addLiquidityETH",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "getAmountIn",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "getAmountOut",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "getAmountsIn",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "getAmountsOut",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "removeLiquidity",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "removeLiquidityETH",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "removeLiquidityETHWithPermit",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "removeLiquidityWithPermit",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapETHForExactTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapExactETHForTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapExactTokensForETH",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapExactTokensForTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapTokensForExactETH",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapTokensForExactTokens",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class IUniswapV2Router01 extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IUniswapV2Router01Interface;
+
+  functions: {
+    WETH(overrides?: CallOverrides): Promise<[string]>;
+
+    addLiquidity(
+      tokenA: string,
+      tokenB: string,
+      amountADesired: BigNumberish,
+      amountBDesired: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    addLiquidityETH(
+      token: string,
+      amountTokenDesired: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<[string]>;
+
+    getAmountIn(
+      amountOut: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber] & { amountIn: BigNumber }>;
+
+    getAmountOut(
+      amountIn: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber] & { amountOut: BigNumber }>;
+
+    getAmountsIn(
+      amountOut: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;
+
+    getAmountsOut(
+      amountIn: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;
+
+    quote(
+      amountA: BigNumberish,
+      reserveA: BigNumberish,
+      reserveB: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber] & { amountB: BigNumber }>;
+
+    removeLiquidity(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    removeLiquidityETH(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    removeLiquidityETHWithPermit(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    removeLiquidityWithPermit(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapETHForExactTokens(
+      amountOut: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapExactETHForTokens(
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapExactTokensForETH(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapTokensForExactETH(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  WETH(overrides?: CallOverrides): Promise<string>;
+
+  addLiquidity(
+    tokenA: string,
+    tokenB: string,
+    amountADesired: BigNumberish,
+    amountBDesired: BigNumberish,
+    amountAMin: BigNumberish,
+    amountBMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  addLiquidityETH(
+    token: string,
+    amountTokenDesired: BigNumberish,
+    amountTokenMin: BigNumberish,
+    amountETHMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  factory(overrides?: CallOverrides): Promise<string>;
+
+  getAmountIn(
+    amountOut: BigNumberish,
+    reserveIn: BigNumberish,
+    reserveOut: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  getAmountOut(
+    amountIn: BigNumberish,
+    reserveIn: BigNumberish,
+    reserveOut: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  getAmountsIn(
+    amountOut: BigNumberish,
+    path: string[],
+    overrides?: CallOverrides
+  ): Promise<BigNumber[]>;
+
+  getAmountsOut(
+    amountIn: BigNumberish,
+    path: string[],
+    overrides?: CallOverrides
+  ): Promise<BigNumber[]>;
+
+  quote(
+    amountA: BigNumberish,
+    reserveA: BigNumberish,
+    reserveB: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  removeLiquidity(
+    tokenA: string,
+    tokenB: string,
+    liquidity: BigNumberish,
+    amountAMin: BigNumberish,
+    amountBMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  removeLiquidityETH(
+    token: string,
+    liquidity: BigNumberish,
+    amountTokenMin: BigNumberish,
+    amountETHMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  removeLiquidityETHWithPermit(
+    token: string,
+    liquidity: BigNumberish,
+    amountTokenMin: BigNumberish,
+    amountETHMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    approveMax: boolean,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  removeLiquidityWithPermit(
+    tokenA: string,
+    tokenB: string,
+    liquidity: BigNumberish,
+    amountAMin: BigNumberish,
+    amountBMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    approveMax: boolean,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapETHForExactTokens(
+    amountOut: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapExactETHForTokens(
+    amountOutMin: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapExactTokensForETH(
+    amountIn: BigNumberish,
+    amountOutMin: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapExactTokensForTokens(
+    amountIn: BigNumberish,
+    amountOutMin: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapTokensForExactETH(
+    amountOut: BigNumberish,
+    amountInMax: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapTokensForExactTokens(
+    amountOut: BigNumberish,
+    amountInMax: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    WETH(overrides?: CallOverrides): Promise<string>;
+
+    addLiquidity(
+      tokenA: string,
+      tokenB: string,
+      amountADesired: BigNumberish,
+      amountBDesired: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, BigNumber] & {
+        amountA: BigNumber;
+        amountB: BigNumber;
+        liquidity: BigNumber;
+      }
+    >;
+
+    addLiquidityETH(
+      token: string,
+      amountTokenDesired: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, BigNumber] & {
+        amountToken: BigNumber;
+        amountETH: BigNumber;
+        liquidity: BigNumber;
+      }
+    >;
+
+    factory(overrides?: CallOverrides): Promise<string>;
+
+    getAmountIn(
+      amountOut: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    getAmountOut(
+      amountIn: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    getAmountsIn(
+      amountOut: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    getAmountsOut(
+      amountIn: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    quote(
+      amountA: BigNumberish,
+      reserveA: BigNumberish,
+      reserveB: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    removeLiquidity(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amountA: BigNumber; amountB: BigNumber }
+    >;
+
+    removeLiquidityETH(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amountToken: BigNumber; amountETH: BigNumber }
+    >;
+
+    removeLiquidityETHWithPermit(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amountToken: BigNumber; amountETH: BigNumber }
+    >;
+
+    removeLiquidityWithPermit(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amountA: BigNumber; amountB: BigNumber }
+    >;
+
+    swapETHForExactTokens(
+      amountOut: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    swapExactETHForTokens(
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    swapExactTokensForETH(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    swapTokensForExactETH(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    WETH(overrides?: CallOverrides): Promise<BigNumber>;
+
+    addLiquidity(
+      tokenA: string,
+      tokenB: string,
+      amountADesired: BigNumberish,
+      amountBDesired: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    addLiquidityETH(
+      token: string,
+      amountTokenDesired: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<BigNumber>;
+
+    getAmountIn(
+      amountOut: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    getAmountOut(
+      amountIn: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    getAmountsIn(
+      amountOut: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    getAmountsOut(
+      amountIn: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    quote(
+      amountA: BigNumberish,
+      reserveA: BigNumberish,
+      reserveB: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    removeLiquidity(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    removeLiquidityETH(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    removeLiquidityETHWithPermit(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    removeLiquidityWithPermit(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapETHForExactTokens(
+      amountOut: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapExactETHForTokens(
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapExactTokensForETH(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapTokensForExactETH(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    addLiquidity(
+      tokenA: string,
+      tokenB: string,
+      amountADesired: BigNumberish,
+      amountBDesired: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    addLiquidityETH(
+      token: string,
+      amountTokenDesired: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    getAmountIn(
+      amountOut: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    getAmountOut(
+      amountIn: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    getAmountsIn(
+      amountOut: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    getAmountsOut(
+      amountIn: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    quote(
+      amountA: BigNumberish,
+      reserveA: BigNumberish,
+      reserveB: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    removeLiquidity(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    removeLiquidityETH(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    removeLiquidityETHWithPermit(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    removeLiquidityWithPermit(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapETHForExactTokens(
+      amountOut: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapExactETHForTokens(
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapExactTokensForETH(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapTokensForExactETH(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v2/IUniswapV2Router02.d.ts b/lib/sor/types/v2/IUniswapV2Router02.d.ts
new file mode 100644
index 0000000..494c154
--- /dev/null
+++ b/lib/sor/types/v2/IUniswapV2Router02.d.ts
@@ -0,0 +1,1431 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IUniswapV2Router02Interface extends ethers.utils.Interface {
+  functions: {
+    "WETH()": FunctionFragment;
+    "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
+    "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
+    "factory()": FunctionFragment;
+    "getAmountIn(uint256,uint256,uint256)": FunctionFragment;
+    "getAmountOut(uint256,uint256,uint256)": FunctionFragment;
+    "getAmountsIn(uint256,address[])": FunctionFragment;
+    "getAmountsOut(uint256,address[])": FunctionFragment;
+    "quote(uint256,uint256,uint256)": FunctionFragment;
+    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
+    "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
+    "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
+    "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
+    "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
+    "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
+    "swapETHForExactTokens(uint256,address[],address,uint256)": FunctionFragment;
+    "swapExactETHForTokens(uint256,address[],address,uint256)": FunctionFragment;
+    "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)": FunctionFragment;
+    "swapExactTokensForETH(uint256,uint256,address[],address,uint256)": FunctionFragment;
+    "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
+    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
+    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
+    "swapTokensForExactETH(uint256,uint256,address[],address,uint256)": FunctionFragment;
+    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "addLiquidity",
+    values: [
+      string,
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "addLiquidityETH",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish
+    ]
+  ): string;
+  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "getAmountIn",
+    values: [BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getAmountOut",
+    values: [BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getAmountsIn",
+    values: [BigNumberish, string[]]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getAmountsOut",
+    values: [BigNumberish, string[]]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quote",
+    values: [BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "removeLiquidity",
+    values: [
+      string,
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "removeLiquidityETH",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "removeLiquidityETHSupportingFeeOnTransferTokens",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "removeLiquidityETHWithPermit",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish,
+      boolean,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish,
+      boolean,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "removeLiquidityWithPermit",
+    values: [
+      string,
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish,
+      boolean,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapETHForExactTokens",
+    values: [BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapExactETHForTokens",
+    values: [BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapExactETHForTokensSupportingFeeOnTransferTokens",
+    values: [BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapExactTokensForETH",
+    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapExactTokensForETHSupportingFeeOnTransferTokens",
+    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapExactTokensForTokens",
+    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
+    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapTokensForExactETH",
+    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapTokensForExactTokens",
+    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "addLiquidity",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "addLiquidityETH",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "getAmountIn",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "getAmountOut",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "getAmountsIn",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "getAmountsOut",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "removeLiquidity",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "removeLiquidityETH",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "removeLiquidityETHSupportingFeeOnTransferTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "removeLiquidityETHWithPermit",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "removeLiquidityWithPermit",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapETHForExactTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapExactETHForTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapExactETHForTokensSupportingFeeOnTransferTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapExactTokensForETH",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapExactTokensForETHSupportingFeeOnTransferTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapExactTokensForTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapTokensForExactETH",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapTokensForExactTokens",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class IUniswapV2Router02 extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IUniswapV2Router02Interface;
+
+  functions: {
+    WETH(overrides?: CallOverrides): Promise<[string]>;
+
+    addLiquidity(
+      tokenA: string,
+      tokenB: string,
+      amountADesired: BigNumberish,
+      amountBDesired: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    addLiquidityETH(
+      token: string,
+      amountTokenDesired: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<[string]>;
+
+    getAmountIn(
+      amountOut: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber] & { amountIn: BigNumber }>;
+
+    getAmountOut(
+      amountIn: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber] & { amountOut: BigNumber }>;
+
+    getAmountsIn(
+      amountOut: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;
+
+    getAmountsOut(
+      amountIn: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;
+
+    quote(
+      amountA: BigNumberish,
+      reserveA: BigNumberish,
+      reserveB: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber] & { amountB: BigNumber }>;
+
+    removeLiquidity(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    removeLiquidityETH(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    removeLiquidityETHSupportingFeeOnTransferTokens(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    removeLiquidityETHWithPermit(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    removeLiquidityWithPermit(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapETHForExactTokens(
+      amountOut: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapExactETHForTokens(
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapExactETHForTokensSupportingFeeOnTransferTokens(
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapExactTokensForETH(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapExactTokensForETHSupportingFeeOnTransferTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapExactTokensForTokensSupportingFeeOnTransferTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapTokensForExactETH(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  WETH(overrides?: CallOverrides): Promise<string>;
+
+  addLiquidity(
+    tokenA: string,
+    tokenB: string,
+    amountADesired: BigNumberish,
+    amountBDesired: BigNumberish,
+    amountAMin: BigNumberish,
+    amountBMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  addLiquidityETH(
+    token: string,
+    amountTokenDesired: BigNumberish,
+    amountTokenMin: BigNumberish,
+    amountETHMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  factory(overrides?: CallOverrides): Promise<string>;
+
+  getAmountIn(
+    amountOut: BigNumberish,
+    reserveIn: BigNumberish,
+    reserveOut: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  getAmountOut(
+    amountIn: BigNumberish,
+    reserveIn: BigNumberish,
+    reserveOut: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  getAmountsIn(
+    amountOut: BigNumberish,
+    path: string[],
+    overrides?: CallOverrides
+  ): Promise<BigNumber[]>;
+
+  getAmountsOut(
+    amountIn: BigNumberish,
+    path: string[],
+    overrides?: CallOverrides
+  ): Promise<BigNumber[]>;
+
+  quote(
+    amountA: BigNumberish,
+    reserveA: BigNumberish,
+    reserveB: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  removeLiquidity(
+    tokenA: string,
+    tokenB: string,
+    liquidity: BigNumberish,
+    amountAMin: BigNumberish,
+    amountBMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  removeLiquidityETH(
+    token: string,
+    liquidity: BigNumberish,
+    amountTokenMin: BigNumberish,
+    amountETHMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  removeLiquidityETHSupportingFeeOnTransferTokens(
+    token: string,
+    liquidity: BigNumberish,
+    amountTokenMin: BigNumberish,
+    amountETHMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  removeLiquidityETHWithPermit(
+    token: string,
+    liquidity: BigNumberish,
+    amountTokenMin: BigNumberish,
+    amountETHMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    approveMax: boolean,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
+    token: string,
+    liquidity: BigNumberish,
+    amountTokenMin: BigNumberish,
+    amountETHMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    approveMax: boolean,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  removeLiquidityWithPermit(
+    tokenA: string,
+    tokenB: string,
+    liquidity: BigNumberish,
+    amountAMin: BigNumberish,
+    amountBMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    approveMax: boolean,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapETHForExactTokens(
+    amountOut: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapExactETHForTokens(
+    amountOutMin: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapExactETHForTokensSupportingFeeOnTransferTokens(
+    amountOutMin: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapExactTokensForETH(
+    amountIn: BigNumberish,
+    amountOutMin: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapExactTokensForETHSupportingFeeOnTransferTokens(
+    amountIn: BigNumberish,
+    amountOutMin: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapExactTokensForTokens(
+    amountIn: BigNumberish,
+    amountOutMin: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapExactTokensForTokensSupportingFeeOnTransferTokens(
+    amountIn: BigNumberish,
+    amountOutMin: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapTokensForExactETH(
+    amountOut: BigNumberish,
+    amountInMax: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapTokensForExactTokens(
+    amountOut: BigNumberish,
+    amountInMax: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    WETH(overrides?: CallOverrides): Promise<string>;
+
+    addLiquidity(
+      tokenA: string,
+      tokenB: string,
+      amountADesired: BigNumberish,
+      amountBDesired: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, BigNumber] & {
+        amountA: BigNumber;
+        amountB: BigNumber;
+        liquidity: BigNumber;
+      }
+    >;
+
+    addLiquidityETH(
+      token: string,
+      amountTokenDesired: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, BigNumber] & {
+        amountToken: BigNumber;
+        amountETH: BigNumber;
+        liquidity: BigNumber;
+      }
+    >;
+
+    factory(overrides?: CallOverrides): Promise<string>;
+
+    getAmountIn(
+      amountOut: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    getAmountOut(
+      amountIn: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    getAmountsIn(
+      amountOut: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    getAmountsOut(
+      amountIn: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    quote(
+      amountA: BigNumberish,
+      reserveA: BigNumberish,
+      reserveB: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    removeLiquidity(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amountA: BigNumber; amountB: BigNumber }
+    >;
+
+    removeLiquidityETH(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amountToken: BigNumber; amountETH: BigNumber }
+    >;
+
+    removeLiquidityETHSupportingFeeOnTransferTokens(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    removeLiquidityETHWithPermit(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amountToken: BigNumber; amountETH: BigNumber }
+    >;
+
+    removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    removeLiquidityWithPermit(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amountA: BigNumber; amountB: BigNumber }
+    >;
+
+    swapETHForExactTokens(
+      amountOut: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    swapExactETHForTokens(
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    swapExactETHForTokensSupportingFeeOnTransferTokens(
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    swapExactTokensForETH(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    swapExactTokensForETHSupportingFeeOnTransferTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    swapExactTokensForTokensSupportingFeeOnTransferTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    swapTokensForExactETH(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    WETH(overrides?: CallOverrides): Promise<BigNumber>;
+
+    addLiquidity(
+      tokenA: string,
+      tokenB: string,
+      amountADesired: BigNumberish,
+      amountBDesired: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    addLiquidityETH(
+      token: string,
+      amountTokenDesired: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<BigNumber>;
+
+    getAmountIn(
+      amountOut: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    getAmountOut(
+      amountIn: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    getAmountsIn(
+      amountOut: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    getAmountsOut(
+      amountIn: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    quote(
+      amountA: BigNumberish,
+      reserveA: BigNumberish,
+      reserveB: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    removeLiquidity(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    removeLiquidityETH(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    removeLiquidityETHSupportingFeeOnTransferTokens(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    removeLiquidityETHWithPermit(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    removeLiquidityWithPermit(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapETHForExactTokens(
+      amountOut: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapExactETHForTokens(
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapExactETHForTokensSupportingFeeOnTransferTokens(
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapExactTokensForETH(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapExactTokensForETHSupportingFeeOnTransferTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapExactTokensForTokensSupportingFeeOnTransferTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapTokensForExactETH(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    addLiquidity(
+      tokenA: string,
+      tokenB: string,
+      amountADesired: BigNumberish,
+      amountBDesired: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    addLiquidityETH(
+      token: string,
+      amountTokenDesired: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    getAmountIn(
+      amountOut: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    getAmountOut(
+      amountIn: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    getAmountsIn(
+      amountOut: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    getAmountsOut(
+      amountIn: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    quote(
+      amountA: BigNumberish,
+      reserveA: BigNumberish,
+      reserveB: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    removeLiquidity(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    removeLiquidityETH(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    removeLiquidityETHSupportingFeeOnTransferTokens(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    removeLiquidityETHWithPermit(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    removeLiquidityWithPermit(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapETHForExactTokens(
+      amountOut: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapExactETHForTokens(
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapExactETHForTokensSupportingFeeOnTransferTokens(
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapExactTokensForETH(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapExactTokensForETHSupportingFeeOnTransferTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapExactTokensForTokensSupportingFeeOnTransferTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapTokensForExactETH(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v2/UniswapV2ERC20.d.ts b/lib/sor/types/v2/UniswapV2ERC20.d.ts
new file mode 100644
index 0000000..5868b27
--- /dev/null
+++ b/lib/sor/types/v2/UniswapV2ERC20.d.ts
@@ -0,0 +1,455 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface UniswapV2ERC20Interface extends ethers.utils.Interface {
+  functions: {
+    "DOMAIN_SEPARATOR()": FunctionFragment;
+    "PERMIT_TYPEHASH()": FunctionFragment;
+    "allowance(address,address)": FunctionFragment;
+    "approve(address,uint256)": FunctionFragment;
+    "balanceOf(address)": FunctionFragment;
+    "decimals()": FunctionFragment;
+    "name()": FunctionFragment;
+    "nonces(address)": FunctionFragment;
+    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "symbol()": FunctionFragment;
+    "totalSupply()": FunctionFragment;
+    "transfer(address,uint256)": FunctionFragment;
+    "transferFrom(address,address,uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "DOMAIN_SEPARATOR",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "PERMIT_TYPEHASH",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "allowance",
+    values: [string, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "approve",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
+  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
+  encodeFunctionData(functionFragment: "name", values?: undefined): string;
+  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
+  encodeFunctionData(
+    functionFragment: "permit",
+    values: [
+      string,
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "totalSupply",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "transfer",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "transferFrom",
+    values: [string, string, BigNumberish]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "DOMAIN_SEPARATOR",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "PERMIT_TYPEHASH",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "totalSupply",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "transferFrom",
+    data: BytesLike
+  ): Result;
+
+  events: {
+    "Approval(address,address,uint256)": EventFragment;
+    "Transfer(address,address,uint256)": EventFragment;
+  };
+
+  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
+}
+
+export class UniswapV2ERC20 extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: UniswapV2ERC20Interface;
+
+  functions: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;
+
+    allowance(
+      arg0: string,
+      arg1: string,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber]>;
+
+    approve(
+      spender: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    decimals(overrides?: CallOverrides): Promise<[number]>;
+
+    name(overrides?: CallOverrides): Promise<[string]>;
+
+    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    permit(
+      owner: string,
+      spender: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    symbol(overrides?: CallOverrides): Promise<[string]>;
+
+    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    transfer(
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;
+
+  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;
+
+  allowance(
+    arg0: string,
+    arg1: string,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  approve(
+    spender: string,
+    value: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+  decimals(overrides?: CallOverrides): Promise<number>;
+
+  name(overrides?: CallOverrides): Promise<string>;
+
+  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+  permit(
+    owner: string,
+    spender: string,
+    value: BigNumberish,
+    deadline: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  symbol(overrides?: CallOverrides): Promise<string>;
+
+  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+  transfer(
+    to: string,
+    value: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  transferFrom(
+    from: string,
+    to: string,
+    value: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;
+
+    allowance(
+      arg0: string,
+      arg1: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    approve(
+      spender: string,
+      value: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    decimals(overrides?: CallOverrides): Promise<number>;
+
+    name(overrides?: CallOverrides): Promise<string>;
+
+    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    permit(
+      owner: string,
+      spender: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    symbol(overrides?: CallOverrides): Promise<string>;
+
+    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+    transfer(
+      to: string,
+      value: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      value: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+  };
+
+  filters: {
+    Approval(
+      owner?: string | null,
+      spender?: string | null,
+      value?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber],
+      { owner: string; spender: string; value: BigNumber }
+    >;
+
+    Transfer(
+      from?: string | null,
+      to?: string | null,
+      value?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber],
+      { from: string; to: string; value: BigNumber }
+    >;
+  };
+
+  estimateGas: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;
+
+    allowance(
+      arg0: string,
+      arg1: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    approve(
+      spender: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    decimals(overrides?: CallOverrides): Promise<BigNumber>;
+
+    name(overrides?: CallOverrides): Promise<BigNumber>;
+
+    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    permit(
+      owner: string,
+      spender: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    symbol(overrides?: CallOverrides): Promise<BigNumber>;
+
+    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+    transfer(
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    allowance(
+      arg0: string,
+      arg1: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    approve(
+      spender: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    balanceOf(
+      arg0: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    nonces(
+      arg0: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    permit(
+      owner: string,
+      spender: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    transfer(
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v2/UniswapV2Factory.d.ts b/lib/sor/types/v2/UniswapV2Factory.d.ts
new file mode 100644
index 0000000..cc24d2a
--- /dev/null
+++ b/lib/sor/types/v2/UniswapV2Factory.d.ts
@@ -0,0 +1,297 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface UniswapV2FactoryInterface extends ethers.utils.Interface {
+  functions: {
+    "allPairs(uint256)": FunctionFragment;
+    "allPairsLength()": FunctionFragment;
+    "createPair(address,address)": FunctionFragment;
+    "feeTo()": FunctionFragment;
+    "feeToSetter()": FunctionFragment;
+    "getPair(address,address)": FunctionFragment;
+    "setFeeTo(address)": FunctionFragment;
+    "setFeeToSetter(address)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "allPairs",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "allPairsLength",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "createPair",
+    values: [string, string]
+  ): string;
+  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "feeToSetter",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getPair",
+    values: [string, string]
+  ): string;
+  encodeFunctionData(functionFragment: "setFeeTo", values: [string]): string;
+  encodeFunctionData(
+    functionFragment: "setFeeToSetter",
+    values: [string]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "allPairs", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "allPairsLength",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "feeToSetter",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "setFeeToSetter",
+    data: BytesLike
+  ): Result;
+
+  events: {
+    "PairCreated(address,address,address,uint256)": EventFragment;
+  };
+
+  getEvent(nameOrSignatureOrTopic: "PairCreated"): EventFragment;
+}
+
+export class UniswapV2Factory extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: UniswapV2FactoryInterface;
+
+  functions: {
+    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
+
+    allPairsLength(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    createPair(
+      tokenA: string,
+      tokenB: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    feeTo(overrides?: CallOverrides): Promise<[string]>;
+
+    feeToSetter(overrides?: CallOverrides): Promise<[string]>;
+
+    getPair(
+      arg0: string,
+      arg1: string,
+      overrides?: CallOverrides
+    ): Promise<[string]>;
+
+    setFeeTo(
+      _feeTo: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    setFeeToSetter(
+      _feeToSetter: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
+
+  allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;
+
+  createPair(
+    tokenA: string,
+    tokenB: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  feeTo(overrides?: CallOverrides): Promise<string>;
+
+  feeToSetter(overrides?: CallOverrides): Promise<string>;
+
+  getPair(
+    arg0: string,
+    arg1: string,
+    overrides?: CallOverrides
+  ): Promise<string>;
+
+  setFeeTo(
+    _feeTo: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  setFeeToSetter(
+    _feeToSetter: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
+
+    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;
+
+    createPair(
+      tokenA: string,
+      tokenB: string,
+      overrides?: CallOverrides
+    ): Promise<string>;
+
+    feeTo(overrides?: CallOverrides): Promise<string>;
+
+    feeToSetter(overrides?: CallOverrides): Promise<string>;
+
+    getPair(
+      arg0: string,
+      arg1: string,
+      overrides?: CallOverrides
+    ): Promise<string>;
+
+    setFeeTo(_feeTo: string, overrides?: CallOverrides): Promise<void>;
+
+    setFeeToSetter(
+      _feeToSetter: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {
+    PairCreated(
+      token0?: string | null,
+      token1?: string | null,
+      pair?: null,
+      undefined?: null
+    ): TypedEventFilter<
+      [string, string, string, BigNumber],
+      { token0: string; token1: string; pair: string; arg3: BigNumber }
+    >;
+  };
+
+  estimateGas: {
+    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
+
+    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;
+
+    createPair(
+      tokenA: string,
+      tokenB: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    feeTo(overrides?: CallOverrides): Promise<BigNumber>;
+
+    feeToSetter(overrides?: CallOverrides): Promise<BigNumber>;
+
+    getPair(
+      arg0: string,
+      arg1: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    setFeeTo(
+      _feeTo: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    setFeeToSetter(
+      _feeToSetter: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    allPairs(
+      arg0: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    allPairsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    createPair(
+      tokenA: string,
+      tokenB: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    feeToSetter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    getPair(
+      arg0: string,
+      arg1: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    setFeeTo(
+      _feeTo: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    setFeeToSetter(
+      _feeToSetter: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v2/UniswapV2Migrator.d.ts b/lib/sor/types/v2/UniswapV2Migrator.d.ts
new file mode 100644
index 0000000..2cdb7f7
--- /dev/null
+++ b/lib/sor/types/v2/UniswapV2Migrator.d.ts
@@ -0,0 +1,133 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface UniswapV2MigratorInterface extends ethers.utils.Interface {
+  functions: {
+    "migrate(address,uint256,uint256,address,uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "migrate",
+    values: [string, BigNumberish, BigNumberish, string, BigNumberish]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
+
+  events: {};
+}
+
+export class UniswapV2Migrator extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: UniswapV2MigratorInterface;
+
+  functions: {
+    migrate(
+      token: string,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  migrate(
+    token: string,
+    amountTokenMin: BigNumberish,
+    amountETHMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    migrate(
+      token: string,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    migrate(
+      token: string,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    migrate(
+      token: string,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v2/UniswapV2Pair.d.ts b/lib/sor/types/v2/UniswapV2Pair.d.ts
new file mode 100644
index 0000000..9c95c9f
--- /dev/null
+++ b/lib/sor/types/v2/UniswapV2Pair.d.ts
@@ -0,0 +1,848 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface UniswapV2PairInterface extends ethers.utils.Interface {
+  functions: {
+    "DOMAIN_SEPARATOR()": FunctionFragment;
+    "MINIMUM_LIQUIDITY()": FunctionFragment;
+    "PERMIT_TYPEHASH()": FunctionFragment;
+    "allowance(address,address)": FunctionFragment;
+    "approve(address,uint256)": FunctionFragment;
+    "balanceOf(address)": FunctionFragment;
+    "burn(address)": FunctionFragment;
+    "decimals()": FunctionFragment;
+    "factory()": FunctionFragment;
+    "getReserves()": FunctionFragment;
+    "initialize(address,address)": FunctionFragment;
+    "kLast()": FunctionFragment;
+    "mint(address)": FunctionFragment;
+    "name()": FunctionFragment;
+    "nonces(address)": FunctionFragment;
+    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "price0CumulativeLast()": FunctionFragment;
+    "price1CumulativeLast()": FunctionFragment;
+    "skim(address)": FunctionFragment;
+    "swap(uint256,uint256,address,bytes)": FunctionFragment;
+    "symbol()": FunctionFragment;
+    "sync()": FunctionFragment;
+    "token0()": FunctionFragment;
+    "token1()": FunctionFragment;
+    "totalSupply()": FunctionFragment;
+    "transfer(address,uint256)": FunctionFragment;
+    "transferFrom(address,address,uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "DOMAIN_SEPARATOR",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "MINIMUM_LIQUIDITY",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "PERMIT_TYPEHASH",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "allowance",
+    values: [string, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "approve",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
+  encodeFunctionData(functionFragment: "burn", values: [string]): string;
+  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
+  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "getReserves",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "initialize",
+    values: [string, string]
+  ): string;
+  encodeFunctionData(functionFragment: "kLast", values?: undefined): string;
+  encodeFunctionData(functionFragment: "mint", values: [string]): string;
+  encodeFunctionData(functionFragment: "name", values?: undefined): string;
+  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
+  encodeFunctionData(
+    functionFragment: "permit",
+    values: [
+      string,
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "price0CumulativeLast",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "price1CumulativeLast",
+    values?: undefined
+  ): string;
+  encodeFunctionData(functionFragment: "skim", values: [string]): string;
+  encodeFunctionData(
+    functionFragment: "swap",
+    values: [BigNumberish, BigNumberish, string, BytesLike]
+  ): string;
+  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
+  encodeFunctionData(functionFragment: "sync", values?: undefined): string;
+  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
+  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "totalSupply",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "transfer",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "transferFrom",
+    values: [string, string, BigNumberish]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "DOMAIN_SEPARATOR",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "MINIMUM_LIQUIDITY",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "PERMIT_TYPEHASH",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "getReserves",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "kLast", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "price0CumulativeLast",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "price1CumulativeLast",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "skim", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "totalSupply",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "transferFrom",
+    data: BytesLike
+  ): Result;
+
+  events: {
+    "Approval(address,address,uint256)": EventFragment;
+    "Burn(address,uint256,uint256,address)": EventFragment;
+    "Mint(address,uint256,uint256)": EventFragment;
+    "Swap(address,uint256,uint256,uint256,uint256,address)": EventFragment;
+    "Sync(uint112,uint112)": EventFragment;
+    "Transfer(address,address,uint256)": EventFragment;
+  };
+
+  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Sync"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
+}
+
+export class UniswapV2Pair extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: UniswapV2PairInterface;
+
+  functions: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;
+
+    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;
+
+    allowance(
+      arg0: string,
+      arg1: string,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber]>;
+
+    approve(
+      spender: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    burn(
+      to: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    decimals(overrides?: CallOverrides): Promise<[number]>;
+
+    factory(overrides?: CallOverrides): Promise<[string]>;
+
+    getReserves(
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, number] & {
+        _reserve0: BigNumber;
+        _reserve1: BigNumber;
+        _blockTimestampLast: number;
+      }
+    >;
+
+    initialize(
+      _token0: string,
+      _token1: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    kLast(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    mint(
+      to: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    name(overrides?: CallOverrides): Promise<[string]>;
+
+    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    permit(
+      owner: string,
+      spender: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    price0CumulativeLast(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    price1CumulativeLast(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    skim(
+      to: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swap(
+      amount0Out: BigNumberish,
+      amount1Out: BigNumberish,
+      to: string,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    symbol(overrides?: CallOverrides): Promise<[string]>;
+
+    sync(
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    token0(overrides?: CallOverrides): Promise<[string]>;
+
+    token1(overrides?: CallOverrides): Promise<[string]>;
+
+    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    transfer(
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;
+
+  MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;
+
+  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;
+
+  allowance(
+    arg0: string,
+    arg1: string,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  approve(
+    spender: string,
+    value: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+  burn(
+    to: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  decimals(overrides?: CallOverrides): Promise<number>;
+
+  factory(overrides?: CallOverrides): Promise<string>;
+
+  getReserves(
+    overrides?: CallOverrides
+  ): Promise<
+    [BigNumber, BigNumber, number] & {
+      _reserve0: BigNumber;
+      _reserve1: BigNumber;
+      _blockTimestampLast: number;
+    }
+  >;
+
+  initialize(
+    _token0: string,
+    _token1: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  kLast(overrides?: CallOverrides): Promise<BigNumber>;
+
+  mint(
+    to: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  name(overrides?: CallOverrides): Promise<string>;
+
+  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+  permit(
+    owner: string,
+    spender: string,
+    value: BigNumberish,
+    deadline: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  price0CumulativeLast(overrides?: CallOverrides): Promise<BigNumber>;
+
+  price1CumulativeLast(overrides?: CallOverrides): Promise<BigNumber>;
+
+  skim(
+    to: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swap(
+    amount0Out: BigNumberish,
+    amount1Out: BigNumberish,
+    to: string,
+    data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  symbol(overrides?: CallOverrides): Promise<string>;
+
+  sync(
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  token0(overrides?: CallOverrides): Promise<string>;
+
+  token1(overrides?: CallOverrides): Promise<string>;
+
+  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+  transfer(
+    to: string,
+    value: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  transferFrom(
+    from: string,
+    to: string,
+    value: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;
+
+    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;
+
+    allowance(
+      arg0: string,
+      arg1: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    approve(
+      spender: string,
+      value: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    burn(
+      to: string,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
+    >;
+
+    decimals(overrides?: CallOverrides): Promise<number>;
+
+    factory(overrides?: CallOverrides): Promise<string>;
+
+    getReserves(
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, number] & {
+        _reserve0: BigNumber;
+        _reserve1: BigNumber;
+        _blockTimestampLast: number;
+      }
+    >;
+
+    initialize(
+      _token0: string,
+      _token1: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    kLast(overrides?: CallOverrides): Promise<BigNumber>;
+
+    mint(to: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    name(overrides?: CallOverrides): Promise<string>;
+
+    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    permit(
+      owner: string,
+      spender: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    price0CumulativeLast(overrides?: CallOverrides): Promise<BigNumber>;
+
+    price1CumulativeLast(overrides?: CallOverrides): Promise<BigNumber>;
+
+    skim(to: string, overrides?: CallOverrides): Promise<void>;
+
+    swap(
+      amount0Out: BigNumberish,
+      amount1Out: BigNumberish,
+      to: string,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    symbol(overrides?: CallOverrides): Promise<string>;
+
+    sync(overrides?: CallOverrides): Promise<void>;
+
+    token0(overrides?: CallOverrides): Promise<string>;
+
+    token1(overrides?: CallOverrides): Promise<string>;
+
+    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+    transfer(
+      to: string,
+      value: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      value: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+  };
+
+  filters: {
+    Approval(
+      owner?: string | null,
+      spender?: string | null,
+      value?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber],
+      { owner: string; spender: string; value: BigNumber }
+    >;
+
+    Burn(
+      sender?: string | null,
+      amount0?: null,
+      amount1?: null,
+      to?: string | null
+    ): TypedEventFilter<
+      [string, BigNumber, BigNumber, string],
+      { sender: string; amount0: BigNumber; amount1: BigNumber; to: string }
+    >;
+
+    Mint(
+      sender?: string | null,
+      amount0?: null,
+      amount1?: null
+    ): TypedEventFilter<
+      [string, BigNumber, BigNumber],
+      { sender: string; amount0: BigNumber; amount1: BigNumber }
+    >;
+
+    Swap(
+      sender?: string | null,
+      amount0In?: null,
+      amount1In?: null,
+      amount0Out?: null,
+      amount1Out?: null,
+      to?: string | null
+    ): TypedEventFilter<
+      [string, BigNumber, BigNumber, BigNumber, BigNumber, string],
+      {
+        sender: string;
+        amount0In: BigNumber;
+        amount1In: BigNumber;
+        amount0Out: BigNumber;
+        amount1Out: BigNumber;
+        to: string;
+      }
+    >;
+
+    Sync(
+      reserve0?: null,
+      reserve1?: null
+    ): TypedEventFilter<
+      [BigNumber, BigNumber],
+      { reserve0: BigNumber; reserve1: BigNumber }
+    >;
+
+    Transfer(
+      from?: string | null,
+      to?: string | null,
+      value?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber],
+      { from: string; to: string; value: BigNumber }
+    >;
+  };
+
+  estimateGas: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;
+
+    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;
+
+    allowance(
+      arg0: string,
+      arg1: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    approve(
+      spender: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    burn(
+      to: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    decimals(overrides?: CallOverrides): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<BigNumber>;
+
+    getReserves(overrides?: CallOverrides): Promise<BigNumber>;
+
+    initialize(
+      _token0: string,
+      _token1: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    kLast(overrides?: CallOverrides): Promise<BigNumber>;
+
+    mint(
+      to: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    name(overrides?: CallOverrides): Promise<BigNumber>;
+
+    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    permit(
+      owner: string,
+      spender: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    price0CumulativeLast(overrides?: CallOverrides): Promise<BigNumber>;
+
+    price1CumulativeLast(overrides?: CallOverrides): Promise<BigNumber>;
+
+    skim(
+      to: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swap(
+      amount0Out: BigNumberish,
+      amount1Out: BigNumberish,
+      to: string,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    symbol(overrides?: CallOverrides): Promise<BigNumber>;
+
+    sync(
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    token0(overrides?: CallOverrides): Promise<BigNumber>;
+
+    token1(overrides?: CallOverrides): Promise<BigNumber>;
+
+    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+    transfer(
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    allowance(
+      arg0: string,
+      arg1: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    approve(
+      spender: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    balanceOf(
+      arg0: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    burn(
+      to: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    initialize(
+      _token0: string,
+      _token1: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    kLast(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    mint(
+      to: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    nonces(
+      arg0: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    permit(
+      owner: string,
+      spender: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    price0CumulativeLast(
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    price1CumulativeLast(
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    skim(
+      to: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swap(
+      amount0Out: BigNumberish,
+      amount1Out: BigNumberish,
+      to: string,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    sync(
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    transfer(
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      value: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v2/UniswapV2Router01.d.ts b/lib/sor/types/v2/UniswapV2Router01.d.ts
new file mode 100644
index 0000000..2965525
--- /dev/null
+++ b/lib/sor/types/v2/UniswapV2Router01.d.ts
@@ -0,0 +1,1118 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface UniswapV2Router01Interface extends ethers.utils.Interface {
+  functions: {
+    "WETH()": FunctionFragment;
+    "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
+    "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
+    "factory()": FunctionFragment;
+    "getAmountIn(uint256,uint256,uint256)": FunctionFragment;
+    "getAmountOut(uint256,uint256,uint256)": FunctionFragment;
+    "getAmountsIn(uint256,address[])": FunctionFragment;
+    "getAmountsOut(uint256,address[])": FunctionFragment;
+    "quote(uint256,uint256,uint256)": FunctionFragment;
+    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
+    "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
+    "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
+    "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
+    "swapETHForExactTokens(uint256,address[],address,uint256)": FunctionFragment;
+    "swapExactETHForTokens(uint256,address[],address,uint256)": FunctionFragment;
+    "swapExactTokensForETH(uint256,uint256,address[],address,uint256)": FunctionFragment;
+    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
+    "swapTokensForExactETH(uint256,uint256,address[],address,uint256)": FunctionFragment;
+    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "addLiquidity",
+    values: [
+      string,
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "addLiquidityETH",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish
+    ]
+  ): string;
+  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "getAmountIn",
+    values: [BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getAmountOut",
+    values: [BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getAmountsIn",
+    values: [BigNumberish, string[]]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getAmountsOut",
+    values: [BigNumberish, string[]]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quote",
+    values: [BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "removeLiquidity",
+    values: [
+      string,
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "removeLiquidityETH",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "removeLiquidityETHWithPermit",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish,
+      boolean,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "removeLiquidityWithPermit",
+    values: [
+      string,
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish,
+      boolean,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapETHForExactTokens",
+    values: [BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapExactETHForTokens",
+    values: [BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapExactTokensForETH",
+    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapExactTokensForTokens",
+    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapTokensForExactETH",
+    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapTokensForExactTokens",
+    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "addLiquidity",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "addLiquidityETH",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "getAmountIn",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "getAmountOut",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "getAmountsIn",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "getAmountsOut",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "removeLiquidity",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "removeLiquidityETH",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "removeLiquidityETHWithPermit",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "removeLiquidityWithPermit",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapETHForExactTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapExactETHForTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapExactTokensForETH",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapExactTokensForTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapTokensForExactETH",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapTokensForExactTokens",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class UniswapV2Router01 extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: UniswapV2Router01Interface;
+
+  functions: {
+    WETH(overrides?: CallOverrides): Promise<[string]>;
+
+    addLiquidity(
+      tokenA: string,
+      tokenB: string,
+      amountADesired: BigNumberish,
+      amountBDesired: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    addLiquidityETH(
+      token: string,
+      amountTokenDesired: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<[string]>;
+
+    getAmountIn(
+      amountOut: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber] & { amountIn: BigNumber }>;
+
+    getAmountOut(
+      amountIn: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber] & { amountOut: BigNumber }>;
+
+    getAmountsIn(
+      amountOut: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;
+
+    getAmountsOut(
+      amountIn: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;
+
+    quote(
+      amountA: BigNumberish,
+      reserveA: BigNumberish,
+      reserveB: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber] & { amountB: BigNumber }>;
+
+    removeLiquidity(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    removeLiquidityETH(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    removeLiquidityETHWithPermit(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    removeLiquidityWithPermit(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapETHForExactTokens(
+      amountOut: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapExactETHForTokens(
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapExactTokensForETH(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapTokensForExactETH(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  WETH(overrides?: CallOverrides): Promise<string>;
+
+  addLiquidity(
+    tokenA: string,
+    tokenB: string,
+    amountADesired: BigNumberish,
+    amountBDesired: BigNumberish,
+    amountAMin: BigNumberish,
+    amountBMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  addLiquidityETH(
+    token: string,
+    amountTokenDesired: BigNumberish,
+    amountTokenMin: BigNumberish,
+    amountETHMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  factory(overrides?: CallOverrides): Promise<string>;
+
+  getAmountIn(
+    amountOut: BigNumberish,
+    reserveIn: BigNumberish,
+    reserveOut: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  getAmountOut(
+    amountIn: BigNumberish,
+    reserveIn: BigNumberish,
+    reserveOut: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  getAmountsIn(
+    amountOut: BigNumberish,
+    path: string[],
+    overrides?: CallOverrides
+  ): Promise<BigNumber[]>;
+
+  getAmountsOut(
+    amountIn: BigNumberish,
+    path: string[],
+    overrides?: CallOverrides
+  ): Promise<BigNumber[]>;
+
+  quote(
+    amountA: BigNumberish,
+    reserveA: BigNumberish,
+    reserveB: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  removeLiquidity(
+    tokenA: string,
+    tokenB: string,
+    liquidity: BigNumberish,
+    amountAMin: BigNumberish,
+    amountBMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  removeLiquidityETH(
+    token: string,
+    liquidity: BigNumberish,
+    amountTokenMin: BigNumberish,
+    amountETHMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  removeLiquidityETHWithPermit(
+    token: string,
+    liquidity: BigNumberish,
+    amountTokenMin: BigNumberish,
+    amountETHMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    approveMax: boolean,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  removeLiquidityWithPermit(
+    tokenA: string,
+    tokenB: string,
+    liquidity: BigNumberish,
+    amountAMin: BigNumberish,
+    amountBMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    approveMax: boolean,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapETHForExactTokens(
+    amountOut: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapExactETHForTokens(
+    amountOutMin: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapExactTokensForETH(
+    amountIn: BigNumberish,
+    amountOutMin: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapExactTokensForTokens(
+    amountIn: BigNumberish,
+    amountOutMin: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapTokensForExactETH(
+    amountOut: BigNumberish,
+    amountInMax: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapTokensForExactTokens(
+    amountOut: BigNumberish,
+    amountInMax: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    WETH(overrides?: CallOverrides): Promise<string>;
+
+    addLiquidity(
+      tokenA: string,
+      tokenB: string,
+      amountADesired: BigNumberish,
+      amountBDesired: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, BigNumber] & {
+        amountA: BigNumber;
+        amountB: BigNumber;
+        liquidity: BigNumber;
+      }
+    >;
+
+    addLiquidityETH(
+      token: string,
+      amountTokenDesired: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, BigNumber] & {
+        amountToken: BigNumber;
+        amountETH: BigNumber;
+        liquidity: BigNumber;
+      }
+    >;
+
+    factory(overrides?: CallOverrides): Promise<string>;
+
+    getAmountIn(
+      amountOut: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    getAmountOut(
+      amountIn: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    getAmountsIn(
+      amountOut: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    getAmountsOut(
+      amountIn: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    quote(
+      amountA: BigNumberish,
+      reserveA: BigNumberish,
+      reserveB: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    removeLiquidity(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amountA: BigNumber; amountB: BigNumber }
+    >;
+
+    removeLiquidityETH(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amountToken: BigNumber; amountETH: BigNumber }
+    >;
+
+    removeLiquidityETHWithPermit(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amountToken: BigNumber; amountETH: BigNumber }
+    >;
+
+    removeLiquidityWithPermit(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amountA: BigNumber; amountB: BigNumber }
+    >;
+
+    swapETHForExactTokens(
+      amountOut: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    swapExactETHForTokens(
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    swapExactTokensForETH(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    swapTokensForExactETH(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    WETH(overrides?: CallOverrides): Promise<BigNumber>;
+
+    addLiquidity(
+      tokenA: string,
+      tokenB: string,
+      amountADesired: BigNumberish,
+      amountBDesired: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    addLiquidityETH(
+      token: string,
+      amountTokenDesired: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<BigNumber>;
+
+    getAmountIn(
+      amountOut: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    getAmountOut(
+      amountIn: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    getAmountsIn(
+      amountOut: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    getAmountsOut(
+      amountIn: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    quote(
+      amountA: BigNumberish,
+      reserveA: BigNumberish,
+      reserveB: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    removeLiquidity(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    removeLiquidityETH(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    removeLiquidityETHWithPermit(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    removeLiquidityWithPermit(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapETHForExactTokens(
+      amountOut: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapExactETHForTokens(
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapExactTokensForETH(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapTokensForExactETH(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    addLiquidity(
+      tokenA: string,
+      tokenB: string,
+      amountADesired: BigNumberish,
+      amountBDesired: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    addLiquidityETH(
+      token: string,
+      amountTokenDesired: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    getAmountIn(
+      amountOut: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    getAmountOut(
+      amountIn: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    getAmountsIn(
+      amountOut: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    getAmountsOut(
+      amountIn: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    quote(
+      amountA: BigNumberish,
+      reserveA: BigNumberish,
+      reserveB: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    removeLiquidity(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    removeLiquidityETH(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    removeLiquidityETHWithPermit(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    removeLiquidityWithPermit(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapETHForExactTokens(
+      amountOut: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapExactETHForTokens(
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapExactTokensForETH(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapTokensForExactETH(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v2/UniswapV2Router02.d.ts b/lib/sor/types/v2/UniswapV2Router02.d.ts
new file mode 100644
index 0000000..e37766b
--- /dev/null
+++ b/lib/sor/types/v2/UniswapV2Router02.d.ts
@@ -0,0 +1,1431 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface UniswapV2Router02Interface extends ethers.utils.Interface {
+  functions: {
+    "WETH()": FunctionFragment;
+    "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
+    "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
+    "factory()": FunctionFragment;
+    "getAmountIn(uint256,uint256,uint256)": FunctionFragment;
+    "getAmountOut(uint256,uint256,uint256)": FunctionFragment;
+    "getAmountsIn(uint256,address[])": FunctionFragment;
+    "getAmountsOut(uint256,address[])": FunctionFragment;
+    "quote(uint256,uint256,uint256)": FunctionFragment;
+    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
+    "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
+    "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
+    "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
+    "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
+    "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
+    "swapETHForExactTokens(uint256,address[],address,uint256)": FunctionFragment;
+    "swapExactETHForTokens(uint256,address[],address,uint256)": FunctionFragment;
+    "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)": FunctionFragment;
+    "swapExactTokensForETH(uint256,uint256,address[],address,uint256)": FunctionFragment;
+    "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
+    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
+    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
+    "swapTokensForExactETH(uint256,uint256,address[],address,uint256)": FunctionFragment;
+    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "addLiquidity",
+    values: [
+      string,
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "addLiquidityETH",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish
+    ]
+  ): string;
+  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "getAmountIn",
+    values: [BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getAmountOut",
+    values: [BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getAmountsIn",
+    values: [BigNumberish, string[]]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getAmountsOut",
+    values: [BigNumberish, string[]]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quote",
+    values: [BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "removeLiquidity",
+    values: [
+      string,
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "removeLiquidityETH",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "removeLiquidityETHSupportingFeeOnTransferTokens",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "removeLiquidityETHWithPermit",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish,
+      boolean,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish,
+      boolean,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "removeLiquidityWithPermit",
+    values: [
+      string,
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      string,
+      BigNumberish,
+      boolean,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapETHForExactTokens",
+    values: [BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapExactETHForTokens",
+    values: [BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapExactETHForTokensSupportingFeeOnTransferTokens",
+    values: [BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapExactTokensForETH",
+    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapExactTokensForETHSupportingFeeOnTransferTokens",
+    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapExactTokensForTokens",
+    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
+    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapTokensForExactETH",
+    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swapTokensForExactTokens",
+    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "addLiquidity",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "addLiquidityETH",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "getAmountIn",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "getAmountOut",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "getAmountsIn",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "getAmountsOut",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "removeLiquidity",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "removeLiquidityETH",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "removeLiquidityETHSupportingFeeOnTransferTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "removeLiquidityETHWithPermit",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "removeLiquidityWithPermit",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapETHForExactTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapExactETHForTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapExactETHForTokensSupportingFeeOnTransferTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapExactTokensForETH",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapExactTokensForETHSupportingFeeOnTransferTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapExactTokensForTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapTokensForExactETH",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "swapTokensForExactTokens",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class UniswapV2Router02 extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: UniswapV2Router02Interface;
+
+  functions: {
+    WETH(overrides?: CallOverrides): Promise<[string]>;
+
+    addLiquidity(
+      tokenA: string,
+      tokenB: string,
+      amountADesired: BigNumberish,
+      amountBDesired: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    addLiquidityETH(
+      token: string,
+      amountTokenDesired: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<[string]>;
+
+    getAmountIn(
+      amountOut: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber] & { amountIn: BigNumber }>;
+
+    getAmountOut(
+      amountIn: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber] & { amountOut: BigNumber }>;
+
+    getAmountsIn(
+      amountOut: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;
+
+    getAmountsOut(
+      amountIn: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;
+
+    quote(
+      amountA: BigNumberish,
+      reserveA: BigNumberish,
+      reserveB: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber] & { amountB: BigNumber }>;
+
+    removeLiquidity(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    removeLiquidityETH(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    removeLiquidityETHSupportingFeeOnTransferTokens(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    removeLiquidityETHWithPermit(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    removeLiquidityWithPermit(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapETHForExactTokens(
+      amountOut: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapExactETHForTokens(
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapExactETHForTokensSupportingFeeOnTransferTokens(
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapExactTokensForETH(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapExactTokensForETHSupportingFeeOnTransferTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapExactTokensForTokensSupportingFeeOnTransferTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapTokensForExactETH(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  WETH(overrides?: CallOverrides): Promise<string>;
+
+  addLiquidity(
+    tokenA: string,
+    tokenB: string,
+    amountADesired: BigNumberish,
+    amountBDesired: BigNumberish,
+    amountAMin: BigNumberish,
+    amountBMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  addLiquidityETH(
+    token: string,
+    amountTokenDesired: BigNumberish,
+    amountTokenMin: BigNumberish,
+    amountETHMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  factory(overrides?: CallOverrides): Promise<string>;
+
+  getAmountIn(
+    amountOut: BigNumberish,
+    reserveIn: BigNumberish,
+    reserveOut: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  getAmountOut(
+    amountIn: BigNumberish,
+    reserveIn: BigNumberish,
+    reserveOut: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  getAmountsIn(
+    amountOut: BigNumberish,
+    path: string[],
+    overrides?: CallOverrides
+  ): Promise<BigNumber[]>;
+
+  getAmountsOut(
+    amountIn: BigNumberish,
+    path: string[],
+    overrides?: CallOverrides
+  ): Promise<BigNumber[]>;
+
+  quote(
+    amountA: BigNumberish,
+    reserveA: BigNumberish,
+    reserveB: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  removeLiquidity(
+    tokenA: string,
+    tokenB: string,
+    liquidity: BigNumberish,
+    amountAMin: BigNumberish,
+    amountBMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  removeLiquidityETH(
+    token: string,
+    liquidity: BigNumberish,
+    amountTokenMin: BigNumberish,
+    amountETHMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  removeLiquidityETHSupportingFeeOnTransferTokens(
+    token: string,
+    liquidity: BigNumberish,
+    amountTokenMin: BigNumberish,
+    amountETHMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  removeLiquidityETHWithPermit(
+    token: string,
+    liquidity: BigNumberish,
+    amountTokenMin: BigNumberish,
+    amountETHMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    approveMax: boolean,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
+    token: string,
+    liquidity: BigNumberish,
+    amountTokenMin: BigNumberish,
+    amountETHMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    approveMax: boolean,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  removeLiquidityWithPermit(
+    tokenA: string,
+    tokenB: string,
+    liquidity: BigNumberish,
+    amountAMin: BigNumberish,
+    amountBMin: BigNumberish,
+    to: string,
+    deadline: BigNumberish,
+    approveMax: boolean,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapETHForExactTokens(
+    amountOut: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapExactETHForTokens(
+    amountOutMin: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapExactETHForTokensSupportingFeeOnTransferTokens(
+    amountOutMin: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapExactTokensForETH(
+    amountIn: BigNumberish,
+    amountOutMin: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapExactTokensForETHSupportingFeeOnTransferTokens(
+    amountIn: BigNumberish,
+    amountOutMin: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapExactTokensForTokens(
+    amountIn: BigNumberish,
+    amountOutMin: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapExactTokensForTokensSupportingFeeOnTransferTokens(
+    amountIn: BigNumberish,
+    amountOutMin: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapTokensForExactETH(
+    amountOut: BigNumberish,
+    amountInMax: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapTokensForExactTokens(
+    amountOut: BigNumberish,
+    amountInMax: BigNumberish,
+    path: string[],
+    to: string,
+    deadline: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    WETH(overrides?: CallOverrides): Promise<string>;
+
+    addLiquidity(
+      tokenA: string,
+      tokenB: string,
+      amountADesired: BigNumberish,
+      amountBDesired: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, BigNumber] & {
+        amountA: BigNumber;
+        amountB: BigNumber;
+        liquidity: BigNumber;
+      }
+    >;
+
+    addLiquidityETH(
+      token: string,
+      amountTokenDesired: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, BigNumber] & {
+        amountToken: BigNumber;
+        amountETH: BigNumber;
+        liquidity: BigNumber;
+      }
+    >;
+
+    factory(overrides?: CallOverrides): Promise<string>;
+
+    getAmountIn(
+      amountOut: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    getAmountOut(
+      amountIn: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    getAmountsIn(
+      amountOut: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    getAmountsOut(
+      amountIn: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    quote(
+      amountA: BigNumberish,
+      reserveA: BigNumberish,
+      reserveB: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    removeLiquidity(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amountA: BigNumber; amountB: BigNumber }
+    >;
+
+    removeLiquidityETH(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amountToken: BigNumber; amountETH: BigNumber }
+    >;
+
+    removeLiquidityETHSupportingFeeOnTransferTokens(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    removeLiquidityETHWithPermit(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amountToken: BigNumber; amountETH: BigNumber }
+    >;
+
+    removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    removeLiquidityWithPermit(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amountA: BigNumber; amountB: BigNumber }
+    >;
+
+    swapETHForExactTokens(
+      amountOut: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    swapExactETHForTokens(
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    swapExactETHForTokensSupportingFeeOnTransferTokens(
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    swapExactTokensForETH(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    swapExactTokensForETHSupportingFeeOnTransferTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    swapExactTokensForTokensSupportingFeeOnTransferTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    swapTokensForExactETH(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber[]>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    WETH(overrides?: CallOverrides): Promise<BigNumber>;
+
+    addLiquidity(
+      tokenA: string,
+      tokenB: string,
+      amountADesired: BigNumberish,
+      amountBDesired: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    addLiquidityETH(
+      token: string,
+      amountTokenDesired: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<BigNumber>;
+
+    getAmountIn(
+      amountOut: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    getAmountOut(
+      amountIn: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    getAmountsIn(
+      amountOut: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    getAmountsOut(
+      amountIn: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    quote(
+      amountA: BigNumberish,
+      reserveA: BigNumberish,
+      reserveB: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    removeLiquidity(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    removeLiquidityETH(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    removeLiquidityETHSupportingFeeOnTransferTokens(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    removeLiquidityETHWithPermit(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    removeLiquidityWithPermit(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapETHForExactTokens(
+      amountOut: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapExactETHForTokens(
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapExactETHForTokensSupportingFeeOnTransferTokens(
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapExactTokensForETH(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapExactTokensForETHSupportingFeeOnTransferTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapExactTokensForTokensSupportingFeeOnTransferTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapTokensForExactETH(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    addLiquidity(
+      tokenA: string,
+      tokenB: string,
+      amountADesired: BigNumberish,
+      amountBDesired: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    addLiquidityETH(
+      token: string,
+      amountTokenDesired: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    getAmountIn(
+      amountOut: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    getAmountOut(
+      amountIn: BigNumberish,
+      reserveIn: BigNumberish,
+      reserveOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    getAmountsIn(
+      amountOut: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    getAmountsOut(
+      amountIn: BigNumberish,
+      path: string[],
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    quote(
+      amountA: BigNumberish,
+      reserveA: BigNumberish,
+      reserveB: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    removeLiquidity(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    removeLiquidityETH(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    removeLiquidityETHSupportingFeeOnTransferTokens(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    removeLiquidityETHWithPermit(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
+      token: string,
+      liquidity: BigNumberish,
+      amountTokenMin: BigNumberish,
+      amountETHMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    removeLiquidityWithPermit(
+      tokenA: string,
+      tokenB: string,
+      liquidity: BigNumberish,
+      amountAMin: BigNumberish,
+      amountBMin: BigNumberish,
+      to: string,
+      deadline: BigNumberish,
+      approveMax: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapETHForExactTokens(
+      amountOut: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapExactETHForTokens(
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapExactETHForTokensSupportingFeeOnTransferTokens(
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapExactTokensForETH(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapExactTokensForETHSupportingFeeOnTransferTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapExactTokensForTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapExactTokensForTokensSupportingFeeOnTransferTokens(
+      amountIn: BigNumberish,
+      amountOutMin: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapTokensForExactETH(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapTokensForExactTokens(
+      amountOut: BigNumberish,
+      amountInMax: BigNumberish,
+      path: string[],
+      to: string,
+      deadline: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v2/commons.ts b/lib/sor/types/v2/commons.ts
new file mode 100644
index 0000000..ceb0535
--- /dev/null
+++ b/lib/sor/types/v2/commons.ts
@@ -0,0 +1,36 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Result } from "@ethersproject/abi";
+import { Event, EventFilter } from "ethers";
+
+export interface TypedEventFilter<_EventArgsArray, _EventArgsObject>
+  extends EventFilter {}
+
+export interface TypedEvent<EventArgs extends Result> extends Event {
+  args: EventArgs;
+}
+
+export type TypedListener<
+  EventArgsArray extends Array<any>,
+  EventArgsObject
+> = (
+  ...listenerArg: [
+    ...EventArgsArray,
+    TypedEvent<EventArgsArray & EventArgsObject>
+  ]
+) => void;
+
+export type MinEthersFactory<C, ARGS> = {
+  deploy(...a: ARGS[]): Promise<C>;
+};
+export type GetContractTypeFromFactory<F> = F extends MinEthersFactory<
+  infer C,
+  any
+>
+  ? C
+  : never;
+export type GetARGsTypeFromFactory<F> = F extends MinEthersFactory<any, any>
+  ? Parameters<F["deploy"]>
+  : never;
diff --git a/lib/sor/types/v2/factories/IUniswapV2Callee__factory.ts b/lib/sor/types/v2/factories/IUniswapV2Callee__factory.ts
new file mode 100644
index 0000000..31afbda
--- /dev/null
+++ b/lib/sor/types/v2/factories/IUniswapV2Callee__factory.ts
@@ -0,0 +1,54 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IUniswapV2Callee,
+  IUniswapV2CalleeInterface,
+} from "../IUniswapV2Callee";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "sender",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "uniswapV2Call",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IUniswapV2Callee__factory {
+  static readonly abi = _abi;
+  static createInterface(): IUniswapV2CalleeInterface {
+    return new utils.Interface(_abi) as IUniswapV2CalleeInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IUniswapV2Callee {
+    return new Contract(address, _abi, signerOrProvider) as IUniswapV2Callee;
+  }
+}
diff --git a/lib/sor/types/v2/factories/IUniswapV2ERC20__factory.ts b/lib/sor/types/v2/factories/IUniswapV2ERC20__factory.ts
new file mode 100644
index 0000000..5865fe1
--- /dev/null
+++ b/lib/sor/types/v2/factories/IUniswapV2ERC20__factory.ts
@@ -0,0 +1,362 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IUniswapV2ERC20,
+  IUniswapV2ERC20Interface,
+} from "../IUniswapV2ERC20";
+
+const _abi = [
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "Approval",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "from",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "Transfer",
+    type: "event",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "DOMAIN_SEPARATOR",
+    outputs: [
+      {
+        internalType: "bytes32",
+        name: "",
+        type: "bytes32",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "PERMIT_TYPEHASH",
+    outputs: [
+      {
+        internalType: "bytes32",
+        name: "",
+        type: "bytes32",
+      },
+    ],
+    payable: false,
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+    ],
+    name: "allowance",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: false,
+    inputs: [
+      {
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "approve",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+    ],
+    name: "balanceOf",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "decimals",
+    outputs: [
+      {
+        internalType: "uint8",
+        name: "",
+        type: "uint8",
+      },
+    ],
+    payable: false,
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "name",
+    outputs: [
+      {
+        internalType: "string",
+        name: "",
+        type: "string",
+      },
+    ],
+    payable: false,
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+    ],
+    name: "nonces",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: false,
+    inputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "permit",
+    outputs: [],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "symbol",
+    outputs: [
+      {
+        internalType: "string",
+        name: "",
+        type: "string",
+      },
+    ],
+    payable: false,
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "totalSupply",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: false,
+    inputs: [
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "transfer",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    constant: false,
+    inputs: [
+      {
+        internalType: "address",
+        name: "from",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "transferFrom",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IUniswapV2ERC20__factory {
+  static readonly abi = _abi;
+  static createInterface(): IUniswapV2ERC20Interface {
+    return new utils.Interface(_abi) as IUniswapV2ERC20Interface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IUniswapV2ERC20 {
+    return new Contract(address, _abi, signerOrProvider) as IUniswapV2ERC20;
+  }
+}
diff --git a/lib/sor/types/v2/factories/IUniswapV2Factory__factory.ts b/lib/sor/types/v2/factories/IUniswapV2Factory__factory.ts
new file mode 100644
index 0000000..09d2cdf
--- /dev/null
+++ b/lib/sor/types/v2/factories/IUniswapV2Factory__factory.ts
@@ -0,0 +1,189 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IUniswapV2Factory,
+  IUniswapV2FactoryInterface,
+} from "../IUniswapV2Factory";
+
+const _abi = [
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "token0",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "token1",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "address",
+        name: "pair",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    name: "PairCreated",
+    type: "event",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    name: "allPairs",
+    outputs: [
+      {
+        internalType: "address",
+        name: "pair",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "allPairsLength",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenA",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenB",
+        type: "address",
+      },
+    ],
+    name: "createPair",
+    outputs: [
+      {
+        internalType: "address",
+        name: "pair",
+        type: "address",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "feeTo",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "feeToSetter",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenA",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenB",
+        type: "address",
+      },
+    ],
+    name: "getPair",
+    outputs: [
+      {
+        internalType: "address",
+        name: "pair",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    name: "setFeeTo",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    name: "setFeeToSetter",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IUniswapV2Factory__factory {
+  static readonly abi = _abi;
+  static createInterface(): IUniswapV2FactoryInterface {
+    return new utils.Interface(_abi) as IUniswapV2FactoryInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IUniswapV2Factory {
+    return new Contract(address, _abi, signerOrProvider) as IUniswapV2Factory;
+  }
+}
diff --git a/lib/sor/types/v2/factories/IUniswapV2Migrator__factory.ts b/lib/sor/types/v2/factories/IUniswapV2Migrator__factory.ts
new file mode 100644
index 0000000..a8a086e
--- /dev/null
+++ b/lib/sor/types/v2/factories/IUniswapV2Migrator__factory.ts
@@ -0,0 +1,59 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IUniswapV2Migrator,
+  IUniswapV2MigratorInterface,
+} from "../IUniswapV2Migrator";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountTokenMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETHMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "migrate",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IUniswapV2Migrator__factory {
+  static readonly abi = _abi;
+  static createInterface(): IUniswapV2MigratorInterface {
+    return new utils.Interface(_abi) as IUniswapV2MigratorInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IUniswapV2Migrator {
+    return new Contract(address, _abi, signerOrProvider) as IUniswapV2Migrator;
+  }
+}
diff --git a/lib/sor/types/v2/factories/IUniswapV2Pair__factory.ts b/lib/sor/types/v2/factories/IUniswapV2Pair__factory.ts
new file mode 100644
index 0000000..a3411f5
--- /dev/null
+++ b/lib/sor/types/v2/factories/IUniswapV2Pair__factory.ts
@@ -0,0 +1,677 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IUniswapV2Pair,
+  IUniswapV2PairInterface,
+} from "../IUniswapV2Pair";
+
+const _abi = [
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "Approval",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "sender",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+    ],
+    name: "Burn",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "sender",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    name: "Mint",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "sender",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount0In",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount1In",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount0Out",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount1Out",
+        type: "uint256",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+    ],
+    name: "Swap",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: false,
+        internalType: "uint112",
+        name: "reserve0",
+        type: "uint112",
+      },
+      {
+        indexed: false,
+        internalType: "uint112",
+        name: "reserve1",
+        type: "uint112",
+      },
+    ],
+    name: "Sync",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "from",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "Transfer",
+    type: "event",
+  },
+  {
+    inputs: [],
+    name: "DOMAIN_SEPARATOR",
+    outputs: [
+      {
+        internalType: "bytes32",
+        name: "",
+        type: "bytes32",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "MINIMUM_LIQUIDITY",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "PERMIT_TYPEHASH",
+    outputs: [
+      {
+        internalType: "bytes32",
+        name: "",
+        type: "bytes32",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+    ],
+    name: "allowance",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "approve",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+    ],
+    name: "balanceOf",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+    ],
+    name: "burn",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "decimals",
+    outputs: [
+      {
+        internalType: "uint8",
+        name: "",
+        type: "uint8",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factory",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "getReserves",
+    outputs: [
+      {
+        internalType: "uint112",
+        name: "reserve0",
+        type: "uint112",
+      },
+      {
+        internalType: "uint112",
+        name: "reserve1",
+        type: "uint112",
+      },
+      {
+        internalType: "uint32",
+        name: "blockTimestampLast",
+        type: "uint32",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    name: "initialize",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "kLast",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+    ],
+    name: "mint",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "name",
+    outputs: [
+      {
+        internalType: "string",
+        name: "",
+        type: "string",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+    ],
+    name: "nonces",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "permit",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "price0CumulativeLast",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "price1CumulativeLast",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+    ],
+    name: "skim",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amount0Out",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amount1Out",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "swap",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "symbol",
+    outputs: [
+      {
+        internalType: "string",
+        name: "",
+        type: "string",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "sync",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "token0",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "token1",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "totalSupply",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "transfer",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "from",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "transferFrom",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IUniswapV2Pair__factory {
+  static readonly abi = _abi;
+  static createInterface(): IUniswapV2PairInterface {
+    return new utils.Interface(_abi) as IUniswapV2PairInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IUniswapV2Pair {
+    return new Contract(address, _abi, signerOrProvider) as IUniswapV2Pair;
+  }
+}
diff --git a/lib/sor/types/v2/factories/IUniswapV2Router01__factory.ts b/lib/sor/types/v2/factories/IUniswapV2Router01__factory.ts
new file mode 100644
index 0000000..3496094
--- /dev/null
+++ b/lib/sor/types/v2/factories/IUniswapV2Router01__factory.ts
@@ -0,0 +1,775 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IUniswapV2Router01,
+  IUniswapV2Router01Interface,
+} from "../IUniswapV2Router01";
+
+const _abi = [
+  {
+    inputs: [],
+    name: "WETH",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenA",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenB",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountADesired",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountBDesired",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountAMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountBMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "addLiquidity",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountA",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountB",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountTokenDesired",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountTokenMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETHMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "addLiquidityETH",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountToken",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETH",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factory",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "reserveIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "reserveOut",
+        type: "uint256",
+      },
+    ],
+    name: "getAmountIn",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "reserveIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "reserveOut",
+        type: "uint256",
+      },
+    ],
+    name: "getAmountOut",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+    ],
+    name: "getAmountsIn",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+    ],
+    name: "getAmountsOut",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountA",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "reserveA",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "reserveB",
+        type: "uint256",
+      },
+    ],
+    name: "quote",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountB",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenA",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenB",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountAMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountBMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "removeLiquidity",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountA",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountB",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountTokenMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETHMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "removeLiquidityETH",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountToken",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETH",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountTokenMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETHMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "bool",
+        name: "approveMax",
+        type: "bool",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "removeLiquidityETHWithPermit",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountToken",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETH",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenA",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenB",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountAMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountBMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "bool",
+        name: "approveMax",
+        type: "bool",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "removeLiquidityWithPermit",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountA",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountB",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapETHForExactTokens",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOutMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapExactETHForTokens",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOutMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapExactTokensForETH",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOutMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapExactTokensForTokens",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountInMax",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapTokensForExactETH",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountInMax",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapTokensForExactTokens",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IUniswapV2Router01__factory {
+  static readonly abi = _abi;
+  static createInterface(): IUniswapV2Router01Interface {
+    return new utils.Interface(_abi) as IUniswapV2Router01Interface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IUniswapV2Router01 {
+    return new Contract(address, _abi, signerOrProvider) as IUniswapV2Router01;
+  }
+}
diff --git a/lib/sor/types/v2/factories/IUniswapV2Router02__factory.ts b/lib/sor/types/v2/factories/IUniswapV2Router02__factory.ts
new file mode 100644
index 0000000..8f9a899
--- /dev/null
+++ b/lib/sor/types/v2/factories/IUniswapV2Router02__factory.ts
@@ -0,0 +1,977 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IUniswapV2Router02,
+  IUniswapV2Router02Interface,
+} from "../IUniswapV2Router02";
+
+const _abi = [
+  {
+    inputs: [],
+    name: "WETH",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenA",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenB",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountADesired",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountBDesired",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountAMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountBMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "addLiquidity",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountA",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountB",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountTokenDesired",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountTokenMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETHMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "addLiquidityETH",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountToken",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETH",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factory",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "reserveIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "reserveOut",
+        type: "uint256",
+      },
+    ],
+    name: "getAmountIn",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "reserveIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "reserveOut",
+        type: "uint256",
+      },
+    ],
+    name: "getAmountOut",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+    ],
+    name: "getAmountsIn",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+    ],
+    name: "getAmountsOut",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountA",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "reserveA",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "reserveB",
+        type: "uint256",
+      },
+    ],
+    name: "quote",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountB",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenA",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenB",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountAMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountBMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "removeLiquidity",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountA",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountB",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountTokenMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETHMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "removeLiquidityETH",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountToken",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETH",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountTokenMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETHMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "removeLiquidityETHSupportingFeeOnTransferTokens",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountETH",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountTokenMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETHMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "bool",
+        name: "approveMax",
+        type: "bool",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "removeLiquidityETHWithPermit",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountToken",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETH",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountTokenMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETHMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "bool",
+        name: "approveMax",
+        type: "bool",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountETH",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenA",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenB",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountAMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountBMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "bool",
+        name: "approveMax",
+        type: "bool",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "removeLiquidityWithPermit",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountA",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountB",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapETHForExactTokens",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOutMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapExactETHForTokens",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOutMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapExactETHForTokensSupportingFeeOnTransferTokens",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOutMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapExactTokensForETH",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOutMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapExactTokensForETHSupportingFeeOnTransferTokens",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOutMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapExactTokensForTokens",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOutMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountInMax",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapTokensForExactETH",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountInMax",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapTokensForExactTokens",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IUniswapV2Router02__factory {
+  static readonly abi = _abi;
+  static createInterface(): IUniswapV2Router02Interface {
+    return new utils.Interface(_abi) as IUniswapV2Router02Interface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IUniswapV2Router02 {
+    return new Contract(address, _abi, signerOrProvider) as IUniswapV2Router02;
+  }
+}
diff --git a/lib/sor/types/v2/factories/UniswapV2ERC20__factory.ts b/lib/sor/types/v2/factories/UniswapV2ERC20__factory.ts
new file mode 100644
index 0000000..6a665d2
--- /dev/null
+++ b/lib/sor/types/v2/factories/UniswapV2ERC20__factory.ts
@@ -0,0 +1,392 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider, TransactionRequest } from "@ethersproject/providers";
+import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
+import type {
+  UniswapV2ERC20,
+  UniswapV2ERC20Interface,
+} from "../UniswapV2ERC20";
+
+const _abi = [
+  {
+    inputs: [],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "constructor",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "Approval",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "from",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "Transfer",
+    type: "event",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "DOMAIN_SEPARATOR",
+    outputs: [
+      {
+        internalType: "bytes32",
+        name: "",
+        type: "bytes32",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "PERMIT_TYPEHASH",
+    outputs: [
+      {
+        internalType: "bytes32",
+        name: "",
+        type: "bytes32",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    name: "allowance",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: false,
+    inputs: [
+      {
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "approve",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    name: "balanceOf",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "decimals",
+    outputs: [
+      {
+        internalType: "uint8",
+        name: "",
+        type: "uint8",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "name",
+    outputs: [
+      {
+        internalType: "string",
+        name: "",
+        type: "string",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    name: "nonces",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: false,
+    inputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "permit",
+    outputs: [],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "symbol",
+    outputs: [
+      {
+        internalType: "string",
+        name: "",
+        type: "string",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "totalSupply",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: false,
+    inputs: [
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "transfer",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    constant: false,
+    inputs: [
+      {
+        internalType: "address",
+        name: "from",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "transferFrom",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+const _bytecode =
+  "0x608060405234801561001057600080fd5b506040514690806052610b898239604080519182900360520182208282018252600a8352692ab734b9bbb0b8102b1960b11b6020938401528151808301835260018152603160f81b908401528151808401919091527fbfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060035550610a9b806100ee6000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80633644e5151161008c57806395d89b411161006657806395d89b411461029f578063a9059cbb146102a7578063d505accf146102e0578063dd62ed3e14610340576100df565b80633644e5151461023157806370a08231146102395780637ecebe001461026c576100df565b806323b872dd116100bd57806323b872dd146101c857806330adf81f1461020b578063313ce56714610213576100df565b806306fdde03146100e4578063095ea7b31461016157806318160ddd146101ae575b600080fd5b6100ec61037b565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012657818101518382015260200161010e565b50505050905090810190601f1680156101535780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61019a6004803603604081101561017757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356103b4565b604080519115158252519081900360200190f35b6101b66103cb565b60408051918252519081900360200190f35b61019a600480360360608110156101de57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013590911690604001356103d1565b6101b66104b0565b61021b6104d4565b6040805160ff9092168252519081900360200190f35b6101b66104d9565b6101b66004803603602081101561024f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166104df565b6101b66004803603602081101561028257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166104f1565b6100ec610503565b61019a600480360360408110156102bd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561053c565b61033e600480360360e08110156102f657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135610549565b005b6101b66004803603604081101561035657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610815565b6040518060400160405280600a81526020017f556e69737761702056320000000000000000000000000000000000000000000081525081565b60006103c1338484610832565b5060015b92915050565b60005481565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1461049b5773ffffffffffffffffffffffffffffffffffffffff84166000908152600260209081526040808320338452909152902054610469908363ffffffff6108a116565b73ffffffffffffffffffffffffffffffffffffffff851660009081526002602090815260408083203384529091529020555b6104a6848484610913565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b60016020526000908152604090205481565b60046020526000908152604090205481565b6040518060400160405280600681526020017f554e492d5632000000000000000000000000000000000000000000000000000081525081565b60006103c1338484610913565b428410156105b857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f556e697377617056323a20455850495245440000000000000000000000000000604482015290519081900360640190fd5b60035473ffffffffffffffffffffffffffffffffffffffff80891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e2808201937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa158015610719573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81161580159061079457508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b6107ff57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b61080a898989610832565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b808203828111156103c557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902054610949908263ffffffff6108a116565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260016020526040808220939093559084168152205461098b908263ffffffff6109f416565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b808201828110156103c557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fdfea265627a7a723158200a1f25ac97b56edae6740781259ba188530a8a88577b2b41240f6dc34f0d6a4664736f6c63430005100032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429";
+
+export class UniswapV2ERC20__factory extends ContractFactory {
+  constructor(signer?: Signer) {
+    super(_abi, _bytecode, signer);
+  }
+
+  deploy(
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<UniswapV2ERC20> {
+    return super.deploy(overrides || {}) as Promise<UniswapV2ERC20>;
+  }
+  getDeployTransaction(
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): TransactionRequest {
+    return super.getDeployTransaction(overrides || {});
+  }
+  attach(address: string): UniswapV2ERC20 {
+    return super.attach(address) as UniswapV2ERC20;
+  }
+  connect(signer: Signer): UniswapV2ERC20__factory {
+    return super.connect(signer) as UniswapV2ERC20__factory;
+  }
+  static readonly bytecode = _bytecode;
+  static readonly abi = _abi;
+  static createInterface(): UniswapV2ERC20Interface {
+    return new utils.Interface(_abi) as UniswapV2ERC20Interface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): UniswapV2ERC20 {
+    return new Contract(address, _abi, signerOrProvider) as UniswapV2ERC20;
+  }
+}
diff --git a/lib/sor/types/v2/factories/UniswapV2Factory__factory.ts b/lib/sor/types/v2/factories/UniswapV2Factory__factory.ts
new file mode 100644
index 0000000..b5acb9e
--- /dev/null
+++ b/lib/sor/types/v2/factories/UniswapV2Factory__factory.ts
@@ -0,0 +1,246 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider, TransactionRequest } from "@ethersproject/providers";
+import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
+import type {
+  UniswapV2Factory,
+  UniswapV2FactoryInterface,
+} from "../UniswapV2Factory";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "_feeToSetter",
+        type: "address",
+      },
+    ],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "constructor",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "token0",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "token1",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "address",
+        name: "pair",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    name: "PairCreated",
+    type: "event",
+  },
+  {
+    constant: true,
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    name: "allPairs",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "allPairsLength",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: false,
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenA",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenB",
+        type: "address",
+      },
+    ],
+    name: "createPair",
+    outputs: [
+      {
+        internalType: "address",
+        name: "pair",
+        type: "address",
+      },
+    ],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "feeTo",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "feeToSetter",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    name: "getPair",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: false,
+    inputs: [
+      {
+        internalType: "address",
+        name: "_feeTo",
+        type: "address",
+      },
+    ],
+    name: "setFeeTo",
+    outputs: [],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    constant: false,
+    inputs: [
+      {
+        internalType: "address",
+        name: "_feeToSetter",
+        type: "address",
+      },
+    ],
+    name: "setFeeToSetter",
+    outputs: [],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+const _bytecode =
+  "";
+
+export class UniswapV2Factory__factory extends ContractFactory {
+  constructor(signer?: Signer) {
+    super(_abi, _bytecode, signer);
+  }
+
+  deploy(
+    _feeToSetter: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<UniswapV2Factory> {
+    return super.deploy(
+      _feeToSetter,
+      overrides || {}
+    ) as Promise<UniswapV2Factory>;
+  }
+  getDeployTransaction(
+    _feeToSetter: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): TransactionRequest {
+    return super.getDeployTransaction(_feeToSetter, overrides || {});
+  }
+  attach(address: string): UniswapV2Factory {
+    return super.attach(address) as UniswapV2Factory;
+  }
+  connect(signer: Signer): UniswapV2Factory__factory {
+    return super.connect(signer) as UniswapV2Factory__factory;
+  }
+  static readonly bytecode = _bytecode;
+  static readonly abi = _abi;
+  static createInterface(): UniswapV2FactoryInterface {
+    return new utils.Interface(_abi) as UniswapV2FactoryInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): UniswapV2Factory {
+    return new Contract(address, _abi, signerOrProvider) as UniswapV2Factory;
+  }
+}
diff --git a/lib/sor/types/v2/factories/UniswapV2Migrator__factory.ts b/lib/sor/types/v2/factories/UniswapV2Migrator__factory.ts
new file mode 100644
index 0000000..0b58c26
--- /dev/null
+++ b/lib/sor/types/v2/factories/UniswapV2Migrator__factory.ts
@@ -0,0 +1,111 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider, TransactionRequest } from "@ethersproject/providers";
+import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
+import type {
+  UniswapV2Migrator,
+  UniswapV2MigratorInterface,
+} from "../UniswapV2Migrator";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "_factoryV1",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "_router",
+        type: "address",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "constructor",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountTokenMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETHMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "migrate",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    stateMutability: "payable",
+    type: "receive",
+  },
+];
+
+const _bytecode =
+  "0x60c060405234801561001057600080fd5b50604051610b3f380380610b3f8339818101604052604081101561003357600080fd5b5080516020909101516001600160601b0319606092831b8116608052911b1660a05260805160601c60a05160601c610ab8610087600039806103ee5280610484528061051652508060905250610ab86000f3fe6080604052600436106100225760003560e01c8063b7df1d251461002e57610029565b3661002957005b600080fd5b34801561003a57600080fd5b5061008a600480360360a081101561005157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135909116906080013561008c565b005b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166306f2bf62876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561012b57600080fd5b505afa15801561013f573d6000803e3d6000fd5b505050506040513d602081101561015557600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152336004820152905191925060009173ffffffffffffffffffffffffffffffffffffffff8416916370a08231916024808301926020929190829003018186803b1580156101c957600080fd5b505afa1580156101dd573d6000803e3d6000fd5b505050506040513d60208110156101f357600080fd5b5051604080517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052905191925073ffffffffffffffffffffffffffffffffffffffff8416916323b872dd916064808201926020929091908290030181600087803b15801561027457600080fd5b505af1158015610288573d6000803e3d6000fd5b505050506040513d602081101561029e57600080fd5b505161030b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015290519081900360640190fd5b604080517ff88bf15a0000000000000000000000000000000000000000000000000000000081526004810183905260016024820181905260448201527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60648201528151600092839273ffffffffffffffffffffffffffffffffffffffff87169263f88bf15a9260848084019391929182900301818787803b1580156103b057600080fd5b505af11580156103c4573d6000803e3d6000fd5b505050506040513d60408110156103da57600080fd5b5080516020909101519092509050610413897f00000000000000000000000000000000000000000000000000000000000000008361056f565b604080517ff305d71900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b8116600483015260248201849052604482018b9052606482018a9052888116608483015260a48201889052915160009283927f00000000000000000000000000000000000000000000000000000000000000009091169163f305d71991879160c480830192606092919082900301818588803b1580156104cf57600080fd5b505af11580156104e3573d6000803e3d6000fd5b50505050506040513d60608110156104fa57600080fd5b50805160209091015190925090508183111561054e5761053c8b7f0000000000000000000000000000000000000000000000000000000000000000600061056f565b6105498b3384860361074c565b610562565b808411156105625761056233828603610922565b5050505050505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b6020831061064557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610608565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146106a7576040519150601f19603f3d011682016040523d82523d6000602084013e6106ac565b606091505b50915091508180156106da5750805115806106da57508080602001905160208110156106d757600080fd5b50515b61074557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5472616e7366657248656c7065723a20415050524f56455f4641494c45440000604482015290519081900360640190fd5b5050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b6020831061082257805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016107e5565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610884576040519150601f19603f3d011682016040523d82523d6000602084013e610889565b606091505b50915091508180156108b75750805115806108b757508080602001905160208110156108b457600080fd5b50515b61074557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b6020831061099957805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161095c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146109fb576040519150601f19603f3d011682016040523d82523d6000602084013e610a00565b606091505b5050905080610a5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610a606023913960400191505060405180910390fd5b50505056fe5472616e7366657248656c7065723a204554485f5452414e534645525f4641494c4544a26469706673582212202768d5253768a1aad1a799af33f41e01a2eadb3b0e507551a0be190be21184ca64736f6c63430006060033";
+
+export class UniswapV2Migrator__factory extends ContractFactory {
+  constructor(signer?: Signer) {
+    super(_abi, _bytecode, signer);
+  }
+
+  deploy(
+    _factoryV1: string,
+    _router: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<UniswapV2Migrator> {
+    return super.deploy(
+      _factoryV1,
+      _router,
+      overrides || {}
+    ) as Promise<UniswapV2Migrator>;
+  }
+  getDeployTransaction(
+    _factoryV1: string,
+    _router: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): TransactionRequest {
+    return super.getDeployTransaction(_factoryV1, _router, overrides || {});
+  }
+  attach(address: string): UniswapV2Migrator {
+    return super.attach(address) as UniswapV2Migrator;
+  }
+  connect(signer: Signer): UniswapV2Migrator__factory {
+    return super.connect(signer) as UniswapV2Migrator__factory;
+  }
+  static readonly bytecode = _bytecode;
+  static readonly abi = _abi;
+  static createInterface(): UniswapV2MigratorInterface {
+    return new utils.Interface(_abi) as UniswapV2MigratorInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): UniswapV2Migrator {
+    return new Contract(address, _abi, signerOrProvider) as UniswapV2Migrator;
+  }
+}
diff --git a/lib/sor/types/v2/factories/UniswapV2Pair__factory.ts b/lib/sor/types/v2/factories/UniswapV2Pair__factory.ts
new file mode 100644
index 0000000..13bc848
--- /dev/null
+++ b/lib/sor/types/v2/factories/UniswapV2Pair__factory.ts
@@ -0,0 +1,758 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider, TransactionRequest } from "@ethersproject/providers";
+import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
+import type { UniswapV2Pair, UniswapV2PairInterface } from "../UniswapV2Pair";
+
+const _abi = [
+  {
+    inputs: [],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "constructor",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "Approval",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "sender",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+    ],
+    name: "Burn",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "sender",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    name: "Mint",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "sender",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount0In",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount1In",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount0Out",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount1Out",
+        type: "uint256",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+    ],
+    name: "Swap",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: false,
+        internalType: "uint112",
+        name: "reserve0",
+        type: "uint112",
+      },
+      {
+        indexed: false,
+        internalType: "uint112",
+        name: "reserve1",
+        type: "uint112",
+      },
+    ],
+    name: "Sync",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "from",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "Transfer",
+    type: "event",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "DOMAIN_SEPARATOR",
+    outputs: [
+      {
+        internalType: "bytes32",
+        name: "",
+        type: "bytes32",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "MINIMUM_LIQUIDITY",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "PERMIT_TYPEHASH",
+    outputs: [
+      {
+        internalType: "bytes32",
+        name: "",
+        type: "bytes32",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    name: "allowance",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: false,
+    inputs: [
+      {
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "approve",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    name: "balanceOf",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: false,
+    inputs: [
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+    ],
+    name: "burn",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "decimals",
+    outputs: [
+      {
+        internalType: "uint8",
+        name: "",
+        type: "uint8",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "factory",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "getReserves",
+    outputs: [
+      {
+        internalType: "uint112",
+        name: "_reserve0",
+        type: "uint112",
+      },
+      {
+        internalType: "uint112",
+        name: "_reserve1",
+        type: "uint112",
+      },
+      {
+        internalType: "uint32",
+        name: "_blockTimestampLast",
+        type: "uint32",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: false,
+    inputs: [
+      {
+        internalType: "address",
+        name: "_token0",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "_token1",
+        type: "address",
+      },
+    ],
+    name: "initialize",
+    outputs: [],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "kLast",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: false,
+    inputs: [
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+    ],
+    name: "mint",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+    ],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "name",
+    outputs: [
+      {
+        internalType: "string",
+        name: "",
+        type: "string",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    name: "nonces",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: false,
+    inputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "permit",
+    outputs: [],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "price0CumulativeLast",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "price1CumulativeLast",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: false,
+    inputs: [
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+    ],
+    name: "skim",
+    outputs: [],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    constant: false,
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amount0Out",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amount1Out",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "swap",
+    outputs: [],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "symbol",
+    outputs: [
+      {
+        internalType: "string",
+        name: "",
+        type: "string",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: false,
+    inputs: [],
+    name: "sync",
+    outputs: [],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "token0",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "token1",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: true,
+    inputs: [],
+    name: "totalSupply",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    payable: false,
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    constant: false,
+    inputs: [
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "transfer",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    constant: false,
+    inputs: [
+      {
+        internalType: "address",
+        name: "from",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "transferFrom",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    payable: false,
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+const _bytecode =
+  "0x60806040526001600c5534801561001557600080fd5b506040514690806052612d228239604080519182900360520182208282018252600a8352692ab734b9bbb0b8102b1960b11b6020938401528151808301835260018152603160f81b908401528151808401919091527fbfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015260808101949094523060a0808601919091528151808603909101815260c09094019052825192019190912060035550600580546001600160a01b03191633179055612c1d806101056000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a7146105da578063d505accf146105e2578063dd62ed3e14610640578063fff6cae91461067b576101b9565b8063ba9a7a5614610597578063bc25cf771461059f578063c45a0155146105d2576101b9565b80637ecebe00116100d35780637ecebe00146104d757806389afcb441461050a57806395d89b4114610556578063a9059cbb1461055e576101b9565b80636a6278421461046957806370a082311461049c5780637464fc3d146104cf576101b9565b806323b872dd116101665780633644e515116101405780633644e51514610416578063485cc9551461041e5780635909c0d5146104595780635a3d549314610461576101b9565b806323b872dd146103ad57806330adf81f146103f0578063313ce567146103f8576101b9565b8063095ea7b311610197578063095ea7b3146103155780630dfe16811461036257806318160ddd14610393576101b9565b8063022c0d9f146101be57806306fdde03146102595780630902f1ac146102d6575b600080fd5b610257600480360360808110156101d457600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff604083013516919081019060808101606082013564010000000081111561021857600080fd5b82018360208201111561022a57600080fd5b8035906020019184600183028401116401000000008311171561024c57600080fd5b509092509050610683565b005b610261610d57565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561029b578181015183820152602001610283565b50505050905090810190601f1680156102c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102de610d90565b604080516dffffffffffffffffffffffffffff948516815292909316602083015263ffffffff168183015290519081900360600190f35b61034e6004803603604081101561032b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610de5565b604080519115158252519081900360200190f35b61036a610dfc565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61039b610e18565b60408051918252519081900360200190f35b61034e600480360360608110156103c357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135610e1e565b61039b610efd565b610400610f21565b6040805160ff9092168252519081900360200190f35b61039b610f26565b6102576004803603604081101561043457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610f2c565b61039b611005565b61039b61100b565b61039b6004803603602081101561047f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611011565b61039b600480360360208110156104b257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166113cb565b61039b6113dd565b61039b600480360360208110156104ed57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166113e3565b61053d6004803603602081101561052057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166113f5565b6040805192835260208301919091528051918290030190f35b610261611892565b61034e6004803603604081101561057457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356118cb565b61039b6118d8565b610257600480360360208110156105b557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166118de565b61036a611ad4565b61036a611af0565b610257600480360360e08110156105f857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611b0c565b61039b6004803603604081101561065657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516611dd8565b610257611df5565b600c546001146106f457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f556e697377617056323a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600c55841515806107075750600084115b61075c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180612b2f6025913960400191505060405180910390fd5b600080610767610d90565b5091509150816dffffffffffffffffffffffffffff168710801561079a5750806dffffffffffffffffffffffffffff1686105b6107ef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180612b786021913960400191505060405180910390fd5b600654600754600091829173ffffffffffffffffffffffffffffffffffffffff91821691908116908916821480159061085457508073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614155b6108bf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f556e697377617056323a20494e56414c49445f544f0000000000000000000000604482015290519081900360640190fd5b8a156108d0576108d0828a8d611fdb565b89156108e1576108e1818a8c611fdb565b86156109c3578873ffffffffffffffffffffffffffffffffffffffff166310d1e85c338d8d8c8c6040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b1580156109aa57600080fd5b505af11580156109be573d6000803e3d6000fd5b505050505b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8416916370a08231916024808301926020929190829003018186803b158015610a2f57600080fd5b505afa158015610a43573d6000803e3d6000fd5b505050506040513d6020811015610a5957600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191955073ffffffffffffffffffffffffffffffffffffffff8316916370a0823191602480820192602092909190829003018186803b158015610acb57600080fd5b505afa158015610adf573d6000803e3d6000fd5b505050506040513d6020811015610af557600080fd5b5051925060009150506dffffffffffffffffffffffffffff85168a90038311610b1f576000610b35565b89856dffffffffffffffffffffffffffff160383035b9050600089856dffffffffffffffffffffffffffff16038311610b59576000610b6f565b89856dffffffffffffffffffffffffffff160383035b90506000821180610b805750600081115b610bd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180612b546024913960400191505060405180910390fd5b6000610c09610beb84600363ffffffff6121e816565b610bfd876103e863ffffffff6121e816565b9063ffffffff61226e16565b90506000610c21610beb84600363ffffffff6121e816565b9050610c59620f4240610c4d6dffffffffffffffffffffffffffff8b8116908b1663ffffffff6121e816565b9063ffffffff6121e816565b610c69838363ffffffff6121e816565b1015610cd657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f556e697377617056323a204b0000000000000000000000000000000000000000604482015290519081900360640190fd5b5050610ce4848488886122e0565b60408051838152602081018390528082018d9052606081018c9052905173ffffffffffffffffffffffffffffffffffffffff8b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c55505050505050505050565b6040518060400160405280600a81526020017f556e69737761702056320000000000000000000000000000000000000000000081525081565b6008546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000008304909116917c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690565b6000610df233848461259c565b5060015b92915050565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14610ee85773ffffffffffffffffffffffffffffffffffffffff84166000908152600260209081526040808320338452909152902054610eb6908363ffffffff61226e16565b73ffffffffffffffffffffffffffffffffffffffff851660009081526002602090815260408083203384529091529020555b610ef384848461260b565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b60055473ffffffffffffffffffffffffffffffffffffffff163314610fb257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f556e697377617056323a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b6006805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560078054929093169116179055565b60095481565b600a5481565b6000600c5460011461108457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f556e697377617056323a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600c81905580611094610d90565b50600654604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905193955091935060009273ffffffffffffffffffffffffffffffffffffffff909116916370a08231916024808301926020929190829003018186803b15801561110e57600080fd5b505afa158015611122573d6000803e3d6000fd5b505050506040513d602081101561113857600080fd5b5051600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905192935060009273ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b1580156111b157600080fd5b505afa1580156111c5573d6000803e3d6000fd5b505050506040513d60208110156111db57600080fd5b505190506000611201836dffffffffffffffffffffffffffff871663ffffffff61226e16565b90506000611225836dffffffffffffffffffffffffffff871663ffffffff61226e16565b9050600061123387876126ec565b600054909150806112705761125c6103e8610bfd611257878763ffffffff6121e816565b612878565b985061126b60006103e86128ca565b6112cd565b6112ca6dffffffffffffffffffffffffffff8916611294868463ffffffff6121e816565b8161129b57fe5b046dffffffffffffffffffffffffffff89166112bd868563ffffffff6121e816565b816112c457fe5b0461297a565b98505b60008911611326576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180612bc16028913960400191505060405180910390fd5b6113308a8a6128ca565b61133c86868a8a6122e0565b811561137e5760085461137a906dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041663ffffffff6121e816565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600c5460011461146957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f556e697377617056323a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600c81905580611479610d90565b50600654600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905194965092945073ffffffffffffffffffffffffffffffffffffffff9182169391169160009184916370a08231916024808301926020929190829003018186803b1580156114fb57600080fd5b505afa15801561150f573d6000803e3d6000fd5b505050506040513d602081101561152557600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191925060009173ffffffffffffffffffffffffffffffffffffffff8516916370a08231916024808301926020929190829003018186803b15801561159957600080fd5b505afa1580156115ad573d6000803e3d6000fd5b505050506040513d60208110156115c357600080fd5b5051306000908152600160205260408120549192506115e288886126ec565b600054909150806115f9848763ffffffff6121e816565b8161160057fe5b049a5080611614848663ffffffff6121e816565b8161161b57fe5b04995060008b11801561162e575060008a115b611683576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180612b996028913960400191505060405180910390fd5b61168d3084612992565b611698878d8d611fdb565b6116a3868d8c611fdb565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8916916370a08231916024808301926020929190829003018186803b15801561170f57600080fd5b505afa158015611723573d6000803e3d6000fd5b505050506040513d602081101561173957600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191965073ffffffffffffffffffffffffffffffffffffffff8816916370a0823191602480820192602092909190829003018186803b1580156117ab57600080fd5b505afa1580156117bf573d6000803e3d6000fd5b505050506040513d60208110156117d557600080fd5b505193506117e585858b8b6122e0565b811561182757600854611823906dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041663ffffffff6121e816565b600b555b604080518c8152602081018c9052815173ffffffffffffffffffffffffffffffffffffffff8f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b6040518060400160405280600681526020017f554e492d5632000000000000000000000000000000000000000000000000000081525081565b6000610df233848461260b565b6103e881565b600c5460011461194f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f556e697377617056323a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600c55600654600754600854604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff9485169490931692611a2b9285928792611a26926dffffffffffffffffffffffffffff169185916370a0823191602480820192602092909190829003018186803b1580156119ee57600080fd5b505afa158015611a02573d6000803e3d6000fd5b505050506040513d6020811015611a1857600080fd5b50519063ffffffff61226e16565b611fdb565b600854604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051611aca9284928792611a26926e01000000000000000000000000000090046dffffffffffffffffffffffffffff169173ffffffffffffffffffffffffffffffffffffffff8616916370a0823191602480820192602092909190829003018186803b1580156119ee57600080fd5b50506001600c5550565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b42841015611b7b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f556e697377617056323a20455850495245440000000000000000000000000000604482015290519081900360640190fd5b60035473ffffffffffffffffffffffffffffffffffffffff80891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e2808201937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa158015611cdc573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811615801590611d5757508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b611dc257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b611dcd89898961259c565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600c54600114611e6657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f556e697377617056323a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600c55600654604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051611fd49273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b158015611edd57600080fd5b505afa158015611ef1573d6000803e3d6000fd5b505050506040513d6020811015611f0757600080fd5b5051600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015611f7a57600080fd5b505afa158015611f8e573d6000803e3d6000fd5b505050506040513d6020811015611fa457600080fd5b50516008546dffffffffffffffffffffffffffff808216916e0100000000000000000000000000009004166122e0565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b602083106120e157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016120a4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612143576040519150601f19603f3d011682016040523d82523d6000602084013e612148565b606091505b5091509150818015612176575080511580612176575080806020019051602081101561217357600080fd5b50515b6121e157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c4544000000000000604482015290519081900360640190fd5b5050505050565b60008115806122035750508082028282828161220057fe5b04145b610df657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b80820382811115610df657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b6dffffffffffffffffffffffffffff841180159061230c57506dffffffffffffffffffffffffffff8311155b61237757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f556e697377617056323a204f564552464c4f5700000000000000000000000000604482015290519081900360640190fd5b60085463ffffffff428116917c0100000000000000000000000000000000000000000000000000000000900481168203908116158015906123c757506dffffffffffffffffffffffffffff841615155b80156123e257506dffffffffffffffffffffffffffff831615155b15612492578063ffffffff16612425856123fb86612a57565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169063ffffffff612a7b16565b600980547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905563ffffffff8116612465846123fb87612a57565b600a80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff92909216929092020190555b600880547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff166e0100000000000000000000000000008883168102919091177bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000063ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902054612641908263ffffffff61226e16565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600160205260408082209390935590841681522054612683908263ffffffff612abc16565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b15801561275757600080fd5b505afa15801561276b573d6000803e3d6000fd5b505050506040513d602081101561278157600080fd5b5051600b5473ffffffffffffffffffffffffffffffffffffffff821615801594509192509061286457801561285f5760006127d86112576dffffffffffffffffffffffffffff88811690881663ffffffff6121e816565b905060006127e583612878565b90508082111561285c576000612813612804848463ffffffff61226e16565b6000549063ffffffff6121e816565b905060006128388361282c86600563ffffffff6121e816565b9063ffffffff612abc16565b9050600081838161284557fe5b04905080156128585761285887826128ca565b5050505b50505b612870565b8015612870576000600b555b505092915050565b600060038211156128bb575080600160028204015b818110156128b5578091506002818285816128a457fe5b0401816128ad57fe5b04905061288d565b506128c5565b81156128c5575060015b919050565b6000546128dd908263ffffffff612abc16565b600090815573ffffffffffffffffffffffffffffffffffffffff8316815260016020526040902054612915908263ffffffff612abc16565b73ffffffffffffffffffffffffffffffffffffffff831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000818310612989578161298b565b825b9392505050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600160205260409020546129c8908263ffffffff61226e16565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604081209190915554612a02908263ffffffff61226e16565b600090815560408051838152905173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b60006dffffffffffffffffffffffffffff82167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff841681612ab457fe5b049392505050565b80820182811015610df657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fdfe556e697377617056323a20494e53554646494349454e545f4f55545055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f494e5055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f4c4951554944495459556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4255524e4544556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4d494e544544a265627a7a723158207dca18479e58487606bf70c79e44d8dee62353c9ee6d01f9a9d70885b8765f2264736f6c63430005100032454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429";
+
+export class UniswapV2Pair__factory extends ContractFactory {
+  constructor(signer?: Signer) {
+    super(_abi, _bytecode, signer);
+  }
+
+  deploy(
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<UniswapV2Pair> {
+    return super.deploy(overrides || {}) as Promise<UniswapV2Pair>;
+  }
+  getDeployTransaction(
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): TransactionRequest {
+    return super.getDeployTransaction(overrides || {});
+  }
+  attach(address: string): UniswapV2Pair {
+    return super.attach(address) as UniswapV2Pair;
+  }
+  connect(signer: Signer): UniswapV2Pair__factory {
+    return super.connect(signer) as UniswapV2Pair__factory;
+  }
+  static readonly bytecode = _bytecode;
+  static readonly abi = _abi;
+  static createInterface(): UniswapV2PairInterface {
+    return new utils.Interface(_abi) as UniswapV2PairInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): UniswapV2Pair {
+    return new Contract(address, _abi, signerOrProvider) as UniswapV2Pair;
+  }
+}
diff --git a/lib/sor/types/v2/factories/UniswapV2Router01__factory.ts b/lib/sor/types/v2/factories/UniswapV2Router01__factory.ts
new file mode 100644
index 0000000..a9f0054
--- /dev/null
+++ b/lib/sor/types/v2/factories/UniswapV2Router01__factory.ts
@@ -0,0 +1,827 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider, TransactionRequest } from "@ethersproject/providers";
+import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
+import type {
+  UniswapV2Router01,
+  UniswapV2Router01Interface,
+} from "../UniswapV2Router01";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "_factory",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "_WETH",
+        type: "address",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "constructor",
+  },
+  {
+    inputs: [],
+    name: "WETH",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenA",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenB",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountADesired",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountBDesired",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountAMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountBMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "addLiquidity",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountA",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountB",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountTokenDesired",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountTokenMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETHMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "addLiquidityETH",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountToken",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETH",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factory",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "reserveIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "reserveOut",
+        type: "uint256",
+      },
+    ],
+    name: "getAmountIn",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "reserveIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "reserveOut",
+        type: "uint256",
+      },
+    ],
+    name: "getAmountOut",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+    ],
+    name: "getAmountsIn",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+    ],
+    name: "getAmountsOut",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountA",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "reserveA",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "reserveB",
+        type: "uint256",
+      },
+    ],
+    name: "quote",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountB",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenA",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenB",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountAMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountBMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "removeLiquidity",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountA",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountB",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountTokenMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETHMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "removeLiquidityETH",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountToken",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETH",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountTokenMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETHMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "bool",
+        name: "approveMax",
+        type: "bool",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "removeLiquidityETHWithPermit",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountToken",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETH",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenA",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenB",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountAMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountBMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "bool",
+        name: "approveMax",
+        type: "bool",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "removeLiquidityWithPermit",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountA",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountB",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapETHForExactTokens",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOutMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapExactETHForTokens",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOutMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapExactTokensForETH",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOutMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapExactTokensForTokens",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountInMax",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapTokensForExactETH",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountInMax",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapTokensForExactTokens",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    stateMutability: "payable",
+    type: "receive",
+  },
+];
+
+const _bytecode =
+  "0x60c060405234801561001057600080fd5b506040516141273803806141278339818101604052604081101561003357600080fd5b5080516020909101516001600160601b0319606092831b8116608052911b1660a05260805160601c60a05160601c613feb61013c600039806101655280610b235280610b5e5280610c9b5280610f5e52806113b852806115e65280611799528061182e5280611afd5280611eb352806121e9528061223f528061227352806122f4528061250e52806126be5280612753525080610d8d5280610e8b5280611031528061106a528061121552806114aa52806116cc528061186d5280611a335280611ba65280611e385280611e615280611e91528061206e528061221d52806125f452806127925280613211528061325452806137e752806138c852806139485250613feb6000f3fe6080604052600436106101485760003560e01c80638803dbee116100c0578063d06ca61f11610074578063e8e3370011610059578063e8e3370014610937578063f305d719146109c4578063fb3bdb4114610a175761018e565b8063d06ca61f14610800578063ded9382a146108b75761018e565b8063ad615dec116100a5578063ad615dec1461074b578063baa2abde14610781578063c45a0155146107eb5761018e565b80638803dbee14610668578063ad5c46481461070d5761018e565b80632195995c116101175780634a25d94a116100fc5780634a25d94a146105305780637ff36ab5146105d557806385f8c2591461020c5761018e565b80632195995c1461040057806338ed17391461048b5761018e565b806302751cec14610193578063054d50d41461020c57806318cbafe5146102545780631f00ca74146103495761018e565b3661018e573373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461018c57fe5b005b600080fd5b34801561019f57600080fd5b506101f3600480360360c08110156101b657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a00135610aaa565b6040805192835260208301919091528051918290030190f35b34801561021857600080fd5b506102426004803603606081101561022f57600080fd5b5080359060208101359060400135610bfd565b60408051918252519081900360200190f35b34801561026057600080fd5b506102f9600480360360a081101561027757600080fd5b81359160208101359181019060608101604082013564010000000081111561029e57600080fd5b8201836020820111156102b057600080fd5b803590602001918460208302840111640100000000831117156102d257600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135610c12565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561033557818101518382015260200161031d565b505050509050019250505060405180910390f35b34801561035557600080fd5b506102f96004803603604081101561036c57600080fd5b8135919081019060408101602082013564010000000081111561038e57600080fd5b8201836020820111156103a057600080fd5b803590602001918460208302840111640100000000831117156103c257600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061102a945050505050565b34801561040c57600080fd5b506101f3600480360361016081101561042457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201359160608101359160808201359160a08101359091169060c08101359060e081013515159060ff6101008201351690610120810135906101400135611060565b34801561049757600080fd5b506102f9600480360360a08110156104ae57600080fd5b8135916020810135918101906060810160408201356401000000008111156104d557600080fd5b8201836020820111156104e757600080fd5b8035906020019184602083028401116401000000008311171561050957600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff813516906020013561119e565b34801561053c57600080fd5b506102f9600480360360a081101561055357600080fd5b81359160208101359181019060608101604082013564010000000081111561057a57600080fd5b82018360208201111561058c57600080fd5b803590602001918460208302840111640100000000831117156105ae57600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff813516906020013561132f565b6102f9600480360360808110156105eb57600080fd5b8135919081019060408101602082013564010000000081111561060d57600080fd5b82018360208201111561061f57600080fd5b8035906020019184602083028401116401000000008311171561064157600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135611572565b34801561067457600080fd5b506102f9600480360360a081101561068b57600080fd5b8135916020810135918101906060810160408201356401000000008111156106b257600080fd5b8201836020820111156106c457600080fd5b803590602001918460208302840111640100000000831117156106e657600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff81351690602001356119bc565b34801561071957600080fd5b50610722611afb565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561075757600080fd5b506102426004803603606081101561076e57600080fd5b5080359060208101359060400135611b1f565b34801561078d57600080fd5b506101f3600480360360e08110156107a457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201359160608101359160808201359160a08101359091169060c00135611b2c565b3480156107f757600080fd5b50610722611e36565b34801561080c57600080fd5b506102f96004803603604081101561082357600080fd5b8135919081019060408101602082013564010000000081111561084557600080fd5b82018360208201111561085757600080fd5b8035906020019184602083028401116401000000008311171561087957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611e5a945050505050565b3480156108c357600080fd5b506101f360048036036101408110156108db57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a08101359060c081013515159060ff60e08201351690610100810135906101200135611e87565b34801561094357600080fd5b506109a6600480360361010081101561095b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201359160608101359160808201359160a08101359160c0820135169060e00135611fdf565b60408051938452602084019290925282820152519081900360600190f35b6109a6600480360360c08110156109da57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a0013561216e565b6102f960048036036080811015610a2d57600080fd5b81359190810190604081016020820135640100000000811115610a4f57600080fd5b820183602082011115610a6157600080fd5b80359060200191846020830284011164010000000083111715610a8357600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff813516906020013561249a565b6000808242811015610b1d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f556e69737761705632526f757465723a20455850495245440000000000000000604482015290519081900360640190fd5b610b4c897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a611b2c565b9093509150610b5c8986856128e9565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610bcf57600080fd5b505af1158015610be3573d6000803e3d6000fd5b50505050610bf18583612ac6565b50965096945050505050565b6000610c0a848484612c03565b949350505050565b60608142811015610c8457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f556e69737761705632526f757465723a20455850495245440000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001686867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818110610ce957fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d8857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604482015290519081900360640190fd5b610de67f000000000000000000000000000000000000000000000000000000000000000089888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612d2792505050565b91508682600184510381518110610df957fe5b60200260200101511015610e58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180613f3c602b913960400191505060405180910390fd5b610f1d86866000818110610e6857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1633610f037f00000000000000000000000000000000000000000000000000000000000000008a8a6000818110610eb757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168b8b6001818110610ee157fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16612e8d565b85600081518110610f1057fe5b6020026020010151612f78565b610f5c82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250613148915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d83600185510381518110610fa857fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610fe657600080fd5b505af1158015610ffa573d6000803e3d6000fd5b5050505061101f848360018551038151811061101257fe5b6020026020010151612ac6565b509695505050505050565b60606110577f000000000000000000000000000000000000000000000000000000000000000084846133cf565b90505b92915050565b60008060006110907f00000000000000000000000000000000000000000000000000000000000000008f8f612e8d565b905060008761109f578c6110c1565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b604080517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052606481018c905260ff8a16608482015260a4810189905260c48101889052905191925073ffffffffffffffffffffffffffffffffffffffff84169163d505accf9160e48082019260009290919082900301818387803b15801561115d57600080fd5b505af1158015611171573d6000803e3d6000fd5b505050506111848f8f8f8f8f8f8f611b2c565b809450819550505050509b509b9950505050505050505050565b6060814281101561121057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f556e69737761705632526f757465723a20455850495245440000000000000000604482015290519081900360640190fd5b61126e7f000000000000000000000000000000000000000000000000000000000000000089888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612d2792505050565b9150868260018451038151811061128157fe5b602002602001015110156112e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180613f3c602b913960400191505060405180910390fd5b6112f086866000818110610e6857fe5b61101f82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250613148915050565b606081428110156113a157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f556e69737761705632526f757465723a20455850495245440000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001686867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061140657fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146114a557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604482015290519081900360640190fd5b6115037f0000000000000000000000000000000000000000000000000000000000000000898888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506133cf92505050565b9150868260008151811061151357fe5b60200260200101511115610e58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180613ecc6027913960400191505060405180910390fd5b606081428110156115e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f556e69737761705632526f757465723a20455850495245440000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168686600081811061162857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146116c757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604482015290519081900360640190fd5b6117257f000000000000000000000000000000000000000000000000000000000000000034888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612d2792505050565b9150868260018451038151811061173857fe5b60200260200101511015611797576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180613f3c602b913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836000815181106117e057fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561181357600080fd5b505af1158015611827573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6118c37f00000000000000000000000000000000000000000000000000000000000000008989600081811061189957fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168a8a6001818110610ee157fe5b846000815181106118d057fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561194157600080fd5b505af1158015611955573d6000803e3d6000fd5b505050506040513d602081101561196b57600080fd5b505161197357fe5b6119b282878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250613148915050565b5095945050505050565b60608142811015611a2e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f556e69737761705632526f757465723a20455850495245440000000000000000604482015290519081900360640190fd5b611a8c7f0000000000000000000000000000000000000000000000000000000000000000898888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506133cf92505050565b91508682600081518110611a9c57fe5b602002602001015111156112e0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180613ecc6027913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610c0a84848461355d565b6000808242811015611b9f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f556e69737761705632526f757465723a20455850495245440000000000000000604482015290519081900360640190fd5b6000611bcc7f00000000000000000000000000000000000000000000000000000000000000008c8c612e8d565b604080517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff831660248201819052604482018d9052915192935090916323b872dd916064808201926020929091908290030181600087803b158015611c4d57600080fd5b505af1158015611c61573d6000803e3d6000fd5b505050506040513d6020811015611c7757600080fd5b5050604080517f89afcb4400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015282516000938493928616926389afcb44926024808301939282900301818787803b158015611cea57600080fd5b505af1158015611cfe573d6000803e3d6000fd5b505050506040513d6040811015611d1457600080fd5b50805160209091015190925090506000611d2e8e8e61363d565b5090508073ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff1614611d6b578183611d6e565b82825b90975095508a871015611dcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613ef36026913960400191505060405180910390fd5b89861015611e25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613e596026913960400191505060405180910390fd5b505050505097509795505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606110577f00000000000000000000000000000000000000000000000000000000000000008484612d27565b6000806000611ed77f00000000000000000000000000000000000000000000000000000000000000008e7f0000000000000000000000000000000000000000000000000000000000000000612e8d565b9050600087611ee6578c611f08565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b604080517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052606481018c905260ff8a16608482015260a4810189905260c48101889052905191925073ffffffffffffffffffffffffffffffffffffffff84169163d505accf9160e48082019260009290919082900301818387803b158015611fa457600080fd5b505af1158015611fb8573d6000803e3d6000fd5b50505050611fca8e8e8e8e8e8e610aaa565b909f909e509c50505050505050505050505050565b6000806000834281101561205457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f556e69737761705632526f757465723a20455850495245440000000000000000604482015290519081900360640190fd5b6120628c8c8c8c8c8c613790565b909450925060006120947f00000000000000000000000000000000000000000000000000000000000000008e8e612e8d565b90506120a28d338388612f78565b6120ae8c338387612f78565b8073ffffffffffffffffffffffffffffffffffffffff16636a627842886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561212d57600080fd5b505af1158015612141573d6000803e3d6000fd5b505050506040513d602081101561215757600080fd5b5051949d939c50939a509198505050505050505050565b600080600083428110156121e357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f556e69737761705632526f757465723a20455850495245440000000000000000604482015290519081900360640190fd5b6122118a7f00000000000000000000000000000000000000000000000000000000000000008b348c8c613790565b909450925060006122637f00000000000000000000000000000000000000000000000000000000000000008c7f0000000000000000000000000000000000000000000000000000000000000000612e8d565b90506122718b338388612f78565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b1580156122d957600080fd5b505af11580156122ed573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561239957600080fd5b505af11580156123ad573d6000803e3d6000fd5b505050506040513d60208110156123c357600080fd5b50516123cb57fe5b8073ffffffffffffffffffffffffffffffffffffffff16636a627842886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561244a57600080fd5b505af115801561245e573d6000803e3d6000fd5b505050506040513d602081101561247457600080fd5b505192503484101561248c5761248c33853403612ac6565b505096509650969350505050565b6060814281101561250c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f556e69737761705632526f757465723a20455850495245440000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168686600081811061255057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146125ef57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604482015290519081900360640190fd5b61264d7f0000000000000000000000000000000000000000000000000000000000000000888888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506133cf92505050565b9150348260008151811061265d57fe5b602002602001015111156126bc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180613ecc6027913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db08360008151811061270557fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561273857600080fd5b505af115801561274c573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6127be7f00000000000000000000000000000000000000000000000000000000000000008989600081811061189957fe5b846000815181106127cb57fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561283c57600080fd5b505af1158015612850573d6000803e3d6000fd5b505050506040513d602081101561286657600080fd5b505161286e57fe5b6128ad82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250613148915050565b816000815181106128ba57fe5b60200260200101513411156119b2576119b233836000815181106128da57fe5b60200260200101513403612ac6565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b602083106129bf57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612982565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612a21576040519150601f19603f3d011682016040523d82523d6000602084013e612a26565b606091505b5091509150818015612a54575080511580612a545750808060200190516020811015612a5157600080fd5b50515b612abf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b5050505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b60208310612b3d57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612b00565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612b9f576040519150601f19603f3d011682016040523d82523d6000602084013e612ba4565b606091505b5050905080612bfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180613f196023913960400191505060405180910390fd5b505050565b6000808411612c5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180613f8b602b913960400191505060405180910390fd5b600083118015612c6d5750600082115b612cc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180613e7f6028913960400191505060405180910390fd5b6000612cd6856103e563ffffffff613a9116565b90506000612cea828563ffffffff613a9116565b90506000612d1083612d04886103e863ffffffff613a9116565b9063ffffffff613b1716565b9050808281612d1b57fe5b04979650505050505050565b6060600282511015612d9a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604482015290519081900360640190fd5b815167ffffffffffffffff81118015612db257600080fd5b50604051908082528060200260200182016040528015612ddc578160200160208202803683370190505b5090508281600081518110612ded57fe5b60200260200101818152505060005b6001835103811015612e8557600080612e3f87868581518110612e1b57fe5b6020026020010151878660010181518110612e3257fe5b6020026020010151613b89565b91509150612e61848481518110612e5257fe5b60200260200101518383612c03565b848460010181518110612e7057fe5b60209081029190910101525050600101612dfc565b509392505050565b6000806000612e9c858561363d565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501207fff0000000000000000000000000000000000000000000000000000000000000060688401529a90941b9093166069840152607d8301989098527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b6020831061305657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613019565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146130b8576040519150601f19603f3d011682016040523d82523d6000602084013e6130bd565b606091505b50915091508180156130eb5750805115806130eb57508080602001905160208110156130e857600080fd5b50515b613140576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180613f676024913960400191505060405180910390fd5b505050505050565b60005b60018351038110156133c95760008084838151811061316657fe5b602002602001015185846001018151811061317d57fe5b6020026020010151915091506000613195838361363d565b50905060008785600101815181106131a957fe5b602002602001015190506000808373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146131f1578260006131f5565b6000835b91509150600060028a5103881061320c578861324d565b61324d7f0000000000000000000000000000000000000000000000000000000000000000878c8b6002018151811061324057fe5b6020026020010151612e8d565b905061327a7f00000000000000000000000000000000000000000000000000000000000000008888612e8d565b73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f84848460006040519080825280601f01601f1916602001820160405280156132c4576020820181803683370190505b506040518563ffffffff1660e01b8152600401808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561334f578181015183820152602001613337565b50505050905090810190601f16801561337c5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561339e57600080fd5b505af11580156133b2573d6000803e3d6000fd5b50506001909901985061314b975050505050505050565b50505050565b606060028251101561344257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604482015290519081900360640190fd5b815167ffffffffffffffff8111801561345a57600080fd5b50604051908082528060200260200182016040528015613484578160200160208202803683370190505b509050828160018351038151811061349857fe5b602090810291909101015281517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff015b8015612e85576000806134f8878660018603815181106134e457fe5b6020026020010151878681518110612e3257fe5b9150915061351a84848151811061350b57fe5b60200260200101518383613c71565b84600185038151811061352957fe5b602090810291909101015250507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016134c8565b60008084116135b7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180613ea76025913960400191505060405180910390fd5b6000831180156135c75750600082115b61361c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180613e7f6028913960400191505060405180910390fd5b8261362d858463ffffffff613a9116565b8161363457fe5b04949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156136c5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180613e346025913960400191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16106136ff578284613702565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff821661378957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604482015290519081900360640190fd5b9250929050565b604080517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015287811660248301529151600092839283927f00000000000000000000000000000000000000000000000000000000000000009092169163e6a4390591604480820192602092909190829003018186803b15801561383057600080fd5b505afa158015613844573d6000803e3d6000fd5b505050506040513d602081101561385a57600080fd5b505173ffffffffffffffffffffffffffffffffffffffff16141561394057604080517fc9c6539600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152898116602483015291517f00000000000000000000000000000000000000000000000000000000000000009092169163c9c65396916044808201926020929091908290030181600087803b15801561391357600080fd5b505af1158015613927573d6000803e3d6000fd5b505050506040513d602081101561393d57600080fd5b50505b60008061396e7f00000000000000000000000000000000000000000000000000000000000000008b8b613b89565b91509150816000148015613980575080155b1561399057879350869250613a84565b600061399d89848461355d565b9050878111613a0a57858110156139ff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613e596026913960400191505060405180910390fd5b889450925082613a82565b6000613a1789848661355d565b905089811115613a2357fe5b87811015613a7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613ef36026913960400191505060405180910390fd5b94508793505b505b5050965096945050505050565b6000811580613aac57505080820282828281613aa957fe5b04145b61105a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b8082018281101561105a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b6000806000613b98858561363d565b509050600080613ba9888888612e8d565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015613bee57600080fd5b505afa158015613c02573d6000803e3d6000fd5b505050506040513d6060811015613c1857600080fd5b5080516020909101516dffffffffffffffffffffffffffff918216935016905073ffffffffffffffffffffffffffffffffffffffff87811690841614613c5f578082613c62565b81815b90999098509650505050505050565b6000808411613ccb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180613e08602c913960400191505060405180910390fd5b600083118015613cdb5750600082115b613d30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180613e7f6028913960400191505060405180910390fd5b6000613d546103e8613d48868863ffffffff613a9116565b9063ffffffff613a9116565b90506000613d6e6103e5613d48868963ffffffff613d9516565b9050613d8b6001828481613d7e57fe5b049063ffffffff613b1716565b9695505050505050565b8082038281111561105a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fdfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e54556e697377617056324c6962726172793a204944454e544943414c5f414444524553534553556e69737761705632526f757465723a20494e53554646494349454e545f425f414d4f554e54556e697377617056324c6962726172793a20494e53554646494349454e545f4c4951554944495459556e697377617056324c6962726172793a20494e53554646494349454e545f414d4f554e54556e69737761705632526f757465723a204558434553534956455f494e5055545f414d4f554e54556e69737761705632526f757465723a20494e53554646494349454e545f415f414d4f554e545472616e7366657248656c7065723a204554485f5452414e534645525f4641494c4544556e69737761705632526f757465723a20494e53554646494349454e545f4f55545055545f414d4f554e545472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544556e697377617056324c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e54a2646970667358221220b430cc168eec157f24fadd56d0b90b2652ce5b0abb39cf9d64713138a400fb8c64736f6c63430006060033";
+
+export class UniswapV2Router01__factory extends ContractFactory {
+  constructor(signer?: Signer) {
+    super(_abi, _bytecode, signer);
+  }
+
+  deploy(
+    _factory: string,
+    _WETH: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<UniswapV2Router01> {
+    return super.deploy(
+      _factory,
+      _WETH,
+      overrides || {}
+    ) as Promise<UniswapV2Router01>;
+  }
+  getDeployTransaction(
+    _factory: string,
+    _WETH: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): TransactionRequest {
+    return super.getDeployTransaction(_factory, _WETH, overrides || {});
+  }
+  attach(address: string): UniswapV2Router01 {
+    return super.attach(address) as UniswapV2Router01;
+  }
+  connect(signer: Signer): UniswapV2Router01__factory {
+    return super.connect(signer) as UniswapV2Router01__factory;
+  }
+  static readonly bytecode = _bytecode;
+  static readonly abi = _abi;
+  static createInterface(): UniswapV2Router01Interface {
+    return new utils.Interface(_abi) as UniswapV2Router01Interface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): UniswapV2Router01 {
+    return new Contract(address, _abi, signerOrProvider) as UniswapV2Router01;
+  }
+}
diff --git a/lib/sor/types/v2/factories/UniswapV2Router02__factory.ts b/lib/sor/types/v2/factories/UniswapV2Router02__factory.ts
new file mode 100644
index 0000000..802ed3a
--- /dev/null
+++ b/lib/sor/types/v2/factories/UniswapV2Router02__factory.ts
@@ -0,0 +1,1029 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider, TransactionRequest } from "@ethersproject/providers";
+import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
+import type {
+  UniswapV2Router02,
+  UniswapV2Router02Interface,
+} from "../UniswapV2Router02";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "_factory",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "_WETH",
+        type: "address",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "constructor",
+  },
+  {
+    inputs: [],
+    name: "WETH",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenA",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenB",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountADesired",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountBDesired",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountAMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountBMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "addLiquidity",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountA",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountB",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountTokenDesired",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountTokenMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETHMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "addLiquidityETH",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountToken",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETH",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factory",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "reserveIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "reserveOut",
+        type: "uint256",
+      },
+    ],
+    name: "getAmountIn",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "reserveIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "reserveOut",
+        type: "uint256",
+      },
+    ],
+    name: "getAmountOut",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+    ],
+    name: "getAmountsIn",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+    ],
+    name: "getAmountsOut",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountA",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "reserveA",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "reserveB",
+        type: "uint256",
+      },
+    ],
+    name: "quote",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountB",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenA",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenB",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountAMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountBMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "removeLiquidity",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountA",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountB",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountTokenMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETHMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "removeLiquidityETH",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountToken",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETH",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountTokenMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETHMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "removeLiquidityETHSupportingFeeOnTransferTokens",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountETH",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountTokenMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETHMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "bool",
+        name: "approveMax",
+        type: "bool",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "removeLiquidityETHWithPermit",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountToken",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETH",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountTokenMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountETHMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "bool",
+        name: "approveMax",
+        type: "bool",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountETH",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenA",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenB",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "liquidity",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountAMin",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountBMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "bool",
+        name: "approveMax",
+        type: "bool",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "removeLiquidityWithPermit",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountA",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountB",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapETHForExactTokens",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOutMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapExactETHForTokens",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOutMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapExactETHForTokensSupportingFeeOnTransferTokens",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOutMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapExactTokensForETH",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOutMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapExactTokensForETHSupportingFeeOnTransferTokens",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOutMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapExactTokensForTokens",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOutMin",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountInMax",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapTokensForExactETH",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amountInMax",
+        type: "uint256",
+      },
+      {
+        internalType: "address[]",
+        name: "path",
+        type: "address[]",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+    ],
+    name: "swapTokensForExactTokens",
+    outputs: [
+      {
+        internalType: "uint256[]",
+        name: "amounts",
+        type: "uint256[]",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    stateMutability: "payable",
+    type: "receive",
+  },
+];
+
+const _bytecode =
+  "";
+
+export class UniswapV2Router02__factory extends ContractFactory {
+  constructor(signer?: Signer) {
+    super(_abi, _bytecode, signer);
+  }
+
+  deploy(
+    _factory: string,
+    _WETH: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<UniswapV2Router02> {
+    return super.deploy(
+      _factory,
+      _WETH,
+      overrides || {}
+    ) as Promise<UniswapV2Router02>;
+  }
+  getDeployTransaction(
+    _factory: string,
+    _WETH: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): TransactionRequest {
+    return super.getDeployTransaction(_factory, _WETH, overrides || {});
+  }
+  attach(address: string): UniswapV2Router02 {
+    return super.attach(address) as UniswapV2Router02;
+  }
+  connect(signer: Signer): UniswapV2Router02__factory {
+    return super.connect(signer) as UniswapV2Router02__factory;
+  }
+  static readonly bytecode = _bytecode;
+  static readonly abi = _abi;
+  static createInterface(): UniswapV2Router02Interface {
+    return new utils.Interface(_abi) as UniswapV2Router02Interface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): UniswapV2Router02 {
+    return new Contract(address, _abi, signerOrProvider) as UniswapV2Router02;
+  }
+}
diff --git a/lib/sor/types/v2/index.ts b/lib/sor/types/v2/index.ts
new file mode 100644
index 0000000..69d8023
--- /dev/null
+++ b/lib/sor/types/v2/index.ts
@@ -0,0 +1,29 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+export { IUniswapV2Callee__factory } from "./factories/IUniswapV2Callee__factory";
+export { IUniswapV2ERC20__factory } from "./factories/IUniswapV2ERC20__factory";
+export { IUniswapV2Factory__factory } from "./factories/IUniswapV2Factory__factory";
+export { IUniswapV2Migrator__factory } from "./factories/IUniswapV2Migrator__factory";
+export { IUniswapV2Pair__factory } from "./factories/IUniswapV2Pair__factory";
+export { IUniswapV2Router01__factory } from "./factories/IUniswapV2Router01__factory";
+export { IUniswapV2Router02__factory } from "./factories/IUniswapV2Router02__factory";
+export { UniswapV2ERC20__factory } from "./factories/UniswapV2ERC20__factory";
+export { UniswapV2Factory__factory } from "./factories/UniswapV2Factory__factory";
+export { UniswapV2Migrator__factory } from "./factories/UniswapV2Migrator__factory";
+export { UniswapV2Pair__factory } from "./factories/UniswapV2Pair__factory";
+export { UniswapV2Router01__factory } from "./factories/UniswapV2Router01__factory";
+export { UniswapV2Router02__factory } from "./factories/UniswapV2Router02__factory";
+export type { IUniswapV2Callee } from "./IUniswapV2Callee";
+export type { IUniswapV2ERC20 } from "./IUniswapV2ERC20";
+export type { IUniswapV2Factory } from "./IUniswapV2Factory";
+export type { IUniswapV2Migrator } from "./IUniswapV2Migrator";
+export type { IUniswapV2Pair } from "./IUniswapV2Pair";
+export type { IUniswapV2Router01 } from "./IUniswapV2Router01";
+export type { IUniswapV2Router02 } from "./IUniswapV2Router02";
+export type { UniswapV2ERC20 } from "./UniswapV2ERC20";
+export type { UniswapV2Factory } from "./UniswapV2Factory";
+export type { UniswapV2Migrator } from "./UniswapV2Migrator";
+export type { UniswapV2Pair } from "./UniswapV2Pair";
+export type { UniswapV2Router01 } from "./UniswapV2Router01";
+export type { UniswapV2Router02 } from "./UniswapV2Router02";
diff --git a/lib/sor/types/v3/IERC1271.d.ts b/lib/sor/types/v3/IERC1271.d.ts
new file mode 100644
index 0000000..af53d36
--- /dev/null
+++ b/lib/sor/types/v3/IERC1271.d.ts
@@ -0,0 +1,118 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  CallOverrides,
+  ethers,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IERC1271Interface extends ethers.utils.Interface {
+  functions: {
+    "isValidSignature(bytes32,bytes)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "isValidSignature",
+    values: [BytesLike, BytesLike]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "isValidSignature",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class IERC1271 extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IERC1271Interface;
+
+  functions: {
+    isValidSignature(
+      hash: BytesLike,
+      signature: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<[string] & { magicValue: string }>;
+  };
+
+  isValidSignature(
+    hash: BytesLike,
+    signature: BytesLike,
+    overrides?: CallOverrides
+  ): Promise<string>;
+
+  callStatic: {
+    isValidSignature(
+      hash: BytesLike,
+      signature: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<string>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    isValidSignature(
+      hash: BytesLike,
+      signature: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    isValidSignature(
+      hash: BytesLike,
+      signature: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/IERC20Metadata.d.ts b/lib/sor/types/v3/IERC20Metadata.d.ts
new file mode 100644
index 0000000..817b9f2
--- /dev/null
+++ b/lib/sor/types/v3/IERC20Metadata.d.ts
@@ -0,0 +1,332 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IERC20MetadataInterface extends ethers.utils.Interface {
+  functions: {
+    "allowance(address,address)": FunctionFragment;
+    "approve(address,uint256)": FunctionFragment;
+    "balanceOf(address)": FunctionFragment;
+    "decimals()": FunctionFragment;
+    "name()": FunctionFragment;
+    "symbol()": FunctionFragment;
+    "totalSupply()": FunctionFragment;
+    "transfer(address,uint256)": FunctionFragment;
+    "transferFrom(address,address,uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "allowance",
+    values: [string, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "approve",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
+  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
+  encodeFunctionData(functionFragment: "name", values?: undefined): string;
+  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "totalSupply",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "transfer",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "transferFrom",
+    values: [string, string, BigNumberish]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "totalSupply",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "transferFrom",
+    data: BytesLike
+  ): Result;
+
+  events: {
+    "Approval(address,address,uint256)": EventFragment;
+    "Transfer(address,address,uint256)": EventFragment;
+  };
+
+  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
+}
+
+export class IERC20Metadata extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IERC20MetadataInterface;
+
+  functions: {
+    allowance(
+      owner: string,
+      spender: string,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber]>;
+
+    approve(
+      spender: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    decimals(overrides?: CallOverrides): Promise<[number]>;
+
+    name(overrides?: CallOverrides): Promise<[string]>;
+
+    symbol(overrides?: CallOverrides): Promise<[string]>;
+
+    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    transfer(
+      recipient: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    transferFrom(
+      sender: string,
+      recipient: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  allowance(
+    owner: string,
+    spender: string,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  approve(
+    spender: string,
+    amount: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+  decimals(overrides?: CallOverrides): Promise<number>;
+
+  name(overrides?: CallOverrides): Promise<string>;
+
+  symbol(overrides?: CallOverrides): Promise<string>;
+
+  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+  transfer(
+    recipient: string,
+    amount: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  transferFrom(
+    sender: string,
+    recipient: string,
+    amount: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    allowance(
+      owner: string,
+      spender: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    approve(
+      spender: string,
+      amount: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    decimals(overrides?: CallOverrides): Promise<number>;
+
+    name(overrides?: CallOverrides): Promise<string>;
+
+    symbol(overrides?: CallOverrides): Promise<string>;
+
+    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+    transfer(
+      recipient: string,
+      amount: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    transferFrom(
+      sender: string,
+      recipient: string,
+      amount: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+  };
+
+  filters: {
+    Approval(
+      owner?: string | null,
+      spender?: string | null,
+      value?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber],
+      { owner: string; spender: string; value: BigNumber }
+    >;
+
+    Transfer(
+      from?: string | null,
+      to?: string | null,
+      value?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber],
+      { from: string; to: string; value: BigNumber }
+    >;
+  };
+
+  estimateGas: {
+    allowance(
+      owner: string,
+      spender: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    approve(
+      spender: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    decimals(overrides?: CallOverrides): Promise<BigNumber>;
+
+    name(overrides?: CallOverrides): Promise<BigNumber>;
+
+    symbol(overrides?: CallOverrides): Promise<BigNumber>;
+
+    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+    transfer(
+      recipient: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    transferFrom(
+      sender: string,
+      recipient: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    allowance(
+      owner: string,
+      spender: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    approve(
+      spender: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    balanceOf(
+      account: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    transfer(
+      recipient: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    transferFrom(
+      sender: string,
+      recipient: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/IERC20Minimal.d.ts b/lib/sor/types/v3/IERC20Minimal.d.ts
new file mode 100644
index 0000000..07f9349
--- /dev/null
+++ b/lib/sor/types/v3/IERC20Minimal.d.ts
@@ -0,0 +1,274 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IERC20MinimalInterface extends ethers.utils.Interface {
+  functions: {
+    "allowance(address,address)": FunctionFragment;
+    "approve(address,uint256)": FunctionFragment;
+    "balanceOf(address)": FunctionFragment;
+    "transfer(address,uint256)": FunctionFragment;
+    "transferFrom(address,address,uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "allowance",
+    values: [string, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "approve",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
+  encodeFunctionData(
+    functionFragment: "transfer",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "transferFrom",
+    values: [string, string, BigNumberish]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "transferFrom",
+    data: BytesLike
+  ): Result;
+
+  events: {
+    "Approval(address,address,uint256)": EventFragment;
+    "Transfer(address,address,uint256)": EventFragment;
+  };
+
+  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
+}
+
+export class IERC20Minimal extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IERC20MinimalInterface;
+
+  functions: {
+    allowance(
+      owner: string,
+      spender: string,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber]>;
+
+    approve(
+      spender: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    transfer(
+      recipient: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    transferFrom(
+      sender: string,
+      recipient: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  allowance(
+    owner: string,
+    spender: string,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  approve(
+    spender: string,
+    amount: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+  transfer(
+    recipient: string,
+    amount: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  transferFrom(
+    sender: string,
+    recipient: string,
+    amount: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    allowance(
+      owner: string,
+      spender: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    approve(
+      spender: string,
+      amount: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    transfer(
+      recipient: string,
+      amount: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    transferFrom(
+      sender: string,
+      recipient: string,
+      amount: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+  };
+
+  filters: {
+    Approval(
+      owner?: string | null,
+      spender?: string | null,
+      value?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber],
+      { owner: string; spender: string; value: BigNumber }
+    >;
+
+    Transfer(
+      from?: string | null,
+      to?: string | null,
+      value?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber],
+      { from: string; to: string; value: BigNumber }
+    >;
+  };
+
+  estimateGas: {
+    allowance(
+      owner: string,
+      spender: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    approve(
+      spender: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    transfer(
+      recipient: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    transferFrom(
+      sender: string,
+      recipient: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    allowance(
+      owner: string,
+      spender: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    approve(
+      spender: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    balanceOf(
+      account: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    transfer(
+      recipient: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    transferFrom(
+      sender: string,
+      recipient: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/IERC20PermitAllowed.d.ts b/lib/sor/types/v3/IERC20PermitAllowed.d.ts
new file mode 100644
index 0000000..c77a14e
--- /dev/null
+++ b/lib/sor/types/v3/IERC20PermitAllowed.d.ts
@@ -0,0 +1,157 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IERC20PermitAllowedInterface extends ethers.utils.Interface {
+  functions: {
+    "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "permit",
+    values: [
+      string,
+      string,
+      BigNumberish,
+      BigNumberish,
+      boolean,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
+
+  events: {};
+}
+
+export class IERC20PermitAllowed extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IERC20PermitAllowedInterface;
+
+  functions: {
+    permit(
+      holder: string,
+      spender: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      allowed: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  permit(
+    holder: string,
+    spender: string,
+    nonce: BigNumberish,
+    expiry: BigNumberish,
+    allowed: boolean,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    permit(
+      holder: string,
+      spender: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      allowed: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    permit(
+      holder: string,
+      spender: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      allowed: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    permit(
+      holder: string,
+      spender: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      allowed: boolean,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/IERC721Permit.d.ts b/lib/sor/types/v3/IERC721Permit.d.ts
new file mode 100644
index 0000000..caa9c5e
--- /dev/null
+++ b/lib/sor/types/v3/IERC721Permit.d.ts
@@ -0,0 +1,573 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IERC721PermitInterface extends ethers.utils.Interface {
+  functions: {
+    "DOMAIN_SEPARATOR()": FunctionFragment;
+    "PERMIT_TYPEHASH()": FunctionFragment;
+    "approve(address,uint256)": FunctionFragment;
+    "balanceOf(address)": FunctionFragment;
+    "getApproved(uint256)": FunctionFragment;
+    "isApprovedForAll(address,address)": FunctionFragment;
+    "ownerOf(uint256)": FunctionFragment;
+    "permit(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "safeTransferFrom(address,address,uint256)": FunctionFragment;
+    "setApprovalForAll(address,bool)": FunctionFragment;
+    "supportsInterface(bytes4)": FunctionFragment;
+    "transferFrom(address,address,uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "DOMAIN_SEPARATOR",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "PERMIT_TYPEHASH",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "approve",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
+  encodeFunctionData(
+    functionFragment: "getApproved",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "isApprovedForAll",
+    values: [string, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "ownerOf",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "permit",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "safeTransferFrom",
+    values: [string, string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "setApprovalForAll",
+    values: [string, boolean]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "supportsInterface",
+    values: [BytesLike]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "transferFrom",
+    values: [string, string, BigNumberish]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "DOMAIN_SEPARATOR",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "PERMIT_TYPEHASH",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "getApproved",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "isApprovedForAll",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "safeTransferFrom",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "setApprovalForAll",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "supportsInterface",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "transferFrom",
+    data: BytesLike
+  ): Result;
+
+  events: {
+    "Approval(address,address,uint256)": EventFragment;
+    "ApprovalForAll(address,address,bool)": EventFragment;
+    "Transfer(address,address,uint256)": EventFragment;
+  };
+
+  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
+}
+
+export class IERC721Permit extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IERC721PermitInterface;
+
+  functions: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;
+
+    approve(
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    balanceOf(
+      owner: string,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber] & { balance: BigNumber }>;
+
+    getApproved(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[string] & { operator: string }>;
+
+    isApprovedForAll(
+      owner: string,
+      operator: string,
+      overrides?: CallOverrides
+    ): Promise<[boolean]>;
+
+    ownerOf(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[string] & { owner: string }>;
+
+    permit(
+      spender: string,
+      tokenId: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "safeTransferFrom(address,address,uint256)"(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "safeTransferFrom(address,address,uint256,bytes)"(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    setApprovalForAll(
+      operator: string,
+      _approved: boolean,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    supportsInterface(
+      interfaceId: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<[boolean]>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;
+
+  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;
+
+  approve(
+    to: string,
+    tokenId: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+  getApproved(
+    tokenId: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<string>;
+
+  isApprovedForAll(
+    owner: string,
+    operator: string,
+    overrides?: CallOverrides
+  ): Promise<boolean>;
+
+  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;
+
+  permit(
+    spender: string,
+    tokenId: BigNumberish,
+    deadline: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "safeTransferFrom(address,address,uint256)"(
+    from: string,
+    to: string,
+    tokenId: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "safeTransferFrom(address,address,uint256,bytes)"(
+    from: string,
+    to: string,
+    tokenId: BigNumberish,
+    data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  setApprovalForAll(
+    operator: string,
+    _approved: boolean,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  supportsInterface(
+    interfaceId: BytesLike,
+    overrides?: CallOverrides
+  ): Promise<boolean>;
+
+  transferFrom(
+    from: string,
+    to: string,
+    tokenId: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;
+
+    approve(
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    getApproved(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<string>;
+
+    isApprovedForAll(
+      owner: string,
+      operator: string,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;
+
+    permit(
+      spender: string,
+      tokenId: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "safeTransferFrom(address,address,uint256)"(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "safeTransferFrom(address,address,uint256,bytes)"(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    setApprovalForAll(
+      operator: string,
+      _approved: boolean,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    supportsInterface(
+      interfaceId: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {
+    Approval(
+      owner?: string | null,
+      approved?: string | null,
+      tokenId?: BigNumberish | null
+    ): TypedEventFilter<
+      [string, string, BigNumber],
+      { owner: string; approved: string; tokenId: BigNumber }
+    >;
+
+    ApprovalForAll(
+      owner?: string | null,
+      operator?: string | null,
+      approved?: null
+    ): TypedEventFilter<
+      [string, string, boolean],
+      { owner: string; operator: string; approved: boolean }
+    >;
+
+    Transfer(
+      from?: string | null,
+      to?: string | null,
+      tokenId?: BigNumberish | null
+    ): TypedEventFilter<
+      [string, string, BigNumber],
+      { from: string; to: string; tokenId: BigNumber }
+    >;
+  };
+
+  estimateGas: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;
+
+    approve(
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    getApproved(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    isApprovedForAll(
+      owner: string,
+      operator: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    ownerOf(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    permit(
+      spender: string,
+      tokenId: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "safeTransferFrom(address,address,uint256)"(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "safeTransferFrom(address,address,uint256,bytes)"(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    setApprovalForAll(
+      operator: string,
+      _approved: boolean,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    supportsInterface(
+      interfaceId: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    approve(
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    balanceOf(
+      owner: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    getApproved(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    isApprovedForAll(
+      owner: string,
+      operator: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    ownerOf(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    permit(
+      spender: string,
+      tokenId: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "safeTransferFrom(address,address,uint256)"(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "safeTransferFrom(address,address,uint256,bytes)"(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    setApprovalForAll(
+      operator: string,
+      _approved: boolean,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    supportsInterface(
+      interfaceId: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/IMulticall.d.ts b/lib/sor/types/v3/IMulticall.d.ts
new file mode 100644
index 0000000..87c9a3b
--- /dev/null
+++ b/lib/sor/types/v3/IMulticall.d.ts
@@ -0,0 +1,109 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IMulticallInterface extends ethers.utils.Interface {
+  functions: {
+    "multicall(bytes[])": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "multicall",
+    values: [BytesLike[]]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
+
+  events: {};
+}
+
+export class IMulticall extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IMulticallInterface;
+
+  functions: {
+    multicall(
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  multicall(
+    data: BytesLike[],
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    multicall(
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    multicall(
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/INonfungiblePositionManager.d.ts b/lib/sor/types/v3/INonfungiblePositionManager.d.ts
new file mode 100644
index 0000000..907edc4
--- /dev/null
+++ b/lib/sor/types/v3/INonfungiblePositionManager.d.ts
@@ -0,0 +1,1418 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface INonfungiblePositionManagerInterface extends ethers.utils.Interface {
+  functions: {
+    "DOMAIN_SEPARATOR()": FunctionFragment;
+    "PERMIT_TYPEHASH()": FunctionFragment;
+    "WETH9()": FunctionFragment;
+    "approve(address,uint256)": FunctionFragment;
+    "balanceOf(address)": FunctionFragment;
+    "burn(uint256)": FunctionFragment;
+    "collect(tuple)": FunctionFragment;
+    "createAndInitializePoolIfNecessary(address,address,uint24,uint160)": FunctionFragment;
+    "decreaseLiquidity(tuple)": FunctionFragment;
+    "factory()": FunctionFragment;
+    "getApproved(uint256)": FunctionFragment;
+    "increaseLiquidity(tuple)": FunctionFragment;
+    "isApprovedForAll(address,address)": FunctionFragment;
+    "mint(tuple)": FunctionFragment;
+    "name()": FunctionFragment;
+    "ownerOf(uint256)": FunctionFragment;
+    "permit(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "positions(uint256)": FunctionFragment;
+    "refundETH()": FunctionFragment;
+    "safeTransferFrom(address,address,uint256)": FunctionFragment;
+    "setApprovalForAll(address,bool)": FunctionFragment;
+    "supportsInterface(bytes4)": FunctionFragment;
+    "sweepToken(address,uint256,address)": FunctionFragment;
+    "symbol()": FunctionFragment;
+    "tokenByIndex(uint256)": FunctionFragment;
+    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
+    "tokenURI(uint256)": FunctionFragment;
+    "totalSupply()": FunctionFragment;
+    "transferFrom(address,address,uint256)": FunctionFragment;
+    "unwrapWETH9(uint256,address)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "DOMAIN_SEPARATOR",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "PERMIT_TYPEHASH",
+    values?: undefined
+  ): string;
+  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "approve",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
+  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
+  encodeFunctionData(
+    functionFragment: "collect",
+    values: [
+      {
+        tokenId: BigNumberish;
+        recipient: string;
+        amount0Max: BigNumberish;
+        amount1Max: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "createAndInitializePoolIfNecessary",
+    values: [string, string, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "decreaseLiquidity",
+    values: [
+      {
+        tokenId: BigNumberish;
+        liquidity: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        deadline: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "getApproved",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "increaseLiquidity",
+    values: [
+      {
+        tokenId: BigNumberish;
+        amount0Desired: BigNumberish;
+        amount1Desired: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        deadline: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "isApprovedForAll",
+    values: [string, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "mint",
+    values: [
+      {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Desired: BigNumberish;
+        amount1Desired: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(functionFragment: "name", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "ownerOf",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "permit",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "positions",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "refundETH", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "safeTransferFrom",
+    values: [string, string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "setApprovalForAll",
+    values: [string, boolean]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "supportsInterface",
+    values: [BytesLike]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "sweepToken",
+    values: [string, BigNumberish, string]
+  ): string;
+  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "tokenByIndex",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "tokenOfOwnerByIndex",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "tokenURI",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "totalSupply",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "transferFrom",
+    values: [string, string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "unwrapWETH9",
+    values: [BigNumberish, string]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "DOMAIN_SEPARATOR",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "PERMIT_TYPEHASH",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "createAndInitializePoolIfNecessary",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "decreaseLiquidity",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "getApproved",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "increaseLiquidity",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "isApprovedForAll",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "refundETH", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "safeTransferFrom",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "setApprovalForAll",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "supportsInterface",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "tokenByIndex",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "tokenOfOwnerByIndex",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "totalSupply",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "transferFrom",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "unwrapWETH9",
+    data: BytesLike
+  ): Result;
+
+  events: {
+    "Approval(address,address,uint256)": EventFragment;
+    "ApprovalForAll(address,address,bool)": EventFragment;
+    "Collect(uint256,address,uint256,uint256)": EventFragment;
+    "DecreaseLiquidity(uint256,uint128,uint256,uint256)": EventFragment;
+    "IncreaseLiquidity(uint256,uint128,uint256,uint256)": EventFragment;
+    "Transfer(address,address,uint256)": EventFragment;
+  };
+
+  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Collect"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "DecreaseLiquidity"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "IncreaseLiquidity"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
+}
+
+export class INonfungiblePositionManager extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: INonfungiblePositionManagerInterface;
+
+  functions: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;
+
+    WETH9(overrides?: CallOverrides): Promise<[string]>;
+
+    approve(
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    balanceOf(
+      owner: string,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber] & { balance: BigNumber }>;
+
+    burn(
+      tokenId: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    collect(
+      params: {
+        tokenId: BigNumberish;
+        recipient: string;
+        amount0Max: BigNumberish;
+        amount1Max: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    createAndInitializePoolIfNecessary(
+      token0: string,
+      token1: string,
+      fee: BigNumberish,
+      sqrtPriceX96: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    decreaseLiquidity(
+      params: {
+        tokenId: BigNumberish;
+        liquidity: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        deadline: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<[string]>;
+
+    getApproved(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[string] & { operator: string }>;
+
+    increaseLiquidity(
+      params: {
+        tokenId: BigNumberish;
+        amount0Desired: BigNumberish;
+        amount1Desired: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        deadline: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    isApprovedForAll(
+      owner: string,
+      operator: string,
+      overrides?: CallOverrides
+    ): Promise<[boolean]>;
+
+    mint(
+      params: {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Desired: BigNumberish;
+        amount1Desired: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    name(overrides?: CallOverrides): Promise<[string]>;
+
+    ownerOf(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[string] & { owner: string }>;
+
+    permit(
+      spender: string,
+      tokenId: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    positions(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [
+        BigNumber,
+        string,
+        string,
+        string,
+        number,
+        number,
+        number,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber
+      ] & {
+        nonce: BigNumber;
+        operator: string;
+        token0: string;
+        token1: string;
+        fee: number;
+        tickLower: number;
+        tickUpper: number;
+        liquidity: BigNumber;
+        feeGrowthInside0LastX128: BigNumber;
+        feeGrowthInside1LastX128: BigNumber;
+        tokensOwed0: BigNumber;
+        tokensOwed1: BigNumber;
+      }
+    >;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "safeTransferFrom(address,address,uint256)"(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "safeTransferFrom(address,address,uint256,bytes)"(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    setApprovalForAll(
+      operator: string,
+      _approved: boolean,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    supportsInterface(
+      interfaceId: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<[boolean]>;
+
+    sweepToken(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    symbol(overrides?: CallOverrides): Promise<[string]>;
+
+    tokenByIndex(
+      index: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber]>;
+
+    tokenOfOwnerByIndex(
+      owner: string,
+      index: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber] & { tokenId: BigNumber }>;
+
+    tokenURI(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[string]>;
+
+    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    unwrapWETH9(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;
+
+  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;
+
+  WETH9(overrides?: CallOverrides): Promise<string>;
+
+  approve(
+    to: string,
+    tokenId: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+  burn(
+    tokenId: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  collect(
+    params: {
+      tokenId: BigNumberish;
+      recipient: string;
+      amount0Max: BigNumberish;
+      amount1Max: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  createAndInitializePoolIfNecessary(
+    token0: string,
+    token1: string,
+    fee: BigNumberish,
+    sqrtPriceX96: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  decreaseLiquidity(
+    params: {
+      tokenId: BigNumberish;
+      liquidity: BigNumberish;
+      amount0Min: BigNumberish;
+      amount1Min: BigNumberish;
+      deadline: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  factory(overrides?: CallOverrides): Promise<string>;
+
+  getApproved(
+    tokenId: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<string>;
+
+  increaseLiquidity(
+    params: {
+      tokenId: BigNumberish;
+      amount0Desired: BigNumberish;
+      amount1Desired: BigNumberish;
+      amount0Min: BigNumberish;
+      amount1Min: BigNumberish;
+      deadline: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  isApprovedForAll(
+    owner: string,
+    operator: string,
+    overrides?: CallOverrides
+  ): Promise<boolean>;
+
+  mint(
+    params: {
+      token0: string;
+      token1: string;
+      fee: BigNumberish;
+      tickLower: BigNumberish;
+      tickUpper: BigNumberish;
+      amount0Desired: BigNumberish;
+      amount1Desired: BigNumberish;
+      amount0Min: BigNumberish;
+      amount1Min: BigNumberish;
+      recipient: string;
+      deadline: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  name(overrides?: CallOverrides): Promise<string>;
+
+  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;
+
+  permit(
+    spender: string,
+    tokenId: BigNumberish,
+    deadline: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  positions(
+    tokenId: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<
+    [
+      BigNumber,
+      string,
+      string,
+      string,
+      number,
+      number,
+      number,
+      BigNumber,
+      BigNumber,
+      BigNumber,
+      BigNumber,
+      BigNumber
+    ] & {
+      nonce: BigNumber;
+      operator: string;
+      token0: string;
+      token1: string;
+      fee: number;
+      tickLower: number;
+      tickUpper: number;
+      liquidity: BigNumber;
+      feeGrowthInside0LastX128: BigNumber;
+      feeGrowthInside1LastX128: BigNumber;
+      tokensOwed0: BigNumber;
+      tokensOwed1: BigNumber;
+    }
+  >;
+
+  refundETH(
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "safeTransferFrom(address,address,uint256)"(
+    from: string,
+    to: string,
+    tokenId: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "safeTransferFrom(address,address,uint256,bytes)"(
+    from: string,
+    to: string,
+    tokenId: BigNumberish,
+    data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  setApprovalForAll(
+    operator: string,
+    _approved: boolean,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  supportsInterface(
+    interfaceId: BytesLike,
+    overrides?: CallOverrides
+  ): Promise<boolean>;
+
+  sweepToken(
+    token: string,
+    amountMinimum: BigNumberish,
+    recipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  symbol(overrides?: CallOverrides): Promise<string>;
+
+  tokenByIndex(
+    index: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  tokenOfOwnerByIndex(
+    owner: string,
+    index: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;
+
+  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+  transferFrom(
+    from: string,
+    to: string,
+    tokenId: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  unwrapWETH9(
+    amountMinimum: BigNumberish,
+    recipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;
+
+    WETH9(overrides?: CallOverrides): Promise<string>;
+
+    approve(
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;
+
+    collect(
+      params: {
+        tokenId: BigNumberish;
+        recipient: string;
+        amount0Max: BigNumberish;
+        amount1Max: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
+    >;
+
+    createAndInitializePoolIfNecessary(
+      token0: string,
+      token1: string,
+      fee: BigNumberish,
+      sqrtPriceX96: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<string>;
+
+    decreaseLiquidity(
+      params: {
+        tokenId: BigNumberish;
+        liquidity: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        deadline: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
+    >;
+
+    factory(overrides?: CallOverrides): Promise<string>;
+
+    getApproved(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<string>;
+
+    increaseLiquidity(
+      params: {
+        tokenId: BigNumberish;
+        amount0Desired: BigNumberish;
+        amount1Desired: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        deadline: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, BigNumber] & {
+        liquidity: BigNumber;
+        amount0: BigNumber;
+        amount1: BigNumber;
+      }
+    >;
+
+    isApprovedForAll(
+      owner: string,
+      operator: string,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    mint(
+      params: {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Desired: BigNumberish;
+        amount1Desired: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, BigNumber, BigNumber] & {
+        tokenId: BigNumber;
+        liquidity: BigNumber;
+        amount0: BigNumber;
+        amount1: BigNumber;
+      }
+    >;
+
+    name(overrides?: CallOverrides): Promise<string>;
+
+    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;
+
+    permit(
+      spender: string,
+      tokenId: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    positions(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [
+        BigNumber,
+        string,
+        string,
+        string,
+        number,
+        number,
+        number,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber
+      ] & {
+        nonce: BigNumber;
+        operator: string;
+        token0: string;
+        token1: string;
+        fee: number;
+        tickLower: number;
+        tickUpper: number;
+        liquidity: BigNumber;
+        feeGrowthInside0LastX128: BigNumber;
+        feeGrowthInside1LastX128: BigNumber;
+        tokensOwed0: BigNumber;
+        tokensOwed1: BigNumber;
+      }
+    >;
+
+    refundETH(overrides?: CallOverrides): Promise<void>;
+
+    "safeTransferFrom(address,address,uint256)"(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "safeTransferFrom(address,address,uint256,bytes)"(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    setApprovalForAll(
+      operator: string,
+      _approved: boolean,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    supportsInterface(
+      interfaceId: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    sweepToken(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    symbol(overrides?: CallOverrides): Promise<string>;
+
+    tokenByIndex(
+      index: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    tokenOfOwnerByIndex(
+      owner: string,
+      index: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;
+
+    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    unwrapWETH9(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {
+    Approval(
+      owner?: string | null,
+      approved?: string | null,
+      tokenId?: BigNumberish | null
+    ): TypedEventFilter<
+      [string, string, BigNumber],
+      { owner: string; approved: string; tokenId: BigNumber }
+    >;
+
+    ApprovalForAll(
+      owner?: string | null,
+      operator?: string | null,
+      approved?: null
+    ): TypedEventFilter<
+      [string, string, boolean],
+      { owner: string; operator: string; approved: boolean }
+    >;
+
+    Collect(
+      tokenId?: BigNumberish | null,
+      recipient?: null,
+      amount0?: null,
+      amount1?: null
+    ): TypedEventFilter<
+      [BigNumber, string, BigNumber, BigNumber],
+      {
+        tokenId: BigNumber;
+        recipient: string;
+        amount0: BigNumber;
+        amount1: BigNumber;
+      }
+    >;
+
+    DecreaseLiquidity(
+      tokenId?: BigNumberish | null,
+      liquidity?: null,
+      amount0?: null,
+      amount1?: null
+    ): TypedEventFilter<
+      [BigNumber, BigNumber, BigNumber, BigNumber],
+      {
+        tokenId: BigNumber;
+        liquidity: BigNumber;
+        amount0: BigNumber;
+        amount1: BigNumber;
+      }
+    >;
+
+    IncreaseLiquidity(
+      tokenId?: BigNumberish | null,
+      liquidity?: null,
+      amount0?: null,
+      amount1?: null
+    ): TypedEventFilter<
+      [BigNumber, BigNumber, BigNumber, BigNumber],
+      {
+        tokenId: BigNumber;
+        liquidity: BigNumber;
+        amount0: BigNumber;
+        amount1: BigNumber;
+      }
+    >;
+
+    Transfer(
+      from?: string | null,
+      to?: string | null,
+      tokenId?: BigNumberish | null
+    ): TypedEventFilter<
+      [string, string, BigNumber],
+      { from: string; to: string; tokenId: BigNumber }
+    >;
+  };
+
+  estimateGas: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;
+
+    WETH9(overrides?: CallOverrides): Promise<BigNumber>;
+
+    approve(
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    burn(
+      tokenId: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    collect(
+      params: {
+        tokenId: BigNumberish;
+        recipient: string;
+        amount0Max: BigNumberish;
+        amount1Max: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    createAndInitializePoolIfNecessary(
+      token0: string,
+      token1: string,
+      fee: BigNumberish,
+      sqrtPriceX96: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    decreaseLiquidity(
+      params: {
+        tokenId: BigNumberish;
+        liquidity: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        deadline: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<BigNumber>;
+
+    getApproved(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    increaseLiquidity(
+      params: {
+        tokenId: BigNumberish;
+        amount0Desired: BigNumberish;
+        amount1Desired: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        deadline: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    isApprovedForAll(
+      owner: string,
+      operator: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    mint(
+      params: {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Desired: BigNumberish;
+        amount1Desired: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    name(overrides?: CallOverrides): Promise<BigNumber>;
+
+    ownerOf(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    permit(
+      spender: string,
+      tokenId: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    positions(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "safeTransferFrom(address,address,uint256)"(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "safeTransferFrom(address,address,uint256,bytes)"(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    setApprovalForAll(
+      operator: string,
+      _approved: boolean,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    supportsInterface(
+      interfaceId: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    sweepToken(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    symbol(overrides?: CallOverrides): Promise<BigNumber>;
+
+    tokenByIndex(
+      index: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    tokenOfOwnerByIndex(
+      owner: string,
+      index: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    tokenURI(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    unwrapWETH9(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    WETH9(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    approve(
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    balanceOf(
+      owner: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    burn(
+      tokenId: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    collect(
+      params: {
+        tokenId: BigNumberish;
+        recipient: string;
+        amount0Max: BigNumberish;
+        amount1Max: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    createAndInitializePoolIfNecessary(
+      token0: string,
+      token1: string,
+      fee: BigNumberish,
+      sqrtPriceX96: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    decreaseLiquidity(
+      params: {
+        tokenId: BigNumberish;
+        liquidity: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        deadline: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    getApproved(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    increaseLiquidity(
+      params: {
+        tokenId: BigNumberish;
+        amount0Desired: BigNumberish;
+        amount1Desired: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        deadline: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    isApprovedForAll(
+      owner: string,
+      operator: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    mint(
+      params: {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Desired: BigNumberish;
+        amount1Desired: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    ownerOf(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    permit(
+      spender: string,
+      tokenId: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    positions(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "safeTransferFrom(address,address,uint256)"(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "safeTransferFrom(address,address,uint256,bytes)"(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    setApprovalForAll(
+      operator: string,
+      _approved: boolean,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    supportsInterface(
+      interfaceId: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    sweepToken(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    tokenByIndex(
+      index: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    tokenOfOwnerByIndex(
+      owner: string,
+      index: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    tokenURI(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    unwrapWETH9(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/INonfungibleTokenPositionDescriptor.d.ts b/lib/sor/types/v3/INonfungibleTokenPositionDescriptor.d.ts
new file mode 100644
index 0000000..f5340e1
--- /dev/null
+++ b/lib/sor/types/v3/INonfungibleTokenPositionDescriptor.d.ts
@@ -0,0 +1,117 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ethers,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface INonfungibleTokenPositionDescriptorInterface
+  extends ethers.utils.Interface {
+  functions: {
+    "tokenURI(address,uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "tokenURI",
+    values: [string, BigNumberish]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
+
+  events: {};
+}
+
+export class INonfungibleTokenPositionDescriptor extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: INonfungibleTokenPositionDescriptorInterface;
+
+  functions: {
+    tokenURI(
+      positionManager: string,
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[string]>;
+  };
+
+  tokenURI(
+    positionManager: string,
+    tokenId: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<string>;
+
+  callStatic: {
+    tokenURI(
+      positionManager: string,
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<string>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    tokenURI(
+      positionManager: string,
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    tokenURI(
+      positionManager: string,
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/IPeripheryImmutableState.d.ts b/lib/sor/types/v3/IPeripheryImmutableState.d.ts
new file mode 100644
index 0000000..ca00e44
--- /dev/null
+++ b/lib/sor/types/v3/IPeripheryImmutableState.d.ts
@@ -0,0 +1,105 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  CallOverrides,
+  ethers,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IPeripheryImmutableStateInterface extends ethers.utils.Interface {
+  functions: {
+    "WETH9()": FunctionFragment;
+    "factory()": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
+  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
+
+  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
+
+  events: {};
+}
+
+export class IPeripheryImmutableState extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IPeripheryImmutableStateInterface;
+
+  functions: {
+    WETH9(overrides?: CallOverrides): Promise<[string]>;
+
+    factory(overrides?: CallOverrides): Promise<[string]>;
+  };
+
+  WETH9(overrides?: CallOverrides): Promise<string>;
+
+  factory(overrides?: CallOverrides): Promise<string>;
+
+  callStatic: {
+    WETH9(overrides?: CallOverrides): Promise<string>;
+
+    factory(overrides?: CallOverrides): Promise<string>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    WETH9(overrides?: CallOverrides): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    WETH9(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/IPeripheryPayments.d.ts b/lib/sor/types/v3/IPeripheryPayments.d.ts
new file mode 100644
index 0000000..27328d1
--- /dev/null
+++ b/lib/sor/types/v3/IPeripheryPayments.d.ts
@@ -0,0 +1,183 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IPeripheryPaymentsInterface extends ethers.utils.Interface {
+  functions: {
+    "refundETH()": FunctionFragment;
+    "sweepToken(address,uint256,address)": FunctionFragment;
+    "unwrapWETH9(uint256,address)": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "refundETH", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "sweepToken",
+    values: [string, BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "unwrapWETH9",
+    values: [BigNumberish, string]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "refundETH", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "unwrapWETH9",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class IPeripheryPayments extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IPeripheryPaymentsInterface;
+
+  functions: {
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    sweepToken(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    unwrapWETH9(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  refundETH(
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  sweepToken(
+    token: string,
+    amountMinimum: BigNumberish,
+    recipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  unwrapWETH9(
+    amountMinimum: BigNumberish,
+    recipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    refundETH(overrides?: CallOverrides): Promise<void>;
+
+    sweepToken(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    unwrapWETH9(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    sweepToken(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    unwrapWETH9(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    sweepToken(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    unwrapWETH9(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/IPeripheryPaymentsWithFee.d.ts b/lib/sor/types/v3/IPeripheryPaymentsWithFee.d.ts
new file mode 100644
index 0000000..c7e7e2d
--- /dev/null
+++ b/lib/sor/types/v3/IPeripheryPaymentsWithFee.d.ts
@@ -0,0 +1,286 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IPeripheryPaymentsWithFeeInterface extends ethers.utils.Interface {
+  functions: {
+    "refundETH()": FunctionFragment;
+    "sweepToken(address,uint256,address)": FunctionFragment;
+    "sweepTokenWithFee(address,uint256,address,uint256,address)": FunctionFragment;
+    "unwrapWETH9(uint256,address)": FunctionFragment;
+    "unwrapWETH9WithFee(uint256,address,uint256,address)": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "refundETH", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "sweepToken",
+    values: [string, BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "sweepTokenWithFee",
+    values: [string, BigNumberish, string, BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "unwrapWETH9",
+    values: [BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "unwrapWETH9WithFee",
+    values: [BigNumberish, string, BigNumberish, string]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "refundETH", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "sweepTokenWithFee",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "unwrapWETH9",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "unwrapWETH9WithFee",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class IPeripheryPaymentsWithFee extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IPeripheryPaymentsWithFeeInterface;
+
+  functions: {
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    sweepToken(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    sweepTokenWithFee(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    unwrapWETH9(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    unwrapWETH9WithFee(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  refundETH(
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  sweepToken(
+    token: string,
+    amountMinimum: BigNumberish,
+    recipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  sweepTokenWithFee(
+    token: string,
+    amountMinimum: BigNumberish,
+    recipient: string,
+    feeBips: BigNumberish,
+    feeRecipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  unwrapWETH9(
+    amountMinimum: BigNumberish,
+    recipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  unwrapWETH9WithFee(
+    amountMinimum: BigNumberish,
+    recipient: string,
+    feeBips: BigNumberish,
+    feeRecipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    refundETH(overrides?: CallOverrides): Promise<void>;
+
+    sweepToken(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    sweepTokenWithFee(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    unwrapWETH9(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    unwrapWETH9WithFee(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    sweepToken(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    sweepTokenWithFee(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    unwrapWETH9(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    unwrapWETH9WithFee(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    sweepToken(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    sweepTokenWithFee(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    unwrapWETH9(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    unwrapWETH9WithFee(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/IPoolInitializer.d.ts b/lib/sor/types/v3/IPoolInitializer.d.ts
new file mode 100644
index 0000000..d39c647
--- /dev/null
+++ b/lib/sor/types/v3/IPoolInitializer.d.ts
@@ -0,0 +1,131 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IPoolInitializerInterface extends ethers.utils.Interface {
+  functions: {
+    "createAndInitializePoolIfNecessary(address,address,uint24,uint160)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "createAndInitializePoolIfNecessary",
+    values: [string, string, BigNumberish, BigNumberish]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "createAndInitializePoolIfNecessary",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class IPoolInitializer extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IPoolInitializerInterface;
+
+  functions: {
+    createAndInitializePoolIfNecessary(
+      token0: string,
+      token1: string,
+      fee: BigNumberish,
+      sqrtPriceX96: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  createAndInitializePoolIfNecessary(
+    token0: string,
+    token1: string,
+    fee: BigNumberish,
+    sqrtPriceX96: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    createAndInitializePoolIfNecessary(
+      token0: string,
+      token1: string,
+      fee: BigNumberish,
+      sqrtPriceX96: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<string>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    createAndInitializePoolIfNecessary(
+      token0: string,
+      token1: string,
+      fee: BigNumberish,
+      sqrtPriceX96: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    createAndInitializePoolIfNecessary(
+      token0: string,
+      token1: string,
+      fee: BigNumberish,
+      sqrtPriceX96: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/IQuoter.d.ts b/lib/sor/types/v3/IQuoter.d.ts
new file mode 100644
index 0000000..00b3ac6
--- /dev/null
+++ b/lib/sor/types/v3/IQuoter.d.ts
@@ -0,0 +1,268 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IQuoterInterface extends ethers.utils.Interface {
+  functions: {
+    "quoteExactInput(bytes,uint256)": FunctionFragment;
+    "quoteExactInputSingle(address,address,uint24,uint256,uint160)": FunctionFragment;
+    "quoteExactOutput(bytes,uint256)": FunctionFragment;
+    "quoteExactOutputSingle(address,address,uint24,uint256,uint160)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "quoteExactInput",
+    values: [BytesLike, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactInputSingle",
+    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactOutput",
+    values: [BytesLike, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactOutputSingle",
+    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "quoteExactInput",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactInputSingle",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactOutput",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactOutputSingle",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class IQuoter extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IQuoterInterface;
+
+  functions: {
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactInputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountIn: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactOutputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountOut: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  quoteExactInput(
+    path: BytesLike,
+    amountIn: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactInputSingle(
+    tokenIn: string,
+    tokenOut: string,
+    fee: BigNumberish,
+    amountIn: BigNumberish,
+    sqrtPriceLimitX96: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactOutput(
+    path: BytesLike,
+    amountOut: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactOutputSingle(
+    tokenIn: string,
+    tokenOut: string,
+    fee: BigNumberish,
+    amountOut: BigNumberish,
+    sqrtPriceLimitX96: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    quoteExactInputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountIn: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    quoteExactOutputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountOut: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactInputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountIn: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactOutputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountOut: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactInputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountIn: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactOutputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountOut: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/IQuoterV2.d.ts b/lib/sor/types/v3/IQuoterV2.d.ts
new file mode 100644
index 0000000..a474831
--- /dev/null
+++ b/lib/sor/types/v3/IQuoterV2.d.ts
@@ -0,0 +1,332 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IQuoterV2Interface extends ethers.utils.Interface {
+  functions: {
+    "quoteExactInput(bytes,uint256)": FunctionFragment;
+    "quoteExactInputSingle(tuple)": FunctionFragment;
+    "quoteExactOutput(bytes,uint256)": FunctionFragment;
+    "quoteExactOutputSingle(tuple)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "quoteExactInput",
+    values: [BytesLike, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactInputSingle",
+    values: [
+      {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactOutput",
+    values: [BytesLike, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactOutputSingle",
+    values: [
+      {
+        tokenIn: string;
+        tokenOut: string;
+        amount: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      }
+    ]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "quoteExactInput",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactInputSingle",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactOutput",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactOutputSingle",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class IQuoterV2 extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IQuoterV2Interface;
+
+  functions: {
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amount: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  quoteExactInput(
+    path: BytesLike,
+    amountIn: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactInputSingle(
+    params: {
+      tokenIn: string;
+      tokenOut: string;
+      amountIn: BigNumberish;
+      fee: BigNumberish;
+      sqrtPriceLimitX96: BigNumberish;
+    },
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactOutput(
+    path: BytesLike,
+    amountOut: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactOutputSingle(
+    params: {
+      tokenIn: string;
+      tokenOut: string;
+      amount: BigNumberish;
+      fee: BigNumberish;
+      sqrtPriceLimitX96: BigNumberish;
+    },
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber[], number[], BigNumber] & {
+        amountOut: BigNumber;
+        sqrtPriceX96AfterList: BigNumber[];
+        initializedTicksCrossedList: number[];
+        gasEstimate: BigNumber;
+      }
+    >;
+
+    quoteExactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, number, BigNumber] & {
+        amountOut: BigNumber;
+        sqrtPriceX96After: BigNumber;
+        initializedTicksCrossed: number;
+        gasEstimate: BigNumber;
+      }
+    >;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber[], number[], BigNumber] & {
+        amountIn: BigNumber;
+        sqrtPriceX96AfterList: BigNumber[];
+        initializedTicksCrossedList: number[];
+        gasEstimate: BigNumber;
+      }
+    >;
+
+    quoteExactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amount: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, number, BigNumber] & {
+        amountIn: BigNumber;
+        sqrtPriceX96After: BigNumber;
+        initializedTicksCrossed: number;
+        gasEstimate: BigNumber;
+      }
+    >;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amount: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amount: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/ISelfPermit.d.ts b/lib/sor/types/v3/ISelfPermit.d.ts
new file mode 100644
index 0000000..0f337f6
--- /dev/null
+++ b/lib/sor/types/v3/ISelfPermit.d.ts
@@ -0,0 +1,343 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface ISelfPermitInterface extends ethers.utils.Interface {
+  functions: {
+    "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "selfPermit",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermitAllowed",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermitAllowedIfNecessary",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermitIfNecessary",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "selfPermit", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "selfPermitAllowed",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "selfPermitAllowedIfNecessary",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "selfPermitIfNecessary",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class ISelfPermit extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: ISelfPermitInterface;
+
+  functions: {
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  selfPermit(
+    token: string,
+    value: BigNumberish,
+    deadline: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermitAllowed(
+    token: string,
+    nonce: BigNumberish,
+    expiry: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermitAllowedIfNecessary(
+    token: string,
+    nonce: BigNumberish,
+    expiry: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermitIfNecessary(
+    token: string,
+    value: BigNumberish,
+    deadline: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/ISwapRouter.d.ts b/lib/sor/types/v3/ISwapRouter.d.ts
new file mode 100644
index 0000000..3ee020e
--- /dev/null
+++ b/lib/sor/types/v3/ISwapRouter.d.ts
@@ -0,0 +1,448 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface ISwapRouterInterface extends ethers.utils.Interface {
+  functions: {
+    "exactInput(tuple)": FunctionFragment;
+    "exactInputSingle(tuple)": FunctionFragment;
+    "exactOutput(tuple)": FunctionFragment;
+    "exactOutputSingle(tuple)": FunctionFragment;
+    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "exactInput",
+    values: [
+      {
+        path: BytesLike;
+        recipient: string;
+        deadline: BigNumberish;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "exactInputSingle",
+    values: [
+      {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "exactOutput",
+    values: [
+      {
+        path: BytesLike;
+        recipient: string;
+        deadline: BigNumberish;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "exactOutputSingle",
+    values: [
+      {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "uniswapV3SwapCallback",
+    values: [BigNumberish, BigNumberish, BytesLike]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "exactInput", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "exactInputSingle",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "exactOutput",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "exactOutputSingle",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "uniswapV3SwapCallback",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class ISwapRouter extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: ISwapRouterInterface;
+
+  functions: {
+    exactInput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        deadline: BigNumberish;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    exactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    exactOutput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        deadline: BigNumberish;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    exactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  exactInput(
+    params: {
+      path: BytesLike;
+      recipient: string;
+      deadline: BigNumberish;
+      amountIn: BigNumberish;
+      amountOutMinimum: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  exactInputSingle(
+    params: {
+      tokenIn: string;
+      tokenOut: string;
+      fee: BigNumberish;
+      recipient: string;
+      deadline: BigNumberish;
+      amountIn: BigNumberish;
+      amountOutMinimum: BigNumberish;
+      sqrtPriceLimitX96: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  exactOutput(
+    params: {
+      path: BytesLike;
+      recipient: string;
+      deadline: BigNumberish;
+      amountOut: BigNumberish;
+      amountInMaximum: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  exactOutputSingle(
+    params: {
+      tokenIn: string;
+      tokenOut: string;
+      fee: BigNumberish;
+      recipient: string;
+      deadline: BigNumberish;
+      amountOut: BigNumberish;
+      amountInMaximum: BigNumberish;
+      sqrtPriceLimitX96: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  uniswapV3SwapCallback(
+    amount0Delta: BigNumberish,
+    amount1Delta: BigNumberish,
+    data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    exactInput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        deadline: BigNumberish;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    exactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    exactOutput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        deadline: BigNumberish;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    exactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    exactInput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        deadline: BigNumberish;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    exactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    exactOutput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        deadline: BigNumberish;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    exactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    exactInput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        deadline: BigNumberish;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    exactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    exactOutput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        deadline: BigNumberish;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    exactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/ITickLens.d.ts b/lib/sor/types/v3/ITickLens.d.ts
new file mode 100644
index 0000000..fbfb3ec
--- /dev/null
+++ b/lib/sor/types/v3/ITickLens.d.ts
@@ -0,0 +1,145 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ethers,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface ITickLensInterface extends ethers.utils.Interface {
+  functions: {
+    "getPopulatedTicksInWord(address,int16)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "getPopulatedTicksInWord",
+    values: [string, BigNumberish]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "getPopulatedTicksInWord",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class ITickLens extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: ITickLensInterface;
+
+  functions: {
+    getPopulatedTicksInWord(
+      pool: string,
+      tickBitmapIndex: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [
+        ([number, BigNumber, BigNumber] & {
+          tick: number;
+          liquidityNet: BigNumber;
+          liquidityGross: BigNumber;
+        })[]
+      ] & {
+        populatedTicks: ([number, BigNumber, BigNumber] & {
+          tick: number;
+          liquidityNet: BigNumber;
+          liquidityGross: BigNumber;
+        })[];
+      }
+    >;
+  };
+
+  getPopulatedTicksInWord(
+    pool: string,
+    tickBitmapIndex: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<
+    ([number, BigNumber, BigNumber] & {
+      tick: number;
+      liquidityNet: BigNumber;
+      liquidityGross: BigNumber;
+    })[]
+  >;
+
+  callStatic: {
+    getPopulatedTicksInWord(
+      pool: string,
+      tickBitmapIndex: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      ([number, BigNumber, BigNumber] & {
+        tick: number;
+        liquidityNet: BigNumber;
+        liquidityGross: BigNumber;
+      })[]
+    >;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    getPopulatedTicksInWord(
+      pool: string,
+      tickBitmapIndex: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    getPopulatedTicksInWord(
+      pool: string,
+      tickBitmapIndex: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/IUniswapV3Factory.d.ts b/lib/sor/types/v3/IUniswapV3Factory.d.ts
new file mode 100644
index 0000000..60b5c5c
--- /dev/null
+++ b/lib/sor/types/v3/IUniswapV3Factory.d.ts
@@ -0,0 +1,313 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IUniswapV3FactoryInterface extends ethers.utils.Interface {
+  functions: {
+    "createPool(address,address,uint24)": FunctionFragment;
+    "enableFeeAmount(uint24,int24)": FunctionFragment;
+    "feeAmountTickSpacing(uint24)": FunctionFragment;
+    "getPool(address,address,uint24)": FunctionFragment;
+    "owner()": FunctionFragment;
+    "setOwner(address)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "createPool",
+    values: [string, string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "enableFeeAmount",
+    values: [BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "feeAmountTickSpacing",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getPool",
+    values: [string, string, BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
+  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
+
+  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "enableFeeAmount",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "feeAmountTickSpacing",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
+
+  events: {
+    "FeeAmountEnabled(uint24,int24)": EventFragment;
+    "OwnerChanged(address,address)": EventFragment;
+    "PoolCreated(address,address,uint24,int24,address)": EventFragment;
+  };
+
+  getEvent(nameOrSignatureOrTopic: "FeeAmountEnabled"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
+}
+
+export class IUniswapV3Factory extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IUniswapV3FactoryInterface;
+
+  functions: {
+    createPool(
+      tokenA: string,
+      tokenB: string,
+      fee: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    enableFeeAmount(
+      fee: BigNumberish,
+      tickSpacing: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    feeAmountTickSpacing(
+      fee: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[number]>;
+
+    getPool(
+      tokenA: string,
+      tokenB: string,
+      fee: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[string] & { pool: string }>;
+
+    owner(overrides?: CallOverrides): Promise<[string]>;
+
+    setOwner(
+      _owner: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  createPool(
+    tokenA: string,
+    tokenB: string,
+    fee: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  enableFeeAmount(
+    fee: BigNumberish,
+    tickSpacing: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  feeAmountTickSpacing(
+    fee: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<number>;
+
+  getPool(
+    tokenA: string,
+    tokenB: string,
+    fee: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<string>;
+
+  owner(overrides?: CallOverrides): Promise<string>;
+
+  setOwner(
+    _owner: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    createPool(
+      tokenA: string,
+      tokenB: string,
+      fee: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<string>;
+
+    enableFeeAmount(
+      fee: BigNumberish,
+      tickSpacing: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    feeAmountTickSpacing(
+      fee: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<number>;
+
+    getPool(
+      tokenA: string,
+      tokenB: string,
+      fee: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<string>;
+
+    owner(overrides?: CallOverrides): Promise<string>;
+
+    setOwner(_owner: string, overrides?: CallOverrides): Promise<void>;
+  };
+
+  filters: {
+    FeeAmountEnabled(
+      fee?: BigNumberish | null,
+      tickSpacing?: BigNumberish | null
+    ): TypedEventFilter<[number, number], { fee: number; tickSpacing: number }>;
+
+    OwnerChanged(
+      oldOwner?: string | null,
+      newOwner?: string | null
+    ): TypedEventFilter<
+      [string, string],
+      { oldOwner: string; newOwner: string }
+    >;
+
+    PoolCreated(
+      token0?: string | null,
+      token1?: string | null,
+      fee?: BigNumberish | null,
+      tickSpacing?: null,
+      pool?: null
+    ): TypedEventFilter<
+      [string, string, number, number, string],
+      {
+        token0: string;
+        token1: string;
+        fee: number;
+        tickSpacing: number;
+        pool: string;
+      }
+    >;
+  };
+
+  estimateGas: {
+    createPool(
+      tokenA: string,
+      tokenB: string,
+      fee: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    enableFeeAmount(
+      fee: BigNumberish,
+      tickSpacing: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    feeAmountTickSpacing(
+      fee: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    getPool(
+      tokenA: string,
+      tokenB: string,
+      fee: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    owner(overrides?: CallOverrides): Promise<BigNumber>;
+
+    setOwner(
+      _owner: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    createPool(
+      tokenA: string,
+      tokenB: string,
+      fee: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    enableFeeAmount(
+      fee: BigNumberish,
+      tickSpacing: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    feeAmountTickSpacing(
+      fee: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    getPool(
+      tokenA: string,
+      tokenB: string,
+      fee: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    setOwner(
+      _owner: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/IUniswapV3FlashCallback.d.ts b/lib/sor/types/v3/IUniswapV3FlashCallback.d.ts
new file mode 100644
index 0000000..216a5fa
--- /dev/null
+++ b/lib/sor/types/v3/IUniswapV3FlashCallback.d.ts
@@ -0,0 +1,126 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IUniswapV3FlashCallbackInterface extends ethers.utils.Interface {
+  functions: {
+    "uniswapV3FlashCallback(uint256,uint256,bytes)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "uniswapV3FlashCallback",
+    values: [BigNumberish, BigNumberish, BytesLike]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "uniswapV3FlashCallback",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class IUniswapV3FlashCallback extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IUniswapV3FlashCallbackInterface;
+
+  functions: {
+    uniswapV3FlashCallback(
+      fee0: BigNumberish,
+      fee1: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  uniswapV3FlashCallback(
+    fee0: BigNumberish,
+    fee1: BigNumberish,
+    data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    uniswapV3FlashCallback(
+      fee0: BigNumberish,
+      fee1: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    uniswapV3FlashCallback(
+      fee0: BigNumberish,
+      fee1: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    uniswapV3FlashCallback(
+      fee0: BigNumberish,
+      fee1: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/IUniswapV3MintCallback.d.ts b/lib/sor/types/v3/IUniswapV3MintCallback.d.ts
new file mode 100644
index 0000000..39d97a8
--- /dev/null
+++ b/lib/sor/types/v3/IUniswapV3MintCallback.d.ts
@@ -0,0 +1,126 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IUniswapV3MintCallbackInterface extends ethers.utils.Interface {
+  functions: {
+    "uniswapV3MintCallback(uint256,uint256,bytes)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "uniswapV3MintCallback",
+    values: [BigNumberish, BigNumberish, BytesLike]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "uniswapV3MintCallback",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class IUniswapV3MintCallback extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IUniswapV3MintCallbackInterface;
+
+  functions: {
+    uniswapV3MintCallback(
+      amount0Owed: BigNumberish,
+      amount1Owed: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  uniswapV3MintCallback(
+    amount0Owed: BigNumberish,
+    amount1Owed: BigNumberish,
+    data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    uniswapV3MintCallback(
+      amount0Owed: BigNumberish,
+      amount1Owed: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    uniswapV3MintCallback(
+      amount0Owed: BigNumberish,
+      amount1Owed: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    uniswapV3MintCallback(
+      amount0Owed: BigNumberish,
+      amount1Owed: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/IUniswapV3Pool.d.ts b/lib/sor/types/v3/IUniswapV3Pool.d.ts
new file mode 100644
index 0000000..b5db618
--- /dev/null
+++ b/lib/sor/types/v3/IUniswapV3Pool.d.ts
@@ -0,0 +1,1201 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IUniswapV3PoolInterface extends ethers.utils.Interface {
+  functions: {
+    "burn(int24,int24,uint128)": FunctionFragment;
+    "collect(address,int24,int24,uint128,uint128)": FunctionFragment;
+    "collectProtocol(address,uint128,uint128)": FunctionFragment;
+    "factory()": FunctionFragment;
+    "fee()": FunctionFragment;
+    "feeGrowthGlobal0X128()": FunctionFragment;
+    "feeGrowthGlobal1X128()": FunctionFragment;
+    "flash(address,uint256,uint256,bytes)": FunctionFragment;
+    "increaseObservationCardinalityNext(uint16)": FunctionFragment;
+    "initialize(uint160)": FunctionFragment;
+    "liquidity()": FunctionFragment;
+    "maxLiquidityPerTick()": FunctionFragment;
+    "mint(address,int24,int24,uint128,bytes)": FunctionFragment;
+    "observations(uint256)": FunctionFragment;
+    "observe(uint32[])": FunctionFragment;
+    "positions(bytes32)": FunctionFragment;
+    "protocolFees()": FunctionFragment;
+    "setFeeProtocol(uint8,uint8)": FunctionFragment;
+    "slot0()": FunctionFragment;
+    "snapshotCumulativesInside(int24,int24)": FunctionFragment;
+    "swap(address,bool,int256,uint160,bytes)": FunctionFragment;
+    "tickBitmap(int16)": FunctionFragment;
+    "tickSpacing()": FunctionFragment;
+    "ticks(int24)": FunctionFragment;
+    "token0()": FunctionFragment;
+    "token1()": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "burn",
+    values: [BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "collect",
+    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "collectProtocol",
+    values: [string, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
+  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "feeGrowthGlobal0X128",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "feeGrowthGlobal1X128",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "flash",
+    values: [string, BigNumberish, BigNumberish, BytesLike]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "increaseObservationCardinalityNext",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "initialize",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "liquidity", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "maxLiquidityPerTick",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "mint",
+    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "observations",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "observe",
+    values: [BigNumberish[]]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "positions",
+    values: [BytesLike]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "protocolFees",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "setFeeProtocol",
+    values: [BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "slot0", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "snapshotCumulativesInside",
+    values: [BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swap",
+    values: [string, boolean, BigNumberish, BigNumberish, BytesLike]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "tickBitmap",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "tickSpacing",
+    values?: undefined
+  ): string;
+  encodeFunctionData(functionFragment: "ticks", values: [BigNumberish]): string;
+  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
+  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
+
+  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "collectProtocol",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "feeGrowthGlobal0X128",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "feeGrowthGlobal1X128",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "flash", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "increaseObservationCardinalityNext",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "maxLiquidityPerTick",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "observations",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "observe", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "protocolFees",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "setFeeProtocol",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "slot0", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "snapshotCumulativesInside",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "tickBitmap", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "tickSpacing",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "ticks", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
+
+  events: {
+    "Burn(address,int24,int24,uint128,uint256,uint256)": EventFragment;
+    "Collect(address,address,int24,int24,uint128,uint128)": EventFragment;
+    "CollectProtocol(address,address,uint128,uint128)": EventFragment;
+    "Flash(address,address,uint256,uint256,uint256,uint256)": EventFragment;
+    "IncreaseObservationCardinalityNext(uint16,uint16)": EventFragment;
+    "Initialize(uint160,int24)": EventFragment;
+    "Mint(address,address,int24,int24,uint128,uint256,uint256)": EventFragment;
+    "SetFeeProtocol(uint8,uint8,uint8,uint8)": EventFragment;
+    "Swap(address,address,int256,int256,uint160,uint128,int24)": EventFragment;
+  };
+
+  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Collect"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "CollectProtocol"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Flash"): EventFragment;
+  getEvent(
+    nameOrSignatureOrTopic: "IncreaseObservationCardinalityNext"
+  ): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "SetFeeProtocol"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
+}
+
+export class IUniswapV3Pool extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IUniswapV3PoolInterface;
+
+  functions: {
+    burn(
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    collect(
+      recipient: string,
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount0Requested: BigNumberish,
+      amount1Requested: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    collectProtocol(
+      recipient: string,
+      amount0Requested: BigNumberish,
+      amount1Requested: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<[string]>;
+
+    fee(overrides?: CallOverrides): Promise<[number]>;
+
+    feeGrowthGlobal0X128(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    feeGrowthGlobal1X128(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    flash(
+      recipient: string,
+      amount0: BigNumberish,
+      amount1: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    increaseObservationCardinalityNext(
+      observationCardinalityNext: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    initialize(
+      sqrtPriceX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    liquidity(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    maxLiquidityPerTick(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    mint(
+      recipient: string,
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    observations(
+      index: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [number, BigNumber, BigNumber, boolean] & {
+        blockTimestamp: number;
+        tickCumulative: BigNumber;
+        secondsPerLiquidityCumulativeX128: BigNumber;
+        initialized: boolean;
+      }
+    >;
+
+    observe(
+      secondsAgos: BigNumberish[],
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber[], BigNumber[]] & {
+        tickCumulatives: BigNumber[];
+        secondsPerLiquidityCumulativeX128s: BigNumber[];
+      }
+    >;
+
+    positions(
+      key: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
+        _liquidity: BigNumber;
+        feeGrowthInside0LastX128: BigNumber;
+        feeGrowthInside1LastX128: BigNumber;
+        tokensOwed0: BigNumber;
+        tokensOwed1: BigNumber;
+      }
+    >;
+
+    protocolFees(
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber }
+    >;
+
+    setFeeProtocol(
+      feeProtocol0: BigNumberish,
+      feeProtocol1: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    slot0(
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, number, number, number, number, number, boolean] & {
+        sqrtPriceX96: BigNumber;
+        tick: number;
+        observationIndex: number;
+        observationCardinality: number;
+        observationCardinalityNext: number;
+        feeProtocol: number;
+        unlocked: boolean;
+      }
+    >;
+
+    snapshotCumulativesInside(
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, number] & {
+        tickCumulativeInside: BigNumber;
+        secondsPerLiquidityInsideX128: BigNumber;
+        secondsInside: number;
+      }
+    >;
+
+    swap(
+      recipient: string,
+      zeroForOne: boolean,
+      amountSpecified: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    tickBitmap(
+      wordPosition: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber]>;
+
+    tickSpacing(overrides?: CallOverrides): Promise<[number]>;
+
+    ticks(
+      tick: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        number,
+        boolean
+      ] & {
+        liquidityGross: BigNumber;
+        liquidityNet: BigNumber;
+        feeGrowthOutside0X128: BigNumber;
+        feeGrowthOutside1X128: BigNumber;
+        tickCumulativeOutside: BigNumber;
+        secondsPerLiquidityOutsideX128: BigNumber;
+        secondsOutside: number;
+        initialized: boolean;
+      }
+    >;
+
+    token0(overrides?: CallOverrides): Promise<[string]>;
+
+    token1(overrides?: CallOverrides): Promise<[string]>;
+  };
+
+  burn(
+    tickLower: BigNumberish,
+    tickUpper: BigNumberish,
+    amount: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  collect(
+    recipient: string,
+    tickLower: BigNumberish,
+    tickUpper: BigNumberish,
+    amount0Requested: BigNumberish,
+    amount1Requested: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  collectProtocol(
+    recipient: string,
+    amount0Requested: BigNumberish,
+    amount1Requested: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  factory(overrides?: CallOverrides): Promise<string>;
+
+  fee(overrides?: CallOverrides): Promise<number>;
+
+  feeGrowthGlobal0X128(overrides?: CallOverrides): Promise<BigNumber>;
+
+  feeGrowthGlobal1X128(overrides?: CallOverrides): Promise<BigNumber>;
+
+  flash(
+    recipient: string,
+    amount0: BigNumberish,
+    amount1: BigNumberish,
+    data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  increaseObservationCardinalityNext(
+    observationCardinalityNext: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  initialize(
+    sqrtPriceX96: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  liquidity(overrides?: CallOverrides): Promise<BigNumber>;
+
+  maxLiquidityPerTick(overrides?: CallOverrides): Promise<BigNumber>;
+
+  mint(
+    recipient: string,
+    tickLower: BigNumberish,
+    tickUpper: BigNumberish,
+    amount: BigNumberish,
+    data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  observations(
+    index: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<
+    [number, BigNumber, BigNumber, boolean] & {
+      blockTimestamp: number;
+      tickCumulative: BigNumber;
+      secondsPerLiquidityCumulativeX128: BigNumber;
+      initialized: boolean;
+    }
+  >;
+
+  observe(
+    secondsAgos: BigNumberish[],
+    overrides?: CallOverrides
+  ): Promise<
+    [BigNumber[], BigNumber[]] & {
+      tickCumulatives: BigNumber[];
+      secondsPerLiquidityCumulativeX128s: BigNumber[];
+    }
+  >;
+
+  positions(
+    key: BytesLike,
+    overrides?: CallOverrides
+  ): Promise<
+    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
+      _liquidity: BigNumber;
+      feeGrowthInside0LastX128: BigNumber;
+      feeGrowthInside1LastX128: BigNumber;
+      tokensOwed0: BigNumber;
+      tokensOwed1: BigNumber;
+    }
+  >;
+
+  protocolFees(
+    overrides?: CallOverrides
+  ): Promise<[BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber }>;
+
+  setFeeProtocol(
+    feeProtocol0: BigNumberish,
+    feeProtocol1: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  slot0(
+    overrides?: CallOverrides
+  ): Promise<
+    [BigNumber, number, number, number, number, number, boolean] & {
+      sqrtPriceX96: BigNumber;
+      tick: number;
+      observationIndex: number;
+      observationCardinality: number;
+      observationCardinalityNext: number;
+      feeProtocol: number;
+      unlocked: boolean;
+    }
+  >;
+
+  snapshotCumulativesInside(
+    tickLower: BigNumberish,
+    tickUpper: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<
+    [BigNumber, BigNumber, number] & {
+      tickCumulativeInside: BigNumber;
+      secondsPerLiquidityInsideX128: BigNumber;
+      secondsInside: number;
+    }
+  >;
+
+  swap(
+    recipient: string,
+    zeroForOne: boolean,
+    amountSpecified: BigNumberish,
+    sqrtPriceLimitX96: BigNumberish,
+    data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  tickBitmap(
+    wordPosition: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  tickSpacing(overrides?: CallOverrides): Promise<number>;
+
+  ticks(
+    tick: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<
+    [
+      BigNumber,
+      BigNumber,
+      BigNumber,
+      BigNumber,
+      BigNumber,
+      BigNumber,
+      number,
+      boolean
+    ] & {
+      liquidityGross: BigNumber;
+      liquidityNet: BigNumber;
+      feeGrowthOutside0X128: BigNumber;
+      feeGrowthOutside1X128: BigNumber;
+      tickCumulativeOutside: BigNumber;
+      secondsPerLiquidityOutsideX128: BigNumber;
+      secondsOutside: number;
+      initialized: boolean;
+    }
+  >;
+
+  token0(overrides?: CallOverrides): Promise<string>;
+
+  token1(overrides?: CallOverrides): Promise<string>;
+
+  callStatic: {
+    burn(
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
+    >;
+
+    collect(
+      recipient: string,
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount0Requested: BigNumberish,
+      amount1Requested: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
+    >;
+
+    collectProtocol(
+      recipient: string,
+      amount0Requested: BigNumberish,
+      amount1Requested: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
+    >;
+
+    factory(overrides?: CallOverrides): Promise<string>;
+
+    fee(overrides?: CallOverrides): Promise<number>;
+
+    feeGrowthGlobal0X128(overrides?: CallOverrides): Promise<BigNumber>;
+
+    feeGrowthGlobal1X128(overrides?: CallOverrides): Promise<BigNumber>;
+
+    flash(
+      recipient: string,
+      amount0: BigNumberish,
+      amount1: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    increaseObservationCardinalityNext(
+      observationCardinalityNext: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    initialize(
+      sqrtPriceX96: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    liquidity(overrides?: CallOverrides): Promise<BigNumber>;
+
+    maxLiquidityPerTick(overrides?: CallOverrides): Promise<BigNumber>;
+
+    mint(
+      recipient: string,
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
+    >;
+
+    observations(
+      index: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [number, BigNumber, BigNumber, boolean] & {
+        blockTimestamp: number;
+        tickCumulative: BigNumber;
+        secondsPerLiquidityCumulativeX128: BigNumber;
+        initialized: boolean;
+      }
+    >;
+
+    observe(
+      secondsAgos: BigNumberish[],
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber[], BigNumber[]] & {
+        tickCumulatives: BigNumber[];
+        secondsPerLiquidityCumulativeX128s: BigNumber[];
+      }
+    >;
+
+    positions(
+      key: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
+        _liquidity: BigNumber;
+        feeGrowthInside0LastX128: BigNumber;
+        feeGrowthInside1LastX128: BigNumber;
+        tokensOwed0: BigNumber;
+        tokensOwed1: BigNumber;
+      }
+    >;
+
+    protocolFees(
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber }
+    >;
+
+    setFeeProtocol(
+      feeProtocol0: BigNumberish,
+      feeProtocol1: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    slot0(
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, number, number, number, number, number, boolean] & {
+        sqrtPriceX96: BigNumber;
+        tick: number;
+        observationIndex: number;
+        observationCardinality: number;
+        observationCardinalityNext: number;
+        feeProtocol: number;
+        unlocked: boolean;
+      }
+    >;
+
+    snapshotCumulativesInside(
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, number] & {
+        tickCumulativeInside: BigNumber;
+        secondsPerLiquidityInsideX128: BigNumber;
+        secondsInside: number;
+      }
+    >;
+
+    swap(
+      recipient: string,
+      zeroForOne: boolean,
+      amountSpecified: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
+    >;
+
+    tickBitmap(
+      wordPosition: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    tickSpacing(overrides?: CallOverrides): Promise<number>;
+
+    ticks(
+      tick: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        number,
+        boolean
+      ] & {
+        liquidityGross: BigNumber;
+        liquidityNet: BigNumber;
+        feeGrowthOutside0X128: BigNumber;
+        feeGrowthOutside1X128: BigNumber;
+        tickCumulativeOutside: BigNumber;
+        secondsPerLiquidityOutsideX128: BigNumber;
+        secondsOutside: number;
+        initialized: boolean;
+      }
+    >;
+
+    token0(overrides?: CallOverrides): Promise<string>;
+
+    token1(overrides?: CallOverrides): Promise<string>;
+  };
+
+  filters: {
+    Burn(
+      owner?: string | null,
+      tickLower?: BigNumberish | null,
+      tickUpper?: BigNumberish | null,
+      amount?: null,
+      amount0?: null,
+      amount1?: null
+    ): TypedEventFilter<
+      [string, number, number, BigNumber, BigNumber, BigNumber],
+      {
+        owner: string;
+        tickLower: number;
+        tickUpper: number;
+        amount: BigNumber;
+        amount0: BigNumber;
+        amount1: BigNumber;
+      }
+    >;
+
+    Collect(
+      owner?: string | null,
+      recipient?: null,
+      tickLower?: BigNumberish | null,
+      tickUpper?: BigNumberish | null,
+      amount0?: null,
+      amount1?: null
+    ): TypedEventFilter<
+      [string, string, number, number, BigNumber, BigNumber],
+      {
+        owner: string;
+        recipient: string;
+        tickLower: number;
+        tickUpper: number;
+        amount0: BigNumber;
+        amount1: BigNumber;
+      }
+    >;
+
+    CollectProtocol(
+      sender?: string | null,
+      recipient?: string | null,
+      amount0?: null,
+      amount1?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber, BigNumber],
+      {
+        sender: string;
+        recipient: string;
+        amount0: BigNumber;
+        amount1: BigNumber;
+      }
+    >;
+
+    Flash(
+      sender?: string | null,
+      recipient?: string | null,
+      amount0?: null,
+      amount1?: null,
+      paid0?: null,
+      paid1?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
+      {
+        sender: string;
+        recipient: string;
+        amount0: BigNumber;
+        amount1: BigNumber;
+        paid0: BigNumber;
+        paid1: BigNumber;
+      }
+    >;
+
+    IncreaseObservationCardinalityNext(
+      observationCardinalityNextOld?: null,
+      observationCardinalityNextNew?: null
+    ): TypedEventFilter<
+      [number, number],
+      {
+        observationCardinalityNextOld: number;
+        observationCardinalityNextNew: number;
+      }
+    >;
+
+    Initialize(
+      sqrtPriceX96?: null,
+      tick?: null
+    ): TypedEventFilter<
+      [BigNumber, number],
+      { sqrtPriceX96: BigNumber; tick: number }
+    >;
+
+    Mint(
+      sender?: null,
+      owner?: string | null,
+      tickLower?: BigNumberish | null,
+      tickUpper?: BigNumberish | null,
+      amount?: null,
+      amount0?: null,
+      amount1?: null
+    ): TypedEventFilter<
+      [string, string, number, number, BigNumber, BigNumber, BigNumber],
+      {
+        sender: string;
+        owner: string;
+        tickLower: number;
+        tickUpper: number;
+        amount: BigNumber;
+        amount0: BigNumber;
+        amount1: BigNumber;
+      }
+    >;
+
+    SetFeeProtocol(
+      feeProtocol0Old?: null,
+      feeProtocol1Old?: null,
+      feeProtocol0New?: null,
+      feeProtocol1New?: null
+    ): TypedEventFilter<
+      [number, number, number, number],
+      {
+        feeProtocol0Old: number;
+        feeProtocol1Old: number;
+        feeProtocol0New: number;
+        feeProtocol1New: number;
+      }
+    >;
+
+    Swap(
+      sender?: string | null,
+      recipient?: string | null,
+      amount0?: null,
+      amount1?: null,
+      sqrtPriceX96?: null,
+      liquidity?: null,
+      tick?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, number],
+      {
+        sender: string;
+        recipient: string;
+        amount0: BigNumber;
+        amount1: BigNumber;
+        sqrtPriceX96: BigNumber;
+        liquidity: BigNumber;
+        tick: number;
+      }
+    >;
+  };
+
+  estimateGas: {
+    burn(
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    collect(
+      recipient: string,
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount0Requested: BigNumberish,
+      amount1Requested: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    collectProtocol(
+      recipient: string,
+      amount0Requested: BigNumberish,
+      amount1Requested: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<BigNumber>;
+
+    fee(overrides?: CallOverrides): Promise<BigNumber>;
+
+    feeGrowthGlobal0X128(overrides?: CallOverrides): Promise<BigNumber>;
+
+    feeGrowthGlobal1X128(overrides?: CallOverrides): Promise<BigNumber>;
+
+    flash(
+      recipient: string,
+      amount0: BigNumberish,
+      amount1: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    increaseObservationCardinalityNext(
+      observationCardinalityNext: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    initialize(
+      sqrtPriceX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    liquidity(overrides?: CallOverrides): Promise<BigNumber>;
+
+    maxLiquidityPerTick(overrides?: CallOverrides): Promise<BigNumber>;
+
+    mint(
+      recipient: string,
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    observations(
+      index: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    observe(
+      secondsAgos: BigNumberish[],
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    positions(key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
+
+    protocolFees(overrides?: CallOverrides): Promise<BigNumber>;
+
+    setFeeProtocol(
+      feeProtocol0: BigNumberish,
+      feeProtocol1: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    slot0(overrides?: CallOverrides): Promise<BigNumber>;
+
+    snapshotCumulativesInside(
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    swap(
+      recipient: string,
+      zeroForOne: boolean,
+      amountSpecified: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    tickBitmap(
+      wordPosition: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    tickSpacing(overrides?: CallOverrides): Promise<BigNumber>;
+
+    ticks(tick: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
+
+    token0(overrides?: CallOverrides): Promise<BigNumber>;
+
+    token1(overrides?: CallOverrides): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    burn(
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    collect(
+      recipient: string,
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount0Requested: BigNumberish,
+      amount1Requested: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    collectProtocol(
+      recipient: string,
+      amount0Requested: BigNumberish,
+      amount1Requested: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    feeGrowthGlobal0X128(
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    feeGrowthGlobal1X128(
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    flash(
+      recipient: string,
+      amount0: BigNumberish,
+      amount1: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    increaseObservationCardinalityNext(
+      observationCardinalityNext: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    initialize(
+      sqrtPriceX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    liquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    maxLiquidityPerTick(
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    mint(
+      recipient: string,
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    observations(
+      index: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    observe(
+      secondsAgos: BigNumberish[],
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    positions(
+      key: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    protocolFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    setFeeProtocol(
+      feeProtocol0: BigNumberish,
+      feeProtocol1: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    slot0(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    snapshotCumulativesInside(
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    swap(
+      recipient: string,
+      zeroForOne: boolean,
+      amountSpecified: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    tickBitmap(
+      wordPosition: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    tickSpacing(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    ticks(
+      tick: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/IUniswapV3PoolActions.d.ts b/lib/sor/types/v3/IUniswapV3PoolActions.d.ts
new file mode 100644
index 0000000..223f37b
--- /dev/null
+++ b/lib/sor/types/v3/IUniswapV3PoolActions.d.ts
@@ -0,0 +1,395 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IUniswapV3PoolActionsInterface extends ethers.utils.Interface {
+  functions: {
+    "burn(int24,int24,uint128)": FunctionFragment;
+    "collect(address,int24,int24,uint128,uint128)": FunctionFragment;
+    "flash(address,uint256,uint256,bytes)": FunctionFragment;
+    "increaseObservationCardinalityNext(uint16)": FunctionFragment;
+    "initialize(uint160)": FunctionFragment;
+    "mint(address,int24,int24,uint128,bytes)": FunctionFragment;
+    "swap(address,bool,int256,uint160,bytes)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "burn",
+    values: [BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "collect",
+    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "flash",
+    values: [string, BigNumberish, BigNumberish, BytesLike]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "increaseObservationCardinalityNext",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "initialize",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "mint",
+    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swap",
+    values: [string, boolean, BigNumberish, BigNumberish, BytesLike]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "flash", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "increaseObservationCardinalityNext",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
+
+  events: {};
+}
+
+export class IUniswapV3PoolActions extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IUniswapV3PoolActionsInterface;
+
+  functions: {
+    burn(
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    collect(
+      recipient: string,
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount0Requested: BigNumberish,
+      amount1Requested: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    flash(
+      recipient: string,
+      amount0: BigNumberish,
+      amount1: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    increaseObservationCardinalityNext(
+      observationCardinalityNext: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    initialize(
+      sqrtPriceX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    mint(
+      recipient: string,
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swap(
+      recipient: string,
+      zeroForOne: boolean,
+      amountSpecified: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  burn(
+    tickLower: BigNumberish,
+    tickUpper: BigNumberish,
+    amount: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  collect(
+    recipient: string,
+    tickLower: BigNumberish,
+    tickUpper: BigNumberish,
+    amount0Requested: BigNumberish,
+    amount1Requested: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  flash(
+    recipient: string,
+    amount0: BigNumberish,
+    amount1: BigNumberish,
+    data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  increaseObservationCardinalityNext(
+    observationCardinalityNext: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  initialize(
+    sqrtPriceX96: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  mint(
+    recipient: string,
+    tickLower: BigNumberish,
+    tickUpper: BigNumberish,
+    amount: BigNumberish,
+    data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swap(
+    recipient: string,
+    zeroForOne: boolean,
+    amountSpecified: BigNumberish,
+    sqrtPriceLimitX96: BigNumberish,
+    data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    burn(
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
+    >;
+
+    collect(
+      recipient: string,
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount0Requested: BigNumberish,
+      amount1Requested: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
+    >;
+
+    flash(
+      recipient: string,
+      amount0: BigNumberish,
+      amount1: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    increaseObservationCardinalityNext(
+      observationCardinalityNext: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    initialize(
+      sqrtPriceX96: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    mint(
+      recipient: string,
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
+    >;
+
+    swap(
+      recipient: string,
+      zeroForOne: boolean,
+      amountSpecified: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
+    >;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    burn(
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    collect(
+      recipient: string,
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount0Requested: BigNumberish,
+      amount1Requested: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    flash(
+      recipient: string,
+      amount0: BigNumberish,
+      amount1: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    increaseObservationCardinalityNext(
+      observationCardinalityNext: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    initialize(
+      sqrtPriceX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    mint(
+      recipient: string,
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swap(
+      recipient: string,
+      zeroForOne: boolean,
+      amountSpecified: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    burn(
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    collect(
+      recipient: string,
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount0Requested: BigNumberish,
+      amount1Requested: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    flash(
+      recipient: string,
+      amount0: BigNumberish,
+      amount1: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    increaseObservationCardinalityNext(
+      observationCardinalityNext: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    initialize(
+      sqrtPriceX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    mint(
+      recipient: string,
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swap(
+      recipient: string,
+      zeroForOne: boolean,
+      amountSpecified: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/IUniswapV3PoolDeployer.d.ts b/lib/sor/types/v3/IUniswapV3PoolDeployer.d.ts
new file mode 100644
index 0000000..44db666
--- /dev/null
+++ b/lib/sor/types/v3/IUniswapV3PoolDeployer.d.ts
@@ -0,0 +1,125 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  CallOverrides,
+  ethers,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IUniswapV3PoolDeployerInterface extends ethers.utils.Interface {
+  functions: {
+    "parameters()": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "parameters",
+    values?: undefined
+  ): string;
+
+  decodeFunctionResult(functionFragment: "parameters", data: BytesLike): Result;
+
+  events: {};
+}
+
+export class IUniswapV3PoolDeployer extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IUniswapV3PoolDeployerInterface;
+
+  functions: {
+    parameters(
+      overrides?: CallOverrides
+    ): Promise<
+      [string, string, string, number, number] & {
+        factory: string;
+        token0: string;
+        token1: string;
+        fee: number;
+        tickSpacing: number;
+      }
+    >;
+  };
+
+  parameters(
+    overrides?: CallOverrides
+  ): Promise<
+    [string, string, string, number, number] & {
+      factory: string;
+      token0: string;
+      token1: string;
+      fee: number;
+      tickSpacing: number;
+    }
+  >;
+
+  callStatic: {
+    parameters(
+      overrides?: CallOverrides
+    ): Promise<
+      [string, string, string, number, number] & {
+        factory: string;
+        token0: string;
+        token1: string;
+        fee: number;
+        tickSpacing: number;
+      }
+    >;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    parameters(overrides?: CallOverrides): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    parameters(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/IUniswapV3PoolDerivedState.d.ts b/lib/sor/types/v3/IUniswapV3PoolDerivedState.d.ts
new file mode 100644
index 0000000..9a1d3c3
--- /dev/null
+++ b/lib/sor/types/v3/IUniswapV3PoolDerivedState.d.ts
@@ -0,0 +1,183 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ethers,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IUniswapV3PoolDerivedStateInterface extends ethers.utils.Interface {
+  functions: {
+    "observe(uint32[])": FunctionFragment;
+    "snapshotCumulativesInside(int24,int24)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "observe",
+    values: [BigNumberish[]]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "snapshotCumulativesInside",
+    values: [BigNumberish, BigNumberish]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "observe", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "snapshotCumulativesInside",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class IUniswapV3PoolDerivedState extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IUniswapV3PoolDerivedStateInterface;
+
+  functions: {
+    observe(
+      secondsAgos: BigNumberish[],
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber[], BigNumber[]] & {
+        tickCumulatives: BigNumber[];
+        secondsPerLiquidityCumulativeX128s: BigNumber[];
+      }
+    >;
+
+    snapshotCumulativesInside(
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, number] & {
+        tickCumulativeInside: BigNumber;
+        secondsPerLiquidityInsideX128: BigNumber;
+        secondsInside: number;
+      }
+    >;
+  };
+
+  observe(
+    secondsAgos: BigNumberish[],
+    overrides?: CallOverrides
+  ): Promise<
+    [BigNumber[], BigNumber[]] & {
+      tickCumulatives: BigNumber[];
+      secondsPerLiquidityCumulativeX128s: BigNumber[];
+    }
+  >;
+
+  snapshotCumulativesInside(
+    tickLower: BigNumberish,
+    tickUpper: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<
+    [BigNumber, BigNumber, number] & {
+      tickCumulativeInside: BigNumber;
+      secondsPerLiquidityInsideX128: BigNumber;
+      secondsInside: number;
+    }
+  >;
+
+  callStatic: {
+    observe(
+      secondsAgos: BigNumberish[],
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber[], BigNumber[]] & {
+        tickCumulatives: BigNumber[];
+        secondsPerLiquidityCumulativeX128s: BigNumber[];
+      }
+    >;
+
+    snapshotCumulativesInside(
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, number] & {
+        tickCumulativeInside: BigNumber;
+        secondsPerLiquidityInsideX128: BigNumber;
+        secondsInside: number;
+      }
+    >;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    observe(
+      secondsAgos: BigNumberish[],
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    snapshotCumulativesInside(
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    observe(
+      secondsAgos: BigNumberish[],
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    snapshotCumulativesInside(
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/IUniswapV3PoolEvents.d.ts b/lib/sor/types/v3/IUniswapV3PoolEvents.d.ts
new file mode 100644
index 0000000..5c7f8fd
--- /dev/null
+++ b/lib/sor/types/v3/IUniswapV3PoolEvents.d.ts
@@ -0,0 +1,238 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { EventFragment } from "@ethersproject/abi";
+import { Listener, Provider } from "@ethersproject/providers";
+import { BaseContract, BigNumber, BigNumberish, ethers, Signer } from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IUniswapV3PoolEventsInterface extends ethers.utils.Interface {
+  functions: {};
+
+  events: {
+    "Burn(address,int24,int24,uint128,uint256,uint256)": EventFragment;
+    "Collect(address,address,int24,int24,uint128,uint128)": EventFragment;
+    "CollectProtocol(address,address,uint128,uint128)": EventFragment;
+    "Flash(address,address,uint256,uint256,uint256,uint256)": EventFragment;
+    "IncreaseObservationCardinalityNext(uint16,uint16)": EventFragment;
+    "Initialize(uint160,int24)": EventFragment;
+    "Mint(address,address,int24,int24,uint128,uint256,uint256)": EventFragment;
+    "SetFeeProtocol(uint8,uint8,uint8,uint8)": EventFragment;
+    "Swap(address,address,int256,int256,uint160,uint128,int24)": EventFragment;
+  };
+
+  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Collect"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "CollectProtocol"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Flash"): EventFragment;
+  getEvent(
+    nameOrSignatureOrTopic: "IncreaseObservationCardinalityNext"
+  ): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "SetFeeProtocol"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
+}
+
+export class IUniswapV3PoolEvents extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IUniswapV3PoolEventsInterface;
+
+  functions: {};
+
+  callStatic: {};
+
+  filters: {
+    Burn(
+      owner?: string | null,
+      tickLower?: BigNumberish | null,
+      tickUpper?: BigNumberish | null,
+      amount?: null,
+      amount0?: null,
+      amount1?: null
+    ): TypedEventFilter<
+      [string, number, number, BigNumber, BigNumber, BigNumber],
+      {
+        owner: string;
+        tickLower: number;
+        tickUpper: number;
+        amount: BigNumber;
+        amount0: BigNumber;
+        amount1: BigNumber;
+      }
+    >;
+
+    Collect(
+      owner?: string | null,
+      recipient?: null,
+      tickLower?: BigNumberish | null,
+      tickUpper?: BigNumberish | null,
+      amount0?: null,
+      amount1?: null
+    ): TypedEventFilter<
+      [string, string, number, number, BigNumber, BigNumber],
+      {
+        owner: string;
+        recipient: string;
+        tickLower: number;
+        tickUpper: number;
+        amount0: BigNumber;
+        amount1: BigNumber;
+      }
+    >;
+
+    CollectProtocol(
+      sender?: string | null,
+      recipient?: string | null,
+      amount0?: null,
+      amount1?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber, BigNumber],
+      {
+        sender: string;
+        recipient: string;
+        amount0: BigNumber;
+        amount1: BigNumber;
+      }
+    >;
+
+    Flash(
+      sender?: string | null,
+      recipient?: string | null,
+      amount0?: null,
+      amount1?: null,
+      paid0?: null,
+      paid1?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
+      {
+        sender: string;
+        recipient: string;
+        amount0: BigNumber;
+        amount1: BigNumber;
+        paid0: BigNumber;
+        paid1: BigNumber;
+      }
+    >;
+
+    IncreaseObservationCardinalityNext(
+      observationCardinalityNextOld?: null,
+      observationCardinalityNextNew?: null
+    ): TypedEventFilter<
+      [number, number],
+      {
+        observationCardinalityNextOld: number;
+        observationCardinalityNextNew: number;
+      }
+    >;
+
+    Initialize(
+      sqrtPriceX96?: null,
+      tick?: null
+    ): TypedEventFilter<
+      [BigNumber, number],
+      { sqrtPriceX96: BigNumber; tick: number }
+    >;
+
+    Mint(
+      sender?: null,
+      owner?: string | null,
+      tickLower?: BigNumberish | null,
+      tickUpper?: BigNumberish | null,
+      amount?: null,
+      amount0?: null,
+      amount1?: null
+    ): TypedEventFilter<
+      [string, string, number, number, BigNumber, BigNumber, BigNumber],
+      {
+        sender: string;
+        owner: string;
+        tickLower: number;
+        tickUpper: number;
+        amount: BigNumber;
+        amount0: BigNumber;
+        amount1: BigNumber;
+      }
+    >;
+
+    SetFeeProtocol(
+      feeProtocol0Old?: null,
+      feeProtocol1Old?: null,
+      feeProtocol0New?: null,
+      feeProtocol1New?: null
+    ): TypedEventFilter<
+      [number, number, number, number],
+      {
+        feeProtocol0Old: number;
+        feeProtocol1Old: number;
+        feeProtocol0New: number;
+        feeProtocol1New: number;
+      }
+    >;
+
+    Swap(
+      sender?: string | null,
+      recipient?: string | null,
+      amount0?: null,
+      amount1?: null,
+      sqrtPriceX96?: null,
+      liquidity?: null,
+      tick?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, number],
+      {
+        sender: string;
+        recipient: string;
+        amount0: BigNumber;
+        amount1: BigNumber;
+        sqrtPriceX96: BigNumber;
+        liquidity: BigNumber;
+        tick: number;
+      }
+    >;
+  };
+
+  estimateGas: {};
+
+  populateTransaction: {};
+}
diff --git a/lib/sor/types/v3/IUniswapV3PoolImmutables.d.ts b/lib/sor/types/v3/IUniswapV3PoolImmutables.d.ts
new file mode 100644
index 0000000..934c88e
--- /dev/null
+++ b/lib/sor/types/v3/IUniswapV3PoolImmutables.d.ts
@@ -0,0 +1,171 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  CallOverrides,
+  ethers,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IUniswapV3PoolImmutablesInterface extends ethers.utils.Interface {
+  functions: {
+    "factory()": FunctionFragment;
+    "fee()": FunctionFragment;
+    "maxLiquidityPerTick()": FunctionFragment;
+    "tickSpacing()": FunctionFragment;
+    "token0()": FunctionFragment;
+    "token1()": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
+  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "maxLiquidityPerTick",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "tickSpacing",
+    values?: undefined
+  ): string;
+  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
+  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
+
+  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "maxLiquidityPerTick",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "tickSpacing",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
+
+  events: {};
+}
+
+export class IUniswapV3PoolImmutables extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IUniswapV3PoolImmutablesInterface;
+
+  functions: {
+    factory(overrides?: CallOverrides): Promise<[string]>;
+
+    fee(overrides?: CallOverrides): Promise<[number]>;
+
+    maxLiquidityPerTick(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    tickSpacing(overrides?: CallOverrides): Promise<[number]>;
+
+    token0(overrides?: CallOverrides): Promise<[string]>;
+
+    token1(overrides?: CallOverrides): Promise<[string]>;
+  };
+
+  factory(overrides?: CallOverrides): Promise<string>;
+
+  fee(overrides?: CallOverrides): Promise<number>;
+
+  maxLiquidityPerTick(overrides?: CallOverrides): Promise<BigNumber>;
+
+  tickSpacing(overrides?: CallOverrides): Promise<number>;
+
+  token0(overrides?: CallOverrides): Promise<string>;
+
+  token1(overrides?: CallOverrides): Promise<string>;
+
+  callStatic: {
+    factory(overrides?: CallOverrides): Promise<string>;
+
+    fee(overrides?: CallOverrides): Promise<number>;
+
+    maxLiquidityPerTick(overrides?: CallOverrides): Promise<BigNumber>;
+
+    tickSpacing(overrides?: CallOverrides): Promise<number>;
+
+    token0(overrides?: CallOverrides): Promise<string>;
+
+    token1(overrides?: CallOverrides): Promise<string>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    factory(overrides?: CallOverrides): Promise<BigNumber>;
+
+    fee(overrides?: CallOverrides): Promise<BigNumber>;
+
+    maxLiquidityPerTick(overrides?: CallOverrides): Promise<BigNumber>;
+
+    tickSpacing(overrides?: CallOverrides): Promise<BigNumber>;
+
+    token0(overrides?: CallOverrides): Promise<BigNumber>;
+
+    token1(overrides?: CallOverrides): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    maxLiquidityPerTick(
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    tickSpacing(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/IUniswapV3PoolOwnerActions.d.ts b/lib/sor/types/v3/IUniswapV3PoolOwnerActions.d.ts
new file mode 100644
index 0000000..0985129
--- /dev/null
+++ b/lib/sor/types/v3/IUniswapV3PoolOwnerActions.d.ts
@@ -0,0 +1,167 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IUniswapV3PoolOwnerActionsInterface extends ethers.utils.Interface {
+  functions: {
+    "collectProtocol(address,uint128,uint128)": FunctionFragment;
+    "setFeeProtocol(uint8,uint8)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "collectProtocol",
+    values: [string, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "setFeeProtocol",
+    values: [BigNumberish, BigNumberish]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "collectProtocol",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "setFeeProtocol",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class IUniswapV3PoolOwnerActions extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IUniswapV3PoolOwnerActionsInterface;
+
+  functions: {
+    collectProtocol(
+      recipient: string,
+      amount0Requested: BigNumberish,
+      amount1Requested: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    setFeeProtocol(
+      feeProtocol0: BigNumberish,
+      feeProtocol1: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  collectProtocol(
+    recipient: string,
+    amount0Requested: BigNumberish,
+    amount1Requested: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  setFeeProtocol(
+    feeProtocol0: BigNumberish,
+    feeProtocol1: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    collectProtocol(
+      recipient: string,
+      amount0Requested: BigNumberish,
+      amount1Requested: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
+    >;
+
+    setFeeProtocol(
+      feeProtocol0: BigNumberish,
+      feeProtocol1: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    collectProtocol(
+      recipient: string,
+      amount0Requested: BigNumberish,
+      amount1Requested: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    setFeeProtocol(
+      feeProtocol0: BigNumberish,
+      feeProtocol1: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    collectProtocol(
+      recipient: string,
+      amount0Requested: BigNumberish,
+      amount1Requested: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    setFeeProtocol(
+      feeProtocol0: BigNumberish,
+      feeProtocol1: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/IUniswapV3PoolState.d.ts b/lib/sor/types/v3/IUniswapV3PoolState.d.ts
new file mode 100644
index 0000000..ea37a4c
--- /dev/null
+++ b/lib/sor/types/v3/IUniswapV3PoolState.d.ts
@@ -0,0 +1,436 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ethers,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IUniswapV3PoolStateInterface extends ethers.utils.Interface {
+  functions: {
+    "feeGrowthGlobal0X128()": FunctionFragment;
+    "feeGrowthGlobal1X128()": FunctionFragment;
+    "liquidity()": FunctionFragment;
+    "observations(uint256)": FunctionFragment;
+    "positions(bytes32)": FunctionFragment;
+    "protocolFees()": FunctionFragment;
+    "slot0()": FunctionFragment;
+    "tickBitmap(int16)": FunctionFragment;
+    "ticks(int24)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "feeGrowthGlobal0X128",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "feeGrowthGlobal1X128",
+    values?: undefined
+  ): string;
+  encodeFunctionData(functionFragment: "liquidity", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "observations",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "positions",
+    values: [BytesLike]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "protocolFees",
+    values?: undefined
+  ): string;
+  encodeFunctionData(functionFragment: "slot0", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "tickBitmap",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "ticks", values: [BigNumberish]): string;
+
+  decodeFunctionResult(
+    functionFragment: "feeGrowthGlobal0X128",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "feeGrowthGlobal1X128",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "observations",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "protocolFees",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "slot0", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "tickBitmap", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "ticks", data: BytesLike): Result;
+
+  events: {};
+}
+
+export class IUniswapV3PoolState extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IUniswapV3PoolStateInterface;
+
+  functions: {
+    feeGrowthGlobal0X128(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    feeGrowthGlobal1X128(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    liquidity(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    observations(
+      index: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [number, BigNumber, BigNumber, boolean] & {
+        blockTimestamp: number;
+        tickCumulative: BigNumber;
+        secondsPerLiquidityCumulativeX128: BigNumber;
+        initialized: boolean;
+      }
+    >;
+
+    positions(
+      key: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
+        _liquidity: BigNumber;
+        feeGrowthInside0LastX128: BigNumber;
+        feeGrowthInside1LastX128: BigNumber;
+        tokensOwed0: BigNumber;
+        tokensOwed1: BigNumber;
+      }
+    >;
+
+    protocolFees(
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber }
+    >;
+
+    slot0(
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, number, number, number, number, number, boolean] & {
+        sqrtPriceX96: BigNumber;
+        tick: number;
+        observationIndex: number;
+        observationCardinality: number;
+        observationCardinalityNext: number;
+        feeProtocol: number;
+        unlocked: boolean;
+      }
+    >;
+
+    tickBitmap(
+      wordPosition: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber]>;
+
+    ticks(
+      tick: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        number,
+        boolean
+      ] & {
+        liquidityGross: BigNumber;
+        liquidityNet: BigNumber;
+        feeGrowthOutside0X128: BigNumber;
+        feeGrowthOutside1X128: BigNumber;
+        tickCumulativeOutside: BigNumber;
+        secondsPerLiquidityOutsideX128: BigNumber;
+        secondsOutside: number;
+        initialized: boolean;
+      }
+    >;
+  };
+
+  feeGrowthGlobal0X128(overrides?: CallOverrides): Promise<BigNumber>;
+
+  feeGrowthGlobal1X128(overrides?: CallOverrides): Promise<BigNumber>;
+
+  liquidity(overrides?: CallOverrides): Promise<BigNumber>;
+
+  observations(
+    index: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<
+    [number, BigNumber, BigNumber, boolean] & {
+      blockTimestamp: number;
+      tickCumulative: BigNumber;
+      secondsPerLiquidityCumulativeX128: BigNumber;
+      initialized: boolean;
+    }
+  >;
+
+  positions(
+    key: BytesLike,
+    overrides?: CallOverrides
+  ): Promise<
+    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
+      _liquidity: BigNumber;
+      feeGrowthInside0LastX128: BigNumber;
+      feeGrowthInside1LastX128: BigNumber;
+      tokensOwed0: BigNumber;
+      tokensOwed1: BigNumber;
+    }
+  >;
+
+  protocolFees(
+    overrides?: CallOverrides
+  ): Promise<[BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber }>;
+
+  slot0(
+    overrides?: CallOverrides
+  ): Promise<
+    [BigNumber, number, number, number, number, number, boolean] & {
+      sqrtPriceX96: BigNumber;
+      tick: number;
+      observationIndex: number;
+      observationCardinality: number;
+      observationCardinalityNext: number;
+      feeProtocol: number;
+      unlocked: boolean;
+    }
+  >;
+
+  tickBitmap(
+    wordPosition: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  ticks(
+    tick: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<
+    [
+      BigNumber,
+      BigNumber,
+      BigNumber,
+      BigNumber,
+      BigNumber,
+      BigNumber,
+      number,
+      boolean
+    ] & {
+      liquidityGross: BigNumber;
+      liquidityNet: BigNumber;
+      feeGrowthOutside0X128: BigNumber;
+      feeGrowthOutside1X128: BigNumber;
+      tickCumulativeOutside: BigNumber;
+      secondsPerLiquidityOutsideX128: BigNumber;
+      secondsOutside: number;
+      initialized: boolean;
+    }
+  >;
+
+  callStatic: {
+    feeGrowthGlobal0X128(overrides?: CallOverrides): Promise<BigNumber>;
+
+    feeGrowthGlobal1X128(overrides?: CallOverrides): Promise<BigNumber>;
+
+    liquidity(overrides?: CallOverrides): Promise<BigNumber>;
+
+    observations(
+      index: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [number, BigNumber, BigNumber, boolean] & {
+        blockTimestamp: number;
+        tickCumulative: BigNumber;
+        secondsPerLiquidityCumulativeX128: BigNumber;
+        initialized: boolean;
+      }
+    >;
+
+    positions(
+      key: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
+        _liquidity: BigNumber;
+        feeGrowthInside0LastX128: BigNumber;
+        feeGrowthInside1LastX128: BigNumber;
+        tokensOwed0: BigNumber;
+        tokensOwed1: BigNumber;
+      }
+    >;
+
+    protocolFees(
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber }
+    >;
+
+    slot0(
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, number, number, number, number, number, boolean] & {
+        sqrtPriceX96: BigNumber;
+        tick: number;
+        observationIndex: number;
+        observationCardinality: number;
+        observationCardinalityNext: number;
+        feeProtocol: number;
+        unlocked: boolean;
+      }
+    >;
+
+    tickBitmap(
+      wordPosition: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    ticks(
+      tick: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        number,
+        boolean
+      ] & {
+        liquidityGross: BigNumber;
+        liquidityNet: BigNumber;
+        feeGrowthOutside0X128: BigNumber;
+        feeGrowthOutside1X128: BigNumber;
+        tickCumulativeOutside: BigNumber;
+        secondsPerLiquidityOutsideX128: BigNumber;
+        secondsOutside: number;
+        initialized: boolean;
+      }
+    >;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    feeGrowthGlobal0X128(overrides?: CallOverrides): Promise<BigNumber>;
+
+    feeGrowthGlobal1X128(overrides?: CallOverrides): Promise<BigNumber>;
+
+    liquidity(overrides?: CallOverrides): Promise<BigNumber>;
+
+    observations(
+      index: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    positions(key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
+
+    protocolFees(overrides?: CallOverrides): Promise<BigNumber>;
+
+    slot0(overrides?: CallOverrides): Promise<BigNumber>;
+
+    tickBitmap(
+      wordPosition: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    ticks(tick: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    feeGrowthGlobal0X128(
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    feeGrowthGlobal1X128(
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    liquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    observations(
+      index: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    positions(
+      key: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    protocolFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    slot0(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    tickBitmap(
+      wordPosition: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    ticks(
+      tick: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/IUniswapV3SwapCallback.d.ts b/lib/sor/types/v3/IUniswapV3SwapCallback.d.ts
new file mode 100644
index 0000000..635f009
--- /dev/null
+++ b/lib/sor/types/v3/IUniswapV3SwapCallback.d.ts
@@ -0,0 +1,126 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IUniswapV3SwapCallbackInterface extends ethers.utils.Interface {
+  functions: {
+    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "uniswapV3SwapCallback",
+    values: [BigNumberish, BigNumberish, BytesLike]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "uniswapV3SwapCallback",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class IUniswapV3SwapCallback extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IUniswapV3SwapCallbackInterface;
+
+  functions: {
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  uniswapV3SwapCallback(
+    amount0Delta: BigNumberish,
+    amount1Delta: BigNumberish,
+    data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/IV3Migrator.d.ts b/lib/sor/types/v3/IV3Migrator.d.ts
new file mode 100644
index 0000000..eeb4f3a
--- /dev/null
+++ b/lib/sor/types/v3/IV3Migrator.d.ts
@@ -0,0 +1,538 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IV3MigratorInterface extends ethers.utils.Interface {
+  functions: {
+    "createAndInitializePoolIfNecessary(address,address,uint24,uint160)": FunctionFragment;
+    "migrate(tuple)": FunctionFragment;
+    "multicall(bytes[])": FunctionFragment;
+    "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "createAndInitializePoolIfNecessary",
+    values: [string, string, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "migrate",
+    values: [
+      {
+        pair: string;
+        liquidityToMigrate: BigNumberish;
+        percentageToMigrate: BigNumberish;
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        refundAsETH: boolean;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "multicall",
+    values: [BytesLike[]]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermit",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermitAllowed",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermitAllowedIfNecessary",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermitIfNecessary",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "createAndInitializePoolIfNecessary",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "selfPermit", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "selfPermitAllowed",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "selfPermitAllowedIfNecessary",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "selfPermitIfNecessary",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class IV3Migrator extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IV3MigratorInterface;
+
+  functions: {
+    createAndInitializePoolIfNecessary(
+      token0: string,
+      token1: string,
+      fee: BigNumberish,
+      sqrtPriceX96: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    migrate(
+      params: {
+        pair: string;
+        liquidityToMigrate: BigNumberish;
+        percentageToMigrate: BigNumberish;
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        refundAsETH: boolean;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    multicall(
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  createAndInitializePoolIfNecessary(
+    token0: string,
+    token1: string,
+    fee: BigNumberish,
+    sqrtPriceX96: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  migrate(
+    params: {
+      pair: string;
+      liquidityToMigrate: BigNumberish;
+      percentageToMigrate: BigNumberish;
+      token0: string;
+      token1: string;
+      fee: BigNumberish;
+      tickLower: BigNumberish;
+      tickUpper: BigNumberish;
+      amount0Min: BigNumberish;
+      amount1Min: BigNumberish;
+      recipient: string;
+      deadline: BigNumberish;
+      refundAsETH: boolean;
+    },
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  multicall(
+    data: BytesLike[],
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermit(
+    token: string,
+    value: BigNumberish,
+    deadline: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermitAllowed(
+    token: string,
+    nonce: BigNumberish,
+    expiry: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermitAllowedIfNecessary(
+    token: string,
+    nonce: BigNumberish,
+    expiry: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermitIfNecessary(
+    token: string,
+    value: BigNumberish,
+    deadline: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    createAndInitializePoolIfNecessary(
+      token0: string,
+      token1: string,
+      fee: BigNumberish,
+      sqrtPriceX96: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<string>;
+
+    migrate(
+      params: {
+        pair: string;
+        liquidityToMigrate: BigNumberish;
+        percentageToMigrate: BigNumberish;
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        refundAsETH: boolean;
+      },
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;
+
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    createAndInitializePoolIfNecessary(
+      token0: string,
+      token1: string,
+      fee: BigNumberish,
+      sqrtPriceX96: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    migrate(
+      params: {
+        pair: string;
+        liquidityToMigrate: BigNumberish;
+        percentageToMigrate: BigNumberish;
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        refundAsETH: boolean;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    multicall(
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    createAndInitializePoolIfNecessary(
+      token0: string,
+      token1: string,
+      fee: BigNumberish,
+      sqrtPriceX96: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    migrate(
+      params: {
+        pair: string;
+        liquidityToMigrate: BigNumberish;
+        percentageToMigrate: BigNumberish;
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        refundAsETH: boolean;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    multicall(
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/IWETH9.d.ts b/lib/sor/types/v3/IWETH9.d.ts
new file mode 100644
index 0000000..d007f4d
--- /dev/null
+++ b/lib/sor/types/v3/IWETH9.d.ts
@@ -0,0 +1,343 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface IWETH9Interface extends ethers.utils.Interface {
+  functions: {
+    "allowance(address,address)": FunctionFragment;
+    "approve(address,uint256)": FunctionFragment;
+    "balanceOf(address)": FunctionFragment;
+    "deposit()": FunctionFragment;
+    "totalSupply()": FunctionFragment;
+    "transfer(address,uint256)": FunctionFragment;
+    "transferFrom(address,address,uint256)": FunctionFragment;
+    "withdraw(uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "allowance",
+    values: [string, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "approve",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
+  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "totalSupply",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "transfer",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "transferFrom",
+    values: [string, string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "withdraw",
+    values: [BigNumberish]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "totalSupply",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "transferFrom",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
+
+  events: {
+    "Approval(address,address,uint256)": EventFragment;
+    "Transfer(address,address,uint256)": EventFragment;
+  };
+
+  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
+}
+
+export class IWETH9 extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: IWETH9Interface;
+
+  functions: {
+    allowance(
+      owner: string,
+      spender: string,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber]>;
+
+    approve(
+      spender: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    deposit(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    transfer(
+      recipient: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    transferFrom(
+      sender: string,
+      recipient: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    withdraw(
+      arg0: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  allowance(
+    owner: string,
+    spender: string,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  approve(
+    spender: string,
+    amount: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+  deposit(
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+  transfer(
+    recipient: string,
+    amount: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  transferFrom(
+    sender: string,
+    recipient: string,
+    amount: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  withdraw(
+    arg0: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    allowance(
+      owner: string,
+      spender: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    approve(
+      spender: string,
+      amount: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    deposit(overrides?: CallOverrides): Promise<void>;
+
+    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+    transfer(
+      recipient: string,
+      amount: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    transferFrom(
+      sender: string,
+      recipient: string,
+      amount: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    withdraw(arg0: BigNumberish, overrides?: CallOverrides): Promise<void>;
+  };
+
+  filters: {
+    Approval(
+      owner?: string | null,
+      spender?: string | null,
+      value?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber],
+      { owner: string; spender: string; value: BigNumber }
+    >;
+
+    Transfer(
+      from?: string | null,
+      to?: string | null,
+      value?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber],
+      { from: string; to: string; value: BigNumber }
+    >;
+  };
+
+  estimateGas: {
+    allowance(
+      owner: string,
+      spender: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    approve(
+      spender: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    deposit(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+    transfer(
+      recipient: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    transferFrom(
+      sender: string,
+      recipient: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    withdraw(
+      arg0: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    allowance(
+      owner: string,
+      spender: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    approve(
+      spender: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    balanceOf(
+      account: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    deposit(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    transfer(
+      recipient: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    transferFrom(
+      sender: string,
+      recipient: string,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    withdraw(
+      arg0: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/NFTDescriptor.d.ts b/lib/sor/types/v3/NFTDescriptor.d.ts
new file mode 100644
index 0000000..6fb7405
--- /dev/null
+++ b/lib/sor/types/v3/NFTDescriptor.d.ts
@@ -0,0 +1,206 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ethers,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface NFTDescriptorInterface extends ethers.utils.Interface {
+  functions: {
+    "constructTokenURI(tuple)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "constructTokenURI",
+    values: [
+      {
+        tokenId: BigNumberish;
+        quoteTokenAddress: string;
+        baseTokenAddress: string;
+        quoteTokenSymbol: string;
+        baseTokenSymbol: string;
+        quoteTokenDecimals: BigNumberish;
+        baseTokenDecimals: BigNumberish;
+        flipRatio: boolean;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        tickCurrent: BigNumberish;
+        tickSpacing: BigNumberish;
+        fee: BigNumberish;
+        poolAddress: string;
+      }
+    ]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "constructTokenURI",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class NFTDescriptor extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: NFTDescriptorInterface;
+
+  functions: {
+    constructTokenURI(
+      params: {
+        tokenId: BigNumberish;
+        quoteTokenAddress: string;
+        baseTokenAddress: string;
+        quoteTokenSymbol: string;
+        baseTokenSymbol: string;
+        quoteTokenDecimals: BigNumberish;
+        baseTokenDecimals: BigNumberish;
+        flipRatio: boolean;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        tickCurrent: BigNumberish;
+        tickSpacing: BigNumberish;
+        fee: BigNumberish;
+        poolAddress: string;
+      },
+      overrides?: CallOverrides
+    ): Promise<[string]>;
+  };
+
+  constructTokenURI(
+    params: {
+      tokenId: BigNumberish;
+      quoteTokenAddress: string;
+      baseTokenAddress: string;
+      quoteTokenSymbol: string;
+      baseTokenSymbol: string;
+      quoteTokenDecimals: BigNumberish;
+      baseTokenDecimals: BigNumberish;
+      flipRatio: boolean;
+      tickLower: BigNumberish;
+      tickUpper: BigNumberish;
+      tickCurrent: BigNumberish;
+      tickSpacing: BigNumberish;
+      fee: BigNumberish;
+      poolAddress: string;
+    },
+    overrides?: CallOverrides
+  ): Promise<string>;
+
+  callStatic: {
+    constructTokenURI(
+      params: {
+        tokenId: BigNumberish;
+        quoteTokenAddress: string;
+        baseTokenAddress: string;
+        quoteTokenSymbol: string;
+        baseTokenSymbol: string;
+        quoteTokenDecimals: BigNumberish;
+        baseTokenDecimals: BigNumberish;
+        flipRatio: boolean;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        tickCurrent: BigNumberish;
+        tickSpacing: BigNumberish;
+        fee: BigNumberish;
+        poolAddress: string;
+      },
+      overrides?: CallOverrides
+    ): Promise<string>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    constructTokenURI(
+      params: {
+        tokenId: BigNumberish;
+        quoteTokenAddress: string;
+        baseTokenAddress: string;
+        quoteTokenSymbol: string;
+        baseTokenSymbol: string;
+        quoteTokenDecimals: BigNumberish;
+        baseTokenDecimals: BigNumberish;
+        flipRatio: boolean;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        tickCurrent: BigNumberish;
+        tickSpacing: BigNumberish;
+        fee: BigNumberish;
+        poolAddress: string;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    constructTokenURI(
+      params: {
+        tokenId: BigNumberish;
+        quoteTokenAddress: string;
+        baseTokenAddress: string;
+        quoteTokenSymbol: string;
+        baseTokenSymbol: string;
+        quoteTokenDecimals: BigNumberish;
+        baseTokenDecimals: BigNumberish;
+        flipRatio: boolean;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        tickCurrent: BigNumberish;
+        tickSpacing: BigNumberish;
+        fee: BigNumberish;
+        poolAddress: string;
+      },
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/NonfungiblePositionManager.d.ts b/lib/sor/types/v3/NonfungiblePositionManager.d.ts
new file mode 100644
index 0000000..bf31235
--- /dev/null
+++ b/lib/sor/types/v3/NonfungiblePositionManager.d.ts
@@ -0,0 +1,1761 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface NonfungiblePositionManagerInterface extends ethers.utils.Interface {
+  functions: {
+    "DOMAIN_SEPARATOR()": FunctionFragment;
+    "PERMIT_TYPEHASH()": FunctionFragment;
+    "WETH9()": FunctionFragment;
+    "approve(address,uint256)": FunctionFragment;
+    "balanceOf(address)": FunctionFragment;
+    "baseURI()": FunctionFragment;
+    "burn(uint256)": FunctionFragment;
+    "collect(tuple)": FunctionFragment;
+    "createAndInitializePoolIfNecessary(address,address,uint24,uint160)": FunctionFragment;
+    "decreaseLiquidity(tuple)": FunctionFragment;
+    "factory()": FunctionFragment;
+    "getApproved(uint256)": FunctionFragment;
+    "increaseLiquidity(tuple)": FunctionFragment;
+    "isApprovedForAll(address,address)": FunctionFragment;
+    "mint(tuple)": FunctionFragment;
+    "multicall(bytes[])": FunctionFragment;
+    "name()": FunctionFragment;
+    "ownerOf(uint256)": FunctionFragment;
+    "permit(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "positions(uint256)": FunctionFragment;
+    "refundETH()": FunctionFragment;
+    "safeTransferFrom(address,address,uint256)": FunctionFragment;
+    "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "setApprovalForAll(address,bool)": FunctionFragment;
+    "supportsInterface(bytes4)": FunctionFragment;
+    "sweepToken(address,uint256,address)": FunctionFragment;
+    "symbol()": FunctionFragment;
+    "tokenByIndex(uint256)": FunctionFragment;
+    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
+    "tokenURI(uint256)": FunctionFragment;
+    "totalSupply()": FunctionFragment;
+    "transferFrom(address,address,uint256)": FunctionFragment;
+    "uniswapV3MintCallback(uint256,uint256,bytes)": FunctionFragment;
+    "unwrapWETH9(uint256,address)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "DOMAIN_SEPARATOR",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "PERMIT_TYPEHASH",
+    values?: undefined
+  ): string;
+  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "approve",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
+  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
+  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
+  encodeFunctionData(
+    functionFragment: "collect",
+    values: [
+      {
+        tokenId: BigNumberish;
+        recipient: string;
+        amount0Max: BigNumberish;
+        amount1Max: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "createAndInitializePoolIfNecessary",
+    values: [string, string, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "decreaseLiquidity",
+    values: [
+      {
+        tokenId: BigNumberish;
+        liquidity: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        deadline: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "getApproved",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "increaseLiquidity",
+    values: [
+      {
+        tokenId: BigNumberish;
+        amount0Desired: BigNumberish;
+        amount1Desired: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        deadline: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "isApprovedForAll",
+    values: [string, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "mint",
+    values: [
+      {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Desired: BigNumberish;
+        amount1Desired: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "multicall",
+    values: [BytesLike[]]
+  ): string;
+  encodeFunctionData(functionFragment: "name", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "ownerOf",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "permit",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "positions",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "refundETH", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "safeTransferFrom",
+    values: [string, string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermit",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermitAllowed",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermitAllowedIfNecessary",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermitIfNecessary",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "setApprovalForAll",
+    values: [string, boolean]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "supportsInterface",
+    values: [BytesLike]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "sweepToken",
+    values: [string, BigNumberish, string]
+  ): string;
+  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "tokenByIndex",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "tokenOfOwnerByIndex",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "tokenURI",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "totalSupply",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "transferFrom",
+    values: [string, string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "uniswapV3MintCallback",
+    values: [BigNumberish, BigNumberish, BytesLike]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "unwrapWETH9",
+    values: [BigNumberish, string]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "DOMAIN_SEPARATOR",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "PERMIT_TYPEHASH",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "createAndInitializePoolIfNecessary",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "decreaseLiquidity",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "getApproved",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "increaseLiquidity",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "isApprovedForAll",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "refundETH", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "safeTransferFrom",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "selfPermit", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "selfPermitAllowed",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "selfPermitAllowedIfNecessary",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "selfPermitIfNecessary",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "setApprovalForAll",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "supportsInterface",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "tokenByIndex",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "tokenOfOwnerByIndex",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "totalSupply",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "transferFrom",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "uniswapV3MintCallback",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "unwrapWETH9",
+    data: BytesLike
+  ): Result;
+
+  events: {
+    "Approval(address,address,uint256)": EventFragment;
+    "ApprovalForAll(address,address,bool)": EventFragment;
+    "Collect(uint256,address,uint256,uint256)": EventFragment;
+    "DecreaseLiquidity(uint256,uint128,uint256,uint256)": EventFragment;
+    "IncreaseLiquidity(uint256,uint128,uint256,uint256)": EventFragment;
+    "Transfer(address,address,uint256)": EventFragment;
+  };
+
+  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Collect"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "DecreaseLiquidity"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "IncreaseLiquidity"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
+}
+
+export class NonfungiblePositionManager extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: NonfungiblePositionManagerInterface;
+
+  functions: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;
+
+    WETH9(overrides?: CallOverrides): Promise<[string]>;
+
+    approve(
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    baseURI(overrides?: CallOverrides): Promise<[string]>;
+
+    burn(
+      tokenId: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    collect(
+      params: {
+        tokenId: BigNumberish;
+        recipient: string;
+        amount0Max: BigNumberish;
+        amount1Max: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    createAndInitializePoolIfNecessary(
+      token0: string,
+      token1: string,
+      fee: BigNumberish,
+      sqrtPriceX96: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    decreaseLiquidity(
+      params: {
+        tokenId: BigNumberish;
+        liquidity: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        deadline: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<[string]>;
+
+    getApproved(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[string]>;
+
+    increaseLiquidity(
+      params: {
+        tokenId: BigNumberish;
+        amount0Desired: BigNumberish;
+        amount1Desired: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        deadline: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    isApprovedForAll(
+      owner: string,
+      operator: string,
+      overrides?: CallOverrides
+    ): Promise<[boolean]>;
+
+    mint(
+      params: {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Desired: BigNumberish;
+        amount1Desired: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    multicall(
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    name(overrides?: CallOverrides): Promise<[string]>;
+
+    ownerOf(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[string]>;
+
+    permit(
+      spender: string,
+      tokenId: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    positions(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [
+        BigNumber,
+        string,
+        string,
+        string,
+        number,
+        number,
+        number,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber
+      ] & {
+        nonce: BigNumber;
+        operator: string;
+        token0: string;
+        token1: string;
+        fee: number;
+        tickLower: number;
+        tickUpper: number;
+        liquidity: BigNumber;
+        feeGrowthInside0LastX128: BigNumber;
+        feeGrowthInside1LastX128: BigNumber;
+        tokensOwed0: BigNumber;
+        tokensOwed1: BigNumber;
+      }
+    >;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "safeTransferFrom(address,address,uint256)"(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    "safeTransferFrom(address,address,uint256,bytes)"(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      _data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    setApprovalForAll(
+      operator: string,
+      approved: boolean,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    supportsInterface(
+      interfaceId: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<[boolean]>;
+
+    sweepToken(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    symbol(overrides?: CallOverrides): Promise<[string]>;
+
+    tokenByIndex(
+      index: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber]>;
+
+    tokenOfOwnerByIndex(
+      owner: string,
+      index: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber]>;
+
+    tokenURI(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[string]>;
+
+    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    uniswapV3MintCallback(
+      amount0Owed: BigNumberish,
+      amount1Owed: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    unwrapWETH9(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;
+
+  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;
+
+  WETH9(overrides?: CallOverrides): Promise<string>;
+
+  approve(
+    to: string,
+    tokenId: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+  baseURI(overrides?: CallOverrides): Promise<string>;
+
+  burn(
+    tokenId: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  collect(
+    params: {
+      tokenId: BigNumberish;
+      recipient: string;
+      amount0Max: BigNumberish;
+      amount1Max: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  createAndInitializePoolIfNecessary(
+    token0: string,
+    token1: string,
+    fee: BigNumberish,
+    sqrtPriceX96: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  decreaseLiquidity(
+    params: {
+      tokenId: BigNumberish;
+      liquidity: BigNumberish;
+      amount0Min: BigNumberish;
+      amount1Min: BigNumberish;
+      deadline: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  factory(overrides?: CallOverrides): Promise<string>;
+
+  getApproved(
+    tokenId: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<string>;
+
+  increaseLiquidity(
+    params: {
+      tokenId: BigNumberish;
+      amount0Desired: BigNumberish;
+      amount1Desired: BigNumberish;
+      amount0Min: BigNumberish;
+      amount1Min: BigNumberish;
+      deadline: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  isApprovedForAll(
+    owner: string,
+    operator: string,
+    overrides?: CallOverrides
+  ): Promise<boolean>;
+
+  mint(
+    params: {
+      token0: string;
+      token1: string;
+      fee: BigNumberish;
+      tickLower: BigNumberish;
+      tickUpper: BigNumberish;
+      amount0Desired: BigNumberish;
+      amount1Desired: BigNumberish;
+      amount0Min: BigNumberish;
+      amount1Min: BigNumberish;
+      recipient: string;
+      deadline: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  multicall(
+    data: BytesLike[],
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  name(overrides?: CallOverrides): Promise<string>;
+
+  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;
+
+  permit(
+    spender: string,
+    tokenId: BigNumberish,
+    deadline: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  positions(
+    tokenId: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<
+    [
+      BigNumber,
+      string,
+      string,
+      string,
+      number,
+      number,
+      number,
+      BigNumber,
+      BigNumber,
+      BigNumber,
+      BigNumber,
+      BigNumber
+    ] & {
+      nonce: BigNumber;
+      operator: string;
+      token0: string;
+      token1: string;
+      fee: number;
+      tickLower: number;
+      tickUpper: number;
+      liquidity: BigNumber;
+      feeGrowthInside0LastX128: BigNumber;
+      feeGrowthInside1LastX128: BigNumber;
+      tokensOwed0: BigNumber;
+      tokensOwed1: BigNumber;
+    }
+  >;
+
+  refundETH(
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "safeTransferFrom(address,address,uint256)"(
+    from: string,
+    to: string,
+    tokenId: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  "safeTransferFrom(address,address,uint256,bytes)"(
+    from: string,
+    to: string,
+    tokenId: BigNumberish,
+    _data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermit(
+    token: string,
+    value: BigNumberish,
+    deadline: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermitAllowed(
+    token: string,
+    nonce: BigNumberish,
+    expiry: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermitAllowedIfNecessary(
+    token: string,
+    nonce: BigNumberish,
+    expiry: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermitIfNecessary(
+    token: string,
+    value: BigNumberish,
+    deadline: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  setApprovalForAll(
+    operator: string,
+    approved: boolean,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  supportsInterface(
+    interfaceId: BytesLike,
+    overrides?: CallOverrides
+  ): Promise<boolean>;
+
+  sweepToken(
+    token: string,
+    amountMinimum: BigNumberish,
+    recipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  symbol(overrides?: CallOverrides): Promise<string>;
+
+  tokenByIndex(
+    index: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  tokenOfOwnerByIndex(
+    owner: string,
+    index: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;
+
+  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+  transferFrom(
+    from: string,
+    to: string,
+    tokenId: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  uniswapV3MintCallback(
+    amount0Owed: BigNumberish,
+    amount1Owed: BigNumberish,
+    data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  unwrapWETH9(
+    amountMinimum: BigNumberish,
+    recipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;
+
+    WETH9(overrides?: CallOverrides): Promise<string>;
+
+    approve(
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    baseURI(overrides?: CallOverrides): Promise<string>;
+
+    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;
+
+    collect(
+      params: {
+        tokenId: BigNumberish;
+        recipient: string;
+        amount0Max: BigNumberish;
+        amount1Max: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
+    >;
+
+    createAndInitializePoolIfNecessary(
+      token0: string,
+      token1: string,
+      fee: BigNumberish,
+      sqrtPriceX96: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<string>;
+
+    decreaseLiquidity(
+      params: {
+        tokenId: BigNumberish;
+        liquidity: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        deadline: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
+    >;
+
+    factory(overrides?: CallOverrides): Promise<string>;
+
+    getApproved(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<string>;
+
+    increaseLiquidity(
+      params: {
+        tokenId: BigNumberish;
+        amount0Desired: BigNumberish;
+        amount1Desired: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        deadline: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, BigNumber] & {
+        liquidity: BigNumber;
+        amount0: BigNumber;
+        amount1: BigNumber;
+      }
+    >;
+
+    isApprovedForAll(
+      owner: string,
+      operator: string,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    mint(
+      params: {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Desired: BigNumberish;
+        amount1Desired: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, BigNumber, BigNumber] & {
+        tokenId: BigNumber;
+        liquidity: BigNumber;
+        amount0: BigNumber;
+        amount1: BigNumber;
+      }
+    >;
+
+    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;
+
+    name(overrides?: CallOverrides): Promise<string>;
+
+    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;
+
+    permit(
+      spender: string,
+      tokenId: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    positions(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [
+        BigNumber,
+        string,
+        string,
+        string,
+        number,
+        number,
+        number,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber
+      ] & {
+        nonce: BigNumber;
+        operator: string;
+        token0: string;
+        token1: string;
+        fee: number;
+        tickLower: number;
+        tickUpper: number;
+        liquidity: BigNumber;
+        feeGrowthInside0LastX128: BigNumber;
+        feeGrowthInside1LastX128: BigNumber;
+        tokensOwed0: BigNumber;
+        tokensOwed1: BigNumber;
+      }
+    >;
+
+    refundETH(overrides?: CallOverrides): Promise<void>;
+
+    "safeTransferFrom(address,address,uint256)"(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    "safeTransferFrom(address,address,uint256,bytes)"(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      _data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    setApprovalForAll(
+      operator: string,
+      approved: boolean,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    supportsInterface(
+      interfaceId: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    sweepToken(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    symbol(overrides?: CallOverrides): Promise<string>;
+
+    tokenByIndex(
+      index: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    tokenOfOwnerByIndex(
+      owner: string,
+      index: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;
+
+    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    uniswapV3MintCallback(
+      amount0Owed: BigNumberish,
+      amount1Owed: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    unwrapWETH9(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {
+    Approval(
+      owner?: string | null,
+      approved?: string | null,
+      tokenId?: BigNumberish | null
+    ): TypedEventFilter<
+      [string, string, BigNumber],
+      { owner: string; approved: string; tokenId: BigNumber }
+    >;
+
+    ApprovalForAll(
+      owner?: string | null,
+      operator?: string | null,
+      approved?: null
+    ): TypedEventFilter<
+      [string, string, boolean],
+      { owner: string; operator: string; approved: boolean }
+    >;
+
+    Collect(
+      tokenId?: BigNumberish | null,
+      recipient?: null,
+      amount0?: null,
+      amount1?: null
+    ): TypedEventFilter<
+      [BigNumber, string, BigNumber, BigNumber],
+      {
+        tokenId: BigNumber;
+        recipient: string;
+        amount0: BigNumber;
+        amount1: BigNumber;
+      }
+    >;
+
+    DecreaseLiquidity(
+      tokenId?: BigNumberish | null,
+      liquidity?: null,
+      amount0?: null,
+      amount1?: null
+    ): TypedEventFilter<
+      [BigNumber, BigNumber, BigNumber, BigNumber],
+      {
+        tokenId: BigNumber;
+        liquidity: BigNumber;
+        amount0: BigNumber;
+        amount1: BigNumber;
+      }
+    >;
+
+    IncreaseLiquidity(
+      tokenId?: BigNumberish | null,
+      liquidity?: null,
+      amount0?: null,
+      amount1?: null
+    ): TypedEventFilter<
+      [BigNumber, BigNumber, BigNumber, BigNumber],
+      {
+        tokenId: BigNumber;
+        liquidity: BigNumber;
+        amount0: BigNumber;
+        amount1: BigNumber;
+      }
+    >;
+
+    Transfer(
+      from?: string | null,
+      to?: string | null,
+      tokenId?: BigNumberish | null
+    ): TypedEventFilter<
+      [string, string, BigNumber],
+      { from: string; to: string; tokenId: BigNumber }
+    >;
+  };
+
+  estimateGas: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;
+
+    WETH9(overrides?: CallOverrides): Promise<BigNumber>;
+
+    approve(
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    baseURI(overrides?: CallOverrides): Promise<BigNumber>;
+
+    burn(
+      tokenId: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    collect(
+      params: {
+        tokenId: BigNumberish;
+        recipient: string;
+        amount0Max: BigNumberish;
+        amount1Max: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    createAndInitializePoolIfNecessary(
+      token0: string,
+      token1: string,
+      fee: BigNumberish,
+      sqrtPriceX96: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    decreaseLiquidity(
+      params: {
+        tokenId: BigNumberish;
+        liquidity: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        deadline: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<BigNumber>;
+
+    getApproved(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    increaseLiquidity(
+      params: {
+        tokenId: BigNumberish;
+        amount0Desired: BigNumberish;
+        amount1Desired: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        deadline: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    isApprovedForAll(
+      owner: string,
+      operator: string,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    mint(
+      params: {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Desired: BigNumberish;
+        amount1Desired: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    multicall(
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    name(overrides?: CallOverrides): Promise<BigNumber>;
+
+    ownerOf(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    permit(
+      spender: string,
+      tokenId: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    positions(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "safeTransferFrom(address,address,uint256)"(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    "safeTransferFrom(address,address,uint256,bytes)"(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      _data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    setApprovalForAll(
+      operator: string,
+      approved: boolean,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    supportsInterface(
+      interfaceId: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    sweepToken(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    symbol(overrides?: CallOverrides): Promise<BigNumber>;
+
+    tokenByIndex(
+      index: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    tokenOfOwnerByIndex(
+      owner: string,
+      index: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    tokenURI(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    uniswapV3MintCallback(
+      amount0Owed: BigNumberish,
+      amount1Owed: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    unwrapWETH9(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    WETH9(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    approve(
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    balanceOf(
+      owner: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    burn(
+      tokenId: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    collect(
+      params: {
+        tokenId: BigNumberish;
+        recipient: string;
+        amount0Max: BigNumberish;
+        amount1Max: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    createAndInitializePoolIfNecessary(
+      token0: string,
+      token1: string,
+      fee: BigNumberish,
+      sqrtPriceX96: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    decreaseLiquidity(
+      params: {
+        tokenId: BigNumberish;
+        liquidity: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        deadline: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    getApproved(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    increaseLiquidity(
+      params: {
+        tokenId: BigNumberish;
+        amount0Desired: BigNumberish;
+        amount1Desired: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        deadline: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    isApprovedForAll(
+      owner: string,
+      operator: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    mint(
+      params: {
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Desired: BigNumberish;
+        amount1Desired: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    multicall(
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    ownerOf(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    permit(
+      spender: string,
+      tokenId: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    positions(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "safeTransferFrom(address,address,uint256)"(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    "safeTransferFrom(address,address,uint256,bytes)"(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      _data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    setApprovalForAll(
+      operator: string,
+      approved: boolean,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    supportsInterface(
+      interfaceId: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    sweepToken(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    tokenByIndex(
+      index: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    tokenOfOwnerByIndex(
+      owner: string,
+      index: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    tokenURI(
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    transferFrom(
+      from: string,
+      to: string,
+      tokenId: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    uniswapV3MintCallback(
+      amount0Owed: BigNumberish,
+      amount1Owed: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    unwrapWETH9(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/NonfungibleTokenPositionDescriptor.d.ts b/lib/sor/types/v3/NonfungibleTokenPositionDescriptor.d.ts
new file mode 100644
index 0000000..7456bf0
--- /dev/null
+++ b/lib/sor/types/v3/NonfungibleTokenPositionDescriptor.d.ts
@@ -0,0 +1,252 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ethers,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface NonfungibleTokenPositionDescriptorInterface
+  extends ethers.utils.Interface {
+  functions: {
+    "WETH9()": FunctionFragment;
+    "flipRatio(address,address,uint256)": FunctionFragment;
+    "nativeCurrencyLabel()": FunctionFragment;
+    "nativeCurrencyLabelBytes()": FunctionFragment;
+    "tokenRatioPriority(address,uint256)": FunctionFragment;
+    "tokenURI(address,uint256)": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "flipRatio",
+    values: [string, string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "nativeCurrencyLabel",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "nativeCurrencyLabelBytes",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "tokenRatioPriority",
+    values: [string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "tokenURI",
+    values: [string, BigNumberish]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "flipRatio", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "nativeCurrencyLabel",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "nativeCurrencyLabelBytes",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "tokenRatioPriority",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
+
+  events: {};
+}
+
+export class NonfungibleTokenPositionDescriptor extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: NonfungibleTokenPositionDescriptorInterface;
+
+  functions: {
+    WETH9(overrides?: CallOverrides): Promise<[string]>;
+
+    flipRatio(
+      token0: string,
+      token1: string,
+      chainId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[boolean]>;
+
+    nativeCurrencyLabel(overrides?: CallOverrides): Promise<[string]>;
+
+    nativeCurrencyLabelBytes(overrides?: CallOverrides): Promise<[string]>;
+
+    tokenRatioPriority(
+      token: string,
+      chainId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber]>;
+
+    tokenURI(
+      positionManager: string,
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[string]>;
+  };
+
+  WETH9(overrides?: CallOverrides): Promise<string>;
+
+  flipRatio(
+    token0: string,
+    token1: string,
+    chainId: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<boolean>;
+
+  nativeCurrencyLabel(overrides?: CallOverrides): Promise<string>;
+
+  nativeCurrencyLabelBytes(overrides?: CallOverrides): Promise<string>;
+
+  tokenRatioPriority(
+    token: string,
+    chainId: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<BigNumber>;
+
+  tokenURI(
+    positionManager: string,
+    tokenId: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<string>;
+
+  callStatic: {
+    WETH9(overrides?: CallOverrides): Promise<string>;
+
+    flipRatio(
+      token0: string,
+      token1: string,
+      chainId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<boolean>;
+
+    nativeCurrencyLabel(overrides?: CallOverrides): Promise<string>;
+
+    nativeCurrencyLabelBytes(overrides?: CallOverrides): Promise<string>;
+
+    tokenRatioPriority(
+      token: string,
+      chainId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    tokenURI(
+      positionManager: string,
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<string>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    WETH9(overrides?: CallOverrides): Promise<BigNumber>;
+
+    flipRatio(
+      token0: string,
+      token1: string,
+      chainId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    nativeCurrencyLabel(overrides?: CallOverrides): Promise<BigNumber>;
+
+    nativeCurrencyLabelBytes(overrides?: CallOverrides): Promise<BigNumber>;
+
+    tokenRatioPriority(
+      token: string,
+      chainId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    tokenURI(
+      positionManager: string,
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    WETH9(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    flipRatio(
+      token0: string,
+      token1: string,
+      chainId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    nativeCurrencyLabel(
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    nativeCurrencyLabelBytes(
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    tokenRatioPriority(
+      token: string,
+      chainId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    tokenURI(
+      positionManager: string,
+      tokenId: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/PairFlash.d.ts b/lib/sor/types/v3/PairFlash.d.ts
new file mode 100644
index 0000000..e58d210
--- /dev/null
+++ b/lib/sor/types/v3/PairFlash.d.ts
@@ -0,0 +1,351 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface PairFlashInterface extends ethers.utils.Interface {
+  functions: {
+    "WETH9()": FunctionFragment;
+    "factory()": FunctionFragment;
+    "initFlash(tuple)": FunctionFragment;
+    "refundETH()": FunctionFragment;
+    "swapRouter()": FunctionFragment;
+    "sweepToken(address,uint256,address)": FunctionFragment;
+    "uniswapV3FlashCallback(uint256,uint256,bytes)": FunctionFragment;
+    "unwrapWETH9(uint256,address)": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
+  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "initFlash",
+    values: [
+      {
+        token0: string;
+        token1: string;
+        fee1: BigNumberish;
+        amount0: BigNumberish;
+        amount1: BigNumberish;
+        fee2: BigNumberish;
+        fee3: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(functionFragment: "refundETH", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "swapRouter",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "sweepToken",
+    values: [string, BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "uniswapV3FlashCallback",
+    values: [BigNumberish, BigNumberish, BytesLike]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "unwrapWETH9",
+    values: [BigNumberish, string]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "initFlash", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "refundETH", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "uniswapV3FlashCallback",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "unwrapWETH9",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class PairFlash extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: PairFlashInterface;
+
+  functions: {
+    WETH9(overrides?: CallOverrides): Promise<[string]>;
+
+    factory(overrides?: CallOverrides): Promise<[string]>;
+
+    initFlash(
+      params: {
+        token0: string;
+        token1: string;
+        fee1: BigNumberish;
+        amount0: BigNumberish;
+        amount1: BigNumberish;
+        fee2: BigNumberish;
+        fee3: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    swapRouter(overrides?: CallOverrides): Promise<[string]>;
+
+    sweepToken(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    uniswapV3FlashCallback(
+      fee0: BigNumberish,
+      fee1: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    unwrapWETH9(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  WETH9(overrides?: CallOverrides): Promise<string>;
+
+  factory(overrides?: CallOverrides): Promise<string>;
+
+  initFlash(
+    params: {
+      token0: string;
+      token1: string;
+      fee1: BigNumberish;
+      amount0: BigNumberish;
+      amount1: BigNumberish;
+      fee2: BigNumberish;
+      fee3: BigNumberish;
+    },
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  refundETH(
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  swapRouter(overrides?: CallOverrides): Promise<string>;
+
+  sweepToken(
+    token: string,
+    amountMinimum: BigNumberish,
+    recipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  uniswapV3FlashCallback(
+    fee0: BigNumberish,
+    fee1: BigNumberish,
+    data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  unwrapWETH9(
+    amountMinimum: BigNumberish,
+    recipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    WETH9(overrides?: CallOverrides): Promise<string>;
+
+    factory(overrides?: CallOverrides): Promise<string>;
+
+    initFlash(
+      params: {
+        token0: string;
+        token1: string;
+        fee1: BigNumberish;
+        amount0: BigNumberish;
+        amount1: BigNumberish;
+        fee2: BigNumberish;
+        fee3: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    refundETH(overrides?: CallOverrides): Promise<void>;
+
+    swapRouter(overrides?: CallOverrides): Promise<string>;
+
+    sweepToken(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    uniswapV3FlashCallback(
+      fee0: BigNumberish,
+      fee1: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    unwrapWETH9(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    WETH9(overrides?: CallOverrides): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<BigNumber>;
+
+    initFlash(
+      params: {
+        token0: string;
+        token1: string;
+        fee1: BigNumberish;
+        amount0: BigNumberish;
+        amount1: BigNumberish;
+        fee2: BigNumberish;
+        fee3: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;
+
+    sweepToken(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    uniswapV3FlashCallback(
+      fee0: BigNumberish,
+      fee1: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    unwrapWETH9(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    WETH9(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    initFlash(
+      params: {
+        token0: string;
+        token1: string;
+        fee1: BigNumberish;
+        amount0: BigNumberish;
+        amount1: BigNumberish;
+        fee2: BigNumberish;
+        fee3: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    sweepToken(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    uniswapV3FlashCallback(
+      fee0: BigNumberish,
+      fee1: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    unwrapWETH9(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/Quoter.d.ts b/lib/sor/types/v3/Quoter.d.ts
new file mode 100644
index 0000000..643e2ad
--- /dev/null
+++ b/lib/sor/types/v3/Quoter.d.ts
@@ -0,0 +1,338 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface QuoterInterface extends ethers.utils.Interface {
+  functions: {
+    "WETH9()": FunctionFragment;
+    "factory()": FunctionFragment;
+    "quoteExactInput(bytes,uint256)": FunctionFragment;
+    "quoteExactInputSingle(address,address,uint24,uint256,uint160)": FunctionFragment;
+    "quoteExactOutput(bytes,uint256)": FunctionFragment;
+    "quoteExactOutputSingle(address,address,uint24,uint256,uint160)": FunctionFragment;
+    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
+  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactInput",
+    values: [BytesLike, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactInputSingle",
+    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactOutput",
+    values: [BytesLike, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactOutputSingle",
+    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "uniswapV3SwapCallback",
+    values: [BigNumberish, BigNumberish, BytesLike]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactInput",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactInputSingle",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactOutput",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactOutputSingle",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "uniswapV3SwapCallback",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class Quoter extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: QuoterInterface;
+
+  functions: {
+    WETH9(overrides?: CallOverrides): Promise<[string]>;
+
+    factory(overrides?: CallOverrides): Promise<[string]>;
+
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactInputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountIn: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactOutputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountOut: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      path: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<[void]>;
+  };
+
+  WETH9(overrides?: CallOverrides): Promise<string>;
+
+  factory(overrides?: CallOverrides): Promise<string>;
+
+  quoteExactInput(
+    path: BytesLike,
+    amountIn: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactInputSingle(
+    tokenIn: string,
+    tokenOut: string,
+    fee: BigNumberish,
+    amountIn: BigNumberish,
+    sqrtPriceLimitX96: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactOutput(
+    path: BytesLike,
+    amountOut: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactOutputSingle(
+    tokenIn: string,
+    tokenOut: string,
+    fee: BigNumberish,
+    amountOut: BigNumberish,
+    sqrtPriceLimitX96: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  uniswapV3SwapCallback(
+    amount0Delta: BigNumberish,
+    amount1Delta: BigNumberish,
+    path: BytesLike,
+    overrides?: CallOverrides
+  ): Promise<void>;
+
+  callStatic: {
+    WETH9(overrides?: CallOverrides): Promise<string>;
+
+    factory(overrides?: CallOverrides): Promise<string>;
+
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    quoteExactInputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountIn: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    quoteExactOutputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountOut: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      path: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    WETH9(overrides?: CallOverrides): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<BigNumber>;
+
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactInputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountIn: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactOutputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountOut: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      path: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    WETH9(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactInputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountIn: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactOutputSingle(
+      tokenIn: string,
+      tokenOut: string,
+      fee: BigNumberish,
+      amountOut: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      path: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/QuoterV2.d.ts b/lib/sor/types/v3/QuoterV2.d.ts
new file mode 100644
index 0000000..cc489a0
--- /dev/null
+++ b/lib/sor/types/v3/QuoterV2.d.ts
@@ -0,0 +1,402 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface QuoterV2Interface extends ethers.utils.Interface {
+  functions: {
+    "WETH9()": FunctionFragment;
+    "factory()": FunctionFragment;
+    "quoteExactInput(bytes,uint256)": FunctionFragment;
+    "quoteExactInputSingle(tuple)": FunctionFragment;
+    "quoteExactOutput(bytes,uint256)": FunctionFragment;
+    "quoteExactOutputSingle(tuple)": FunctionFragment;
+    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
+  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactInput",
+    values: [BytesLike, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactInputSingle",
+    values: [
+      {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactOutput",
+    values: [BytesLike, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "quoteExactOutputSingle",
+    values: [
+      {
+        tokenIn: string;
+        tokenOut: string;
+        amount: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "uniswapV3SwapCallback",
+    values: [BigNumberish, BigNumberish, BytesLike]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactInput",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactInputSingle",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactOutput",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "quoteExactOutputSingle",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "uniswapV3SwapCallback",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class QuoterV2 extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: QuoterV2Interface;
+
+  functions: {
+    WETH9(overrides?: CallOverrides): Promise<[string]>;
+
+    factory(overrides?: CallOverrides): Promise<[string]>;
+
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    quoteExactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amount: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      path: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<[void]>;
+  };
+
+  WETH9(overrides?: CallOverrides): Promise<string>;
+
+  factory(overrides?: CallOverrides): Promise<string>;
+
+  quoteExactInput(
+    path: BytesLike,
+    amountIn: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactInputSingle(
+    params: {
+      tokenIn: string;
+      tokenOut: string;
+      amountIn: BigNumberish;
+      fee: BigNumberish;
+      sqrtPriceLimitX96: BigNumberish;
+    },
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactOutput(
+    path: BytesLike,
+    amountOut: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  quoteExactOutputSingle(
+    params: {
+      tokenIn: string;
+      tokenOut: string;
+      amount: BigNumberish;
+      fee: BigNumberish;
+      sqrtPriceLimitX96: BigNumberish;
+    },
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  uniswapV3SwapCallback(
+    amount0Delta: BigNumberish,
+    amount1Delta: BigNumberish,
+    path: BytesLike,
+    overrides?: CallOverrides
+  ): Promise<void>;
+
+  callStatic: {
+    WETH9(overrides?: CallOverrides): Promise<string>;
+
+    factory(overrides?: CallOverrides): Promise<string>;
+
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber[], number[], BigNumber] & {
+        amountOut: BigNumber;
+        sqrtPriceX96AfterList: BigNumber[];
+        initializedTicksCrossedList: number[];
+        gasEstimate: BigNumber;
+      }
+    >;
+
+    quoteExactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, number, BigNumber] & {
+        amountOut: BigNumber;
+        sqrtPriceX96After: BigNumber;
+        initializedTicksCrossed: number;
+        gasEstimate: BigNumber;
+      }
+    >;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber[], number[], BigNumber] & {
+        amountIn: BigNumber;
+        sqrtPriceX96AfterList: BigNumber[];
+        initializedTicksCrossedList: number[];
+        gasEstimate: BigNumber;
+      }
+    >;
+
+    quoteExactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amount: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, number, BigNumber] & {
+        amountIn: BigNumber;
+        sqrtPriceX96After: BigNumber;
+        initializedTicksCrossed: number;
+        gasEstimate: BigNumber;
+      }
+    >;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      path: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    WETH9(overrides?: CallOverrides): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<BigNumber>;
+
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    quoteExactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amount: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      path: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    WETH9(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    quoteExactInput(
+      path: BytesLike,
+      amountIn: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amountIn: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactOutput(
+      path: BytesLike,
+      amountOut: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    quoteExactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        amount: BigNumberish;
+        fee: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      path: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/SwapRouter.d.ts b/lib/sor/types/v3/SwapRouter.d.ts
new file mode 100644
index 0000000..d7a3836
--- /dev/null
+++ b/lib/sor/types/v3/SwapRouter.d.ts
@@ -0,0 +1,967 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface SwapRouterInterface extends ethers.utils.Interface {
+  functions: {
+    "WETH9()": FunctionFragment;
+    "exactInput(tuple)": FunctionFragment;
+    "exactInputSingle(tuple)": FunctionFragment;
+    "exactOutput(tuple)": FunctionFragment;
+    "exactOutputSingle(tuple)": FunctionFragment;
+    "factory()": FunctionFragment;
+    "multicall(bytes[])": FunctionFragment;
+    "refundETH()": FunctionFragment;
+    "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "sweepToken(address,uint256,address)": FunctionFragment;
+    "sweepTokenWithFee(address,uint256,address,uint256,address)": FunctionFragment;
+    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
+    "unwrapWETH9(uint256,address)": FunctionFragment;
+    "unwrapWETH9WithFee(uint256,address,uint256,address)": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "exactInput",
+    values: [
+      {
+        path: BytesLike;
+        recipient: string;
+        deadline: BigNumberish;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "exactInputSingle",
+    values: [
+      {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "exactOutput",
+    values: [
+      {
+        path: BytesLike;
+        recipient: string;
+        deadline: BigNumberish;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "exactOutputSingle",
+    values: [
+      {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      }
+    ]
+  ): string;
+  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "multicall",
+    values: [BytesLike[]]
+  ): string;
+  encodeFunctionData(functionFragment: "refundETH", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "selfPermit",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermitAllowed",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermitAllowedIfNecessary",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermitIfNecessary",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "sweepToken",
+    values: [string, BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "sweepTokenWithFee",
+    values: [string, BigNumberish, string, BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "uniswapV3SwapCallback",
+    values: [BigNumberish, BigNumberish, BytesLike]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "unwrapWETH9",
+    values: [BigNumberish, string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "unwrapWETH9WithFee",
+    values: [BigNumberish, string, BigNumberish, string]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "exactInput", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "exactInputSingle",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "exactOutput",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "exactOutputSingle",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "refundETH", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "selfPermit", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "selfPermitAllowed",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "selfPermitAllowedIfNecessary",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "selfPermitIfNecessary",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "sweepTokenWithFee",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "uniswapV3SwapCallback",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "unwrapWETH9",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "unwrapWETH9WithFee",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class SwapRouter extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: SwapRouterInterface;
+
+  functions: {
+    WETH9(overrides?: CallOverrides): Promise<[string]>;
+
+    exactInput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        deadline: BigNumberish;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    exactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    exactOutput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        deadline: BigNumberish;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    exactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<[string]>;
+
+    multicall(
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    sweepToken(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    sweepTokenWithFee(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      _data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    unwrapWETH9(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    unwrapWETH9WithFee(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  WETH9(overrides?: CallOverrides): Promise<string>;
+
+  exactInput(
+    params: {
+      path: BytesLike;
+      recipient: string;
+      deadline: BigNumberish;
+      amountIn: BigNumberish;
+      amountOutMinimum: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  exactInputSingle(
+    params: {
+      tokenIn: string;
+      tokenOut: string;
+      fee: BigNumberish;
+      recipient: string;
+      deadline: BigNumberish;
+      amountIn: BigNumberish;
+      amountOutMinimum: BigNumberish;
+      sqrtPriceLimitX96: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  exactOutput(
+    params: {
+      path: BytesLike;
+      recipient: string;
+      deadline: BigNumberish;
+      amountOut: BigNumberish;
+      amountInMaximum: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  exactOutputSingle(
+    params: {
+      tokenIn: string;
+      tokenOut: string;
+      fee: BigNumberish;
+      recipient: string;
+      deadline: BigNumberish;
+      amountOut: BigNumberish;
+      amountInMaximum: BigNumberish;
+      sqrtPriceLimitX96: BigNumberish;
+    },
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  factory(overrides?: CallOverrides): Promise<string>;
+
+  multicall(
+    data: BytesLike[],
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  refundETH(
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermit(
+    token: string,
+    value: BigNumberish,
+    deadline: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermitAllowed(
+    token: string,
+    nonce: BigNumberish,
+    expiry: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermitAllowedIfNecessary(
+    token: string,
+    nonce: BigNumberish,
+    expiry: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermitIfNecessary(
+    token: string,
+    value: BigNumberish,
+    deadline: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  sweepToken(
+    token: string,
+    amountMinimum: BigNumberish,
+    recipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  sweepTokenWithFee(
+    token: string,
+    amountMinimum: BigNumberish,
+    recipient: string,
+    feeBips: BigNumberish,
+    feeRecipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  uniswapV3SwapCallback(
+    amount0Delta: BigNumberish,
+    amount1Delta: BigNumberish,
+    _data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  unwrapWETH9(
+    amountMinimum: BigNumberish,
+    recipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  unwrapWETH9WithFee(
+    amountMinimum: BigNumberish,
+    recipient: string,
+    feeBips: BigNumberish,
+    feeRecipient: string,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    WETH9(overrides?: CallOverrides): Promise<string>;
+
+    exactInput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        deadline: BigNumberish;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    exactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    exactOutput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        deadline: BigNumberish;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    exactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<string>;
+
+    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;
+
+    refundETH(overrides?: CallOverrides): Promise<void>;
+
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    sweepToken(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    sweepTokenWithFee(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      _data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    unwrapWETH9(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    unwrapWETH9WithFee(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    WETH9(overrides?: CallOverrides): Promise<BigNumber>;
+
+    exactInput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        deadline: BigNumberish;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    exactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    exactOutput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        deadline: BigNumberish;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    exactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<BigNumber>;
+
+    multicall(
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    sweepToken(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    sweepTokenWithFee(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      _data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    unwrapWETH9(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    unwrapWETH9WithFee(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    WETH9(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    exactInput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        deadline: BigNumberish;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    exactInputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        amountIn: BigNumberish;
+        amountOutMinimum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    exactOutput(
+      params: {
+        path: BytesLike;
+        recipient: string;
+        deadline: BigNumberish;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    exactOutputSingle(
+      params: {
+        tokenIn: string;
+        tokenOut: string;
+        fee: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        amountOut: BigNumberish;
+        amountInMaximum: BigNumberish;
+        sqrtPriceLimitX96: BigNumberish;
+      },
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    multicall(
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    refundETH(
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    sweepToken(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    sweepTokenWithFee(
+      token: string,
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    uniswapV3SwapCallback(
+      amount0Delta: BigNumberish,
+      amount1Delta: BigNumberish,
+      _data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    unwrapWETH9(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    unwrapWETH9WithFee(
+      amountMinimum: BigNumberish,
+      recipient: string,
+      feeBips: BigNumberish,
+      feeRecipient: string,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/TickLens.d.ts b/lib/sor/types/v3/TickLens.d.ts
new file mode 100644
index 0000000..ef77e88
--- /dev/null
+++ b/lib/sor/types/v3/TickLens.d.ts
@@ -0,0 +1,145 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ethers,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface TickLensInterface extends ethers.utils.Interface {
+  functions: {
+    "getPopulatedTicksInWord(address,int16)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "getPopulatedTicksInWord",
+    values: [string, BigNumberish]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "getPopulatedTicksInWord",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class TickLens extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: TickLensInterface;
+
+  functions: {
+    getPopulatedTicksInWord(
+      pool: string,
+      tickBitmapIndex: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [
+        ([number, BigNumber, BigNumber] & {
+          tick: number;
+          liquidityNet: BigNumber;
+          liquidityGross: BigNumber;
+        })[]
+      ] & {
+        populatedTicks: ([number, BigNumber, BigNumber] & {
+          tick: number;
+          liquidityNet: BigNumber;
+          liquidityGross: BigNumber;
+        })[];
+      }
+    >;
+  };
+
+  getPopulatedTicksInWord(
+    pool: string,
+    tickBitmapIndex: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<
+    ([number, BigNumber, BigNumber] & {
+      tick: number;
+      liquidityNet: BigNumber;
+      liquidityGross: BigNumber;
+    })[]
+  >;
+
+  callStatic: {
+    getPopulatedTicksInWord(
+      pool: string,
+      tickBitmapIndex: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      ([number, BigNumber, BigNumber] & {
+        tick: number;
+        liquidityNet: BigNumber;
+        liquidityGross: BigNumber;
+      })[]
+    >;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    getPopulatedTicksInWord(
+      pool: string,
+      tickBitmapIndex: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    getPopulatedTicksInWord(
+      pool: string,
+      tickBitmapIndex: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/UniswapInterfaceMulticall.d.ts b/lib/sor/types/v3/UniswapInterfaceMulticall.d.ts
new file mode 100644
index 0000000..edc733d
--- /dev/null
+++ b/lib/sor/types/v3/UniswapInterfaceMulticall.d.ts
@@ -0,0 +1,177 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface UniswapInterfaceMulticallInterface extends ethers.utils.Interface {
+  functions: {
+    "getCurrentBlockTimestamp()": FunctionFragment;
+    "getEthBalance(address)": FunctionFragment;
+    "multicall(tuple[])": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "getCurrentBlockTimestamp",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getEthBalance",
+    values: [string]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "multicall",
+    values: [{ target: string; gasLimit: BigNumberish; callData: BytesLike }[]]
+  ): string;
+
+  decodeFunctionResult(
+    functionFragment: "getCurrentBlockTimestamp",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "getEthBalance",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
+
+  events: {};
+}
+
+export class UniswapInterfaceMulticall extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: UniswapInterfaceMulticallInterface;
+
+  functions: {
+    getCurrentBlockTimestamp(
+      overrides?: CallOverrides
+    ): Promise<[BigNumber] & { timestamp: BigNumber }>;
+
+    getEthBalance(
+      addr: string,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber] & { balance: BigNumber }>;
+
+    multicall(
+      calls: { target: string; gasLimit: BigNumberish; callData: BytesLike }[],
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  getCurrentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;
+
+  getEthBalance(addr: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+  multicall(
+    calls: { target: string; gasLimit: BigNumberish; callData: BytesLike }[],
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    getCurrentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;
+
+    getEthBalance(addr: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    multicall(
+      calls: { target: string; gasLimit: BigNumberish; callData: BytesLike }[],
+      overrides?: CallOverrides
+    ): Promise<
+      [
+        BigNumber,
+        ([boolean, BigNumber, string] & {
+          success: boolean;
+          gasUsed: BigNumber;
+          returnData: string;
+        })[]
+      ] & {
+        blockNumber: BigNumber;
+        returnData: ([boolean, BigNumber, string] & {
+          success: boolean;
+          gasUsed: BigNumber;
+          returnData: string;
+        })[];
+      }
+    >;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    getCurrentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;
+
+    getEthBalance(addr: string, overrides?: CallOverrides): Promise<BigNumber>;
+
+    multicall(
+      calls: { target: string; gasLimit: BigNumberish; callData: BytesLike }[],
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    getCurrentBlockTimestamp(
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    getEthBalance(
+      addr: string,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    multicall(
+      calls: { target: string; gasLimit: BigNumberish; callData: BytesLike }[],
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/UniswapV3Factory.d.ts b/lib/sor/types/v3/UniswapV3Factory.d.ts
new file mode 100644
index 0000000..bd0ec48
--- /dev/null
+++ b/lib/sor/types/v3/UniswapV3Factory.d.ts
@@ -0,0 +1,359 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface UniswapV3FactoryInterface extends ethers.utils.Interface {
+  functions: {
+    "createPool(address,address,uint24)": FunctionFragment;
+    "enableFeeAmount(uint24,int24)": FunctionFragment;
+    "feeAmountTickSpacing(uint24)": FunctionFragment;
+    "getPool(address,address,uint24)": FunctionFragment;
+    "owner()": FunctionFragment;
+    "parameters()": FunctionFragment;
+    "setOwner(address)": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "createPool",
+    values: [string, string, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "enableFeeAmount",
+    values: [BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "feeAmountTickSpacing",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "getPool",
+    values: [string, string, BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "parameters",
+    values?: undefined
+  ): string;
+  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
+
+  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "enableFeeAmount",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "feeAmountTickSpacing",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "parameters", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
+
+  events: {
+    "FeeAmountEnabled(uint24,int24)": EventFragment;
+    "OwnerChanged(address,address)": EventFragment;
+    "PoolCreated(address,address,uint24,int24,address)": EventFragment;
+  };
+
+  getEvent(nameOrSignatureOrTopic: "FeeAmountEnabled"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
+}
+
+export class UniswapV3Factory extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: UniswapV3FactoryInterface;
+
+  functions: {
+    createPool(
+      tokenA: string,
+      tokenB: string,
+      fee: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    enableFeeAmount(
+      fee: BigNumberish,
+      tickSpacing: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    feeAmountTickSpacing(
+      arg0: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[number]>;
+
+    getPool(
+      arg0: string,
+      arg1: string,
+      arg2: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[string]>;
+
+    owner(overrides?: CallOverrides): Promise<[string]>;
+
+    parameters(
+      overrides?: CallOverrides
+    ): Promise<
+      [string, string, string, number, number] & {
+        factory: string;
+        token0: string;
+        token1: string;
+        fee: number;
+        tickSpacing: number;
+      }
+    >;
+
+    setOwner(
+      _owner: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  createPool(
+    tokenA: string,
+    tokenB: string,
+    fee: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  enableFeeAmount(
+    fee: BigNumberish,
+    tickSpacing: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  feeAmountTickSpacing(
+    arg0: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<number>;
+
+  getPool(
+    arg0: string,
+    arg1: string,
+    arg2: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<string>;
+
+  owner(overrides?: CallOverrides): Promise<string>;
+
+  parameters(
+    overrides?: CallOverrides
+  ): Promise<
+    [string, string, string, number, number] & {
+      factory: string;
+      token0: string;
+      token1: string;
+      fee: number;
+      tickSpacing: number;
+    }
+  >;
+
+  setOwner(
+    _owner: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    createPool(
+      tokenA: string,
+      tokenB: string,
+      fee: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<string>;
+
+    enableFeeAmount(
+      fee: BigNumberish,
+      tickSpacing: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    feeAmountTickSpacing(
+      arg0: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<number>;
+
+    getPool(
+      arg0: string,
+      arg1: string,
+      arg2: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<string>;
+
+    owner(overrides?: CallOverrides): Promise<string>;
+
+    parameters(
+      overrides?: CallOverrides
+    ): Promise<
+      [string, string, string, number, number] & {
+        factory: string;
+        token0: string;
+        token1: string;
+        fee: number;
+        tickSpacing: number;
+      }
+    >;
+
+    setOwner(_owner: string, overrides?: CallOverrides): Promise<void>;
+  };
+
+  filters: {
+    FeeAmountEnabled(
+      fee?: BigNumberish | null,
+      tickSpacing?: BigNumberish | null
+    ): TypedEventFilter<[number, number], { fee: number; tickSpacing: number }>;
+
+    OwnerChanged(
+      oldOwner?: string | null,
+      newOwner?: string | null
+    ): TypedEventFilter<
+      [string, string],
+      { oldOwner: string; newOwner: string }
+    >;
+
+    PoolCreated(
+      token0?: string | null,
+      token1?: string | null,
+      fee?: BigNumberish | null,
+      tickSpacing?: null,
+      pool?: null
+    ): TypedEventFilter<
+      [string, string, number, number, string],
+      {
+        token0: string;
+        token1: string;
+        fee: number;
+        tickSpacing: number;
+        pool: string;
+      }
+    >;
+  };
+
+  estimateGas: {
+    createPool(
+      tokenA: string,
+      tokenB: string,
+      fee: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    enableFeeAmount(
+      fee: BigNumberish,
+      tickSpacing: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    feeAmountTickSpacing(
+      arg0: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    getPool(
+      arg0: string,
+      arg1: string,
+      arg2: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    owner(overrides?: CallOverrides): Promise<BigNumber>;
+
+    parameters(overrides?: CallOverrides): Promise<BigNumber>;
+
+    setOwner(
+      _owner: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    createPool(
+      tokenA: string,
+      tokenB: string,
+      fee: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    enableFeeAmount(
+      fee: BigNumberish,
+      tickSpacing: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    feeAmountTickSpacing(
+      arg0: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    getPool(
+      arg0: string,
+      arg1: string,
+      arg2: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    parameters(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    setOwner(
+      _owner: string,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/UniswapV3Pool.d.ts b/lib/sor/types/v3/UniswapV3Pool.d.ts
new file mode 100644
index 0000000..7ca9c81
--- /dev/null
+++ b/lib/sor/types/v3/UniswapV3Pool.d.ts
@@ -0,0 +1,1198 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface UniswapV3PoolInterface extends ethers.utils.Interface {
+  functions: {
+    "burn(int24,int24,uint128)": FunctionFragment;
+    "collect(address,int24,int24,uint128,uint128)": FunctionFragment;
+    "collectProtocol(address,uint128,uint128)": FunctionFragment;
+    "factory()": FunctionFragment;
+    "fee()": FunctionFragment;
+    "feeGrowthGlobal0X128()": FunctionFragment;
+    "feeGrowthGlobal1X128()": FunctionFragment;
+    "flash(address,uint256,uint256,bytes)": FunctionFragment;
+    "increaseObservationCardinalityNext(uint16)": FunctionFragment;
+    "initialize(uint160)": FunctionFragment;
+    "liquidity()": FunctionFragment;
+    "maxLiquidityPerTick()": FunctionFragment;
+    "mint(address,int24,int24,uint128,bytes)": FunctionFragment;
+    "observations(uint256)": FunctionFragment;
+    "observe(uint32[])": FunctionFragment;
+    "positions(bytes32)": FunctionFragment;
+    "protocolFees()": FunctionFragment;
+    "setFeeProtocol(uint8,uint8)": FunctionFragment;
+    "slot0()": FunctionFragment;
+    "snapshotCumulativesInside(int24,int24)": FunctionFragment;
+    "swap(address,bool,int256,uint160,bytes)": FunctionFragment;
+    "tickBitmap(int16)": FunctionFragment;
+    "tickSpacing()": FunctionFragment;
+    "ticks(int24)": FunctionFragment;
+    "token0()": FunctionFragment;
+    "token1()": FunctionFragment;
+  };
+
+  encodeFunctionData(
+    functionFragment: "burn",
+    values: [BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "collect",
+    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "collectProtocol",
+    values: [string, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
+  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "feeGrowthGlobal0X128",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "feeGrowthGlobal1X128",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "flash",
+    values: [string, BigNumberish, BigNumberish, BytesLike]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "increaseObservationCardinalityNext",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "initialize",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "liquidity", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "maxLiquidityPerTick",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "mint",
+    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "observations",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "observe",
+    values: [BigNumberish[]]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "positions",
+    values: [BytesLike]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "protocolFees",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "setFeeProtocol",
+    values: [BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "slot0", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "snapshotCumulativesInside",
+    values: [BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "swap",
+    values: [string, boolean, BigNumberish, BigNumberish, BytesLike]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "tickBitmap",
+    values: [BigNumberish]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "tickSpacing",
+    values?: undefined
+  ): string;
+  encodeFunctionData(functionFragment: "ticks", values: [BigNumberish]): string;
+  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
+  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
+
+  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "collectProtocol",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "feeGrowthGlobal0X128",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "feeGrowthGlobal1X128",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "flash", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "increaseObservationCardinalityNext",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "maxLiquidityPerTick",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "observations",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "observe", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "protocolFees",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "setFeeProtocol",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "slot0", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "snapshotCumulativesInside",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "tickBitmap", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "tickSpacing",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "ticks", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
+
+  events: {
+    "Burn(address,int24,int24,uint128,uint256,uint256)": EventFragment;
+    "Collect(address,address,int24,int24,uint128,uint128)": EventFragment;
+    "CollectProtocol(address,address,uint128,uint128)": EventFragment;
+    "Flash(address,address,uint256,uint256,uint256,uint256)": EventFragment;
+    "IncreaseObservationCardinalityNext(uint16,uint16)": EventFragment;
+    "Initialize(uint160,int24)": EventFragment;
+    "Mint(address,address,int24,int24,uint128,uint256,uint256)": EventFragment;
+    "SetFeeProtocol(uint8,uint8,uint8,uint8)": EventFragment;
+    "Swap(address,address,int256,int256,uint160,uint128,int24)": EventFragment;
+  };
+
+  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Collect"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "CollectProtocol"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Flash"): EventFragment;
+  getEvent(
+    nameOrSignatureOrTopic: "IncreaseObservationCardinalityNext"
+  ): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "SetFeeProtocol"): EventFragment;
+  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
+}
+
+export class UniswapV3Pool extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: UniswapV3PoolInterface;
+
+  functions: {
+    burn(
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    collect(
+      recipient: string,
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount0Requested: BigNumberish,
+      amount1Requested: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    collectProtocol(
+      recipient: string,
+      amount0Requested: BigNumberish,
+      amount1Requested: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<[string]>;
+
+    fee(overrides?: CallOverrides): Promise<[number]>;
+
+    feeGrowthGlobal0X128(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    feeGrowthGlobal1X128(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    flash(
+      recipient: string,
+      amount0: BigNumberish,
+      amount1: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    increaseObservationCardinalityNext(
+      observationCardinalityNext: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    initialize(
+      sqrtPriceX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    liquidity(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    maxLiquidityPerTick(overrides?: CallOverrides): Promise<[BigNumber]>;
+
+    mint(
+      recipient: string,
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    observations(
+      arg0: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [number, BigNumber, BigNumber, boolean] & {
+        blockTimestamp: number;
+        tickCumulative: BigNumber;
+        secondsPerLiquidityCumulativeX128: BigNumber;
+        initialized: boolean;
+      }
+    >;
+
+    observe(
+      secondsAgos: BigNumberish[],
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber[], BigNumber[]] & {
+        tickCumulatives: BigNumber[];
+        secondsPerLiquidityCumulativeX128s: BigNumber[];
+      }
+    >;
+
+    positions(
+      arg0: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
+        liquidity: BigNumber;
+        feeGrowthInside0LastX128: BigNumber;
+        feeGrowthInside1LastX128: BigNumber;
+        tokensOwed0: BigNumber;
+        tokensOwed1: BigNumber;
+      }
+    >;
+
+    protocolFees(
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber }
+    >;
+
+    setFeeProtocol(
+      feeProtocol0: BigNumberish,
+      feeProtocol1: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    slot0(
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, number, number, number, number, number, boolean] & {
+        sqrtPriceX96: BigNumber;
+        tick: number;
+        observationIndex: number;
+        observationCardinality: number;
+        observationCardinalityNext: number;
+        feeProtocol: number;
+        unlocked: boolean;
+      }
+    >;
+
+    snapshotCumulativesInside(
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, number] & {
+        tickCumulativeInside: BigNumber;
+        secondsPerLiquidityInsideX128: BigNumber;
+        secondsInside: number;
+      }
+    >;
+
+    swap(
+      recipient: string,
+      zeroForOne: boolean,
+      amountSpecified: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    tickBitmap(
+      arg0: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<[BigNumber]>;
+
+    tickSpacing(overrides?: CallOverrides): Promise<[number]>;
+
+    ticks(
+      arg0: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        number,
+        boolean
+      ] & {
+        liquidityGross: BigNumber;
+        liquidityNet: BigNumber;
+        feeGrowthOutside0X128: BigNumber;
+        feeGrowthOutside1X128: BigNumber;
+        tickCumulativeOutside: BigNumber;
+        secondsPerLiquidityOutsideX128: BigNumber;
+        secondsOutside: number;
+        initialized: boolean;
+      }
+    >;
+
+    token0(overrides?: CallOverrides): Promise<[string]>;
+
+    token1(overrides?: CallOverrides): Promise<[string]>;
+  };
+
+  burn(
+    tickLower: BigNumberish,
+    tickUpper: BigNumberish,
+    amount: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  collect(
+    recipient: string,
+    tickLower: BigNumberish,
+    tickUpper: BigNumberish,
+    amount0Requested: BigNumberish,
+    amount1Requested: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  collectProtocol(
+    recipient: string,
+    amount0Requested: BigNumberish,
+    amount1Requested: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  factory(overrides?: CallOverrides): Promise<string>;
+
+  fee(overrides?: CallOverrides): Promise<number>;
+
+  feeGrowthGlobal0X128(overrides?: CallOverrides): Promise<BigNumber>;
+
+  feeGrowthGlobal1X128(overrides?: CallOverrides): Promise<BigNumber>;
+
+  flash(
+    recipient: string,
+    amount0: BigNumberish,
+    amount1: BigNumberish,
+    data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  increaseObservationCardinalityNext(
+    observationCardinalityNext: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  initialize(
+    sqrtPriceX96: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  liquidity(overrides?: CallOverrides): Promise<BigNumber>;
+
+  maxLiquidityPerTick(overrides?: CallOverrides): Promise<BigNumber>;
+
+  mint(
+    recipient: string,
+    tickLower: BigNumberish,
+    tickUpper: BigNumberish,
+    amount: BigNumberish,
+    data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  observations(
+    arg0: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<
+    [number, BigNumber, BigNumber, boolean] & {
+      blockTimestamp: number;
+      tickCumulative: BigNumber;
+      secondsPerLiquidityCumulativeX128: BigNumber;
+      initialized: boolean;
+    }
+  >;
+
+  observe(
+    secondsAgos: BigNumberish[],
+    overrides?: CallOverrides
+  ): Promise<
+    [BigNumber[], BigNumber[]] & {
+      tickCumulatives: BigNumber[];
+      secondsPerLiquidityCumulativeX128s: BigNumber[];
+    }
+  >;
+
+  positions(
+    arg0: BytesLike,
+    overrides?: CallOverrides
+  ): Promise<
+    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
+      liquidity: BigNumber;
+      feeGrowthInside0LastX128: BigNumber;
+      feeGrowthInside1LastX128: BigNumber;
+      tokensOwed0: BigNumber;
+      tokensOwed1: BigNumber;
+    }
+  >;
+
+  protocolFees(
+    overrides?: CallOverrides
+  ): Promise<[BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber }>;
+
+  setFeeProtocol(
+    feeProtocol0: BigNumberish,
+    feeProtocol1: BigNumberish,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  slot0(
+    overrides?: CallOverrides
+  ): Promise<
+    [BigNumber, number, number, number, number, number, boolean] & {
+      sqrtPriceX96: BigNumber;
+      tick: number;
+      observationIndex: number;
+      observationCardinality: number;
+      observationCardinalityNext: number;
+      feeProtocol: number;
+      unlocked: boolean;
+    }
+  >;
+
+  snapshotCumulativesInside(
+    tickLower: BigNumberish,
+    tickUpper: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<
+    [BigNumber, BigNumber, number] & {
+      tickCumulativeInside: BigNumber;
+      secondsPerLiquidityInsideX128: BigNumber;
+      secondsInside: number;
+    }
+  >;
+
+  swap(
+    recipient: string,
+    zeroForOne: boolean,
+    amountSpecified: BigNumberish,
+    sqrtPriceLimitX96: BigNumberish,
+    data: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  tickBitmap(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
+
+  tickSpacing(overrides?: CallOverrides): Promise<number>;
+
+  ticks(
+    arg0: BigNumberish,
+    overrides?: CallOverrides
+  ): Promise<
+    [
+      BigNumber,
+      BigNumber,
+      BigNumber,
+      BigNumber,
+      BigNumber,
+      BigNumber,
+      number,
+      boolean
+    ] & {
+      liquidityGross: BigNumber;
+      liquidityNet: BigNumber;
+      feeGrowthOutside0X128: BigNumber;
+      feeGrowthOutside1X128: BigNumber;
+      tickCumulativeOutside: BigNumber;
+      secondsPerLiquidityOutsideX128: BigNumber;
+      secondsOutside: number;
+      initialized: boolean;
+    }
+  >;
+
+  token0(overrides?: CallOverrides): Promise<string>;
+
+  token1(overrides?: CallOverrides): Promise<string>;
+
+  callStatic: {
+    burn(
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
+    >;
+
+    collect(
+      recipient: string,
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount0Requested: BigNumberish,
+      amount1Requested: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
+    >;
+
+    collectProtocol(
+      recipient: string,
+      amount0Requested: BigNumberish,
+      amount1Requested: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
+    >;
+
+    factory(overrides?: CallOverrides): Promise<string>;
+
+    fee(overrides?: CallOverrides): Promise<number>;
+
+    feeGrowthGlobal0X128(overrides?: CallOverrides): Promise<BigNumber>;
+
+    feeGrowthGlobal1X128(overrides?: CallOverrides): Promise<BigNumber>;
+
+    flash(
+      recipient: string,
+      amount0: BigNumberish,
+      amount1: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    increaseObservationCardinalityNext(
+      observationCardinalityNext: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    initialize(
+      sqrtPriceX96: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    liquidity(overrides?: CallOverrides): Promise<BigNumber>;
+
+    maxLiquidityPerTick(overrides?: CallOverrides): Promise<BigNumber>;
+
+    mint(
+      recipient: string,
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
+    >;
+
+    observations(
+      arg0: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [number, BigNumber, BigNumber, boolean] & {
+        blockTimestamp: number;
+        tickCumulative: BigNumber;
+        secondsPerLiquidityCumulativeX128: BigNumber;
+        initialized: boolean;
+      }
+    >;
+
+    observe(
+      secondsAgos: BigNumberish[],
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber[], BigNumber[]] & {
+        tickCumulatives: BigNumber[];
+        secondsPerLiquidityCumulativeX128s: BigNumber[];
+      }
+    >;
+
+    positions(
+      arg0: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
+        liquidity: BigNumber;
+        feeGrowthInside0LastX128: BigNumber;
+        feeGrowthInside1LastX128: BigNumber;
+        tokensOwed0: BigNumber;
+        tokensOwed1: BigNumber;
+      }
+    >;
+
+    protocolFees(
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber }
+    >;
+
+    setFeeProtocol(
+      feeProtocol0: BigNumberish,
+      feeProtocol1: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    slot0(
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, number, number, number, number, number, boolean] & {
+        sqrtPriceX96: BigNumber;
+        tick: number;
+        observationIndex: number;
+        observationCardinality: number;
+        observationCardinalityNext: number;
+        feeProtocol: number;
+        unlocked: boolean;
+      }
+    >;
+
+    snapshotCumulativesInside(
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber, number] & {
+        tickCumulativeInside: BigNumber;
+        secondsPerLiquidityInsideX128: BigNumber;
+        secondsInside: number;
+      }
+    >;
+
+    swap(
+      recipient: string,
+      zeroForOne: boolean,
+      amountSpecified: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      data: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<
+      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
+    >;
+
+    tickBitmap(
+      arg0: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    tickSpacing(overrides?: CallOverrides): Promise<number>;
+
+    ticks(
+      arg0: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<
+      [
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        BigNumber,
+        number,
+        boolean
+      ] & {
+        liquidityGross: BigNumber;
+        liquidityNet: BigNumber;
+        feeGrowthOutside0X128: BigNumber;
+        feeGrowthOutside1X128: BigNumber;
+        tickCumulativeOutside: BigNumber;
+        secondsPerLiquidityOutsideX128: BigNumber;
+        secondsOutside: number;
+        initialized: boolean;
+      }
+    >;
+
+    token0(overrides?: CallOverrides): Promise<string>;
+
+    token1(overrides?: CallOverrides): Promise<string>;
+  };
+
+  filters: {
+    Burn(
+      owner?: string | null,
+      tickLower?: BigNumberish | null,
+      tickUpper?: BigNumberish | null,
+      amount?: null,
+      amount0?: null,
+      amount1?: null
+    ): TypedEventFilter<
+      [string, number, number, BigNumber, BigNumber, BigNumber],
+      {
+        owner: string;
+        tickLower: number;
+        tickUpper: number;
+        amount: BigNumber;
+        amount0: BigNumber;
+        amount1: BigNumber;
+      }
+    >;
+
+    Collect(
+      owner?: string | null,
+      recipient?: null,
+      tickLower?: BigNumberish | null,
+      tickUpper?: BigNumberish | null,
+      amount0?: null,
+      amount1?: null
+    ): TypedEventFilter<
+      [string, string, number, number, BigNumber, BigNumber],
+      {
+        owner: string;
+        recipient: string;
+        tickLower: number;
+        tickUpper: number;
+        amount0: BigNumber;
+        amount1: BigNumber;
+      }
+    >;
+
+    CollectProtocol(
+      sender?: string | null,
+      recipient?: string | null,
+      amount0?: null,
+      amount1?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber, BigNumber],
+      {
+        sender: string;
+        recipient: string;
+        amount0: BigNumber;
+        amount1: BigNumber;
+      }
+    >;
+
+    Flash(
+      sender?: string | null,
+      recipient?: string | null,
+      amount0?: null,
+      amount1?: null,
+      paid0?: null,
+      paid1?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
+      {
+        sender: string;
+        recipient: string;
+        amount0: BigNumber;
+        amount1: BigNumber;
+        paid0: BigNumber;
+        paid1: BigNumber;
+      }
+    >;
+
+    IncreaseObservationCardinalityNext(
+      observationCardinalityNextOld?: null,
+      observationCardinalityNextNew?: null
+    ): TypedEventFilter<
+      [number, number],
+      {
+        observationCardinalityNextOld: number;
+        observationCardinalityNextNew: number;
+      }
+    >;
+
+    Initialize(
+      sqrtPriceX96?: null,
+      tick?: null
+    ): TypedEventFilter<
+      [BigNumber, number],
+      { sqrtPriceX96: BigNumber; tick: number }
+    >;
+
+    Mint(
+      sender?: null,
+      owner?: string | null,
+      tickLower?: BigNumberish | null,
+      tickUpper?: BigNumberish | null,
+      amount?: null,
+      amount0?: null,
+      amount1?: null
+    ): TypedEventFilter<
+      [string, string, number, number, BigNumber, BigNumber, BigNumber],
+      {
+        sender: string;
+        owner: string;
+        tickLower: number;
+        tickUpper: number;
+        amount: BigNumber;
+        amount0: BigNumber;
+        amount1: BigNumber;
+      }
+    >;
+
+    SetFeeProtocol(
+      feeProtocol0Old?: null,
+      feeProtocol1Old?: null,
+      feeProtocol0New?: null,
+      feeProtocol1New?: null
+    ): TypedEventFilter<
+      [number, number, number, number],
+      {
+        feeProtocol0Old: number;
+        feeProtocol1Old: number;
+        feeProtocol0New: number;
+        feeProtocol1New: number;
+      }
+    >;
+
+    Swap(
+      sender?: string | null,
+      recipient?: string | null,
+      amount0?: null,
+      amount1?: null,
+      sqrtPriceX96?: null,
+      liquidity?: null,
+      tick?: null
+    ): TypedEventFilter<
+      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, number],
+      {
+        sender: string;
+        recipient: string;
+        amount0: BigNumber;
+        amount1: BigNumber;
+        sqrtPriceX96: BigNumber;
+        liquidity: BigNumber;
+        tick: number;
+      }
+    >;
+  };
+
+  estimateGas: {
+    burn(
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    collect(
+      recipient: string,
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount0Requested: BigNumberish,
+      amount1Requested: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    collectProtocol(
+      recipient: string,
+      amount0Requested: BigNumberish,
+      amount1Requested: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<BigNumber>;
+
+    fee(overrides?: CallOverrides): Promise<BigNumber>;
+
+    feeGrowthGlobal0X128(overrides?: CallOverrides): Promise<BigNumber>;
+
+    feeGrowthGlobal1X128(overrides?: CallOverrides): Promise<BigNumber>;
+
+    flash(
+      recipient: string,
+      amount0: BigNumberish,
+      amount1: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    increaseObservationCardinalityNext(
+      observationCardinalityNext: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    initialize(
+      sqrtPriceX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    liquidity(overrides?: CallOverrides): Promise<BigNumber>;
+
+    maxLiquidityPerTick(overrides?: CallOverrides): Promise<BigNumber>;
+
+    mint(
+      recipient: string,
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    observations(
+      arg0: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    observe(
+      secondsAgos: BigNumberish[],
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    positions(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
+
+    protocolFees(overrides?: CallOverrides): Promise<BigNumber>;
+
+    setFeeProtocol(
+      feeProtocol0: BigNumberish,
+      feeProtocol1: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    slot0(overrides?: CallOverrides): Promise<BigNumber>;
+
+    snapshotCumulativesInside(
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    swap(
+      recipient: string,
+      zeroForOne: boolean,
+      amountSpecified: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    tickBitmap(
+      arg0: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<BigNumber>;
+
+    tickSpacing(overrides?: CallOverrides): Promise<BigNumber>;
+
+    ticks(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
+
+    token0(overrides?: CallOverrides): Promise<BigNumber>;
+
+    token1(overrides?: CallOverrides): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    burn(
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    collect(
+      recipient: string,
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount0Requested: BigNumberish,
+      amount1Requested: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    collectProtocol(
+      recipient: string,
+      amount0Requested: BigNumberish,
+      amount1Requested: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    feeGrowthGlobal0X128(
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    feeGrowthGlobal1X128(
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    flash(
+      recipient: string,
+      amount0: BigNumberish,
+      amount1: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    increaseObservationCardinalityNext(
+      observationCardinalityNext: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    initialize(
+      sqrtPriceX96: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    liquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    maxLiquidityPerTick(
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    mint(
+      recipient: string,
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      amount: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    observations(
+      arg0: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    observe(
+      secondsAgos: BigNumberish[],
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    positions(
+      arg0: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    protocolFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    setFeeProtocol(
+      feeProtocol0: BigNumberish,
+      feeProtocol1: BigNumberish,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    slot0(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    snapshotCumulativesInside(
+      tickLower: BigNumberish,
+      tickUpper: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    swap(
+      recipient: string,
+      zeroForOne: boolean,
+      amountSpecified: BigNumberish,
+      sqrtPriceLimitX96: BigNumberish,
+      data: BytesLike,
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    tickBitmap(
+      arg0: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    tickSpacing(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    ticks(
+      arg0: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/V3Migrator.d.ts b/lib/sor/types/v3/V3Migrator.d.ts
new file mode 100644
index 0000000..2c54064
--- /dev/null
+++ b/lib/sor/types/v3/V3Migrator.d.ts
@@ -0,0 +1,585 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { FunctionFragment, Result } from "@ethersproject/abi";
+import { BytesLike } from "@ethersproject/bytes";
+import { Listener, Provider } from "@ethersproject/providers";
+import {
+  BaseContract,
+  BigNumber,
+  BigNumberish,
+  CallOverrides,
+  ContractTransaction,
+  ethers,
+  Overrides,
+  PayableOverrides,
+  PopulatedTransaction,
+  Signer,
+} from "ethers";
+import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";
+
+interface V3MigratorInterface extends ethers.utils.Interface {
+  functions: {
+    "WETH9()": FunctionFragment;
+    "createAndInitializePoolIfNecessary(address,address,uint24,uint160)": FunctionFragment;
+    "factory()": FunctionFragment;
+    "migrate(tuple)": FunctionFragment;
+    "multicall(bytes[])": FunctionFragment;
+    "nonfungiblePositionManager()": FunctionFragment;
+    "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+    "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
+  };
+
+  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "createAndInitializePoolIfNecessary",
+    values: [string, string, BigNumberish, BigNumberish]
+  ): string;
+  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
+  encodeFunctionData(
+    functionFragment: "migrate",
+    values: [
+      {
+        pair: string;
+        liquidityToMigrate: BigNumberish;
+        percentageToMigrate: BigNumberish;
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        refundAsETH: boolean;
+      }
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "multicall",
+    values: [BytesLike[]]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "nonfungiblePositionManager",
+    values?: undefined
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermit",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermitAllowed",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermitAllowedIfNecessary",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+  encodeFunctionData(
+    functionFragment: "selfPermitIfNecessary",
+    values: [
+      string,
+      BigNumberish,
+      BigNumberish,
+      BigNumberish,
+      BytesLike,
+      BytesLike
+    ]
+  ): string;
+
+  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "createAndInitializePoolIfNecessary",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
+  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "nonfungiblePositionManager",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(functionFragment: "selfPermit", data: BytesLike): Result;
+  decodeFunctionResult(
+    functionFragment: "selfPermitAllowed",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "selfPermitAllowedIfNecessary",
+    data: BytesLike
+  ): Result;
+  decodeFunctionResult(
+    functionFragment: "selfPermitIfNecessary",
+    data: BytesLike
+  ): Result;
+
+  events: {};
+}
+
+export class V3Migrator extends BaseContract {
+  connect(signerOrProvider: Signer | Provider | string): this;
+  attach(addressOrName: string): this;
+  deployed(): Promise<this>;
+
+  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
+  off<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  on<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  once<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    listener: TypedListener<EventArgsArray, EventArgsObject>
+  ): this;
+  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
+    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
+  ): this;
+
+  listeners(eventName?: string): Array<Listener>;
+  off(eventName: string, listener: Listener): this;
+  on(eventName: string, listener: Listener): this;
+  once(eventName: string, listener: Listener): this;
+  removeListener(eventName: string, listener: Listener): this;
+  removeAllListeners(eventName?: string): this;
+
+  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
+    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
+    fromBlockOrBlockhash?: string | number | undefined,
+    toBlock?: string | number | undefined
+  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
+
+  interface: V3MigratorInterface;
+
+  functions: {
+    WETH9(overrides?: CallOverrides): Promise<[string]>;
+
+    createAndInitializePoolIfNecessary(
+      token0: string,
+      token1: string,
+      fee: BigNumberish,
+      sqrtPriceX96: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<[string]>;
+
+    migrate(
+      params: {
+        pair: string;
+        liquidityToMigrate: BigNumberish;
+        percentageToMigrate: BigNumberish;
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        refundAsETH: boolean;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    multicall(
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    nonfungiblePositionManager(overrides?: CallOverrides): Promise<[string]>;
+
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<ContractTransaction>;
+  };
+
+  WETH9(overrides?: CallOverrides): Promise<string>;
+
+  createAndInitializePoolIfNecessary(
+    token0: string,
+    token1: string,
+    fee: BigNumberish,
+    sqrtPriceX96: BigNumberish,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  factory(overrides?: CallOverrides): Promise<string>;
+
+  migrate(
+    params: {
+      pair: string;
+      liquidityToMigrate: BigNumberish;
+      percentageToMigrate: BigNumberish;
+      token0: string;
+      token1: string;
+      fee: BigNumberish;
+      tickLower: BigNumberish;
+      tickUpper: BigNumberish;
+      amount0Min: BigNumberish;
+      amount1Min: BigNumberish;
+      recipient: string;
+      deadline: BigNumberish;
+      refundAsETH: boolean;
+    },
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  multicall(
+    data: BytesLike[],
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;
+
+  selfPermit(
+    token: string,
+    value: BigNumberish,
+    deadline: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermitAllowed(
+    token: string,
+    nonce: BigNumberish,
+    expiry: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermitAllowedIfNecessary(
+    token: string,
+    nonce: BigNumberish,
+    expiry: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  selfPermitIfNecessary(
+    token: string,
+    value: BigNumberish,
+    deadline: BigNumberish,
+    v: BigNumberish,
+    r: BytesLike,
+    s: BytesLike,
+    overrides?: PayableOverrides & { from?: string | Promise<string> }
+  ): Promise<ContractTransaction>;
+
+  callStatic: {
+    WETH9(overrides?: CallOverrides): Promise<string>;
+
+    createAndInitializePoolIfNecessary(
+      token0: string,
+      token1: string,
+      fee: BigNumberish,
+      sqrtPriceX96: BigNumberish,
+      overrides?: CallOverrides
+    ): Promise<string>;
+
+    factory(overrides?: CallOverrides): Promise<string>;
+
+    migrate(
+      params: {
+        pair: string;
+        liquidityToMigrate: BigNumberish;
+        percentageToMigrate: BigNumberish;
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        refundAsETH: boolean;
+      },
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;
+
+    nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;
+
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: CallOverrides
+    ): Promise<void>;
+  };
+
+  filters: {};
+
+  estimateGas: {
+    WETH9(overrides?: CallOverrides): Promise<BigNumber>;
+
+    createAndInitializePoolIfNecessary(
+      token0: string,
+      token1: string,
+      fee: BigNumberish,
+      sqrtPriceX96: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    factory(overrides?: CallOverrides): Promise<BigNumber>;
+
+    migrate(
+      params: {
+        pair: string;
+        liquidityToMigrate: BigNumberish;
+        percentageToMigrate: BigNumberish;
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        refundAsETH: boolean;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    multicall(
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    nonfungiblePositionManager(overrides?: CallOverrides): Promise<BigNumber>;
+
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<BigNumber>;
+  };
+
+  populateTransaction: {
+    WETH9(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    createAndInitializePoolIfNecessary(
+      token0: string,
+      token1: string,
+      fee: BigNumberish,
+      sqrtPriceX96: BigNumberish,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
+
+    migrate(
+      params: {
+        pair: string;
+        liquidityToMigrate: BigNumberish;
+        percentageToMigrate: BigNumberish;
+        token0: string;
+        token1: string;
+        fee: BigNumberish;
+        tickLower: BigNumberish;
+        tickUpper: BigNumberish;
+        amount0Min: BigNumberish;
+        amount1Min: BigNumberish;
+        recipient: string;
+        deadline: BigNumberish;
+        refundAsETH: boolean;
+      },
+      overrides?: Overrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    multicall(
+      data: BytesLike[],
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    nonfungiblePositionManager(
+      overrides?: CallOverrides
+    ): Promise<PopulatedTransaction>;
+
+    selfPermit(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermitAllowed(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermitAllowedIfNecessary(
+      token: string,
+      nonce: BigNumberish,
+      expiry: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+
+    selfPermitIfNecessary(
+      token: string,
+      value: BigNumberish,
+      deadline: BigNumberish,
+      v: BigNumberish,
+      r: BytesLike,
+      s: BytesLike,
+      overrides?: PayableOverrides & { from?: string | Promise<string> }
+    ): Promise<PopulatedTransaction>;
+  };
+}
diff --git a/lib/sor/types/v3/commons.ts b/lib/sor/types/v3/commons.ts
new file mode 100644
index 0000000..ceb0535
--- /dev/null
+++ b/lib/sor/types/v3/commons.ts
@@ -0,0 +1,36 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Result } from "@ethersproject/abi";
+import { Event, EventFilter } from "ethers";
+
+export interface TypedEventFilter<_EventArgsArray, _EventArgsObject>
+  extends EventFilter {}
+
+export interface TypedEvent<EventArgs extends Result> extends Event {
+  args: EventArgs;
+}
+
+export type TypedListener<
+  EventArgsArray extends Array<any>,
+  EventArgsObject
+> = (
+  ...listenerArg: [
+    ...EventArgsArray,
+    TypedEvent<EventArgsArray & EventArgsObject>
+  ]
+) => void;
+
+export type MinEthersFactory<C, ARGS> = {
+  deploy(...a: ARGS[]): Promise<C>;
+};
+export type GetContractTypeFromFactory<F> = F extends MinEthersFactory<
+  infer C,
+  any
+>
+  ? C
+  : never;
+export type GetARGsTypeFromFactory<F> = F extends MinEthersFactory<any, any>
+  ? Parameters<F["deploy"]>
+  : never;
diff --git a/lib/sor/types/v3/factories/IERC1271__factory.ts b/lib/sor/types/v3/factories/IERC1271__factory.ts
new file mode 100644
index 0000000..5124d28
--- /dev/null
+++ b/lib/sor/types/v3/factories/IERC1271__factory.ts
@@ -0,0 +1,47 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type { IERC1271, IERC1271Interface } from "../IERC1271";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "bytes32",
+        name: "hash",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes",
+        name: "signature",
+        type: "bytes",
+      },
+    ],
+    name: "isValidSignature",
+    outputs: [
+      {
+        internalType: "bytes4",
+        name: "magicValue",
+        type: "bytes4",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+];
+
+export class IERC1271__factory {
+  static readonly abi = _abi;
+  static createInterface(): IERC1271Interface {
+    return new utils.Interface(_abi) as IERC1271Interface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IERC1271 {
+    return new Contract(address, _abi, signerOrProvider) as IERC1271;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IERC20Metadata__factory.ts b/lib/sor/types/v3/factories/IERC20Metadata__factory.ts
new file mode 100644
index 0000000..0861076
--- /dev/null
+++ b/lib/sor/types/v3/factories/IERC20Metadata__factory.ts
@@ -0,0 +1,248 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IERC20Metadata,
+  IERC20MetadataInterface,
+} from "../IERC20Metadata";
+
+const _abi = [
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "Approval",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "from",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "Transfer",
+    type: "event",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+    ],
+    name: "allowance",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amount",
+        type: "uint256",
+      },
+    ],
+    name: "approve",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "account",
+        type: "address",
+      },
+    ],
+    name: "balanceOf",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "decimals",
+    outputs: [
+      {
+        internalType: "uint8",
+        name: "",
+        type: "uint8",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "name",
+    outputs: [
+      {
+        internalType: "string",
+        name: "",
+        type: "string",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "symbol",
+    outputs: [
+      {
+        internalType: "string",
+        name: "",
+        type: "string",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "totalSupply",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amount",
+        type: "uint256",
+      },
+    ],
+    name: "transfer",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "sender",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amount",
+        type: "uint256",
+      },
+    ],
+    name: "transferFrom",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IERC20Metadata__factory {
+  static readonly abi = _abi;
+  static createInterface(): IERC20MetadataInterface {
+    return new utils.Interface(_abi) as IERC20MetadataInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IERC20Metadata {
+    return new Contract(address, _abi, signerOrProvider) as IERC20Metadata;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IERC20Minimal__factory.ts b/lib/sor/types/v3/factories/IERC20Minimal__factory.ts
new file mode 100644
index 0000000..49cf09c
--- /dev/null
+++ b/lib/sor/types/v3/factories/IERC20Minimal__factory.ts
@@ -0,0 +1,193 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type { IERC20Minimal, IERC20MinimalInterface } from "../IERC20Minimal";
+
+const _abi = [
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "Approval",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "from",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "Transfer",
+    type: "event",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+    ],
+    name: "allowance",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amount",
+        type: "uint256",
+      },
+    ],
+    name: "approve",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "account",
+        type: "address",
+      },
+    ],
+    name: "balanceOf",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amount",
+        type: "uint256",
+      },
+    ],
+    name: "transfer",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "sender",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amount",
+        type: "uint256",
+      },
+    ],
+    name: "transferFrom",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IERC20Minimal__factory {
+  static readonly abi = _abi;
+  static createInterface(): IERC20MinimalInterface {
+    return new utils.Interface(_abi) as IERC20MinimalInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IERC20Minimal {
+    return new Contract(address, _abi, signerOrProvider) as IERC20Minimal;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IERC20PermitAllowed__factory.ts b/lib/sor/types/v3/factories/IERC20PermitAllowed__factory.ts
new file mode 100644
index 0000000..979d40e
--- /dev/null
+++ b/lib/sor/types/v3/factories/IERC20PermitAllowed__factory.ts
@@ -0,0 +1,74 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IERC20PermitAllowed,
+  IERC20PermitAllowedInterface,
+} from "../IERC20PermitAllowed";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "holder",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "nonce",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "expiry",
+        type: "uint256",
+      },
+      {
+        internalType: "bool",
+        name: "allowed",
+        type: "bool",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "permit",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IERC20PermitAllowed__factory {
+  static readonly abi = _abi;
+  static createInterface(): IERC20PermitAllowedInterface {
+    return new utils.Interface(_abi) as IERC20PermitAllowedInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IERC20PermitAllowed {
+    return new Contract(address, _abi, signerOrProvider) as IERC20PermitAllowed;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IERC721Permit__factory.ts b/lib/sor/types/v3/factories/IERC721Permit__factory.ts
new file mode 100644
index 0000000..8ef268c
--- /dev/null
+++ b/lib/sor/types/v3/factories/IERC721Permit__factory.ts
@@ -0,0 +1,372 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type { IERC721Permit, IERC721PermitInterface } from "../IERC721Permit";
+
+const _abi = [
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "approved",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "Approval",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "operator",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "bool",
+        name: "approved",
+        type: "bool",
+      },
+    ],
+    name: "ApprovalForAll",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "from",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "Transfer",
+    type: "event",
+  },
+  {
+    inputs: [],
+    name: "DOMAIN_SEPARATOR",
+    outputs: [
+      {
+        internalType: "bytes32",
+        name: "",
+        type: "bytes32",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "PERMIT_TYPEHASH",
+    outputs: [
+      {
+        internalType: "bytes32",
+        name: "",
+        type: "bytes32",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "approve",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+    ],
+    name: "balanceOf",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "balance",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "getApproved",
+    outputs: [
+      {
+        internalType: "address",
+        name: "operator",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "operator",
+        type: "address",
+      },
+    ],
+    name: "isApprovedForAll",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "ownerOf",
+    outputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "permit",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "from",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "safeTransferFrom",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "from",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "safeTransferFrom",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "operator",
+        type: "address",
+      },
+      {
+        internalType: "bool",
+        name: "_approved",
+        type: "bool",
+      },
+    ],
+    name: "setApprovalForAll",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes4",
+        name: "interfaceId",
+        type: "bytes4",
+      },
+    ],
+    name: "supportsInterface",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "from",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "transferFrom",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IERC721Permit__factory {
+  static readonly abi = _abi;
+  static createInterface(): IERC721PermitInterface {
+    return new utils.Interface(_abi) as IERC721PermitInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IERC721Permit {
+    return new Contract(address, _abi, signerOrProvider) as IERC721Permit;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IMulticall__factory.ts b/lib/sor/types/v3/factories/IMulticall__factory.ts
new file mode 100644
index 0000000..47887d4
--- /dev/null
+++ b/lib/sor/types/v3/factories/IMulticall__factory.ts
@@ -0,0 +1,42 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type { IMulticall, IMulticallInterface } from "../IMulticall";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "bytes[]",
+        name: "data",
+        type: "bytes[]",
+      },
+    ],
+    name: "multicall",
+    outputs: [
+      {
+        internalType: "bytes[]",
+        name: "results",
+        type: "bytes[]",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+];
+
+export class IMulticall__factory {
+  static readonly abi = _abi;
+  static createInterface(): IMulticallInterface {
+    return new utils.Interface(_abi) as IMulticallInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IMulticall {
+    return new Contract(address, _abi, signerOrProvider) as IMulticall;
+  }
+}
diff --git a/lib/sor/types/v3/factories/INonfungiblePositionManager__factory.ts b/lib/sor/types/v3/factories/INonfungiblePositionManager__factory.ts
new file mode 100644
index 0000000..c144fef
--- /dev/null
+++ b/lib/sor/types/v3/factories/INonfungiblePositionManager__factory.ts
@@ -0,0 +1,1019 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  INonfungiblePositionManager,
+  INonfungiblePositionManagerInterface,
+} from "../INonfungiblePositionManager";
+
+const _abi = [
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "approved",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "Approval",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "operator",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "bool",
+        name: "approved",
+        type: "bool",
+      },
+    ],
+    name: "ApprovalForAll",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    name: "Collect",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "liquidity",
+        type: "uint128",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    name: "DecreaseLiquidity",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "liquidity",
+        type: "uint128",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    name: "IncreaseLiquidity",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "from",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "Transfer",
+    type: "event",
+  },
+  {
+    inputs: [],
+    name: "DOMAIN_SEPARATOR",
+    outputs: [
+      {
+        internalType: "bytes32",
+        name: "",
+        type: "bytes32",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "PERMIT_TYPEHASH",
+    outputs: [
+      {
+        internalType: "bytes32",
+        name: "",
+        type: "bytes32",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "WETH9",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "approve",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+    ],
+    name: "balanceOf",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "balance",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "burn",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "uint256",
+            name: "tokenId",
+            type: "uint256",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint128",
+            name: "amount0Max",
+            type: "uint128",
+          },
+          {
+            internalType: "uint128",
+            name: "amount1Max",
+            type: "uint128",
+          },
+        ],
+        internalType: "struct INonfungiblePositionManager.CollectParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "collect",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token0",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "token1",
+        type: "address",
+      },
+      {
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceX96",
+        type: "uint160",
+      },
+    ],
+    name: "createAndInitializePoolIfNecessary",
+    outputs: [
+      {
+        internalType: "address",
+        name: "pool",
+        type: "address",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "uint256",
+            name: "tokenId",
+            type: "uint256",
+          },
+          {
+            internalType: "uint128",
+            name: "liquidity",
+            type: "uint128",
+          },
+          {
+            internalType: "uint256",
+            name: "amount0Min",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount1Min",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "deadline",
+            type: "uint256",
+          },
+        ],
+        internalType:
+          "struct INonfungiblePositionManager.DecreaseLiquidityParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "decreaseLiquidity",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factory",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "getApproved",
+    outputs: [
+      {
+        internalType: "address",
+        name: "operator",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "uint256",
+            name: "tokenId",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount0Desired",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount1Desired",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount0Min",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount1Min",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "deadline",
+            type: "uint256",
+          },
+        ],
+        internalType:
+          "struct INonfungiblePositionManager.IncreaseLiquidityParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "increaseLiquidity",
+    outputs: [
+      {
+        internalType: "uint128",
+        name: "liquidity",
+        type: "uint128",
+      },
+      {
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "operator",
+        type: "address",
+      },
+    ],
+    name: "isApprovedForAll",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "token0",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "token1",
+            type: "address",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "int24",
+            name: "tickLower",
+            type: "int24",
+          },
+          {
+            internalType: "int24",
+            name: "tickUpper",
+            type: "int24",
+          },
+          {
+            internalType: "uint256",
+            name: "amount0Desired",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount1Desired",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount0Min",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount1Min",
+            type: "uint256",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "deadline",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct INonfungiblePositionManager.MintParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "mint",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+      {
+        internalType: "uint128",
+        name: "liquidity",
+        type: "uint128",
+      },
+      {
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "name",
+    outputs: [
+      {
+        internalType: "string",
+        name: "",
+        type: "string",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "ownerOf",
+    outputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "permit",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "positions",
+    outputs: [
+      {
+        internalType: "uint96",
+        name: "nonce",
+        type: "uint96",
+      },
+      {
+        internalType: "address",
+        name: "operator",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "token0",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "token1",
+        type: "address",
+      },
+      {
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+      {
+        internalType: "int24",
+        name: "tickLower",
+        type: "int24",
+      },
+      {
+        internalType: "int24",
+        name: "tickUpper",
+        type: "int24",
+      },
+      {
+        internalType: "uint128",
+        name: "liquidity",
+        type: "uint128",
+      },
+      {
+        internalType: "uint256",
+        name: "feeGrowthInside0LastX128",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "feeGrowthInside1LastX128",
+        type: "uint256",
+      },
+      {
+        internalType: "uint128",
+        name: "tokensOwed0",
+        type: "uint128",
+      },
+      {
+        internalType: "uint128",
+        name: "tokensOwed1",
+        type: "uint128",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "refundETH",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "from",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "safeTransferFrom",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "from",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "safeTransferFrom",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "operator",
+        type: "address",
+      },
+      {
+        internalType: "bool",
+        name: "_approved",
+        type: "bool",
+      },
+    ],
+    name: "setApprovalForAll",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes4",
+        name: "interfaceId",
+        type: "bytes4",
+      },
+    ],
+    name: "supportsInterface",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+    ],
+    name: "sweepToken",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "symbol",
+    outputs: [
+      {
+        internalType: "string",
+        name: "",
+        type: "string",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "index",
+        type: "uint256",
+      },
+    ],
+    name: "tokenByIndex",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "index",
+        type: "uint256",
+      },
+    ],
+    name: "tokenOfOwnerByIndex",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "tokenURI",
+    outputs: [
+      {
+        internalType: "string",
+        name: "",
+        type: "string",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "totalSupply",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "from",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "transferFrom",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+    ],
+    name: "unwrapWETH9",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+];
+
+export class INonfungiblePositionManager__factory {
+  static readonly abi = _abi;
+  static createInterface(): INonfungiblePositionManagerInterface {
+    return new utils.Interface(_abi) as INonfungiblePositionManagerInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): INonfungiblePositionManager {
+    return new Contract(
+      address,
+      _abi,
+      signerOrProvider
+    ) as INonfungiblePositionManager;
+  }
+}
diff --git a/lib/sor/types/v3/factories/INonfungibleTokenPositionDescriptor__factory.ts b/lib/sor/types/v3/factories/INonfungibleTokenPositionDescriptor__factory.ts
new file mode 100644
index 0000000..3d7f9a6
--- /dev/null
+++ b/lib/sor/types/v3/factories/INonfungibleTokenPositionDescriptor__factory.ts
@@ -0,0 +1,56 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  INonfungibleTokenPositionDescriptor,
+  INonfungibleTokenPositionDescriptorInterface,
+} from "../INonfungibleTokenPositionDescriptor";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "contract INonfungiblePositionManager",
+        name: "positionManager",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "tokenURI",
+    outputs: [
+      {
+        internalType: "string",
+        name: "",
+        type: "string",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+];
+
+export class INonfungibleTokenPositionDescriptor__factory {
+  static readonly abi = _abi;
+  static createInterface(): INonfungibleTokenPositionDescriptorInterface {
+    return new utils.Interface(
+      _abi
+    ) as INonfungibleTokenPositionDescriptorInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): INonfungibleTokenPositionDescriptor {
+    return new Contract(
+      address,
+      _abi,
+      signerOrProvider
+    ) as INonfungibleTokenPositionDescriptor;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IPeripheryImmutableState__factory.ts b/lib/sor/types/v3/factories/IPeripheryImmutableState__factory.ts
new file mode 100644
index 0000000..5c6339d
--- /dev/null
+++ b/lib/sor/types/v3/factories/IPeripheryImmutableState__factory.ts
@@ -0,0 +1,56 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IPeripheryImmutableState,
+  IPeripheryImmutableStateInterface,
+} from "../IPeripheryImmutableState";
+
+const _abi = [
+  {
+    inputs: [],
+    name: "WETH9",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factory",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+];
+
+export class IPeripheryImmutableState__factory {
+  static readonly abi = _abi;
+  static createInterface(): IPeripheryImmutableStateInterface {
+    return new utils.Interface(_abi) as IPeripheryImmutableStateInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IPeripheryImmutableState {
+    return new Contract(
+      address,
+      _abi,
+      signerOrProvider
+    ) as IPeripheryImmutableState;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IPeripheryPaymentsWithFee__factory.ts b/lib/sor/types/v3/factories/IPeripheryPaymentsWithFee__factory.ts
new file mode 100644
index 0000000..bffba4d
--- /dev/null
+++ b/lib/sor/types/v3/factories/IPeripheryPaymentsWithFee__factory.ts
@@ -0,0 +1,139 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IPeripheryPaymentsWithFee,
+  IPeripheryPaymentsWithFeeInterface,
+} from "../IPeripheryPaymentsWithFee";
+
+const _abi = [
+  {
+    inputs: [],
+    name: "refundETH",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+    ],
+    name: "sweepToken",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "feeBips",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "feeRecipient",
+        type: "address",
+      },
+    ],
+    name: "sweepTokenWithFee",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+    ],
+    name: "unwrapWETH9",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "feeBips",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "feeRecipient",
+        type: "address",
+      },
+    ],
+    name: "unwrapWETH9WithFee",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+];
+
+export class IPeripheryPaymentsWithFee__factory {
+  static readonly abi = _abi;
+  static createInterface(): IPeripheryPaymentsWithFeeInterface {
+    return new utils.Interface(_abi) as IPeripheryPaymentsWithFeeInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IPeripheryPaymentsWithFee {
+    return new Contract(
+      address,
+      _abi,
+      signerOrProvider
+    ) as IPeripheryPaymentsWithFee;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IPeripheryPayments__factory.ts b/lib/sor/types/v3/factories/IPeripheryPayments__factory.ts
new file mode 100644
index 0000000..add1f11
--- /dev/null
+++ b/lib/sor/types/v3/factories/IPeripheryPayments__factory.ts
@@ -0,0 +1,74 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IPeripheryPayments,
+  IPeripheryPaymentsInterface,
+} from "../IPeripheryPayments";
+
+const _abi = [
+  {
+    inputs: [],
+    name: "refundETH",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+    ],
+    name: "sweepToken",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+    ],
+    name: "unwrapWETH9",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+];
+
+export class IPeripheryPayments__factory {
+  static readonly abi = _abi;
+  static createInterface(): IPeripheryPaymentsInterface {
+    return new utils.Interface(_abi) as IPeripheryPaymentsInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IPeripheryPayments {
+    return new Contract(address, _abi, signerOrProvider) as IPeripheryPayments;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IPoolInitializer__factory.ts b/lib/sor/types/v3/factories/IPoolInitializer__factory.ts
new file mode 100644
index 0000000..f90755a
--- /dev/null
+++ b/lib/sor/types/v3/factories/IPoolInitializer__factory.ts
@@ -0,0 +1,60 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IPoolInitializer,
+  IPoolInitializerInterface,
+} from "../IPoolInitializer";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token0",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "token1",
+        type: "address",
+      },
+      {
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceX96",
+        type: "uint160",
+      },
+    ],
+    name: "createAndInitializePoolIfNecessary",
+    outputs: [
+      {
+        internalType: "address",
+        name: "pool",
+        type: "address",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+];
+
+export class IPoolInitializer__factory {
+  static readonly abi = _abi;
+  static createInterface(): IPoolInitializerInterface {
+    return new utils.Interface(_abi) as IPoolInitializerInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IPoolInitializer {
+    return new Contract(address, _abi, signerOrProvider) as IPoolInitializer;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IQuoterV2__factory.ts b/lib/sor/types/v3/factories/IQuoterV2__factory.ts
new file mode 100644
index 0000000..e16bef9
--- /dev/null
+++ b/lib/sor/types/v3/factories/IQuoterV2__factory.ts
@@ -0,0 +1,223 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type { IQuoterV2, IQuoterV2Interface } from "../IQuoterV2";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    name: "quoteExactInput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160[]",
+        name: "sqrtPriceX96AfterList",
+        type: "uint160[]",
+      },
+      {
+        internalType: "uint32[]",
+        name: "initializedTicksCrossedList",
+        type: "uint32[]",
+      },
+      {
+        internalType: "uint256",
+        name: "gasEstimate",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "tokenIn",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "tokenOut",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amountIn",
+            type: "uint256",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "uint160",
+            name: "sqrtPriceLimitX96",
+            type: "uint160",
+          },
+        ],
+        internalType: "struct IQuoterV2.QuoteExactInputSingleParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "quoteExactInputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceX96After",
+        type: "uint160",
+      },
+      {
+        internalType: "uint32",
+        name: "initializedTicksCrossed",
+        type: "uint32",
+      },
+      {
+        internalType: "uint256",
+        name: "gasEstimate",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    name: "quoteExactOutput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160[]",
+        name: "sqrtPriceX96AfterList",
+        type: "uint160[]",
+      },
+      {
+        internalType: "uint32[]",
+        name: "initializedTicksCrossedList",
+        type: "uint32[]",
+      },
+      {
+        internalType: "uint256",
+        name: "gasEstimate",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "tokenIn",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "tokenOut",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amount",
+            type: "uint256",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "uint160",
+            name: "sqrtPriceLimitX96",
+            type: "uint160",
+          },
+        ],
+        internalType: "struct IQuoterV2.QuoteExactOutputSingleParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "quoteExactOutputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceX96After",
+        type: "uint160",
+      },
+      {
+        internalType: "uint32",
+        name: "initializedTicksCrossed",
+        type: "uint32",
+      },
+      {
+        internalType: "uint256",
+        name: "gasEstimate",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IQuoterV2__factory {
+  static readonly abi = _abi;
+  static createInterface(): IQuoterV2Interface {
+    return new utils.Interface(_abi) as IQuoterV2Interface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IQuoterV2 {
+    return new Contract(address, _abi, signerOrProvider) as IQuoterV2;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IQuoter__factory.ts b/lib/sor/types/v3/factories/IQuoter__factory.ts
new file mode 100644
index 0000000..e80f69a
--- /dev/null
+++ b/lib/sor/types/v3/factories/IQuoter__factory.ts
@@ -0,0 +1,149 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type { IQuoter, IQuoterInterface } from "../IQuoter";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    name: "quoteExactInput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenIn",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenOut",
+        type: "address",
+      },
+      {
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceLimitX96",
+        type: "uint160",
+      },
+    ],
+    name: "quoteExactInputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    name: "quoteExactOutput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenIn",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenOut",
+        type: "address",
+      },
+      {
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceLimitX96",
+        type: "uint160",
+      },
+    ],
+    name: "quoteExactOutputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IQuoter__factory {
+  static readonly abi = _abi;
+  static createInterface(): IQuoterInterface {
+    return new utils.Interface(_abi) as IQuoterInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IQuoter {
+    return new Contract(address, _abi, signerOrProvider) as IQuoter;
+  }
+}
diff --git a/lib/sor/types/v3/factories/ISelfPermit__factory.ts b/lib/sor/types/v3/factories/ISelfPermit__factory.ts
new file mode 100644
index 0000000..a9c740c
--- /dev/null
+++ b/lib/sor/types/v3/factories/ISelfPermit__factory.ts
@@ -0,0 +1,175 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type { ISelfPermit, ISelfPermitInterface } from "../ISelfPermit";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermit",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "nonce",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "expiry",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermitAllowed",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "nonce",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "expiry",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermitAllowedIfNecessary",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermitIfNecessary",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+];
+
+export class ISelfPermit__factory {
+  static readonly abi = _abi;
+  static createInterface(): ISelfPermitInterface {
+    return new utils.Interface(_abi) as ISelfPermitInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): ISelfPermit {
+    return new Contract(address, _abi, signerOrProvider) as ISelfPermit;
+  }
+}
diff --git a/lib/sor/types/v3/factories/ISwapRouter__factory.ts b/lib/sor/types/v3/factories/ISwapRouter__factory.ts
new file mode 100644
index 0000000..7377ec4
--- /dev/null
+++ b/lib/sor/types/v3/factories/ISwapRouter__factory.ts
@@ -0,0 +1,260 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type { ISwapRouter, ISwapRouterInterface } from "../ISwapRouter";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "bytes",
+            name: "path",
+            type: "bytes",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "deadline",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountIn",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountOutMinimum",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct ISwapRouter.ExactInputParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "exactInput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "tokenIn",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "tokenOut",
+            type: "address",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "deadline",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountIn",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountOutMinimum",
+            type: "uint256",
+          },
+          {
+            internalType: "uint160",
+            name: "sqrtPriceLimitX96",
+            type: "uint160",
+          },
+        ],
+        internalType: "struct ISwapRouter.ExactInputSingleParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "exactInputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "bytes",
+            name: "path",
+            type: "bytes",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "deadline",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountOut",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountInMaximum",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct ISwapRouter.ExactOutputParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "exactOutput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "tokenIn",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "tokenOut",
+            type: "address",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "deadline",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountOut",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountInMaximum",
+            type: "uint256",
+          },
+          {
+            internalType: "uint160",
+            name: "sqrtPriceLimitX96",
+            type: "uint160",
+          },
+        ],
+        internalType: "struct ISwapRouter.ExactOutputSingleParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "exactOutputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "int256",
+        name: "amount0Delta",
+        type: "int256",
+      },
+      {
+        internalType: "int256",
+        name: "amount1Delta",
+        type: "int256",
+      },
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "uniswapV3SwapCallback",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class ISwapRouter__factory {
+  static readonly abi = _abi;
+  static createInterface(): ISwapRouterInterface {
+    return new utils.Interface(_abi) as ISwapRouterInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): ISwapRouter {
+    return new Contract(address, _abi, signerOrProvider) as ISwapRouter;
+  }
+}
diff --git a/lib/sor/types/v3/factories/ITickLens__factory.ts b/lib/sor/types/v3/factories/ITickLens__factory.ts
new file mode 100644
index 0000000..0b1a474
--- /dev/null
+++ b/lib/sor/types/v3/factories/ITickLens__factory.ts
@@ -0,0 +1,64 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type { ITickLens, ITickLensInterface } from "../ITickLens";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "pool",
+        type: "address",
+      },
+      {
+        internalType: "int16",
+        name: "tickBitmapIndex",
+        type: "int16",
+      },
+    ],
+    name: "getPopulatedTicksInWord",
+    outputs: [
+      {
+        components: [
+          {
+            internalType: "int24",
+            name: "tick",
+            type: "int24",
+          },
+          {
+            internalType: "int128",
+            name: "liquidityNet",
+            type: "int128",
+          },
+          {
+            internalType: "uint128",
+            name: "liquidityGross",
+            type: "uint128",
+          },
+        ],
+        internalType: "struct ITickLens.PopulatedTick[]",
+        name: "populatedTicks",
+        type: "tuple[]",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+];
+
+export class ITickLens__factory {
+  static readonly abi = _abi;
+  static createInterface(): ITickLensInterface {
+    return new utils.Interface(_abi) as ITickLensInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): ITickLens {
+    return new Contract(address, _abi, signerOrProvider) as ITickLens;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IUniswapV3Factory__factory.ts b/lib/sor/types/v3/factories/IUniswapV3Factory__factory.ts
new file mode 100644
index 0000000..1d48955
--- /dev/null
+++ b/lib/sor/types/v3/factories/IUniswapV3Factory__factory.ts
@@ -0,0 +1,222 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IUniswapV3Factory,
+  IUniswapV3FactoryInterface,
+} from "../IUniswapV3Factory";
+
+const _abi = [
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+      {
+        indexed: true,
+        internalType: "int24",
+        name: "tickSpacing",
+        type: "int24",
+      },
+    ],
+    name: "FeeAmountEnabled",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "oldOwner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "newOwner",
+        type: "address",
+      },
+    ],
+    name: "OwnerChanged",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "token0",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "token1",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+      {
+        indexed: false,
+        internalType: "int24",
+        name: "tickSpacing",
+        type: "int24",
+      },
+      {
+        indexed: false,
+        internalType: "address",
+        name: "pool",
+        type: "address",
+      },
+    ],
+    name: "PoolCreated",
+    type: "event",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenA",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenB",
+        type: "address",
+      },
+      {
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+    ],
+    name: "createPool",
+    outputs: [
+      {
+        internalType: "address",
+        name: "pool",
+        type: "address",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+      {
+        internalType: "int24",
+        name: "tickSpacing",
+        type: "int24",
+      },
+    ],
+    name: "enableFeeAmount",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+    ],
+    name: "feeAmountTickSpacing",
+    outputs: [
+      {
+        internalType: "int24",
+        name: "",
+        type: "int24",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenA",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenB",
+        type: "address",
+      },
+      {
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+    ],
+    name: "getPool",
+    outputs: [
+      {
+        internalType: "address",
+        name: "pool",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "owner",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "_owner",
+        type: "address",
+      },
+    ],
+    name: "setOwner",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IUniswapV3Factory__factory {
+  static readonly abi = _abi;
+  static createInterface(): IUniswapV3FactoryInterface {
+    return new utils.Interface(_abi) as IUniswapV3FactoryInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IUniswapV3Factory {
+    return new Contract(address, _abi, signerOrProvider) as IUniswapV3Factory;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IUniswapV3FlashCallback__factory.ts b/lib/sor/types/v3/factories/IUniswapV3FlashCallback__factory.ts
new file mode 100644
index 0000000..3365664
--- /dev/null
+++ b/lib/sor/types/v3/factories/IUniswapV3FlashCallback__factory.ts
@@ -0,0 +1,53 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IUniswapV3FlashCallback,
+  IUniswapV3FlashCallbackInterface,
+} from "../IUniswapV3FlashCallback";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "fee0",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "fee1",
+        type: "uint256",
+      },
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "uniswapV3FlashCallback",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IUniswapV3FlashCallback__factory {
+  static readonly abi = _abi;
+  static createInterface(): IUniswapV3FlashCallbackInterface {
+    return new utils.Interface(_abi) as IUniswapV3FlashCallbackInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IUniswapV3FlashCallback {
+    return new Contract(
+      address,
+      _abi,
+      signerOrProvider
+    ) as IUniswapV3FlashCallback;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IUniswapV3MintCallback__factory.ts b/lib/sor/types/v3/factories/IUniswapV3MintCallback__factory.ts
new file mode 100644
index 0000000..35818c7
--- /dev/null
+++ b/lib/sor/types/v3/factories/IUniswapV3MintCallback__factory.ts
@@ -0,0 +1,53 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IUniswapV3MintCallback,
+  IUniswapV3MintCallbackInterface,
+} from "../IUniswapV3MintCallback";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amount0Owed",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amount1Owed",
+        type: "uint256",
+      },
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "uniswapV3MintCallback",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IUniswapV3MintCallback__factory {
+  static readonly abi = _abi;
+  static createInterface(): IUniswapV3MintCallbackInterface {
+    return new utils.Interface(_abi) as IUniswapV3MintCallbackInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IUniswapV3MintCallback {
+    return new Contract(
+      address,
+      _abi,
+      signerOrProvider
+    ) as IUniswapV3MintCallback;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IUniswapV3PoolActions__factory.ts b/lib/sor/types/v3/factories/IUniswapV3PoolActions__factory.ts
new file mode 100644
index 0000000..6e30686
--- /dev/null
+++ b/lib/sor/types/v3/factories/IUniswapV3PoolActions__factory.ts
@@ -0,0 +1,250 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IUniswapV3PoolActions,
+  IUniswapV3PoolActionsInterface,
+} from "../IUniswapV3PoolActions";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "int24",
+        name: "tickLower",
+        type: "int24",
+      },
+      {
+        internalType: "int24",
+        name: "tickUpper",
+        type: "int24",
+      },
+      {
+        internalType: "uint128",
+        name: "amount",
+        type: "uint128",
+      },
+    ],
+    name: "burn",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "int24",
+        name: "tickLower",
+        type: "int24",
+      },
+      {
+        internalType: "int24",
+        name: "tickUpper",
+        type: "int24",
+      },
+      {
+        internalType: "uint128",
+        name: "amount0Requested",
+        type: "uint128",
+      },
+      {
+        internalType: "uint128",
+        name: "amount1Requested",
+        type: "uint128",
+      },
+    ],
+    name: "collect",
+    outputs: [
+      {
+        internalType: "uint128",
+        name: "amount0",
+        type: "uint128",
+      },
+      {
+        internalType: "uint128",
+        name: "amount1",
+        type: "uint128",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "flash",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint16",
+        name: "observationCardinalityNext",
+        type: "uint16",
+      },
+    ],
+    name: "increaseObservationCardinalityNext",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint160",
+        name: "sqrtPriceX96",
+        type: "uint160",
+      },
+    ],
+    name: "initialize",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "int24",
+        name: "tickLower",
+        type: "int24",
+      },
+      {
+        internalType: "int24",
+        name: "tickUpper",
+        type: "int24",
+      },
+      {
+        internalType: "uint128",
+        name: "amount",
+        type: "uint128",
+      },
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "mint",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "bool",
+        name: "zeroForOne",
+        type: "bool",
+      },
+      {
+        internalType: "int256",
+        name: "amountSpecified",
+        type: "int256",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceLimitX96",
+        type: "uint160",
+      },
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "swap",
+    outputs: [
+      {
+        internalType: "int256",
+        name: "amount0",
+        type: "int256",
+      },
+      {
+        internalType: "int256",
+        name: "amount1",
+        type: "int256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IUniswapV3PoolActions__factory {
+  static readonly abi = _abi;
+  static createInterface(): IUniswapV3PoolActionsInterface {
+    return new utils.Interface(_abi) as IUniswapV3PoolActionsInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IUniswapV3PoolActions {
+    return new Contract(
+      address,
+      _abi,
+      signerOrProvider
+    ) as IUniswapV3PoolActions;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IUniswapV3PoolDeployer__factory.ts b/lib/sor/types/v3/factories/IUniswapV3PoolDeployer__factory.ts
new file mode 100644
index 0000000..6c46a85
--- /dev/null
+++ b/lib/sor/types/v3/factories/IUniswapV3PoolDeployer__factory.ts
@@ -0,0 +1,63 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IUniswapV3PoolDeployer,
+  IUniswapV3PoolDeployerInterface,
+} from "../IUniswapV3PoolDeployer";
+
+const _abi = [
+  {
+    inputs: [],
+    name: "parameters",
+    outputs: [
+      {
+        internalType: "address",
+        name: "factory",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "token0",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "token1",
+        type: "address",
+      },
+      {
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+      {
+        internalType: "int24",
+        name: "tickSpacing",
+        type: "int24",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+];
+
+export class IUniswapV3PoolDeployer__factory {
+  static readonly abi = _abi;
+  static createInterface(): IUniswapV3PoolDeployerInterface {
+    return new utils.Interface(_abi) as IUniswapV3PoolDeployerInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IUniswapV3PoolDeployer {
+    return new Contract(
+      address,
+      _abi,
+      signerOrProvider
+    ) as IUniswapV3PoolDeployer;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IUniswapV3PoolDerivedState__factory.ts b/lib/sor/types/v3/factories/IUniswapV3PoolDerivedState__factory.ts
new file mode 100644
index 0000000..035be5f
--- /dev/null
+++ b/lib/sor/types/v3/factories/IUniswapV3PoolDerivedState__factory.ts
@@ -0,0 +1,88 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IUniswapV3PoolDerivedState,
+  IUniswapV3PoolDerivedStateInterface,
+} from "../IUniswapV3PoolDerivedState";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "uint32[]",
+        name: "secondsAgos",
+        type: "uint32[]",
+      },
+    ],
+    name: "observe",
+    outputs: [
+      {
+        internalType: "int56[]",
+        name: "tickCumulatives",
+        type: "int56[]",
+      },
+      {
+        internalType: "uint160[]",
+        name: "secondsPerLiquidityCumulativeX128s",
+        type: "uint160[]",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "int24",
+        name: "tickLower",
+        type: "int24",
+      },
+      {
+        internalType: "int24",
+        name: "tickUpper",
+        type: "int24",
+      },
+    ],
+    name: "snapshotCumulativesInside",
+    outputs: [
+      {
+        internalType: "int56",
+        name: "tickCumulativeInside",
+        type: "int56",
+      },
+      {
+        internalType: "uint160",
+        name: "secondsPerLiquidityInsideX128",
+        type: "uint160",
+      },
+      {
+        internalType: "uint32",
+        name: "secondsInside",
+        type: "uint32",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+];
+
+export class IUniswapV3PoolDerivedState__factory {
+  static readonly abi = _abi;
+  static createInterface(): IUniswapV3PoolDerivedStateInterface {
+    return new utils.Interface(_abi) as IUniswapV3PoolDerivedStateInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IUniswapV3PoolDerivedState {
+    return new Contract(
+      address,
+      _abi,
+      signerOrProvider
+    ) as IUniswapV3PoolDerivedState;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IUniswapV3PoolEvents__factory.ts b/lib/sor/types/v3/factories/IUniswapV3PoolEvents__factory.ts
new file mode 100644
index 0000000..7dd0d7e
--- /dev/null
+++ b/lib/sor/types/v3/factories/IUniswapV3PoolEvents__factory.ts
@@ -0,0 +1,357 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IUniswapV3PoolEvents,
+  IUniswapV3PoolEventsInterface,
+} from "../IUniswapV3PoolEvents";
+
+const _abi = [
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "int24",
+        name: "tickLower",
+        type: "int24",
+      },
+      {
+        indexed: true,
+        internalType: "int24",
+        name: "tickUpper",
+        type: "int24",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "amount",
+        type: "uint128",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    name: "Burn",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "int24",
+        name: "tickLower",
+        type: "int24",
+      },
+      {
+        indexed: true,
+        internalType: "int24",
+        name: "tickUpper",
+        type: "int24",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "amount0",
+        type: "uint128",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "amount1",
+        type: "uint128",
+      },
+    ],
+    name: "Collect",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "sender",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "amount0",
+        type: "uint128",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "amount1",
+        type: "uint128",
+      },
+    ],
+    name: "CollectProtocol",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "sender",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "paid0",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "paid1",
+        type: "uint256",
+      },
+    ],
+    name: "Flash",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: false,
+        internalType: "uint16",
+        name: "observationCardinalityNextOld",
+        type: "uint16",
+      },
+      {
+        indexed: false,
+        internalType: "uint16",
+        name: "observationCardinalityNextNew",
+        type: "uint16",
+      },
+    ],
+    name: "IncreaseObservationCardinalityNext",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: false,
+        internalType: "uint160",
+        name: "sqrtPriceX96",
+        type: "uint160",
+      },
+      {
+        indexed: false,
+        internalType: "int24",
+        name: "tick",
+        type: "int24",
+      },
+    ],
+    name: "Initialize",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: false,
+        internalType: "address",
+        name: "sender",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "int24",
+        name: "tickLower",
+        type: "int24",
+      },
+      {
+        indexed: true,
+        internalType: "int24",
+        name: "tickUpper",
+        type: "int24",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "amount",
+        type: "uint128",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    name: "Mint",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: false,
+        internalType: "uint8",
+        name: "feeProtocol0Old",
+        type: "uint8",
+      },
+      {
+        indexed: false,
+        internalType: "uint8",
+        name: "feeProtocol1Old",
+        type: "uint8",
+      },
+      {
+        indexed: false,
+        internalType: "uint8",
+        name: "feeProtocol0New",
+        type: "uint8",
+      },
+      {
+        indexed: false,
+        internalType: "uint8",
+        name: "feeProtocol1New",
+        type: "uint8",
+      },
+    ],
+    name: "SetFeeProtocol",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "sender",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "int256",
+        name: "amount0",
+        type: "int256",
+      },
+      {
+        indexed: false,
+        internalType: "int256",
+        name: "amount1",
+        type: "int256",
+      },
+      {
+        indexed: false,
+        internalType: "uint160",
+        name: "sqrtPriceX96",
+        type: "uint160",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "liquidity",
+        type: "uint128",
+      },
+      {
+        indexed: false,
+        internalType: "int24",
+        name: "tick",
+        type: "int24",
+      },
+    ],
+    name: "Swap",
+    type: "event",
+  },
+];
+
+export class IUniswapV3PoolEvents__factory {
+  static readonly abi = _abi;
+  static createInterface(): IUniswapV3PoolEventsInterface {
+    return new utils.Interface(_abi) as IUniswapV3PoolEventsInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IUniswapV3PoolEvents {
+    return new Contract(
+      address,
+      _abi,
+      signerOrProvider
+    ) as IUniswapV3PoolEvents;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IUniswapV3PoolImmutables__factory.ts b/lib/sor/types/v3/factories/IUniswapV3PoolImmutables__factory.ts
new file mode 100644
index 0000000..706c50d
--- /dev/null
+++ b/lib/sor/types/v3/factories/IUniswapV3PoolImmutables__factory.ts
@@ -0,0 +1,108 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IUniswapV3PoolImmutables,
+  IUniswapV3PoolImmutablesInterface,
+} from "../IUniswapV3PoolImmutables";
+
+const _abi = [
+  {
+    inputs: [],
+    name: "factory",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "fee",
+    outputs: [
+      {
+        internalType: "uint24",
+        name: "",
+        type: "uint24",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "maxLiquidityPerTick",
+    outputs: [
+      {
+        internalType: "uint128",
+        name: "",
+        type: "uint128",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "tickSpacing",
+    outputs: [
+      {
+        internalType: "int24",
+        name: "",
+        type: "int24",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "token0",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "token1",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+];
+
+export class IUniswapV3PoolImmutables__factory {
+  static readonly abi = _abi;
+  static createInterface(): IUniswapV3PoolImmutablesInterface {
+    return new utils.Interface(_abi) as IUniswapV3PoolImmutablesInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IUniswapV3PoolImmutables {
+    return new Contract(
+      address,
+      _abi,
+      signerOrProvider
+    ) as IUniswapV3PoolImmutables;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IUniswapV3PoolOwnerActions__factory.ts b/lib/sor/types/v3/factories/IUniswapV3PoolOwnerActions__factory.ts
new file mode 100644
index 0000000..c2c17d8
--- /dev/null
+++ b/lib/sor/types/v3/factories/IUniswapV3PoolOwnerActions__factory.ts
@@ -0,0 +1,82 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IUniswapV3PoolOwnerActions,
+  IUniswapV3PoolOwnerActionsInterface,
+} from "../IUniswapV3PoolOwnerActions";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "uint128",
+        name: "amount0Requested",
+        type: "uint128",
+      },
+      {
+        internalType: "uint128",
+        name: "amount1Requested",
+        type: "uint128",
+      },
+    ],
+    name: "collectProtocol",
+    outputs: [
+      {
+        internalType: "uint128",
+        name: "amount0",
+        type: "uint128",
+      },
+      {
+        internalType: "uint128",
+        name: "amount1",
+        type: "uint128",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint8",
+        name: "feeProtocol0",
+        type: "uint8",
+      },
+      {
+        internalType: "uint8",
+        name: "feeProtocol1",
+        type: "uint8",
+      },
+    ],
+    name: "setFeeProtocol",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IUniswapV3PoolOwnerActions__factory {
+  static readonly abi = _abi;
+  static createInterface(): IUniswapV3PoolOwnerActionsInterface {
+    return new utils.Interface(_abi) as IUniswapV3PoolOwnerActionsInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IUniswapV3PoolOwnerActions {
+    return new Contract(
+      address,
+      _abi,
+      signerOrProvider
+    ) as IUniswapV3PoolOwnerActions;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IUniswapV3PoolState__factory.ts b/lib/sor/types/v3/factories/IUniswapV3PoolState__factory.ts
new file mode 100644
index 0000000..3ab12b1
--- /dev/null
+++ b/lib/sor/types/v3/factories/IUniswapV3PoolState__factory.ts
@@ -0,0 +1,272 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IUniswapV3PoolState,
+  IUniswapV3PoolStateInterface,
+} from "../IUniswapV3PoolState";
+
+const _abi = [
+  {
+    inputs: [],
+    name: "feeGrowthGlobal0X128",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "feeGrowthGlobal1X128",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "liquidity",
+    outputs: [
+      {
+        internalType: "uint128",
+        name: "",
+        type: "uint128",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "index",
+        type: "uint256",
+      },
+    ],
+    name: "observations",
+    outputs: [
+      {
+        internalType: "uint32",
+        name: "blockTimestamp",
+        type: "uint32",
+      },
+      {
+        internalType: "int56",
+        name: "tickCumulative",
+        type: "int56",
+      },
+      {
+        internalType: "uint160",
+        name: "secondsPerLiquidityCumulativeX128",
+        type: "uint160",
+      },
+      {
+        internalType: "bool",
+        name: "initialized",
+        type: "bool",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes32",
+        name: "key",
+        type: "bytes32",
+      },
+    ],
+    name: "positions",
+    outputs: [
+      {
+        internalType: "uint128",
+        name: "_liquidity",
+        type: "uint128",
+      },
+      {
+        internalType: "uint256",
+        name: "feeGrowthInside0LastX128",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "feeGrowthInside1LastX128",
+        type: "uint256",
+      },
+      {
+        internalType: "uint128",
+        name: "tokensOwed0",
+        type: "uint128",
+      },
+      {
+        internalType: "uint128",
+        name: "tokensOwed1",
+        type: "uint128",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "protocolFees",
+    outputs: [
+      {
+        internalType: "uint128",
+        name: "token0",
+        type: "uint128",
+      },
+      {
+        internalType: "uint128",
+        name: "token1",
+        type: "uint128",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "slot0",
+    outputs: [
+      {
+        internalType: "uint160",
+        name: "sqrtPriceX96",
+        type: "uint160",
+      },
+      {
+        internalType: "int24",
+        name: "tick",
+        type: "int24",
+      },
+      {
+        internalType: "uint16",
+        name: "observationIndex",
+        type: "uint16",
+      },
+      {
+        internalType: "uint16",
+        name: "observationCardinality",
+        type: "uint16",
+      },
+      {
+        internalType: "uint16",
+        name: "observationCardinalityNext",
+        type: "uint16",
+      },
+      {
+        internalType: "uint8",
+        name: "feeProtocol",
+        type: "uint8",
+      },
+      {
+        internalType: "bool",
+        name: "unlocked",
+        type: "bool",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "int16",
+        name: "wordPosition",
+        type: "int16",
+      },
+    ],
+    name: "tickBitmap",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "int24",
+        name: "tick",
+        type: "int24",
+      },
+    ],
+    name: "ticks",
+    outputs: [
+      {
+        internalType: "uint128",
+        name: "liquidityGross",
+        type: "uint128",
+      },
+      {
+        internalType: "int128",
+        name: "liquidityNet",
+        type: "int128",
+      },
+      {
+        internalType: "uint256",
+        name: "feeGrowthOutside0X128",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "feeGrowthOutside1X128",
+        type: "uint256",
+      },
+      {
+        internalType: "int56",
+        name: "tickCumulativeOutside",
+        type: "int56",
+      },
+      {
+        internalType: "uint160",
+        name: "secondsPerLiquidityOutsideX128",
+        type: "uint160",
+      },
+      {
+        internalType: "uint32",
+        name: "secondsOutside",
+        type: "uint32",
+      },
+      {
+        internalType: "bool",
+        name: "initialized",
+        type: "bool",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+];
+
+export class IUniswapV3PoolState__factory {
+  static readonly abi = _abi;
+  static createInterface(): IUniswapV3PoolStateInterface {
+    return new utils.Interface(_abi) as IUniswapV3PoolStateInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IUniswapV3PoolState {
+    return new Contract(address, _abi, signerOrProvider) as IUniswapV3PoolState;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IUniswapV3Pool__factory.ts b/lib/sor/types/v3/factories/IUniswapV3Pool__factory.ts
new file mode 100644
index 0000000..ee80620
--- /dev/null
+++ b/lib/sor/types/v3/factories/IUniswapV3Pool__factory.ts
@@ -0,0 +1,1007 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IUniswapV3Pool,
+  IUniswapV3PoolInterface,
+} from "../IUniswapV3Pool";
+
+const _abi = [
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "int24",
+        name: "tickLower",
+        type: "int24",
+      },
+      {
+        indexed: true,
+        internalType: "int24",
+        name: "tickUpper",
+        type: "int24",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "amount",
+        type: "uint128",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    name: "Burn",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "int24",
+        name: "tickLower",
+        type: "int24",
+      },
+      {
+        indexed: true,
+        internalType: "int24",
+        name: "tickUpper",
+        type: "int24",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "amount0",
+        type: "uint128",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "amount1",
+        type: "uint128",
+      },
+    ],
+    name: "Collect",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "sender",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "amount0",
+        type: "uint128",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "amount1",
+        type: "uint128",
+      },
+    ],
+    name: "CollectProtocol",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "sender",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "paid0",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "paid1",
+        type: "uint256",
+      },
+    ],
+    name: "Flash",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: false,
+        internalType: "uint16",
+        name: "observationCardinalityNextOld",
+        type: "uint16",
+      },
+      {
+        indexed: false,
+        internalType: "uint16",
+        name: "observationCardinalityNextNew",
+        type: "uint16",
+      },
+    ],
+    name: "IncreaseObservationCardinalityNext",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: false,
+        internalType: "uint160",
+        name: "sqrtPriceX96",
+        type: "uint160",
+      },
+      {
+        indexed: false,
+        internalType: "int24",
+        name: "tick",
+        type: "int24",
+      },
+    ],
+    name: "Initialize",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: false,
+        internalType: "address",
+        name: "sender",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "int24",
+        name: "tickLower",
+        type: "int24",
+      },
+      {
+        indexed: true,
+        internalType: "int24",
+        name: "tickUpper",
+        type: "int24",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "amount",
+        type: "uint128",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    name: "Mint",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: false,
+        internalType: "uint8",
+        name: "feeProtocol0Old",
+        type: "uint8",
+      },
+      {
+        indexed: false,
+        internalType: "uint8",
+        name: "feeProtocol1Old",
+        type: "uint8",
+      },
+      {
+        indexed: false,
+        internalType: "uint8",
+        name: "feeProtocol0New",
+        type: "uint8",
+      },
+      {
+        indexed: false,
+        internalType: "uint8",
+        name: "feeProtocol1New",
+        type: "uint8",
+      },
+    ],
+    name: "SetFeeProtocol",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "sender",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "int256",
+        name: "amount0",
+        type: "int256",
+      },
+      {
+        indexed: false,
+        internalType: "int256",
+        name: "amount1",
+        type: "int256",
+      },
+      {
+        indexed: false,
+        internalType: "uint160",
+        name: "sqrtPriceX96",
+        type: "uint160",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "liquidity",
+        type: "uint128",
+      },
+      {
+        indexed: false,
+        internalType: "int24",
+        name: "tick",
+        type: "int24",
+      },
+    ],
+    name: "Swap",
+    type: "event",
+  },
+  {
+    inputs: [
+      {
+        internalType: "int24",
+        name: "tickLower",
+        type: "int24",
+      },
+      {
+        internalType: "int24",
+        name: "tickUpper",
+        type: "int24",
+      },
+      {
+        internalType: "uint128",
+        name: "amount",
+        type: "uint128",
+      },
+    ],
+    name: "burn",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "int24",
+        name: "tickLower",
+        type: "int24",
+      },
+      {
+        internalType: "int24",
+        name: "tickUpper",
+        type: "int24",
+      },
+      {
+        internalType: "uint128",
+        name: "amount0Requested",
+        type: "uint128",
+      },
+      {
+        internalType: "uint128",
+        name: "amount1Requested",
+        type: "uint128",
+      },
+    ],
+    name: "collect",
+    outputs: [
+      {
+        internalType: "uint128",
+        name: "amount0",
+        type: "uint128",
+      },
+      {
+        internalType: "uint128",
+        name: "amount1",
+        type: "uint128",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "uint128",
+        name: "amount0Requested",
+        type: "uint128",
+      },
+      {
+        internalType: "uint128",
+        name: "amount1Requested",
+        type: "uint128",
+      },
+    ],
+    name: "collectProtocol",
+    outputs: [
+      {
+        internalType: "uint128",
+        name: "amount0",
+        type: "uint128",
+      },
+      {
+        internalType: "uint128",
+        name: "amount1",
+        type: "uint128",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factory",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "fee",
+    outputs: [
+      {
+        internalType: "uint24",
+        name: "",
+        type: "uint24",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "feeGrowthGlobal0X128",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "feeGrowthGlobal1X128",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "flash",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint16",
+        name: "observationCardinalityNext",
+        type: "uint16",
+      },
+    ],
+    name: "increaseObservationCardinalityNext",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint160",
+        name: "sqrtPriceX96",
+        type: "uint160",
+      },
+    ],
+    name: "initialize",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "liquidity",
+    outputs: [
+      {
+        internalType: "uint128",
+        name: "",
+        type: "uint128",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "maxLiquidityPerTick",
+    outputs: [
+      {
+        internalType: "uint128",
+        name: "",
+        type: "uint128",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "int24",
+        name: "tickLower",
+        type: "int24",
+      },
+      {
+        internalType: "int24",
+        name: "tickUpper",
+        type: "int24",
+      },
+      {
+        internalType: "uint128",
+        name: "amount",
+        type: "uint128",
+      },
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "mint",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "index",
+        type: "uint256",
+      },
+    ],
+    name: "observations",
+    outputs: [
+      {
+        internalType: "uint32",
+        name: "blockTimestamp",
+        type: "uint32",
+      },
+      {
+        internalType: "int56",
+        name: "tickCumulative",
+        type: "int56",
+      },
+      {
+        internalType: "uint160",
+        name: "secondsPerLiquidityCumulativeX128",
+        type: "uint160",
+      },
+      {
+        internalType: "bool",
+        name: "initialized",
+        type: "bool",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint32[]",
+        name: "secondsAgos",
+        type: "uint32[]",
+      },
+    ],
+    name: "observe",
+    outputs: [
+      {
+        internalType: "int56[]",
+        name: "tickCumulatives",
+        type: "int56[]",
+      },
+      {
+        internalType: "uint160[]",
+        name: "secondsPerLiquidityCumulativeX128s",
+        type: "uint160[]",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes32",
+        name: "key",
+        type: "bytes32",
+      },
+    ],
+    name: "positions",
+    outputs: [
+      {
+        internalType: "uint128",
+        name: "_liquidity",
+        type: "uint128",
+      },
+      {
+        internalType: "uint256",
+        name: "feeGrowthInside0LastX128",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "feeGrowthInside1LastX128",
+        type: "uint256",
+      },
+      {
+        internalType: "uint128",
+        name: "tokensOwed0",
+        type: "uint128",
+      },
+      {
+        internalType: "uint128",
+        name: "tokensOwed1",
+        type: "uint128",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "protocolFees",
+    outputs: [
+      {
+        internalType: "uint128",
+        name: "token0",
+        type: "uint128",
+      },
+      {
+        internalType: "uint128",
+        name: "token1",
+        type: "uint128",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint8",
+        name: "feeProtocol0",
+        type: "uint8",
+      },
+      {
+        internalType: "uint8",
+        name: "feeProtocol1",
+        type: "uint8",
+      },
+    ],
+    name: "setFeeProtocol",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "slot0",
+    outputs: [
+      {
+        internalType: "uint160",
+        name: "sqrtPriceX96",
+        type: "uint160",
+      },
+      {
+        internalType: "int24",
+        name: "tick",
+        type: "int24",
+      },
+      {
+        internalType: "uint16",
+        name: "observationIndex",
+        type: "uint16",
+      },
+      {
+        internalType: "uint16",
+        name: "observationCardinality",
+        type: "uint16",
+      },
+      {
+        internalType: "uint16",
+        name: "observationCardinalityNext",
+        type: "uint16",
+      },
+      {
+        internalType: "uint8",
+        name: "feeProtocol",
+        type: "uint8",
+      },
+      {
+        internalType: "bool",
+        name: "unlocked",
+        type: "bool",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "int24",
+        name: "tickLower",
+        type: "int24",
+      },
+      {
+        internalType: "int24",
+        name: "tickUpper",
+        type: "int24",
+      },
+    ],
+    name: "snapshotCumulativesInside",
+    outputs: [
+      {
+        internalType: "int56",
+        name: "tickCumulativeInside",
+        type: "int56",
+      },
+      {
+        internalType: "uint160",
+        name: "secondsPerLiquidityInsideX128",
+        type: "uint160",
+      },
+      {
+        internalType: "uint32",
+        name: "secondsInside",
+        type: "uint32",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "bool",
+        name: "zeroForOne",
+        type: "bool",
+      },
+      {
+        internalType: "int256",
+        name: "amountSpecified",
+        type: "int256",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceLimitX96",
+        type: "uint160",
+      },
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "swap",
+    outputs: [
+      {
+        internalType: "int256",
+        name: "amount0",
+        type: "int256",
+      },
+      {
+        internalType: "int256",
+        name: "amount1",
+        type: "int256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "int16",
+        name: "wordPosition",
+        type: "int16",
+      },
+    ],
+    name: "tickBitmap",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "tickSpacing",
+    outputs: [
+      {
+        internalType: "int24",
+        name: "",
+        type: "int24",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "int24",
+        name: "tick",
+        type: "int24",
+      },
+    ],
+    name: "ticks",
+    outputs: [
+      {
+        internalType: "uint128",
+        name: "liquidityGross",
+        type: "uint128",
+      },
+      {
+        internalType: "int128",
+        name: "liquidityNet",
+        type: "int128",
+      },
+      {
+        internalType: "uint256",
+        name: "feeGrowthOutside0X128",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "feeGrowthOutside1X128",
+        type: "uint256",
+      },
+      {
+        internalType: "int56",
+        name: "tickCumulativeOutside",
+        type: "int56",
+      },
+      {
+        internalType: "uint160",
+        name: "secondsPerLiquidityOutsideX128",
+        type: "uint160",
+      },
+      {
+        internalType: "uint32",
+        name: "secondsOutside",
+        type: "uint32",
+      },
+      {
+        internalType: "bool",
+        name: "initialized",
+        type: "bool",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "token0",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "token1",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+];
+
+export class IUniswapV3Pool__factory {
+  static readonly abi = _abi;
+  static createInterface(): IUniswapV3PoolInterface {
+    return new utils.Interface(_abi) as IUniswapV3PoolInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IUniswapV3Pool {
+    return new Contract(address, _abi, signerOrProvider) as IUniswapV3Pool;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IUniswapV3SwapCallback__factory.ts b/lib/sor/types/v3/factories/IUniswapV3SwapCallback__factory.ts
new file mode 100644
index 0000000..5649fa2
--- /dev/null
+++ b/lib/sor/types/v3/factories/IUniswapV3SwapCallback__factory.ts
@@ -0,0 +1,53 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type {
+  IUniswapV3SwapCallback,
+  IUniswapV3SwapCallbackInterface,
+} from "../IUniswapV3SwapCallback";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "int256",
+        name: "amount0Delta",
+        type: "int256",
+      },
+      {
+        internalType: "int256",
+        name: "amount1Delta",
+        type: "int256",
+      },
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "uniswapV3SwapCallback",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IUniswapV3SwapCallback__factory {
+  static readonly abi = _abi;
+  static createInterface(): IUniswapV3SwapCallbackInterface {
+    return new utils.Interface(_abi) as IUniswapV3SwapCallbackInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IUniswapV3SwapCallback {
+    return new Contract(
+      address,
+      _abi,
+      signerOrProvider
+    ) as IUniswapV3SwapCallback;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IV3Migrator__factory.ts b/lib/sor/types/v3/factories/IV3Migrator__factory.ts
new file mode 100644
index 0000000..528082e
--- /dev/null
+++ b/lib/sor/types/v3/factories/IV3Migrator__factory.ts
@@ -0,0 +1,308 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type { IV3Migrator, IV3MigratorInterface } from "../IV3Migrator";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token0",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "token1",
+        type: "address",
+      },
+      {
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceX96",
+        type: "uint160",
+      },
+    ],
+    name: "createAndInitializePoolIfNecessary",
+    outputs: [
+      {
+        internalType: "address",
+        name: "pool",
+        type: "address",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "pair",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "liquidityToMigrate",
+            type: "uint256",
+          },
+          {
+            internalType: "uint8",
+            name: "percentageToMigrate",
+            type: "uint8",
+          },
+          {
+            internalType: "address",
+            name: "token0",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "token1",
+            type: "address",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "int24",
+            name: "tickLower",
+            type: "int24",
+          },
+          {
+            internalType: "int24",
+            name: "tickUpper",
+            type: "int24",
+          },
+          {
+            internalType: "uint256",
+            name: "amount0Min",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount1Min",
+            type: "uint256",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "deadline",
+            type: "uint256",
+          },
+          {
+            internalType: "bool",
+            name: "refundAsETH",
+            type: "bool",
+          },
+        ],
+        internalType: "struct IV3Migrator.MigrateParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "migrate",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes[]",
+        name: "data",
+        type: "bytes[]",
+      },
+    ],
+    name: "multicall",
+    outputs: [
+      {
+        internalType: "bytes[]",
+        name: "results",
+        type: "bytes[]",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermit",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "nonce",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "expiry",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermitAllowed",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "nonce",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "expiry",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermitAllowedIfNecessary",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermitIfNecessary",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+];
+
+export class IV3Migrator__factory {
+  static readonly abi = _abi;
+  static createInterface(): IV3MigratorInterface {
+    return new utils.Interface(_abi) as IV3MigratorInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): IV3Migrator {
+    return new Contract(address, _abi, signerOrProvider) as IV3Migrator;
+  }
+}
diff --git a/lib/sor/types/v3/factories/IWETH9__factory.ts b/lib/sor/types/v3/factories/IWETH9__factory.ts
new file mode 100644
index 0000000..f004a44
--- /dev/null
+++ b/lib/sor/types/v3/factories/IWETH9__factory.ts
@@ -0,0 +1,223 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider } from "@ethersproject/providers";
+import { Contract, Signer, utils } from "ethers";
+import type { IWETH9, IWETH9Interface } from "../IWETH9";
+
+const _abi = [
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "Approval",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "from",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+    ],
+    name: "Transfer",
+    type: "event",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+    ],
+    name: "allowance",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amount",
+        type: "uint256",
+      },
+    ],
+    name: "approve",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "account",
+        type: "address",
+      },
+    ],
+    name: "balanceOf",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "deposit",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "totalSupply",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amount",
+        type: "uint256",
+      },
+    ],
+    name: "transfer",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "sender",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amount",
+        type: "uint256",
+      },
+    ],
+    name: "transferFrom",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    name: "withdraw",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+export class IWETH9__factory {
+  static readonly abi = _abi;
+  static createInterface(): IWETH9Interface {
+    return new utils.Interface(_abi) as IWETH9Interface;
+  }
+  static connect(address: string, signerOrProvider: Signer | Provider): IWETH9 {
+    return new Contract(address, _abi, signerOrProvider) as IWETH9;
+  }
+}
diff --git a/lib/sor/types/v3/factories/NFTDescriptor__factory.ts b/lib/sor/types/v3/factories/NFTDescriptor__factory.ts
new file mode 100644
index 0000000..40c1526
--- /dev/null
+++ b/lib/sor/types/v3/factories/NFTDescriptor__factory.ts
@@ -0,0 +1,138 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider, TransactionRequest } from "@ethersproject/providers";
+import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
+import type { NFTDescriptor, NFTDescriptorInterface } from "../NFTDescriptor";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "uint256",
+            name: "tokenId",
+            type: "uint256",
+          },
+          {
+            internalType: "address",
+            name: "quoteTokenAddress",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "baseTokenAddress",
+            type: "address",
+          },
+          {
+            internalType: "string",
+            name: "quoteTokenSymbol",
+            type: "string",
+          },
+          {
+            internalType: "string",
+            name: "baseTokenSymbol",
+            type: "string",
+          },
+          {
+            internalType: "uint8",
+            name: "quoteTokenDecimals",
+            type: "uint8",
+          },
+          {
+            internalType: "uint8",
+            name: "baseTokenDecimals",
+            type: "uint8",
+          },
+          {
+            internalType: "bool",
+            name: "flipRatio",
+            type: "bool",
+          },
+          {
+            internalType: "int24",
+            name: "tickLower",
+            type: "int24",
+          },
+          {
+            internalType: "int24",
+            name: "tickUpper",
+            type: "int24",
+          },
+          {
+            internalType: "int24",
+            name: "tickCurrent",
+            type: "int24",
+          },
+          {
+            internalType: "int24",
+            name: "tickSpacing",
+            type: "int24",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "address",
+            name: "poolAddress",
+            type: "address",
+          },
+        ],
+        internalType: "struct NFTDescriptor.ConstructTokenURIParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "constructTokenURI",
+    outputs: [
+      {
+        internalType: "string",
+        name: "",
+        type: "string",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+];
+
+const _bytecode =
+  "0x615fdd610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063c49917d71461003a575b600080fd5b61004d610048366004613f08565b610063565b60405161005a919061464a565b60405180910390f35b6060600061007e83610079856101800151610170565b6103d1565b905060006100b2610092856060015161048c565b61009f866080015161048c565b6100ad876101a00151610644565b61065a565b905060006101006100c6866000015161068c565b6100d3876080015161048c565b6100e08860200151610644565b6100ed8960400151610644565b6100fb8a6101800151610170565b610767565b905060006101156101108761079d565b6109d8565b90506101458484848460405160200161013194939291906142c5565b6040516020818303038152906040526109d8565b6040516020016101559190614605565b6040516020818303038152906040529450505050505b919050565b606062ffffff82166101b6575060408051808201909152600281527f3025000000000000000000000000000000000000000000000000000000000000602082015261016b565b816000805b62ffffff8316156102065760ff8116156101d7576001016101f0565b600a62ffffff84160662ffffff166000146101f0576001015b600190910190600a62ffffff84160492506101bb565b61020e613e02565b60006005841061030357600060046102298660ff8716610b5d565b1015610236576001610239565b60005b60ff908116915061024d9085166001610b5d565b610258866005610b5d565b106102845761027f61026e60ff86166001610b5d565b610279876005610b5d565b90610b5d565b610287565b60005b60ff8516608085018190529092506102a6906001906102799085610bba565b60ff90811660a085015260808401516102cd9183916102c791166001610b5d565b90610bba565b60ff90811660408501526102f59082906102c7906102ee9088166001610bba565b8590610bba565b60ff16602084015250610373565b61030e600585610b5d565b60026080840181905290915061032c90600190610279908490610bba565b60ff90811660a084015261034e906103479085166002610bba565b8290610bba565b60ff1660208301819052610363906002610b5d565b60ff166040830152600160c08301525b6103926103838560ff8616610b5d565b62ffffff891690600a0a610c14565b8252600160e0830152600484116103aa5760006103b5565b6103b5846004610b5d565b60ff1660608301526103c682610c7b565b979650505050505050565b6060816103e1846060015161048c565b6103ee856080015161048c565b6104278660e00151156104065786610120015161040d565b8661010001515b8761016001518860c001518960a001518a60e00151610ea7565b6104608760e001511561043f57876101000151610446565b8761012001515b8861016001518960c001518a60a001518b60e00151610ea7565b6040516020016104749594939291906143ec565b60405160208183030381529060405290505b92915050565b6060816000805b82518160ff1610156104f057828160ff16815181106104ae57fe5b6020910101517fff0000000000000000000000000000000000000000000000000000000000000016601160f91b14156104e8576001909101905b600101610493565b5060ff81161561063c5760008160ff1683510167ffffffffffffffff8111801561051957600080fd5b506040519080825280601f01601f191660200182016040528015610544576020820181803683370190505b5090506000805b84518160ff16101561062f57848160ff168151811061056657fe5b6020910101517fff0000000000000000000000000000000000000000000000000000000000000016601160f91b14156105e4577f5c000000000000000000000000000000000000000000000000000000000000008383806001019450815181106105cc57fe5b60200101906001600160f81b031916908160001a9053505b848160ff16815181106105f357fe5b602001015160f81c60f81b83838060010194508151811061061057fe5b60200101906001600160f81b031916908160001a90535060010161054b565b508194505050505061016b565b509192915050565b60606104866001600160a01b0383166014610fd1565b6060838383866040516020016106739493929190614179565b60405160208183030381529060405290505b9392505050565b6060816106b157506040805180820190915260018152600360fc1b602082015261016b565b8160005b81156106c957600101600a820491506106b5565b60008167ffffffffffffffff811180156106e257600080fd5b506040519080825280601f01601f19166020018201604052801561070d576020820181803683370190505b50859350905060001982015b831561075e57600a840660300160f81b8282806001900393508151811061073c57fe5b60200101906001600160f81b031916908160001a905350600a84049350610719565b50949350505050565b606083858484896040516020016107829594939291906144ed565b60405160208183030381529060405290505b95945050505050565b60606000604051806102a001604052806107ba8560200151610644565b81526020016107cc8560400151610644565b8152602001846101a001516001600160a01b031681526020018460600151815260200184608001518152602001610807856101800151610170565b815260200184610100015160020b815260200184610120015160020b815260200184610160015160020b8152602001610850856101000151866101200151876101400151611159565b60000b81526020018460000151815260200161087a85602001516001600160a01b03166088611190565b815260200161089785604001516001600160a01b03166088611190565b81526020016108b485602001516001600160a01b03166000611190565b81526020016108d185604001516001600160a01b03166000611190565b81526020016109046108f686602001516001600160a01b03166010886000015161119f565b600060ff60106101126111bf565b815260200161093761092986604001516001600160a01b03166010886000015161119f565b600060ff60646101e46111bf565b815260200161095c6108f686602001516001600160a01b03166020886000015161119f565b815260200161098161092986604001516001600160a01b03166020886000015161119f565b81526020016109a66108f686602001516001600160a01b03166030886000015161119f565b81526020016109cb61092986604001516001600160a01b03166030886000015161119f565b9052905061068581611207565b60608151600014156109f9575060408051602081019091526000815261016b565b600060405180606001604052806040815260200161526b60409139905060006003845160020181610a2657fe5b04600402905060008160200167ffffffffffffffff81118015610a4857600080fd5b506040519080825280601f01601f191660200182016040528015610a73576020820181803683370190505b509050818152600183018586518101602084015b81831015610ae15760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401610a87565b600389510660018114610afb5760028114610b2757610b4f565b7f3d3d000000000000000000000000000000000000000000000000000000000000600119830152610b4f565b7f3d000000000000000000000000000000000000000000000000000000000000006000198301525b509398975050505050505050565b600082821115610bb4576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082820183811015610685576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000808211610c6a576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610c7357fe5b049392505050565b60606000826020015160ff1667ffffffffffffffff81118015610c9d57600080fd5b506040519080825280601f01601f191660200182016040528015610cc8576020820181803683370190505b5090508260e0015115610d1e577f250000000000000000000000000000000000000000000000000000000000000081600183510381518110610d0657fe5b60200101906001600160f81b031916908160001a9053505b8260c0015115610d7b57600360fc1b81600081518110610d3a57fe5b60200101906001600160f81b031916908160001a905350601760f91b81600181518110610d6357fe5b60200101906001600160f81b031916908160001a9053505b608083015160ff165b60a0840151610d979060ff166001610bba565b811015610dce57603060f81b828281518110610daf57fe5b60200101906001600160f81b031916908160001a905350600101610d84565b505b825115610486576000836060015160ff16118015610dfb5750826060015160ff16836040015160ff16145b15610e3e5760408301805160ff600019820181169092528251601760f91b92849216908110610e2657fe5b60200101906001600160f81b031916908160001a9053505b8251610e5090603090600a9006610bba565b60f81b818460400180518091906001900360ff1660ff1681525060ff1681518110610e7757fe5b60200101906001600160f81b031916908160001a905350600a8360000181815181610e9e57fe5b04905250610dd0565b606084600281900b620d89e71981610ebb57fe5b050260020b8660020b1415610f15578115610ef1576040518060400160405280600381526020016209a82b60eb1b815250610f0e565b6040518060400160405280600381526020016226a4a760e91b8152505b9050610794565b84600281900b620d89e881610f2657fe5b050260020b8660020b1415610f7c578115610f5c576040518060400160405280600381526020016226a4a760e91b815250610f0e565b5060408051808201909152600381526209a82b60eb1b6020820152610794565b6000610f8787611496565b90508215610fbe57610fbb78010000000000000000000000000000000000000000000000006001600160a01b038316610c14565b90505b610fc98186866117e4565b915050610794565b606060008260020260020167ffffffffffffffff81118015610ff257600080fd5b506040519080825280601f01601f19166020018201604052801561101d576020820181803683370190505b509050600360fc1b8160008151811061103257fe5b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061107757fe5b60200101906001600160f81b031916908160001a905350600160028402015b6001811115611105577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106110ce57fe5b1a60f81b8282815181106110de57fe5b60200101906001600160f81b031916908160001a90535060049490941c9360001901611096565b508315610685576040805162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015290519081900360640190fd5b60008360020b8260020b12156111725750600019610685565b8260020b8260020b131561118857506001610685565b506000610685565b606061068583831c60036119b2565b600060ff826111ae8686611a79565b02816111b657fe5b06949350505050565b60606111fd6111f8846102c76111d5888a610b5d565b6111f26111e2888a610b5d565b6111ec8d8d610b5d565b90611a80565b90610c14565b61068c565b9695505050505050565b606061121282611ad9565b61122e836000015184602001518560600151866080015161218d565b611245846060015185608001518660a001516124b8565b6112638560c001518660e00151876101000151886101200151612608565b61128361127487610140015161068c565b8760c001518860e0015161295b565b6112968761014001518860400151612d8c565b6040516020018087805190602001908083835b602083106112c85780518252601f1990920191602091820191016112a9565b51815160209384036101000a600019018019909216911617905289519190930192890191508083835b602083106113105780518252601f1990920191602091820191016112f1565b51815160209384036101000a600019018019909216911617905288519190930192880191508083835b602083106113585780518252601f199092019160209182019101611339565b51815160209384036101000a600019018019909216911617905287519190930192870191508083835b602083106113a05780518252601f199092019160209182019101611381565b51815160209384036101000a600019018019909216911617905286519190930192860191508083835b602083106113e85780518252601f1990920191602091820191016113c9565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106114305780518252601f199092019160209182019101611411565b5181516020939093036101000a60001901801990911692169190911790527f3c2f7376673e000000000000000000000000000000000000000000000000000092019182525060408051808303601919018152600690920190529998505050505050505050565b60008060008360020b126114ad578260020b6114b5565b8260020b6000035b9050620d89e881111561150f576040805162461bcd60e51b815260206004820152600160248201527f5400000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001821661152357600160801b611535565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615611569576ffff97272373d413259a46990580e213a0260801c5b6004821615611588576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b60088216156115a7576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156115c6576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156115e5576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615611604576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615611623576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611643576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615611663576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611683576ff3392b0822b70005940c7a398e4b70f30260801c5b6108008216156116a3576fe7159475a2c29b7443b29c7fa6e889d90260801c5b6110008216156116c3576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156116e3576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611703576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611723576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611744576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611764576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611783576d2216e584f5fa1ea926041bedfe980260801c5b620800008216156117a0576b048a170391f7dc42444e8fa20260801c5b60008460020b13156117bb5780600019816117b757fe5b0490505b6401000000008106156117cf5760016117d2565b60005b60ff16602082901c0192505050919050565b606060006117f3858585612e04565b9050600061180b828368010000000000000000612f06565b90506c010000000000000000000000008210801561184c576118458272047bf19673df52e37f2410011d100000000000600160801b612f06565b9150611861565b61185e82620186a0600160801b612f06565b91505b8160005b811561187957600101600a82049150611865565b6000190160008061188a8684612fb5565b91509150801561189b576001909201915b6118a3613e02565b8515611910576118c26118ba602b60ff8716610b5d565b600790610bba565b60ff9081166020830152600260808301526118e8906001906102c790602b908816610b5d565b60ff90811660a0830152602082015161190391166001610b5d565b60ff166040820152611987565b60098460ff16106119595761192960ff85166004610b5d565b60ff166020820181905260056080830152611945906001610b5d565b60ff1660a082015260046040820152611987565b6006602082015260056040820181905261197e906001906102c79060ff881690610b5d565b60ff1660608201525b82815285151560c0820152600060e08201526119a281610c7b565b9c9b505050505050505050505050565b606060008260020267ffffffffffffffff811180156119d057600080fd5b506040519080825280601f01601f1916602001820160405280156119fb576020820181803683370190505b5080519091505b8015611a71577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611a3757fe5b1a60f81b826001830381518110611a4a57fe5b60200101906001600160f81b031916908160001a90535060049490941c9360001901611a02565b509392505050565b1c60ff1690565b600082611a8f57506000610486565b82820282848281611a9c57fe5b04146106855760405162461bcd60e51b815260040180806020018281038252602181526020018061548a6021913960400191505060405180910390fd5b6060611b6e82610160015160405160200180806150446081913960810182805190602001908083835b60208310611b215780518252601f199092019160209182019101611b02565b6001836020036101000a038019825116818451168082178552505050505050905001806813979f1e17b9bb339f60b91b8152506009019150506040516020818303038152906040526109d8565b611cda836101e001518461020001518561018001516040516020018080614b816063913960630184805190602001908083835b60208310611bc05780518252601f199092019160209182019101611ba1565b51815160209384036101000a600019018019909216911617905265272063793d2760d01b919093019081528551600690910192860191508083835b60208310611c1a5780518252601f199092019160209182019101611bfb565b51815160209384036101000a60001901801990921691161790527f2720723d273132307078272066696c6c3d272300000000000000000000000000919093019081528451601390910192850191508083835b60208310611c8b5780518252601f199092019160209182019101611c6c565b6001836020036101000a038019825116818451168082178552505050505050905001806813979f1e17b9bb339f60b91b81525060090193505050506040516020818303038152906040526109d8565b611d2b846102200151856102400151866101a001516040516020018080614b8160639139606301848051906020019080838360208310611bc05780518252601f199092019160209182019101611ba1565b611e4a856102600151866102800151876101c001516040516020018080614b816063913960630184805190602001908083835b60208310611d7d5780518252601f199092019160209182019101611d5e565b51815160209384036101000a600019018019909216911617905265272063793d2760d01b919093019081528551600690910192860191508083835b60208310611dd75780518252601f199092019160209182019101611db8565b51815160001960209485036101000a019081169019919091161790527f2720723d273130307078272066696c6c3d272300000000000000000000000000939091019283528451601390930192908501915080838360208310611c8b5780518252601f199092019160209182019101611c6c565b6101608601516040516020018060566148fc8239605601602c6152ab82397f3c646566733e0000000000000000000000000000000000000000000000000000602c820152603201604b614ff98239604b0186805190602001908083835b60208310611ec65780518252601f199092019160209182019101611ea7565b6001836020036101000a03801982511681845116808217855250505050505090500180615b31603e9139603e0185805190602001908083835b60208310611f1e5780518252601f199092019160209182019101611eff565b6001836020036101000a038019825116818451168082178552505050505050905001806150c5603e9139603e0184805190602001908083835b60208310611f765780518252601f199092019160209182019101611f57565b5181516020939093036101000a60001901801990911692169190911790527f22202f3e00000000000000000000000000000000000000000000000000000000920191825250600401603b6147f48239603b0183805190602001908083835b60208310611ff35780518252601f199092019160209182019101611fd4565b6001836020036101000a03801982511681845116808217855250505050505090500180614c4160999139609901607f6156e28239607f016088615aa982396088016041614cda8239604101605d615c698239605d01607261578e8239607201604961475d823960490160be614f3b823960be016071614a0d8239607101607561562582396075016066614d1b823960660160a46152d7823960a4016085615b6f82397f3c6720636c69702d706174683d2275726c2823636f726e65727329223e00000060858201527f3c726563742066696c6c3d22000000000000000000000000000000000000000060a2820152825160ae9091019060208401908083835b602083106121115780518252601f1990920191602091820191016120f2565b6001836020036101000a03801982511681845116808217855250505050505090500180614d8160319139603101604e6147a68239604e01605d614be48239605d01604161522a8239604101605261510382396052016075615bf48239607501955050505050506040516020818303038152906040529050919050565b60608382858488878a896040516020018080615d4c60259139602501607d614ebe8239607d0189805190602001908083835b602083106121de5780518252601f1990920191602091820191016121bf565b51815160209384036101000a600019018019909216911617905264010714051160dd1b919093019081528a516005909101928b0191508083835b602083106122375780518252601f199092019160209182019101612218565b6001836020036101000a03801982511681845116808217855250505050505090500180614db2607991396079016086615cc6823960860187805190602001908083835b602083106122995780518252601f19909201916020918201910161227a565b51815160209384036101000a600019018019909216911617905264010714051160dd1b919093019081528851600590910192890191508083835b602083106122f25780518252601f1990920191602091820191016122d3565b6001836020036101000a0380198251168184511680821785525050505050509050018061498860859139608501607b6159178239607b0185805190602001908083835b602083106123545780518252601f199092019160209182019101612335565b51815160209384036101000a600019018019909216911617905264010714051160dd1b919093019081528651600590910192870191508083835b602083106123ad5780518252601f19909201916020918201910161238e565b6001836020036101000a03801982511681845116808217855250505050505090500180614ad2605d9139605d0160a3615582823960a30183805190602001908083835b6020831061240f5780518252601f1990920191602091820191016123f0565b51815160209384036101000a600019018019909216911617905264010714051160dd1b919093019081528451600590910192850191508083835b602083106124685780518252601f199092019160209182019101612449565b6001836020036101000a038019825116818451168082178552505050505050905001806146d2608b9139608b01985050505050505050506040516020818303038152906040529050949350505050565b6060838383604051602001808061482f60cd913960cd0184805190602001908083835b602083106124fa5780518252601f1990920191602091820191016124db565b6001836020036101000a03801982511681845116808217855250505050505090500180602f60f81b81525060010183805190602001908083835b602083106125535780518252601f199092019160209182019101612534565b6001836020036101000a03801982511681845116808217855250505050505090500180615ef56077913960770182805190602001908083835b602083106125ab5780518252601f19909201916020918201910161258c565b5181516020939093036101000a60001901801990911692169190911790526a1e17ba32bc3a1f1e17b39f60a91b920191825250600b016073615d958239607301935050505060405160208183030381529060405290509392505050565b606060008260000b60011461269a578260000b6000191461265e576040518060400160405280600581526020017f236e6f6e65000000000000000000000000000000000000000000000000000000815250612695565b6040518060400160405280600a81526020017f23666164652d646f776e000000000000000000000000000000000000000000008152505b6126d1565b6040518060400160405280600881526020017f23666164652d75700000000000000000000000000000000000000000000000008152505b905060006126e0878787613026565b9050818183836126ef88613274565b60405160200180807f3c67206d61736b3d2275726c2800000000000000000000000000000000000000815250600d0186805190602001908083835b602083106127495780518252601f19909201916020918201910161272a565b5181516020939093036101000a600019018019909116921691909117905261149160f11b920191825250600201607761537b823960770185805190602001908083835b602083106127ab5780518252601f19909201916020918201910161278c565b6001836020036101000a03801982511681845116808217855250505050505090500180614a7e60549139605401807f3c2f673e3c67206d61736b3d2275726c2800000000000000000000000000000081525060110184805190602001908083835b6020831061282b5780518252601f19909201916020918201910161280c565b5181516020939093036101000a600019018019909116921691909117905261149160f11b92019182525060020160296153f2823960290160456154458239604501807f3c7061746820643d22000000000000000000000000000000000000000000000081525060090183805190602001908083835b602083106128bf5780518252601f1990920191602091820191016128a0565b6001836020036101000a0380198251168184511680821785525050505050509050018061569a6048913960480182805190602001908083835b602083106129175780518252601f1990920191602091820191016128f8565b6001836020036101000a0380198251168184511680821785525050505050509050019550505050505060405160208183030381529060405292505050949350505050565b6060600061296884613748565b9050600061297584613748565b865183518251929350600490910191600a91820191016000806129988a8a613852565b915091506129ab8560040160070261068c565b8b6129bb8660040160070261068c565b896129cb8760040160070261068c565b8a87876040516020018080615761602d9139602d01806c1e3932b1ba103bb4b23a341e9160991b815250600d0189805190602001908083835b60208310612a235780518252601f199092019160209182019101612a04565b6001836020036101000a03801982511681845116808217855250505050505090500180615155603d9139603d01608d615e088239608d0188805190602001908083835b60208310612a855780518252601f199092019160209182019101612a66565b5181516020939093036101000a60001901801990911692169190911790526a1e17ba32bc3a1f1e17b39f60a91b920191825250600b01602d615fa48239602d01806c1e3932b1ba103bb4b23a341e9160991b815250600d0187805190602001908083835b60208310612b085780518252601f199092019160209182019101612ae9565b6001836020036101000a03801982511681845116808217855250505050505090500180615155603d9139603d016093614e2b823960930186805190602001908083835b60208310612b6a5780518252601f199092019160209182019101612b4b565b5181516020939093036101000a60001901801990911692169190911790526a1e17ba32bc3a1f1e17b39f60a91b920191825250600b01602d614b2f8239602d01806c1e3932b1ba103bb4b23a341e9160991b815250600d0185805190602001908083835b60208310612bed5780518252601f199092019160209182019101612bce565b6001836020036101000a03801982511681845116808217855250505050505090500180615155603d9139603d016093615992823960930184805190602001908083835b60208310612c4f5780518252601f199092019160209182019101612c30565b6001836020036101000a03801982511681845116808217855250505050505090500180615f6c603891396038016060615e958239606001606461551e82396064016025614b5c823960250183805190602001908083835b60208310612cc55780518252601f199092019160209182019101612ca6565b51815160209384036101000a60001901801990921691161790527f70782c2000000000000000000000000000000000000000000000000000000000919093019081528451600490910192850191508083835b60208310612d365780518252601f199092019160209182019101612d17565b6001836020036101000a0380198251168184511680821785525050505050509050018061495260369139603601985050505050505050506040516020818303038152906040529750505050505050509392505050565b6060612d988383613c83565b15612dee5760405160200180608d61588a8239608d0160736154ab823960730160716151b98239607101608a6158008239608a016084615a25823960840190506040516020818303038152906040529050610486565b5060408051602081019091526000815292915050565b600080612e1f612e1a60ff868116908616613ce6565b613d4b565b9050600081118015612e32575060128111155b15612ef3578260ff168460ff161115612e9c57612e66612e53826002610c14565b6001600160a01b03871690600a0a611a80565b91506002810660011415612e9757612e94827003298b075b4b6a5240945790619b37fd4a600160801b612f06565b91505b612eee565b612ebd612eaa826002610c14565b6001600160a01b03871690600a0a610c14565b91506002810660011415612eee57612eeb82600160801b7003298b075b4b6a5240945790619b37fd4a612f06565b91505b611a71565b50506001600160a01b0390921692915050565b6000808060001985870986860292508281109083900303905080612f3c5760008411612f3157600080fd5b508290049050610685565b808411612f4857600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b600080600060058460ff161115612fdd57612fda8560ff600419870116600a0a610c14565b94505b60006004600a8706119050612ff386600a610c14565b95508015613002578560010195505b85620186a0141561301857600a86049550600191505b5084925090505b9250929050565b606060008260020b85850360020b8161303b57fe5b05905060048160020b13613086576040518060400160405280601a81526020017f4d312031433431203431203130352031303520313435203134350000000000008152509150611a71565b60088160020b136130ce576040518060400160405280601981526020017f4d312031433333203439203937203131332031343520313435000000000000008152509150611a71565b60108160020b13613116576040518060400160405280601981526020017f4d312031433333203537203839203131332031343520313435000000000000008152509150611a71565b60208160020b1361315e576040518060400160405280601981526020017f4d312031433235203635203831203132312031343520313435000000000000008152509150611a71565b60408160020b136131a6576040518060400160405280601981526020017f4d312031433137203733203733203132392031343520313435000000000000008152509150611a71565b60808160020b136131ee576040518060400160405280601881526020017f4d312031433920383120363520313337203134352031343500000000000000008152509150611a71565b6101008160020b13613237576040518060400160405280601a81526020017f4d31203143312038392035372e352031343520313435203134350000000000008152509150611a71565b505060408051808201909152601881527f4d3120314331203937203439203134352031343520313435000000000000000060208201529392505050565b604080518082018252600281527f37330000000000000000000000000000000000000000000000000000000000006020808301919091528251808401845260038082527f313930000000000000000000000000000000000000000000000000000000000082840152845180860186528181527f32313700000000000000000000000000000000000000000000000000000000008185015285518087019096529085527f3333340000000000000000000000000000000000000000000000000000000000928501929092526060939091906001600087900b148061335b57508560000b600019145b15613552578560000b600019146133725781613374565b835b8660000b600019146133865781613388565b835b8760000b6000191461339a578361339c565b855b8860000b600019146133ae57836133b0565b855b60405160200180806b1e31b4b931b6329031bc1e9160a11b815250600c0185805190602001908083835b602083106133f95780518252601f1990920191602091820191016133da565b51815160209384036101000a600019018019909216911617905267383c111031bc9e9160c11b919093019081528651600890910192870191508083835b602083106134555780518252601f199092019160209182019101613436565b6001836020036101000a038019825116818451168082178552505050505050905001806151926027913960270183805190602001908083835b602083106134ad5780518252601f19909201916020918201910161348e565b51815160209384036101000a600019018019909216911617905267383c111031bc9e9160c11b919093019081528451600890910192850191508083835b602083106135095780518252601f1990920191602091820191016134ea565b6001836020036101000a0380198251168184511680821785525050505050509050018061541b602a9139602a01945050505050604051602081830303815290604052945061373f565b8383838360405160200180806b1e31b4b931b6329031bc1e9160a11b815250600c0185805190602001908083835b6020831061359f5780518252601f199092019160209182019101613580565b51815160209384036101000a600019018019909216911617905267383c111031bc9e9160c11b919093019081528651600890910192870191508083835b602083106135fb5780518252601f1990920191602091820191016135dc565b51815160209384036101000a60001901801990921691161790527f70782220723d22347078222066696c6c3d22776869746522202f3e0000000000919093019081526b1e31b4b931b6329031bc1e9160a11b601b8201528551602790910192860191508083835b602083106136815780518252601f199092019160209182019101613662565b51815160209384036101000a600019018019909216911617905267383c111031bc9e9160c11b919093019081528451600890910192850191508083835b602083106136dd5780518252601f1990920191602091820191016136be565b6001836020036101000a038019825116818451168082178552505050505050905001807f70782220723d22347078222066696c6c3d22776869746522202f3e0000000000815250601b0194505050505060405160208183030381529060405294505b50505050919050565b6060600060405180602001604052806000815250905060008360020b121561378e5782600019029250604051806040016040528060018152602001602d60f81b81525090505b8061379b8460020b61068c565b6040516020018083805190602001908083835b602083106137cd5780518252601f1990920191602091820191016137ae565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106138155780518252601f1990920191602091820191016137f6565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052915050919050565b60608060006002858501810b0590506201e847198160020b12156138ca57604051806040016040528060018152602001600760fb1b8152506040518060400160405280600181526020017f3700000000000000000000000000000000000000000000000000000000000000815250925092505061301f565b620124f7198160020b121561393357604051806040016040528060018152602001600760fb1b8152506040518060400160405280600481526020017f31302e3500000000000000000000000000000000000000000000000000000000815250925092505061301f565b6161a7198160020b121561399b57604051806040016040528060018152602001600760fb1b8152506040518060400160405280600581526020017f31342e3235000000000000000000000000000000000000000000000000000000815250925092505061301f565b611387198160020b1215613a04576040518060400160405280600281526020017f313000000000000000000000000000000000000000000000000000000000000081525060405180604001604052806002815260200161062760f31b815250925092505061301f565b60008160020b1215613a6b576040518060400160405280600281526020017f313100000000000000000000000000000000000000000000000000000000000081525060405180604001604052806002815260200161323160f01b815250925092505061301f565b6113888160020b1215613aee576040518060400160405280600281526020017f31330000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f3233000000000000000000000000000000000000000000000000000000000000815250925092505061301f565b6161a88160020b1215613b71576040518060400160405280600281526020017f31350000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f3235000000000000000000000000000000000000000000000000000000000000815250925092505061301f565b620124f88160020b1215613bda5760405180604001604052806002815260200161062760f31b8152506040518060400160405280600281526020017f3236000000000000000000000000000000000000000000000000000000000000815250925092505061301f565b6201e8488160020b1215613c285760405180604001604052806002815260200161323160f01b81525060405180604001604052806002815260200161323760f01b815250925092505061301f565b6040518060400160405280600281526020017f323400000000000000000000000000000000000000000000000000000000000081525060405180604001604052806002815260200161323760f01b815250925092505061301f565b6040805160208082018590526bffffffffffffffffffffffff19606085901b16828401528251603481840301815260549092019092528051910120600090613cca84613d62565b60020260010160ff1660001981613cdd57fe5b04119392505050565b6000818303818312801590613cfb5750838113155b80613d105750600083128015613d1057508381135b6106855760405162461bcd60e51b8152600401808060200182810382526024815260200180615d716024913960400191505060405180910390fd5b600080821215613d5e5781600003610486565b5090565b6000808211613d7057600080fd5b600160801b8210613d8357608091821c91015b680100000000000000008210613d9b57604091821c91015b6401000000008210613daf57602091821c91015b620100008210613dc157601091821c91015b6101008210613dd257600891821c91015b60108210613de257600491821c91015b60048210613df257600291821c91015b6002821061016b57600101919050565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915290565b80356001600160a01b038116811461016b57600080fd5b8035801515811461016b57600080fd5b8035600281900b811461016b57600080fd5b600082601f830112613e8f578081fd5b813567ffffffffffffffff811115613ea357fe5b613eb6601f8201601f191660200161467d565b818152846020838601011115613eca578283fd5b816020850160208301379081016020019190915292915050565b803562ffffff8116811461016b57600080fd5b803560ff8116811461016b57600080fd5b600060208284031215613f19578081fd5b813567ffffffffffffffff80821115613f30578283fd5b81840191506101c0808387031215613f46578384fd5b613f4f8161467d565b905082358152613f6160208401613e46565b6020820152613f7260408401613e46565b6040820152606083013582811115613f88578485fd5b613f9487828601613e7f565b606083015250608083013582811115613fab578485fd5b613fb787828601613e7f565b608083015250613fc960a08401613ef7565b60a0820152613fda60c08401613ef7565b60c0820152613feb60e08401613e5d565b60e08201526101009150614000828401613e6d565b828201526101209150614014828401613e6d565b828201526101409150614028828401613e6d565b82820152610160915061403c828401613e6d565b828201526101809150614050828401613ee4565b828201526101a09150614064828401613e46565b91810191909152949350505050565b600081516140858185602086016146a1565b9290920192915050565b7fe29aa0efb88f20444953434c41494d45523a204475652064696c6967656e636581527f20697320696d7065726174697665207768656e20617373657373696e6720746860208201527f6973204e46542e204d616b65207375726520746f6b656e20616464726573736560408201527f73206d617463682074686520657870656374656420746f6b656e732c2061732060608201527f746f6b656e2073796d626f6c73206d617920626520696d6974617465642e00006080820152609e0190565b7f5c6e5c6e00000000000000000000000000000000000000000000000000000000815260040190565b60007f54686973204e465420726570726573656e74732061206c69717569646974792082527f706f736974696f6e20696e206120556e69737761702056332000000000000000602083015285516141d7816039850160208a016146a1565b602d60f81b60399184019182015285516141f881603a840160208a016146a1565b7f20706f6f6c2e2000000000000000000000000000000000000000000000000000603a92909101918201527f546865206f776e6572206f662074686973204e46542063616e206d6f6469667960418201527f206f722072656465656d2074686520706f736974696f6e2e5c6e00000000000060618201527f5c6e506f6f6c20416464726573733a2000000000000000000000000000000000607b82015284516142a881608b8401602089016146a1565b612e3760f11b608b92909101918201526103c6608d820185614073565b60007f7b226e616d65223a220000000000000000000000000000000000000000000000825285516142fd816009850160208a016146a1565b7f222c20226465736372697074696f6e223a220000000000000000000000000000600991840191820152855161433a81601b840160208a016146a1565b855191019061435081601b8401602089016146a1565b7f222c2022696d616765223a202200000000000000000000000000000000000000601b92909101918201527f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000602882015283516143b48160428401602088016146a1565b7f227d000000000000000000000000000000000000000000000000000000000000604292909101918201526044019695505050505050565b60007f556e6973776170202d20000000000000000000000000000000000000000000008252865161442481600a850160208b016146a1565b80830190507f202d20000000000000000000000000000000000000000000000000000000000080600a830152875161446381600d850160208c016146a1565b602f60f81b600d9390910192830152865161448581600e850160208b016146a1565b600e92019182015284516144a08160118401602089016146a1565b7f3c3e0000000000000000000000000000000000000000000000000000000000006011929091019182015283516144de8160138401602088016146a1565b01601301979650505050505050565b60007f20416464726573733a2000000000000000000000000000000000000000000000808352875161452681600a860160208c016146a1565b612e3760f11b600a91850191820152875161454881600c840160208c016146a1565b01600c810191909152855190614565826016830160208a016146a1565b8181019150507f5c6e46656520546965723a200000000000000000000000000000000000000000601682015284516145a48160228401602089016146a1565b7f5c6e546f6b656e2049443a2000000000000000000000000000000000000000006022929091019182015283516145e281602e8401602088016146a1565b6145f86145f3602e83850101614150565b61408f565b9998505050505050505050565b60007f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008252825161463d81601d8501602087016146a1565b91909101601d0192915050565b60006020825282518060208401526146698160408501602087016146a1565b601f01601f19169190910160400192915050565b60405181810167ffffffffffffffff8111828210171561469957fe5b604052919050565b60005b838110156146bc5781810151838201526020016146a4565b838111156146cb576000848401525b5050505056fe203c616e696d6174652061646469746976653d2273756d22206174747269627574654e616d653d2273746172744f6666736574222066726f6d3d2230252220746f3d22313030252220626567696e3d22307322206475723d223330732220726570656174436f756e743d22696e646566696e69746522202f3e3c2f74657874506174683e3c2f746578743e3c73746f70206f66667365743d222e39222073746f702d636f6c6f723d227768697465222073746f702d6f7061636974793d223022202f3e3c2f6c696e6561724772616469656e743e3c72656374207374796c653d2266696c7465723a2075726c28236631292220783d223070782220793d22307078222077696474683d22323930707822206865696768743d22353030707822202f3e3c6665496d61676520726573756c743d2270332220786c696e6b3a687265663d22646174613a696d6167652f7376672b786d6c3b6261736536342c3c67206d61736b3d2275726c2823666164652d73796d626f6c29223e3c726563742066696c6c3d226e6f6e652220783d223070782220793d22307078222077696474683d22323930707822206865696768743d22323030707822202f3e203c7465787420793d22373070782220783d2233327078222066696c6c3d2277686974652220666f6e742d66616d696c793d2227436f7572696572204e6577272c206d6f6e6f73706163652220666f6e742d7765696768743d223230302220666f6e742d73697a653d2233367078223e3c7376672077696474683d2232393022206865696768743d22353030222076696577426f783d2230203020323930203530302220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f7376672270782c2030707829222063783d22307078222063793d223070782220723d22347078222066696c6c3d227768697465222f3e3c2f673e203c616e696d6174652061646469746976653d2273756d22206174747269627574654e616d653d2273746172744f6666736574222066726f6d3d2230252220746f3d22313030252220626567696e3d22307322206475723d223330732220726570656174436f756e743d22696e646566696e69746522202f3e203c2f74657874506174683e3c6d61736b2069643d22666164652d757022206d61736b436f6e74656e74556e6974733d226f626a656374426f756e64696e67426f78223e3c726563742077696474683d223122206865696768743d2231222066696c6c3d2275726c2823677261642d75702922202f3e3c2f6d61736b3e22207374726f6b653d227267626128302c302c302c302e332922207374726f6b652d77696474683d2233327078222066696c6c3d226e6f6e6522207374726f6b652d6c696e656361703d22726f756e6422202f3e203c616e696d6174652061646469746976653d2273756d22206174747269627574654e616d653d2273746172744f6666736574222066726f6d3d2230252220746f3d22313030252220626567696e3d22307322206475723d2233307322203c67207374796c653d227472616e73666f726d3a7472616e736c61746528323970782c20343434707829223e3c636972636c65207374796c653d227472616e73666f726d3a7472616e736c6174653364283c7376672077696474683d2732393027206865696768743d27353030272076696577426f783d2730203020323930203530302720786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323030302f737667273e3c636972636c652063783d27203c67207374796c653d2266696c7465723a75726c2823746f702d726567696f6e2d626c7572293b207472616e73666f726d3a7363616c6528312e35293b207472616e73666f726d2d6f726967696e3a63656e74657220746f703b223e22202f3e3c6665426c656e64206d6f64653d226f7665726c61792220696e3d2270302220696e323d22703122202f3e3c6665426c656e64206d6f64653d226578636c7573696f6e2220696e323d22703222202f3e3c6665426c656e64206d6f64653d226f7665726c61792220696e323d2270332220726573756c743d22626c656e644f757422202f3e3c6665476175737369616e426c7572203c706174682069643d226d696e696d61702220643d224d3233342034343443323334203435372e393439203234322e323120343633203235332034363322202f3e3c6d61736b2069643d226e6f6e6522206d61736b436f6e74656e74556e6974733d226f626a656374426f756e64696e67426f78223e3c726563742077696474683d223122206865696768743d2231222066696c6c3d22776869746522202f3e3c2f6d61736b3e2220783d223070782220793d22307078222077696474683d22323930707822206865696768743d22353030707822202f3e203c616e696d6174652061646469746976653d2273756d22206174747269627574654e616d653d2273746172744f6666736574222066726f6d3d2230252220746f3d22313030252220626567696e3d22307322206475723d223330732220726570656174436f756e743d22696e646566696e69746522202f3e3c7465787420783d22313270782220793d22313770782220666f6e742d66616d696c793d2227436f7572696572204e6577272c206d6f6e6f73706163652220666f6e742d73697a653d2231327078222066696c6c3d227768697465223e3c747370616e2066696c6c3d2272676261283235352c3235352c3235352c302e3629223e4d696e205469636b3a203c2f747370616e3e3c74657874506174682073746172744f66667365743d222d31303025222066696c6c3d2277686974652220666f6e742d66616d696c793d2227436f7572696572204e6577272c206d6f6e6f73706163652220666f6e742d73697a653d22313070782220786c696e6b3a687265663d2223746578742d706174682d61223e3c6c696e6561724772616469656e742069643d22677261642d646f776e222078313d2230222078323d2231222079313d2230222079323d2231223e3c73746f70206f66667365743d22302e30222073746f702d636f6c6f723d227768697465222073746f702d6f7061636974793d223122202f3e3c73746f70206f66667365743d22302e39222073746f702d636f6c6f723d227768697465222073746f702d6f7061636974793d223022202f3e3c2f6c696e6561724772616469656e743e3c66696c7465722069643d226631223e3c6665496d61676520726573756c743d2270302220786c696e6b3a687265663d22646174613a696d6167652f7376672b786d6c3b6261736536342c3c7376672077696474683d2732393027206865696768743d27353030272076696577426f783d2730203020323930203530302720786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323030302f737667273e3c726563742077696474683d27323930707827206865696768743d273530307078272066696c6c3d2723222f3e3c6665496d61676520726573756c743d2270322220786c696e6b3a687265663d22646174613a696d6167652f7376672b786d6c3b6261736536342c3c656c6c697073652063783d22353025222063793d22307078222072783d223138307078222072793d223132307078222066696c6c3d222330303022206f7061636974793d22302e383522202f3e3c2f673e707822206865696768743d2232367078222072783d22387078222072793d22387078222066696c6c3d227267626128302c302c302c302e362922202f3e70782220723d22347078222066696c6c3d22776869746522202f3e3c636972636c652063783d2231312e333437384c32342031324c31342e343334312031322e363532324c32322e333932332031384c31332e373831392031332e373831394c31382032322e333932334c31322e363532322031342e343334314c31322032344c31312e333437382031342e343334314c362032322e33393c726563742066696c6c3d226e6f6e652220783d223070782220793d22307078222077696474683d22323930707822206865696768743d22353030707822202f3e4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f20786d6c6e733a786c696e6b3d27687474703a2f2f7777772e77332e6f72672f313939392f786c696e6b273e3c6c696e6561724772616469656e742069643d22677261642d73796d626f6c223e3c73746f70206f66667365743d22302e37222073746f702d636f6c6f723d227768697465222073746f702d6f7061636974793d223122202f3e3c73746f70206f66667365743d222e3935222073746f702d636f6c6f723d227768697465222073746f702d6f7061636974793d223022202f3e3c2f6c696e6561724772616469656e743e207374796c653d227472616e73666f726d3a7472616e736c61746528373270782c313839707829223e3c7265637420783d222d313670782220793d222d31367078222077696474683d22313830707822206865696768743d223138307078222066696c6c3d226e6f6e6522202f3e3c7061746820643d22207374796c653d227472616e73666f726d3a7472616e736c61746528373270782c313839707829223e70782220723d2232347078222066696c6c3d226e6f6e6522207374726f6b653d22776869746522202f3e3c7265637420783d222d313670782220793d222d31367078222077696474683d22313830707822206865696768743d223138307078222066696c6c3d226e6f6e6522202f3e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f773c673e3c70617468207374796c653d227472616e73666f726d3a7472616e736c617465283670782c367078292220643d224d313220304c31322e3635323220392e35363538374c313820312e363037374c31332e373831392031302e323138314c32322e3339323320364c31342e34333431203c70617468207374726f6b652d6c696e656361703d22726f756e642220643d224d38203943382e30303030342032322e393439342031362e32303939203238203237203238222066696c6c3d226e6f6e6522207374726f6b653d22776869746522202f3e20726570656174436f756e743d22696e646566696e69746522202f3e3c2f74657874506174683e3c74657874506174682073746172744f66667365743d222d353025222066696c6c3d2277686974652220666f6e742d66616d696c793d2227436f7572696572204e6577272c206d6f6e6f73706163652220666f6e742d73697a653d22313070782220786c696e6b3a687265663d2223746578742d706174682d61223e3c6d61736b2069643d22666164652d646f776e22206d61736b436f6e74656e74556e6974733d226f626a656374426f756e64696e67426f78223e3c726563742077696474683d223122206865696768743d2231222066696c6c3d2275726c2823677261642d646f776e2922202f3e3c2f6d61736b3e22207374726f6b653d2272676261283235352c3235352c3235352c3129222066696c6c3d226e6f6e6522207374726f6b652d6c696e656361703d22726f756e6422202f3e3c2f673e696e3d22626c656e644f75742220737464446576696174696f6e3d22343222202f3e3c2f66696c7465723e203c636c6970506174682069643d22636f726e657273223e3c726563742077696474683d2232393022206865696768743d22353030222072783d223432222072793d22343222202f3e3c2f636c6970506174683e203c67207374796c653d227472616e73666f726d3a7472616e736c61746528323970782c20333834707829223e3c6c696e6561724772616469656e742069643d22677261642d7570222078313d2231222078323d2230222079313d2231222079323d2230223e3c73746f70206f66667365743d22302e30222073746f702d636f6c6f723d227768697465222073746f702d6f7061636974793d223122202f3e32334c31302e323138312031332e373831394c312e363037372031384c392e35363538372031322e363532324c302031324c392e35363538372031312e333437384c312e3630373720364c31302e323138312031302e323138314c3620312e363037374c31312e3334373820392e35363538374c313220305a222066696c6c3d22776869746522202f3e3c67207374796c653d227472616e73666f726d3a7472616e736c6174652832323670782c20333932707829223e3c726563742077696474683d223336707822206865696768743d2233367078222072783d22387078222072793d22387078222066696c6c3d226e6f6e6522207374726f6b653d2272676261283235352c3235352c3235352c302e322922202f3e3c74657874506174682073746172744f66667365743d22353025222066696c6c3d2277686974652220666f6e742d66616d696c793d2227436f7572696572204e6577272c206d6f6e6f73706163652220666f6e742d73697a653d22313070782220786c696e6b3a687265663d2223746578742d706174682d61223e3c7465787420783d22313270782220793d22313770782220666f6e742d66616d696c793d2227436f7572696572204e6577272c206d6f6e6f73706163652220666f6e742d73697a653d2231327078222066696c6c3d227768697465223e3c747370616e2066696c6c3d2272676261283235352c3235352c3235352c302e3629223e4d6178205469636b3a203c2f747370616e3e3c616e696d6174655472616e73666f726d206174747269627574654e616d653d227472616e73666f726d2220747970653d22726f74617465222066726f6d3d22302031382031382220746f3d2233363020313820313822206475723d223130732220726570656174436f756e743d22696e646566696e697465222f3e3c2f673e3c2f673e3c706174682069643d22746578742d706174682d612220643d224d34302031322048323530204132382032382030203020312032373820343020563436302041323820323820302030203120323530203438382048343020413238203238203020302031203132203436302056343020413238203238203020302031203430203132207a22202f3e222f3e3c6665496d61676520726573756c743d2270312220786c696e6b3a687265663d22646174613a696d6167652f7376672b786d6c3b6261736536342c3c6d61736b2069643d22666164652d73796d626f6c22206d61736b436f6e74656e74556e6974733d227573657253706163654f6e557365223e3c726563742077696474683d22323930707822206865696768743d223230307078222066696c6c3d2275726c2823677261642d73796d626f6c2922202f3e3c2f6d61736b3e3c2f646566733e3c7265637420783d22302220793d2230222077696474683d2232393022206865696768743d22353030222072783d223432222072793d223432222066696c6c3d227267626128302c302c302c302922207374726f6b653d2272676261283235352c3235352c3235352c302e322922202f3e3c2f673e3c66696c7465722069643d22746f702d726567696f6e2d626c7572223e3c6665476175737369616e426c757220696e3d22536f75726365477261706869632220737464446576696174696f6e3d22323422202f3e3c2f66696c7465723e3c2f74657874506174683e203c74657874506174682073746172744f66667365743d223025222066696c6c3d2277686974652220666f6e742d66616d696c793d2227436f7572696572204e6577272c206d6f6e6f73706163652220666f6e742d73697a653d22313070782220786c696e6b3a687265663d2223746578742d706174682d61223e3c7465787420746578742d72656e646572696e673d226f7074696d697a655370656564223e5369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f773c7265637420783d2231362220793d223136222077696474683d2232353822206865696768743d22343638222072783d223236222072793d223236222066696c6c3d227267626128302c302c302c302922207374726f6b653d2272676261283235352c3235352c3235352c302e322922202f3e3c7465787420783d22313270782220793d22313770782220666f6e742d66616d696c793d2227436f7572696572204e6577272c206d6f6e6f73706163652220666f6e742d73697a653d2231327078222066696c6c3d227768697465223e3c747370616e2066696c6c3d2272676261283235352c3235352c3235352c302e3629223e49443a203c2f747370616e3e3c726563742077696474683d223336707822206865696768743d2233367078222072783d22387078222072793d22387078222066696c6c3d226e6f6e6522207374726f6b653d2272676261283235352c3235352c3235352c302e322922202f3e3c2f746578743e3c7465787420793d2231313570782220783d2233327078222066696c6c3d2277686974652220666f6e742d66616d696c793d2227436f7572696572204e6577272c206d6f6e6f73706163652220666f6e742d7765696768743d223230302220666f6e742d73697a653d2233367078223e3c2f746578743e3c2f673e3c67207374796c653d227472616e73666f726d3a7472616e736c6174652832323670782c20343333707829223e203c67207374796c653d227472616e73666f726d3a7472616e736c61746528323970782c20343134707829223ea164736f6c6343000706000a";
+
+export class NFTDescriptor__factory extends ContractFactory {
+  constructor(signer?: Signer) {
+    super(_abi, _bytecode, signer);
+  }
+
+  deploy(
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<NFTDescriptor> {
+    return super.deploy(overrides || {}) as Promise<NFTDescriptor>;
+  }
+  getDeployTransaction(
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): TransactionRequest {
+    return super.getDeployTransaction(overrides || {});
+  }
+  attach(address: string): NFTDescriptor {
+    return super.attach(address) as NFTDescriptor;
+  }
+  connect(signer: Signer): NFTDescriptor__factory {
+    return super.connect(signer) as NFTDescriptor__factory;
+  }
+  static readonly bytecode = _bytecode;
+  static readonly abi = _abi;
+  static createInterface(): NFTDescriptorInterface {
+    return new utils.Interface(_abi) as NFTDescriptorInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): NFTDescriptor {
+    return new Contract(address, _abi, signerOrProvider) as NFTDescriptor;
+  }
+}
diff --git a/lib/sor/types/v3/factories/NonfungiblePositionManager__factory.ts b/lib/sor/types/v3/factories/NonfungiblePositionManager__factory.ts
new file mode 100644
index 0000000..a49c5b9
--- /dev/null
+++ b/lib/sor/types/v3/factories/NonfungiblePositionManager__factory.ts
@@ -0,0 +1,1291 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider, TransactionRequest } from "@ethersproject/providers";
+import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
+import type {
+  NonfungiblePositionManager,
+  NonfungiblePositionManagerInterface,
+} from "../NonfungiblePositionManager";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "_factory",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "_WETH9",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "_tokenDescriptor_",
+        type: "address",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "constructor",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "approved",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "Approval",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "operator",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "bool",
+        name: "approved",
+        type: "bool",
+      },
+    ],
+    name: "ApprovalForAll",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    name: "Collect",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "liquidity",
+        type: "uint128",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    name: "DecreaseLiquidity",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "liquidity",
+        type: "uint128",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    name: "IncreaseLiquidity",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "from",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "Transfer",
+    type: "event",
+  },
+  {
+    inputs: [],
+    name: "DOMAIN_SEPARATOR",
+    outputs: [
+      {
+        internalType: "bytes32",
+        name: "",
+        type: "bytes32",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "PERMIT_TYPEHASH",
+    outputs: [
+      {
+        internalType: "bytes32",
+        name: "",
+        type: "bytes32",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "WETH9",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "approve",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+    ],
+    name: "balanceOf",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "baseURI",
+    outputs: [
+      {
+        internalType: "string",
+        name: "",
+        type: "string",
+      },
+    ],
+    stateMutability: "pure",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "burn",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "uint256",
+            name: "tokenId",
+            type: "uint256",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint128",
+            name: "amount0Max",
+            type: "uint128",
+          },
+          {
+            internalType: "uint128",
+            name: "amount1Max",
+            type: "uint128",
+          },
+        ],
+        internalType: "struct INonfungiblePositionManager.CollectParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "collect",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token0",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "token1",
+        type: "address",
+      },
+      {
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceX96",
+        type: "uint160",
+      },
+    ],
+    name: "createAndInitializePoolIfNecessary",
+    outputs: [
+      {
+        internalType: "address",
+        name: "pool",
+        type: "address",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "uint256",
+            name: "tokenId",
+            type: "uint256",
+          },
+          {
+            internalType: "uint128",
+            name: "liquidity",
+            type: "uint128",
+          },
+          {
+            internalType: "uint256",
+            name: "amount0Min",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount1Min",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "deadline",
+            type: "uint256",
+          },
+        ],
+        internalType:
+          "struct INonfungiblePositionManager.DecreaseLiquidityParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "decreaseLiquidity",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factory",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "getApproved",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "uint256",
+            name: "tokenId",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount0Desired",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount1Desired",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount0Min",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount1Min",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "deadline",
+            type: "uint256",
+          },
+        ],
+        internalType:
+          "struct INonfungiblePositionManager.IncreaseLiquidityParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "increaseLiquidity",
+    outputs: [
+      {
+        internalType: "uint128",
+        name: "liquidity",
+        type: "uint128",
+      },
+      {
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "operator",
+        type: "address",
+      },
+    ],
+    name: "isApprovedForAll",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "token0",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "token1",
+            type: "address",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "int24",
+            name: "tickLower",
+            type: "int24",
+          },
+          {
+            internalType: "int24",
+            name: "tickUpper",
+            type: "int24",
+          },
+          {
+            internalType: "uint256",
+            name: "amount0Desired",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount1Desired",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount0Min",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount1Min",
+            type: "uint256",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "deadline",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct INonfungiblePositionManager.MintParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "mint",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+      {
+        internalType: "uint128",
+        name: "liquidity",
+        type: "uint128",
+      },
+      {
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes[]",
+        name: "data",
+        type: "bytes[]",
+      },
+    ],
+    name: "multicall",
+    outputs: [
+      {
+        internalType: "bytes[]",
+        name: "results",
+        type: "bytes[]",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "name",
+    outputs: [
+      {
+        internalType: "string",
+        name: "",
+        type: "string",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "ownerOf",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "spender",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "permit",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "positions",
+    outputs: [
+      {
+        internalType: "uint96",
+        name: "nonce",
+        type: "uint96",
+      },
+      {
+        internalType: "address",
+        name: "operator",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "token0",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "token1",
+        type: "address",
+      },
+      {
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+      {
+        internalType: "int24",
+        name: "tickLower",
+        type: "int24",
+      },
+      {
+        internalType: "int24",
+        name: "tickUpper",
+        type: "int24",
+      },
+      {
+        internalType: "uint128",
+        name: "liquidity",
+        type: "uint128",
+      },
+      {
+        internalType: "uint256",
+        name: "feeGrowthInside0LastX128",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "feeGrowthInside1LastX128",
+        type: "uint256",
+      },
+      {
+        internalType: "uint128",
+        name: "tokensOwed0",
+        type: "uint128",
+      },
+      {
+        internalType: "uint128",
+        name: "tokensOwed1",
+        type: "uint128",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "refundETH",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "from",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "safeTransferFrom",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "from",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+      {
+        internalType: "bytes",
+        name: "_data",
+        type: "bytes",
+      },
+    ],
+    name: "safeTransferFrom",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermit",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "nonce",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "expiry",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermitAllowed",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "nonce",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "expiry",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermitAllowedIfNecessary",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermitIfNecessary",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "operator",
+        type: "address",
+      },
+      {
+        internalType: "bool",
+        name: "approved",
+        type: "bool",
+      },
+    ],
+    name: "setApprovalForAll",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes4",
+        name: "interfaceId",
+        type: "bytes4",
+      },
+    ],
+    name: "supportsInterface",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+    ],
+    name: "sweepToken",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "symbol",
+    outputs: [
+      {
+        internalType: "string",
+        name: "",
+        type: "string",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "index",
+        type: "uint256",
+      },
+    ],
+    name: "tokenByIndex",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "index",
+        type: "uint256",
+      },
+    ],
+    name: "tokenOfOwnerByIndex",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "tokenURI",
+    outputs: [
+      {
+        internalType: "string",
+        name: "",
+        type: "string",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "totalSupply",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "from",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "to",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "transferFrom",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amount0Owed",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amount1Owed",
+        type: "uint256",
+      },
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "uniswapV3MintCallback",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+    ],
+    name: "unwrapWETH9",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    stateMutability: "payable",
+    type: "receive",
+  },
+];
+
+const _bytecode =
+  "0x610120604052600d80546001600160b01b0319166001176001600160b01b0316600160b01b1790553480156200003457600080fd5b50604051620062e9380380620062e98339810160408190526200005791620002db565b82826040518060400160405280601b81526020017f556e697377617020563320506f736974696f6e73204e46542d563100000000008152506040518060400160405280600a815260200169554e492d56332d504f5360b01b815250604051806040016040528060018152602001603160f81b8152508282620000e66301ffc9a760e01b6200018d60201b60201c565b8151620000fb90600690602085019062000212565b5080516200011190600790602084019062000212565b50620001246380ac58cd60e01b6200018d565b62000136635b5e139f60e01b6200018d565b6200014863780e9d6360e01b6200018d565b50508251602093840120608052805192019190912060a052506001600160601b0319606092831b811660c05290821b811660e05291901b166101005250620003249050565b6001600160e01b03198082161415620001ed576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200024a576000855562000295565b82601f106200026557805160ff191683800117855562000295565b8280016001018555821562000295579182015b828111156200029557825182559160200191906001019062000278565b50620002a3929150620002a7565b5090565b5b80821115620002a35760008155600101620002a8565b80516001600160a01b0381168114620002d657600080fd5b919050565b600080600060608486031215620002f0578283fd5b620002fb84620002be565b92506200030b60208501620002be565b91506200031b60408501620002be565b90509250925092565b60805160a05160c05160601c60e05160601c6101005160601c615f40620003a960003980612a835250806102995280611718528061180e52806118965280613e5d5280613ea35280613f17525080610aa75280610dde5280610ea55280612a1d5280612b235280612e4452806136e15250806114ff5250806114de5250615f406000f3fe6080604052600436106102895760003560e01c80636352211e11610153578063ac9650d8116100cb578063d34879971161007f578063e985e9c511610064578063e985e9c5146106f5578063f3995c6714610715578063fc6f7865146107285761030d565b8063d3487997146106c2578063df2ab5bb146106e25761030d565b8063c2e3140a116100b0578063c2e3140a1461067a578063c45a01551461068d578063c87b56dd146106a25761030d565b8063ac9650d81461063a578063b88d4fde1461065a5761030d565b8063883164561161012257806399fbab881161010757806399fbab88146105cf578063a22cb46514610607578063a4a78f0c146106275761030d565b8063883164561461059757806395d89b41146105ba5761030d565b80636352211e1461052f5780636c0360eb1461054f57806370a08231146105645780637ac2ff7b146105845761030d565b806323b872dd1161020157806342966c68116101b557806349404b7c1161019a57806349404b7c146104e75780634aa4a4fc146104fa5780634f6ccce71461050f5761030d565b806342966c68146104c15780634659a494146104d45761030d565b806330adf81f116101e657806330adf81f146104775780633644e5151461048c57806342842e0e146104a15761030d565b806323b872dd146104375780632f745c59146104575761030d565b80630c49ccbe1161025857806313ead5621161023d57806313ead562146103e057806318160ddd146103f3578063219f5d17146104155761030d565b80630c49ccbe146103b757806312210e8a146103d85761030d565b806301ffc9a71461031257806306fdde0314610348578063081812fc1461036a578063095ea7b3146103975761030d565b3661030d57336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461030b576040805162461bcd60e51b815260206004820152600960248201527f4e6f742057455448390000000000000000000000000000000000000000000000604482015290519081900360640190fd5b005b600080fd5b34801561031e57600080fd5b5061033261032d3660046153a6565b61073b565b60405161033f919061591e565b60405180910390f35b34801561035457600080fd5b5061035d610776565b60405161033f9190615971565b34801561037657600080fd5b5061038a6103853660046156b8565b61080c565b60405161033f91906157e2565b3480156103a357600080fd5b5061030b6103b2366004615270565b610868565b6103ca6103c5366004615483565b61093e565b60405161033f929190615b42565b61030b610daa565b61038a6103ee366004615103565b610dbc565b3480156103ff57600080fd5b506104086110c9565b60405161033f9190615929565b610428610423366004615494565b6110da565b60405161033f93929190615afd565b34801561044357600080fd5b5061030b61045236600461515c565b611413565b34801561046357600080fd5b50610408610472366004615270565b61146a565b34801561048357600080fd5b50610408611495565b34801561049857600080fd5b506104086114b9565b3480156104ad57600080fd5b5061030b6104bc36600461515c565b611577565b61030b6104cf3660046156b8565b611592565b61030b6104e23660046152dc565b611661565b61030b6104f53660046156d0565b611714565b34801561050657600080fd5b5061038a611894565b34801561051b57600080fd5b5061040861052a3660046156b8565b6118b8565b34801561053b57600080fd5b5061038a61054a3660046156b8565b6118ce565b34801561055b57600080fd5b5061035d6118f6565b34801561057057600080fd5b5061040861057f3660046150af565b6118fb565b61030b6105923660046152dc565b611963565b6105aa6105a5366004615550565b611e0f565b60405161033f9493929190615b1e565b3480156105c657600080fd5b5061035d612370565b3480156105db57600080fd5b506105ef6105ea3660046156b8565b6123d1565b60405161033f9c9b9a99989796959493929190615b50565b34801561061357600080fd5b5061030b610622366004615243565b612600565b61030b6106353660046152dc565b612723565b61064d610648366004615337565b6127d5565b60405161033f91906158a0565b34801561066657600080fd5b5061030b61067536600461519c565b612915565b61030b6106883660046152dc565b612973565b34801561069957600080fd5b5061038a612a1b565b3480156106ae57600080fd5b5061035d6106bd3660046156b8565b612a3f565b3480156106ce57600080fd5b5061030b6106dd366004615717565b612b0e565b61030b6106f036600461529b565b612b8c565b34801561070157600080fd5b506103326107103660046150cb565b612c6f565b61030b6107233660046152dc565b612c9d565b6103ca61073636600461546c565b612d28565b7fffffffff00000000000000000000000000000000000000000000000000000000811660009081526020819052604090205460ff165b919050565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108025780601f106107d757610100808354040283529160200191610802565b820191906000526020600020905b8154815290600101906020018083116107e557829003601f168201915b5050505050905090565b600061081782613246565b61083c5760405162461bcd60e51b8152600401610833906159bb565b60405180910390fd5b506000908152600c60205260409020546c0100000000000000000000000090046001600160a01b031690565b6000610873826118ce565b9050806001600160a01b0316836001600160a01b031614156108c65760405162461bcd60e51b8152600401808060200182810382526021815260200180615ee26021913960400191505060405180910390fd5b806001600160a01b03166108d8613253565b6001600160a01b031614806108f457506108f481610710613253565b61092f5760405162461bcd60e51b8152600401808060200182810382526038815260200180615e0c6038913960400191505060405180910390fd5b6109398383613257565b505050565b600080823561094d33826132db565b6109695760405162461bcd60e51b815260040161083390615984565b836080013580610977613377565b11156109ca576040805162461bcd60e51b815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b60006109dc6040870160208801615562565b6001600160801b0316116109ef57600080fd5b84356000908152600c602090815260409182902060018101549092600160801b9091046001600160801b031691610a2a918901908901615562565b6001600160801b0316816001600160801b03161015610a4857600080fd5b60018281015469ffffffffffffffffffff166000908152600b60209081526040808320815160608101835281546001600160a01b039081168252919095015490811692850192909252600160a01b90910462ffffff1690830152610acc7f00000000000000000000000000000000000000000000000000000000000000008361337b565b60018501549091506001600160a01b0382169063a34123a7906a01000000000000000000008104600290810b91600160681b9004900b610b1260408e0160208f01615562565b6040518463ffffffff1660e01b8152600401610b309392919061594b565b6040805180830381600087803b158015610b4957600080fd5b505af1158015610b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8191906156f4565b909850965060408901358810801590610b9e575088606001358710155b610bba5760405162461bcd60e51b815260040161083390615a18565b6001840154600090610bea9030906a01000000000000000000008104600290810b91600160681b9004900b613477565b9050600080836001600160a01b031663514ea4bf846040518263ffffffff1660e01b8152600401610c1b9190615929565b60a06040518083038186803b158015610c3357600080fd5b505afa158015610c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6b91906155ac565b50509250925050610c9087600201548303876001600160801b0316600160801b6134d1565b6004880180546fffffffffffffffffffffffffffffffff198116928e016001600160801b039182160181169290921790556003880154610cda91908303908816600160801b6134d1565b6004880180546001600160801b03808216938e01600160801b9283900482160116029190911790556002870182905560038701819055610d2060408d0160208e01615562565b86038760010160106101000a8154816001600160801b0302191690836001600160801b031602179055508b600001357f26f6a048ee9138f2c0ce266f322cb99228e8d619ae2bff30c67f8dcf9d2377b48d6020016020810190610d839190615562565b8d8d604051610d9493929190615afd565b60405180910390a2505050505050505050915091565b4715610dba57610dba3347613580565b565b6000836001600160a01b0316856001600160a01b031610610ddc57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631698ee828686866040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018262ffffff168152602001935050505060206040518083038186803b158015610e6757600080fd5b505afa158015610e7b573d6000803e3d6000fd5b505050506040513d6020811015610e9157600080fd5b505190506001600160a01b038116610fe0577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a16712958686866040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018262ffffff1681526020019350505050602060405180830381600087803b158015610f3057600080fd5b505af1158015610f44573d6000803e3d6000fd5b505050506040513d6020811015610f5a57600080fd5b5051604080517ff637731d0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015291519293509083169163f637731d9160248082019260009290919082900301818387803b158015610fc357600080fd5b505af1158015610fd7573d6000803e3d6000fd5b505050506110c1565b6000816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561101b57600080fd5b505afa15801561102f573d6000803e3d6000fd5b505050506040513d60e081101561104557600080fd5b505190506001600160a01b0381166110bf57816001600160a01b031663f637731d846040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156110a657600080fd5b505af11580156110ba573d6000803e3d6000fd5b505050505b505b949350505050565b60006110d56002613689565b905090565b60008060008360a00135806110ed613377565b1115611140576040805162461bcd60e51b815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b84356000908152600c6020908152604080832060018082015469ffffffffffffffffffff81168652600b855283862084516060808201875282546001600160a01b039081168352929094015480831682890190815262ffffff600160a01b9092048216838901908152885161014081018a528451861681529151909416818a01529251168287015230828501526a01000000000000000000008304600290810b810b608080850191909152600160681b909404810b900b60a0830152958c013560c0820152938b013560e0850152908a0135610100840152890135610120830152929061122c90613694565b6001870154939a50919850965091506000906112669030906a01000000000000000000008104600290810b91600160681b9004900b613477565b9050600080836001600160a01b031663514ea4bf846040518263ffffffff1660e01b81526004016112979190615929565b60a06040518083038186803b1580156112af57600080fd5b505afa1580156112c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e791906155ac565b50509250925050611323866002015483038760010160109054906101000a90046001600160801b03166001600160801b0316600160801b6134d1565b6004870180546001600160801b0380821690930183166fffffffffffffffffffffffffffffffff19909116179055600387015460018801546113739291840391600160801b9182900416906134d1565b6004870180546001600160801b03600160801b80830482169094018116840291811691909117909155600288018490556003880183905560018801805483810483168e018316909302929091169190911790556040518b35907f3067048beee31b25b2f1681f88dac838c8bba36af25bfb2b7cf7473a5847e35f906113fd908d908d908d90615afd565b60405180910390a2505050505050509193909250565b61142461141e613253565b826132db565b61145f5760405162461bcd60e51b8152600401808060200182810382526031815260200180615f036031913960400191505060405180910390fd5b6109398383836138cf565b6001600160a01b038216600090815260016020526040812061148c9083613a1b565b90505b92915050565b7f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad81565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611526613a27565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b031681526020019550505050505060405160208183030381529060405280519060200120905090565b61093983838360405180602001604052806000815250612915565b8061159d33826132db565b6115b95760405162461bcd60e51b815260040161083390615984565b6000828152600c602052604090206001810154600160801b90046001600160801b03161580156115f4575060048101546001600160801b0316155b801561161257506004810154600160801b90046001600160801b0316155b61162e5760405162461bcd60e51b815260040161083390615a86565b6000838152600c602052604081208181556001810182905560028101829055600381018290556004015561093983613a2b565b604080517f8fcbaf0c00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101879052606481018690526001608482015260ff851660a482015260c4810184905260e4810183905290516001600160a01b03881691638fcbaf0c9161010480830192600092919082900301818387803b1580156116f457600080fd5b505af1158015611708573d6000803e3d6000fd5b50505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561178357600080fd5b505afa158015611797573d6000803e3d6000fd5b505050506040513d60208110156117ad57600080fd5b5051905082811015611806576040805162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e742057455448390000000000000000000000000000604482015290519081900360640190fd5b8015610939577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561187257600080fd5b505af1158015611886573d6000803e3d6000fd5b505050506109398282613580565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806118c6600284613af8565b509392505050565b600061148f82604051806060016040528060298152602001615e6e6029913960029190613b16565b606090565b60006001600160a01b0382166119425760405162461bcd60e51b815260040180806020018281038252602a815260200180615e44602a913960400191505060405180910390fd5b6001600160a01b038216600090815260016020526040902061148f90613689565b8361196c613377565b11156119bf576040805162461bcd60e51b815260206004820152600e60248201527f5065726d69742065787069726564000000000000000000000000000000000000604482015290519081900360640190fd5b60006119c96114b9565b7f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad88886119f581613b23565b604080516020808201969096526001600160a01b03909416848201526060840192909252608083015260a08083018a90528151808403909101815260c0830182528051908401207f190100000000000000000000000000000000000000000000000000000000000060e084015260e283019490945261010280830194909452805180830390940184526101229091019052815191012090506000611a98876118ce565b9050806001600160a01b0316886001600160a01b03161415611aeb5760405162461bcd60e51b8152600401808060200182810382526027815260200180615d6f6027913960400191505060405180910390fd5b611af481613b62565b15611ccf576040805160208082018790528183018690527fff0000000000000000000000000000000000000000000000000000000000000060f889901b16606083015282516041818403018152606183018085527f1626ba7e0000000000000000000000000000000000000000000000000000000090526065830186815260858401948552815160a585015281516001600160a01b03871695631626ba7e958995919260c59091019185019080838360005b83811015611bbe578181015183820152602001611ba6565b50505050905090810190601f168015611beb5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015611c0957600080fd5b505afa158015611c1d573d6000803e3d6000fd5b505050506040513d6020811015611c3357600080fd5b50517fffffffff00000000000000000000000000000000000000000000000000000000167f1626ba7e0000000000000000000000000000000000000000000000000000000014611cca576040805162461bcd60e51b815260206004820152600c60248201527f556e617574686f72697a65640000000000000000000000000000000000000000604482015290519081900360640190fd5b611dfb565b600060018387878760405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611d2b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611d93576040805162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e6174757265000000000000000000000000000000604482015290519081900360640190fd5b816001600160a01b0316816001600160a01b031614611df9576040805162461bcd60e51b815260206004820152600c60248201527f556e617574686f72697a65640000000000000000000000000000000000000000604482015290519081900360640190fd5b505b611e058888613257565b5050505050505050565b60008060008084610140013580611e24613377565b1115611e77576040805162461bcd60e51b815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b604080516101408101909152600090611f439080611e9860208b018b6150af565b6001600160a01b03168152602001896020016020810190611eb991906150af565b6001600160a01b03168152602001611ed760608b0160408c0161569e565b62ffffff168152306020820152604001611ef760808b0160608c016153e6565b60020b8152602001611f0f60a08b0160808c016153e6565b60020b81526020018960a0013581526020018960c0013581526020018960e001358152602001896101000135815250613694565b92975090955093509050611fb7611f6261014089016101208a016150af565b600d80547fffffffffffffffffffff000000000000000000000000000000000000000000008116600175ffffffffffffffffffffffffffffffffffffffffffff92831690810190921617909155975087613b68565b6000611fe230611fcd60808b0160608c016153e6565b611fdd60a08c0160808d016153e6565b613477565b9050600080836001600160a01b031663514ea4bf846040518263ffffffff1660e01b81526004016120139190615929565b60a06040518083038186803b15801561202b57600080fd5b505afa15801561203f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206391906155ac565b5050925092505060006120dc8560405180606001604052808e600001602081019061208e91906150af565b6001600160a01b031681526020018e60200160208101906120af91906150af565b6001600160a01b031681526020018e60400160208101906120d0919061569e565b62ffffff169052613c96565b905060405180610140016040528060006bffffffffffffffffffffffff16815260200160006001600160a01b031681526020018269ffffffffffffffffffff1681526020018c606001602081019061213491906153e6565b60020b815260200161214c60a08e0160808f016153e6565b60020b81526020018a6001600160801b0316815260200184815260200183815260200160006001600160801b0316815260200160006001600160801b0316815250600c60008c815260200190815260200160002060008201518160000160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550602082015181600001600c6101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff160217905550606082015181600101600a6101000a81548162ffffff021916908360020b62ffffff160217905550608082015181600101600d6101000a81548162ffffff021916908360020b62ffffff16021790555060a08201518160010160106101000a8154816001600160801b0302191690836001600160801b0316021790555060c0820151816002015560e082015181600301556101008201518160040160006101000a8154816001600160801b0302191690836001600160801b031602179055506101208201518160040160106101000a8154816001600160801b0302191690836001600160801b03160217905550905050897f3067048beee31b25b2f1681f88dac838c8bba36af25bfb2b7cf7473a5847e35f8a8a8a60405161235b93929190615afd565b60405180910390a25050505050509193509193565b60078054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108025780601f106107d757610100808354040283529160200191610802565b6000818152600c6020908152604080832081516101408101835281546bffffffffffffffffffffffff811682526001600160a01b036c010000000000000000000000009091041693810193909352600181015469ffffffffffffffffffff81169284018390526a01000000000000000000008104600290810b810b810b6060860152600160681b8204810b810b810b60808601526001600160801b03600160801b92839004811660a08701529083015460c0860152600383015460e0860152600490920154808316610100860152041661012083015282918291829182918291829182918291829182918291906124da5760405162461bcd60e51b815260040161083390615a4f565b6000600b6000836040015169ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160149054906101000a900462ffffff1662ffffff1662ffffff1681525050905081600001518260200151826000015183602001518460400151866060015187608001518860a001518960c001518a60e001518b61010001518c61012001519d509d509d509d509d509d509d509d509d509d509d509d50505091939597999b5091939597999b565b612608613253565b6001600160a01b0316826001600160a01b0316141561266e576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b806005600061267b613253565b6001600160a01b0390811682526020808301939093526040918201600090812091871680825291909352912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016921515929092179091556126dd613253565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523360048201523060248201529051600019916001600160a01b0389169163dd62ed3e91604480820192602092909190829003018186803b15801561278d57600080fd5b505afa1580156127a1573d6000803e3d6000fd5b505050506040513d60208110156127b757600080fd5b505110156127cd576127cd868686868686611661565b505050505050565b60608167ffffffffffffffff811180156127ee57600080fd5b5060405190808252806020026020018201604052801561282257816020015b606081526020019060019003908161280d5790505b50905060005b8281101561290e576000803086868581811061284057fe5b90506020028101906128529190615bef565b6040516128609291906157d2565b600060405180830381855af49150503d806000811461289b576040519150601f19603f3d011682016040523d82523d6000602084013e6128a0565b606091505b5091509150816128ec576044815110156128b957600080fd5b600481019050808060200190518101906128d39190615402565b60405162461bcd60e51b81526004016108339190615971565b808484815181106128f957fe5b60209081029190910101525050600101612828565b5092915050565b612926612920613253565b836132db565b6129615760405162461bcd60e51b8152600401808060200182810382526031815260200180615f036031913960400191505060405180910390fd5b61296d84848484613de6565b50505050565b604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152905186916001600160a01b0389169163dd62ed3e91604480820192602092909190829003018186803b1580156129db57600080fd5b505afa1580156129ef573d6000803e3d6000fd5b505050506040513d6020811015612a0557600080fd5b505110156127cd576127cd868686868686612c9d565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060612a4a82613246565b612a5357600080fd5b6040517fe9dc63750000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e9dc637590612aba9030908690600401615932565b60006040518083038186803b158015612ad257600080fd5b505afa158015612ae6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261148f9190810190615402565b6000612b1c828401846154a5565b9050612b4c7f00000000000000000000000000000000000000000000000000000000000000008260000151613e38565b508415612b67578051516020820151612b6791903388613e5b565b8315612b8557612b8581600001516020015182602001513387613e5b565b5050505050565b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612bdb57600080fd5b505afa158015612bef573d6000803e3d6000fd5b505050506040513d6020811015612c0557600080fd5b5051905082811015612c5e576040805162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e7420746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b801561296d5761296d848383613feb565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b604080517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c4810183905290516001600160a01b0388169163d505accf9160e480830192600092919082900301818387803b1580156116f457600080fd5b6000808235612d3733826132db565b612d535760405162461bcd60e51b815260040161083390615984565b6000612d656060860160408701615562565b6001600160801b03161180612d9257506000612d876080860160608701615562565b6001600160801b0316115b612d9b57600080fd5b600080612dae60408701602088016150af565b6001600160a01b031614612dd157612dcc60408601602087016150af565b612dd3565b305b85356000908152600c6020908152604080832060018082015469ffffffffffffffffffff168552600b8452828520835160608101855281546001600160a01b039081168252919092015490811694820194909452600160a01b90930462ffffff169183019190915292935090612e697f00000000000000000000000000000000000000000000000000000000000000008361337b565b600484015460018501549192506001600160801b0380821692600160801b92839004821692900416156130865760018501546040517fa34123a70000000000000000000000000000000000000000000000000000000081526001600160a01b0385169163a34123a791612f00916a01000000000000000000008104600290810b92600160681b909204900b9060009060040161594b565b6040805180830381600087803b158015612f1957600080fd5b505af1158015612f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f5191906156f4565b5050600185015460009081906001600160a01b0386169063514ea4bf90612f969030906a01000000000000000000008104600290810b91600160681b9004900b613477565b6040518263ffffffff1660e01b8152600401612fb29190615929565b60a06040518083038186803b158015612fca57600080fd5b505afa158015612fde573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061300291906155ac565b5050925092505061303e876002015483038860010160109054906101000a90046001600160801b03166001600160801b0316600160801b6134d1565b84019350613077876003015482038860010160109054906101000a90046001600160801b03166001600160801b0316600160801b6134d1565b60028801929092556003870155015b6000806001600160801b0384166130a360608e0160408f01615562565b6001600160801b0316116130c6576130c160608d0160408e01615562565b6130c8565b835b836001600160801b03168d60600160208101906130e59190615562565b6001600160801b0316116131085761310360808e0160608f01615562565b61310a565b835b60018901546040517f4f1eb3d80000000000000000000000000000000000000000000000000000000081529294509092506001600160a01b03871691634f1eb3d89161317d918c916a01000000000000000000008104600290810b92600160681b909204900b9088908890600401615839565b6040805180830381600087803b15801561319657600080fd5b505af11580156131aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ce919061557e565b6004890180546fffffffffffffffffffffffffffffffff196001600160801b03918216600160801b878a0384160217168689038216179091556040519281169d50169a508c35907f40d0efd1a53d60ecbf40971b9daf7dc90178c3aadc7aab1765632738fa8b8f0190610d94908b9086908690615876565b600061148f60028361417b565b3390565b6000818152600c6020526040902080546bffffffffffffffffffffffff166c010000000000000000000000006001600160a01b0385169081029190911790915581906132a2826118ce565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006132e682613246565b6133215760405162461bcd60e51b815260040180806020018281038252602c815260200180615de0602c913960400191505060405180910390fd5b600061332c836118ce565b9050806001600160a01b0316846001600160a01b031614806133675750836001600160a01b031661335c8461080c565b6001600160a01b0316145b806110c157506110c18185612c6f565b4290565b600081602001516001600160a01b031682600001516001600160a01b0316106133a357600080fd5b50805160208083015160409384015184516001600160a01b0394851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b6bffffffffffffffffffffffff191660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b604080516bffffffffffffffffffffffff19606086901b16602080830191909152600285810b60e890811b60348501529085900b901b60378301528251601a818403018152603a90920190925280519101205b9392505050565b600080806000198587098686029250828110908390030390508061350757600084116134fc57600080fd5b5082900490506134ca565b80841161351357600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b604080516000808252602082019092526001600160a01b0384169083906040518082805190602001908083835b602083106135cc5780518252601f1990920191602091820191016135ad565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461362e576040519150601f19603f3d011682016040523d82523d6000602084013e613633565b606091505b5050905080610939576040805162461bcd60e51b815260206004820152600360248201527f5354450000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061148f82614187565b6000806000806000604051806060016040528087600001516001600160a01b0316815260200187602001516001600160a01b03168152602001876040015162ffffff1681525090506137067f00000000000000000000000000000000000000000000000000000000000000008261337b565b91506000826001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561374357600080fd5b505afa158015613757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377b919061560d565b50505050505090506000613792886080015161418b565b905060006137a38960a0015161418b565b90506137ba8383838c60c001518d60e001516144d9565b9750505050816001600160a01b0316633c8a7d8d876060015188608001518960a00151896040518060400160405280888152602001336001600160a01b031681525060405160200161380c9190615abd565b6040516020818303038152906040526040518663ffffffff1660e01b815260040161383b9594939291906157f6565b6040805180830381600087803b15801561385457600080fd5b505af1158015613868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061388c91906156f4565b610100880151919550935084108015906138ab57508561012001518310155b6138c75760405162461bcd60e51b815260040161083390615a18565b509193509193565b826001600160a01b03166138e2826118ce565b6001600160a01b0316146139275760405162461bcd60e51b8152600401808060200182810382526029815260200180615eb96029913960400191505060405180910390fd5b6001600160a01b03821661396c5760405162461bcd60e51b8152600401808060200182810382526024815260200180615d966024913960400191505060405180910390fd5b613977838383610939565b613982600082613257565b6001600160a01b03831660009081526001602052604090206139a4908261459d565b506001600160a01b03821660009081526001602052604090206139c790826145a9565b506139d4600282846145b5565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600061148c83836145cb565b4690565b6000613a36826118ce565b9050613a4481600084610939565b613a4f600083613257565b6000828152600860205260409020546002600019610100600184161502019091160415613a8d576000828152600860205260408120613a8d9161501f565b6001600160a01b0381166000908152600160205260409020613aaf908361459d565b50613abb60028361462f565b5060405182906000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000808080613b07868661463b565b909450925050505b9250929050565b60006110c18484846146b6565b6000908152600c6020526040902080546bffffffffffffffffffffffff19811660016bffffffffffffffffffffffff9283169081019092161790915590565b3b151590565b6001600160a01b038216613bc3576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b613bcc81613246565b15613c1e576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b613c2a60008383610939565b6001600160a01b0382166000908152600160205260409020613c4c90826145a9565b50613c59600282846145b5565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b0382166000908152600a602052604090205469ffffffffffffffffffff168061148f5750600d8054600169ffffffffffffffffffff76010000000000000000000000000000000000000000000080840482168381019092160275ffffffffffffffffffffffffffffffffffffffffffff909316929092179092556001600160a01b038085166000908152600a6020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffff000000000000000000001686179055848352600b825291829020865181549085167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617825591870151950180549287015162ffffff16600160a01b027fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff969094169290911691909117939093161790915592915050565b613df18484846138cf565b613dfd84848484614780565b61296d5760405162461bcd60e51b8152600401808060200182810382526032815260200180615d3d6032913960400191505060405180910390fd5b6000613e44838361337b565b9050336001600160a01b0382161461148f57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316148015613e9c5750804710155b15613fbe577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613efc57600080fd5b505af1158015613f10573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015613f8c57600080fd5b505af1158015613fa0573d6000803e3d6000fd5b505050506040513d6020811015613fb657600080fd5b5061296d9050565b6001600160a01b038316301415613fdf57613fda848383613feb565b61296d565b61296d8484848461495c565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251825160009485949389169392918291908083835b602083106140955780518252601f199092019160209182019101614076565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146140f7576040519150601f19603f3d011682016040523d82523d6000602084013e6140fc565b606091505b509150915081801561412a57508051158061412a575080806020019051602081101561412757600080fd5b50515b612b85576040805162461bcd60e51b815260206004820152600260248201527f5354000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061148c8383614af4565b5490565b60008060008360020b126141a2578260020b6141aa565b8260020b6000035b9050620d89e8811115614204576040805162461bcd60e51b815260206004820152600160248201527f5400000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001821661421857600160801b61422a565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff169050600282161561425e576ffff97272373d413259a46990580e213a0260801c5b600482161561427d576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b600882161561429c576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156142bb576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156142da576fff973b41fa98c081472e6896dfb254c00260801c5b60408216156142f9576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615614318576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615614338576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615614358576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615614378576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615614398576fe7159475a2c29b7443b29c7fa6e889d90260801c5b6110008216156143b8576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156143d8576fa9f746462d870fdf8a65dc1f90e061e50260801c5b6140008216156143f8576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615614418576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615614439576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615614459576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615614478576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615614495576b048a170391f7dc42444e8fa20260801c5b60008460020b13156144b05780600019816144ac57fe5b0490505b6401000000008106156144c45760016144c7565b60005b60ff16602082901c0192505050919050565b6000836001600160a01b0316856001600160a01b031611156144f9579293925b846001600160a01b0316866001600160a01b0316116145245761451d858585614b0c565b9050614594565b836001600160a01b0316866001600160a01b0316101561458657600061454b878686614b0c565b9050600061455a878986614b78565b9050806001600160801b0316826001600160801b03161061457b578061457d565b815b92505050614594565b614591858584614b78565b90505b95945050505050565b600061148c8383614bbe565b600061148c8383614c84565b60006110c184846001600160a01b038516614cce565b8154600090821061460d5760405162461bcd60e51b8152600401808060200182810382526022815260200180615d1b6022913960400191505060405180910390fd5b82600001828154811061461c57fe5b9060005260206000200154905092915050565b600061148c8383614d65565b81546000908190831061467f5760405162461bcd60e51b8152600401808060200182810382526022815260200180615e976022913960400191505060405180910390fd5b600084600001848154811061469057fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816147515760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156147165781810151838201526020016146fe565b50505050905090810190601f1680156147435780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061476457fe5b9060005260206000209060020201600101549150509392505050565b6000614794846001600160a01b0316613b62565b6147a0575060016110c1565b60006148f17f150b7a02000000000000000000000000000000000000000000000000000000006147ce613253565b88878760405160240180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561483557818101518382015260200161481d565b50505050905090810190601f1680156148625780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051806060016040528060328152602001615d3d603291396001600160a01b0388169190614e39565b9050600081806020019051602081101561490a57600080fd5b50517fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001492505050949350505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000178152925182516000948594938a169392918291908083835b60208310614a0e5780518252601f1990920191602091820191016149ef565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614a70576040519150601f19603f3d011682016040523d82523d6000602084013e614a75565b606091505b5091509150818015614aa3575080511580614aa35750808060200190516020811015614aa057600080fd5b50515b6127cd576040805162461bcd60e51b815260206004820152600360248201527f5354460000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60009081526001919091016020526040902054151590565b6000826001600160a01b0316846001600160a01b03161115614b2c579192915b6000614b58856001600160a01b0316856001600160a01b03166c010000000000000000000000006134d1565b9050614594614b7384838888036001600160a01b03166134d1565b614e48565b6000826001600160a01b0316846001600160a01b03161115614b98579192915b6110c1614b73836c010000000000000000000000008787036001600160a01b03166134d1565b60008181526001830160205260408120548015614c7a5783546000198083019190810190600090879083908110614bf157fe5b9060005260206000200154905080876000018481548110614c0e57fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080614c3e57fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061148f565b600091505061148f565b6000614c908383614af4565b614cc65750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561148f565b50600061148f565b600082815260018401602052604081205480614d335750506040805180820182528381526020808201848152865460018181018955600089815284812095516002909302909501918255915190820155865486845281880190925292909120556134ca565b82856000016001830381548110614d4657fe5b90600052602060002090600202016001018190555060009150506134ca565b60008181526001830160205260408120548015614c7a5783546000198083019190810190600090879083908110614d9857fe5b9060005260206000209060020201905080876000018481548110614db857fe5b600091825260208083208454600290930201918255600193840154918401919091558354825289830190526040902090840190558654879080614df757fe5b600082815260208082206002600019909401938402018281556001908101839055929093558881528982019092526040822091909155945061148f9350505050565b60606110c18484600085614e5e565b806001600160801b038116811461077157600080fd5b606082471015614e9f5760405162461bcd60e51b8152600401808060200182810382526026815260200180615dba6026913960400191505060405180910390fd5b614ea885613b62565b614ef9576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310614f375780518252601f199092019160209182019101614f18565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614f99576040519150601f19603f3d011682016040523d82523d6000602084013e614f9e565b606091505b5091509150614fae828286614fb9565b979650505050505050565b60608315614fc85750816134ca565b825115614fd85782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156147165781810151838201526020016146fe565b50805460018160011615610100020316600290046000825580601f106150455750615063565b601f0160209004906000526020600020908101906150639190615066565b50565b5b8082111561507b5760008155600101615067565b5090565b803561077181615cc4565b805161ffff8116811461077157600080fd5b803562ffffff8116811461077157600080fd5b6000602082840312156150c0578081fd5b81356134ca81615cc4565b600080604083850312156150dd578081fd5b82356150e881615cc4565b915060208301356150f881615cc4565b809150509250929050565b60008060008060808587031215615118578182fd5b843561512381615cc4565b9350602085013561513381615cc4565b92506151416040860161509c565b9150606085013561515181615cc4565b939692955090935050565b600080600060608486031215615170578081fd5b833561517b81615cc4565b9250602084013561518b81615cc4565b929592945050506040919091013590565b600080600080608085870312156151b1578182fd5b84356151bc81615cc4565b935060208501356151cc81615cc4565b925060408501359150606085013567ffffffffffffffff8111156151ee578182fd5b8501601f810187136151fe578182fd5b803561521161520c82615c76565b615c52565b818152886020838501011115615225578384fd5b81602084016020830137908101602001929092525092959194509250565b60008060408385031215615255578182fd5b823561526081615cc4565b915060208301356150f881615cd9565b60008060408385031215615282578182fd5b823561528d81615cc4565b946020939093013593505050565b6000806000606084860312156152af578081fd5b83356152ba81615cc4565b92506020840135915060408401356152d181615cc4565b809150509250925092565b60008060008060008060c087890312156152f4578384fd5b86356152ff81615cc4565b95506020870135945060408701359350606087013561531d81615d0b565b9598949750929560808101359460a0909101359350915050565b60008060208385031215615349578182fd5b823567ffffffffffffffff80821115615360578384fd5b818501915085601f830112615373578384fd5b813581811115615381578485fd5b8660208083028501011115615394578485fd5b60209290920196919550909350505050565b6000602082840312156153b7578081fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146134ca578182fd5b6000602082840312156153f7578081fd5b81356134ca81615ce7565b600060208284031215615413578081fd5b815167ffffffffffffffff811115615429578182fd5b8201601f81018413615439578182fd5b805161544761520c82615c76565b81815285602083850101111561545b578384fd5b614594826020830160208601615c98565b60006080828403121561547d578081fd5b50919050565b600060a0828403121561547d578081fd5b600060c0828403121561547d578081fd5b600081830360808112156154b7578182fd5b6040516040810167ffffffffffffffff82821081831117156154d557fe5b8160405260608412156154e6578485fd5b60a08301935081841081851117156154fa57fe5b50826040528435925061550c83615cc4565b91825260208401359161551e83615cc4565b8260608301526155306040860161509c565b608083015281526155436060850161507f565b6020820152949350505050565b6000610160828403121561547d578081fd5b600060208284031215615573578081fd5b81356134ca81615cf6565b60008060408385031215615590578182fd5b825161559b81615cf6565b60208401519092506150f881615cf6565b600080600080600060a086880312156155c3578283fd5b85516155ce81615cf6565b80955050602086015193506040860151925060608601516155ee81615cf6565b60808701519092506155ff81615cf6565b809150509295509295909350565b600080600080600080600060e0888a031215615627578485fd5b875161563281615cc4565b602089015190975061564381615ce7565b95506156516040890161508a565b945061565f6060890161508a565b935061566d6080890161508a565b925060a088015161567d81615d0b565b60c089015190925061568e81615cd9565b8091505092959891949750929550565b6000602082840312156156af578081fd5b61148c8261509c565b6000602082840312156156c9578081fd5b5035919050565b600080604083850312156156e2578182fd5b8235915060208301356150f881615cc4565b60008060408385031215615706578182fd5b505080516020909101519092909150565b6000806000806060858703121561572c578182fd5b8435935060208501359250604085013567ffffffffffffffff80821115615751578384fd5b818701915087601f830112615764578384fd5b813581811115615772578485fd5b886020828501011115615783578485fd5b95989497505060200194505050565b600081518084526157aa816020860160208601615c98565b601f01601f19169290920160200192915050565b60020b9052565b6001600160801b03169052565b6000828483379101908152919050565b6001600160a01b0391909116815260200190565b60006001600160a01b03871682528560020b60208301528460020b60408301526001600160801b038416606083015260a06080830152614fae60a0830184615792565b6001600160a01b03959095168552600293840b60208601529190920b60408401526001600160801b03918216606084015216608082015260a00190565b6001600160a01b039390931683526001600160801b03918216602084015216604082015260600190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015615911577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526158ff858351615792565b945092850192908501906001016158c5565b5092979650505050505050565b901515815260200190565b90815260200190565b6001600160a01b03929092168252602082015260400190565b600293840b81529190920b60208201526001600160801b03909116604082015260600190565b60006020825261148c6020830184615792565b6020808252600c908201527f4e6f7420617070726f7665640000000000000000000000000000000000000000604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201527f697374656e7420746f6b656e0000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f507269636520736c69707061676520636865636b000000000000000000000000604082015260600190565b60208082526010908201527f496e76616c696420746f6b656e20494400000000000000000000000000000000604082015260600190565b6020808252600b908201527f4e6f7420636c6561726564000000000000000000000000000000000000000000604082015260600190565b815180516001600160a01b03908116835260208083015182168185015260409283015162ffffff1692840192909252920151909116606082015260800190565b6001600160801b039390931683526020830191909152604082015260600190565b9384526001600160801b039290921660208401526040830152606082015260800190565b918252602082015260400190565b6bffffffffffffffffffffffff8d1681526001600160a01b038c811660208301528b811660408301528a16606082015262ffffff89166080820152600288900b60a08201526101808101615ba760c08301896157be565b615bb460e08301886157c5565b8561010083015284610120830152615bd06101408301856157c5565b615bde6101608301846157c5565b9d9c50505050505050505050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112615c23578283fd5b83018035915067ffffffffffffffff821115615c3d578283fd5b602001915036819003821315613b0f57600080fd5b60405181810167ffffffffffffffff81118282101715615c6e57fe5b604052919050565b600067ffffffffffffffff821115615c8a57fe5b50601f01601f191660200190565b60005b83811015615cb3578181015183820152602001615c9b565b8381111561296d5750506000910152565b6001600160a01b038116811461506357600080fd5b801515811461506357600080fd5b8060020b811461506357600080fd5b6001600160801b038116811461506357600080fd5b60ff8116811461506357600080fdfe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732315065726d69743a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e7366657220746f20746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a164736f6c6343000706000a";
+
+export class NonfungiblePositionManager__factory extends ContractFactory {
+  constructor(signer?: Signer) {
+    super(_abi, _bytecode, signer);
+  }
+
+  deploy(
+    _factory: string,
+    _WETH9: string,
+    _tokenDescriptor_: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<NonfungiblePositionManager> {
+    return super.deploy(
+      _factory,
+      _WETH9,
+      _tokenDescriptor_,
+      overrides || {}
+    ) as Promise<NonfungiblePositionManager>;
+  }
+  getDeployTransaction(
+    _factory: string,
+    _WETH9: string,
+    _tokenDescriptor_: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): TransactionRequest {
+    return super.getDeployTransaction(
+      _factory,
+      _WETH9,
+      _tokenDescriptor_,
+      overrides || {}
+    );
+  }
+  attach(address: string): NonfungiblePositionManager {
+    return super.attach(address) as NonfungiblePositionManager;
+  }
+  connect(signer: Signer): NonfungiblePositionManager__factory {
+    return super.connect(signer) as NonfungiblePositionManager__factory;
+  }
+  static readonly bytecode = _bytecode;
+  static readonly abi = _abi;
+  static createInterface(): NonfungiblePositionManagerInterface {
+    return new utils.Interface(_abi) as NonfungiblePositionManagerInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): NonfungiblePositionManager {
+    return new Contract(
+      address,
+      _abi,
+      signerOrProvider
+    ) as NonfungiblePositionManager;
+  }
+}
diff --git a/lib/sor/types/v3/factories/NonfungibleTokenPositionDescriptor__factory.ts b/lib/sor/types/v3/factories/NonfungibleTokenPositionDescriptor__factory.ts
new file mode 100644
index 0000000..c7db075
--- /dev/null
+++ b/lib/sor/types/v3/factories/NonfungibleTokenPositionDescriptor__factory.ts
@@ -0,0 +1,235 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider, TransactionRequest } from "@ethersproject/providers";
+import {
+  BytesLike,
+  Contract,
+  ContractFactory,
+  Overrides,
+  Signer,
+  utils,
+} from "ethers";
+import type {
+  NonfungibleTokenPositionDescriptor,
+  NonfungibleTokenPositionDescriptorInterface,
+} from "../NonfungibleTokenPositionDescriptor";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "_WETH9",
+        type: "address",
+      },
+      {
+        internalType: "bytes32",
+        name: "_nativeCurrencyLabelBytes",
+        type: "bytes32",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "constructor",
+  },
+  {
+    inputs: [],
+    name: "WETH9",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token0",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "token1",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "chainId",
+        type: "uint256",
+      },
+    ],
+    name: "flipRatio",
+    outputs: [
+      {
+        internalType: "bool",
+        name: "",
+        type: "bool",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "nativeCurrencyLabel",
+    outputs: [
+      {
+        internalType: "string",
+        name: "",
+        type: "string",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "nativeCurrencyLabelBytes",
+    outputs: [
+      {
+        internalType: "bytes32",
+        name: "",
+        type: "bytes32",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "chainId",
+        type: "uint256",
+      },
+    ],
+    name: "tokenRatioPriority",
+    outputs: [
+      {
+        internalType: "int256",
+        name: "",
+        type: "int256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "contract INonfungiblePositionManager",
+        name: "positionManager",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "tokenId",
+        type: "uint256",
+      },
+    ],
+    name: "tokenURI",
+    outputs: [
+      {
+        internalType: "string",
+        name: "",
+        type: "string",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+];
+
+const _bytecode =
+  "0x60c060405234801561001057600080fd5b5060405161158038038061158083398101604081905261002f9161004a565b60609190911b6001600160601b03191660805260a052610082565b6000806040838503121561005c578182fd5b82516001600160a01b0381168114610072578283fd5b6020939093015192949293505050565b60805160601c60a0516114bf6100c16000398061028f52806102c35280610377525080610107528061014c528061061a528061066e52506114bf6000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063a18246e211610050578063a18246e2146100d5578063b7af3cdc146100dd578063e9dc6375146100f257610072565b80634aa4a4fc146100775780637e5af771146100955780639d7b0ea8146100b5575b600080fd5b61007f610105565b60405161008c9190611311565b60405180910390f35b6100a86100a3366004611017565b610129565b60405161008c9190611325565b6100c86100c3366004611057565b610148565b60405161008c9190611330565b6100c861028d565b6100e56102b1565b60405161008c9190611339565b6100e5610100366004611057565b6103d7565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006101358383610148565b61013f8584610148565b13949350505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316141561018d5750606319610287565b8160011415610283576001600160a01b03831673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4814156101c4575061012c610287565b6001600160a01b03831673dac17f958d2ee523a2206206994597c13d831ec714156101f1575060c8610287565b6001600160a01b038316736b175474e89094c44da98b954eedeac495271d0f141561021e57506064610287565b6001600160a01b038316738daebade922df735c38c80c7ebd708af50815faa141561024c575060c719610287565b6001600160a01b038316732260fac5e5542a773aa44fbcfedf7c193bc2c599141561027b575061012b19610287565b506000610287565b5060005b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b606060005b60208110801561031657507f000000000000000000000000000000000000000000000000000000000000000081602081106102ed57fe5b1a60f81b7fff000000000000000000000000000000000000000000000000000000000000001615155b15610323576001016102b6565b60008167ffffffffffffffff8111801561033c57600080fd5b506040519080825280601f01601f191660200182016040528015610367576020820181803683370190505b50905060005b828110156103d0577f000000000000000000000000000000000000000000000000000000000000000081602081106103a157fe5b1a60f81b8282815181106103b157fe5b60200101906001600160f81b031916908160001a90535060010161036d565b5091505090565b60606000806000806000876001600160a01b03166399fbab88886040518263ffffffff1660e01b815260040161040d9190611330565b6101806040518083038186803b15801561042657600080fd5b505afa15801561043a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045e91906111dc565b5050505050965096509650965096505050600061051c896001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156104ad57600080fd5b505afa1580156104c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e59190610ff4565b6040518060600160405280896001600160a01b03168152602001886001600160a01b031681526020018762ffffff168152506108e7565b9050600061052d87876100a36109e3565b90506000811561053d578761053f565b865b90506000821561054f5787610551565b885b90506000846001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561058e57600080fd5b505afa1580156105a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c69190611133565b505050505091505073__$cea9be979eee3d87fb124d6cbb244bb0b5$__63c49917d7604051806101c001604052808f8152602001866001600160a01b03168152602001856001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876001600160a01b03161461065f5761065a876109e7565b610667565b6106676102b1565b81526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316866001600160a01b0316146106b3576106ae866109e7565b6106bb565b6106bb6102b1565b8152602001866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156106f957600080fd5b505afa15801561070d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073191906111c2565b60ff168152602001856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561077257600080fd5b505afa158015610786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107aa91906111c2565b60ff16815260200187151581526020018a60020b81526020018960020b81526020018460020b8152602001886001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561080e57600080fd5b505afa158015610822573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108469190611082565b60020b81526020018b62ffffff168152602001886001600160a01b03168152506040518263ffffffff1660e01b8152600401610882919061134c565b60006040518083038186803b15801561089a57600080fd5b505af41580156108ae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108d6919081019061109c565b9d9c50505050505050505050505050565b600081602001516001600160a01b031682600001516001600160a01b03161061090f57600080fd5b50805160208083015160409384015184516001600160a01b0394851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b6bffffffffffffffffffffffff191660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b4690565b60606000610a15837f95d89b4100000000000000000000000000000000000000000000000000000000610a3a565b9050805160001415610a3257610a2a83610c8f565b915050610a35565b90505b919050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000085161781529151815160609360009384936001600160a01b03891693919290918291908083835b60208310610ad35780518252601f199092019160209182019101610ab4565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114610b33576040519150601f19603f3d011682016040523d82523d6000602084013e610b38565b606091505b5091509150811580610b4957508051155b15610b67576040518060200160405280600081525092505050610287565b805160201415610b9f576000818060200190516020811015610b8857600080fd5b50519050610b9581610c9c565b9350505050610287565b604081511115610c7757808060200190516020811015610bbe57600080fd5b8101908080516040519392919084640100000000821115610bde57600080fd5b908301906020820185811115610bf357600080fd5b8251640100000000811182820188101715610c0d57600080fd5b82525081516020918201929091019080838360005b83811015610c3a578181015183820152602001610c22565b50505050905090810190601f168015610c675780820380516001836020036101000a031916815260200191505b5060405250505092505050610287565b50506040805160208101909152600081529392505050565b6060610a32826006610ddc565b604080516020808252818301909252606091600091906020820181803683370190505090506000805b6020811015610d3e576000858260208110610cdc57fe5b1a60f81b90507fff00000000000000000000000000000000000000000000000000000000000000811615610d355780848481518110610d1757fe5b60200101906001600160f81b031916908160001a9053506001909201915b50600101610cc5565b5060008167ffffffffffffffff81118015610d5857600080fd5b506040519080825280601f01601f191660200182016040528015610d83576020820181803683370190505b50905060005b82811015610dd357838181518110610d9d57fe5b602001015160f81c60f81b828281518110610db457fe5b60200101906001600160f81b031916908160001a905350600101610d89565b50949350505050565b606060028206158015610def5750600082115b8015610dfc575060288211155b610e6757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f41646472657373537472696e675574696c3a20494e56414c49445f4c454e0000604482015290519081900360640190fd5b60008267ffffffffffffffff81118015610e8057600080fd5b506040519080825280601f01601f191660200182016040528015610eab576020820181803683370190505b5090506001600160a01b03841660005b60028504811015610f4f57600860138290030282901c600f600482901c1660f082168203610ee882610f59565b868560020281518110610ef757fe5b60200101906001600160f81b031916908160001a905350610f1781610f59565b868560020260010181518110610f2957fe5b60200101906001600160f81b031916908160001a9053505060019092019150610ebb9050565b5090949350505050565b6000600a8260ff161015610f7457506030810160f81b610a35565b506037810160f81b610a35565b8051610a358161149a565b8051600281900b8114610a3557600080fd5b80516fffffffffffffffffffffffffffffffff81168114610a3557600080fd5b805161ffff81168114610a3557600080fd5b805162ffffff81168114610a3557600080fd5b805160ff81168114610a3557600080fd5b600060208284031215611005578081fd5b81516110108161149a565b9392505050565b60008060006060848603121561102b578182fd5b83356110368161149a565b925060208401356110468161149a565b929592945050506040919091013590565b60008060408385031215611069578182fd5b82356110748161149a565b946020939093013593505050565b600060208284031215611093578081fd5b61101082610f8c565b6000602082840312156110ad578081fd5b815167ffffffffffffffff808211156110c4578283fd5b818401915084601f8301126110d7578283fd5b8151818111156110e357fe5b604051601f8201601f19168101602001838111828210171561110157fe5b604052818152838201602001871015611118578485fd5b61112982602083016020870161146a565b9695505050505050565b600080600080600080600060e0888a03121561114d578283fd5b87516111588161149a565b965061116660208901610f8c565b955061117460408901610fbe565b945061118260608901610fbe565b935061119060808901610fbe565b925061119e60a08901610fe3565b915060c088015180151581146111b2578182fd5b8091505092959891949750929550565b6000602082840312156111d3578081fd5b61101082610fe3565b6000806000806000806000806000806000806101808d8f0312156111fe578485fd5b8c516bffffffffffffffffffffffff81168114611219578586fd5b9b5061122760208e01610f81565b9a5061123560408e01610f81565b995061124360608e01610f81565b985061125160808e01610fd0565b975061125f60a08e01610f8c565b965061126d60c08e01610f8c565b955061127b60e08e01610f9e565b94506101008d015193506101208d0151925061129a6101408e01610f9e565b91506112a96101608e01610f9e565b90509295989b509295989b509295989b565b6001600160a01b03169052565b15159052565b60020b9052565b600081518084526112ed81602086016020860161146a565b601f01601f19169290920160200192915050565b62ffffff169052565b60ff169052565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b60006020825261101060208301846112d5565b60006020825282516020830152602083015161136b60408401826112bb565b50604083015161137e60608401826112bb565b5060608301516101c080608085015261139b6101e08501836112d5565b91506080850151601f198584030160a08601526113b883826112d5565b92505060a08501516113cd60c086018261130a565b5060c08501516113e060e086018261130a565b5060e08501516101006113f5818701836112c8565b8601519050610120611409868201836112ce565b860151905061014061141d868201836112ce565b8601519050610160611431868201836112ce565b8601519050610180611445868201836112ce565b86015190506101a061145986820183611301565b8601519050610f4f858301826112bb565b60005b8381101561148557818101518382015260200161146d565b83811115611494576000848401525b50505050565b6001600160a01b03811681146114af57600080fd5b5056fea164736f6c6343000706000a";
+
+export class NonfungibleTokenPositionDescriptor__factory extends ContractFactory {
+  constructor(
+    linkLibraryAddresses: NonfungibleTokenPositionDescriptorLibraryAddresses,
+    signer?: Signer
+  ) {
+    super(
+      _abi,
+      NonfungibleTokenPositionDescriptor__factory.linkBytecode(
+        linkLibraryAddresses
+      ),
+      signer
+    );
+  }
+
+  static linkBytecode(
+    linkLibraryAddresses: NonfungibleTokenPositionDescriptorLibraryAddresses
+  ): string {
+    let linkedBytecode = _bytecode;
+
+    linkedBytecode = linkedBytecode.replace(
+      new RegExp("__\\$cea9be979eee3d87fb124d6cbb244bb0b5\\$__", "g"),
+      linkLibraryAddresses["__$cea9be979eee3d87fb124d6cbb244bb0b5$__"]
+        .replace(/^0x/, "")
+        .toLowerCase()
+    );
+
+    return linkedBytecode;
+  }
+
+  deploy(
+    _WETH9: string,
+    _nativeCurrencyLabelBytes: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<NonfungibleTokenPositionDescriptor> {
+    return super.deploy(
+      _WETH9,
+      _nativeCurrencyLabelBytes,
+      overrides || {}
+    ) as Promise<NonfungibleTokenPositionDescriptor>;
+  }
+  getDeployTransaction(
+    _WETH9: string,
+    _nativeCurrencyLabelBytes: BytesLike,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): TransactionRequest {
+    return super.getDeployTransaction(
+      _WETH9,
+      _nativeCurrencyLabelBytes,
+      overrides || {}
+    );
+  }
+  attach(address: string): NonfungibleTokenPositionDescriptor {
+    return super.attach(address) as NonfungibleTokenPositionDescriptor;
+  }
+  connect(signer: Signer): NonfungibleTokenPositionDescriptor__factory {
+    return super.connect(signer) as NonfungibleTokenPositionDescriptor__factory;
+  }
+  static readonly bytecode = _bytecode;
+  static readonly abi = _abi;
+  static createInterface(): NonfungibleTokenPositionDescriptorInterface {
+    return new utils.Interface(
+      _abi
+    ) as NonfungibleTokenPositionDescriptorInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): NonfungibleTokenPositionDescriptor {
+    return new Contract(
+      address,
+      _abi,
+      signerOrProvider
+    ) as NonfungibleTokenPositionDescriptor;
+  }
+}
+
+export interface NonfungibleTokenPositionDescriptorLibraryAddresses {
+  ["__$cea9be979eee3d87fb124d6cbb244bb0b5$__"]: string;
+}
diff --git a/lib/sor/types/v3/factories/PairFlash__factory.ts b/lib/sor/types/v3/factories/PairFlash__factory.ts
new file mode 100644
index 0000000..cf80fa6
--- /dev/null
+++ b/lib/sor/types/v3/factories/PairFlash__factory.ts
@@ -0,0 +1,248 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider, TransactionRequest } from "@ethersproject/providers";
+import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
+import type { PairFlash, PairFlashInterface } from "../PairFlash";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "contract ISwapRouter",
+        name: "_swapRouter",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "_factory",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "_WETH9",
+        type: "address",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "constructor",
+  },
+  {
+    inputs: [],
+    name: "WETH9",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factory",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "token0",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "token1",
+            type: "address",
+          },
+          {
+            internalType: "uint24",
+            name: "fee1",
+            type: "uint24",
+          },
+          {
+            internalType: "uint256",
+            name: "amount0",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount1",
+            type: "uint256",
+          },
+          {
+            internalType: "uint24",
+            name: "fee2",
+            type: "uint24",
+          },
+          {
+            internalType: "uint24",
+            name: "fee3",
+            type: "uint24",
+          },
+        ],
+        internalType: "struct PairFlash.FlashParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "initFlash",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "refundETH",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "swapRouter",
+    outputs: [
+      {
+        internalType: "contract ISwapRouter",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+    ],
+    name: "sweepToken",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "fee0",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "fee1",
+        type: "uint256",
+      },
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "uniswapV3FlashCallback",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+    ],
+    name: "unwrapWETH9",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    stateMutability: "payable",
+    type: "receive",
+  },
+];
+
+const _bytecode =
+  "0x60e06040523480156200001157600080fd5b5060405162001a9338038062001a9383398101604081905262000034916200005c565b6001600160601b0319606092831b811660805290821b811660a05291901b1660c052620000c8565b60008060006060848603121562000071578283fd5b83516200007e81620000af565b60208501519093506200009181620000af565b6040850151909250620000a481620000af565b809150509250925092565b6001600160a01b0381168114620000c557600080fd5b50565b60805160601c60a05160601c60c05160601c61195a6200013960003980610573528061074b528061077852806108c85280610976525080609c528061038b52806104b5528061054f52806110f0528061115052806111d1525080610267528061059752806106eb525061195a6000f3fe60806040526004361061007f5760003560e01c8063c31c9c071161004e578063c31c9c0714610195578063c45a0155146101aa578063df2ab5bb146101bf578063e9cbafb0146101d25761012a565b806312210e8a1461012f5780632384463b1461013757806349404b7c146101575780634aa4a4fc1461016a5761012a565b3661012a573373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461012857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742057455448390000000000000000000000000000000000000000000000604482015290519081900360640190fd5b005b600080fd5b6101286101f2565b34801561014357600080fd5b5061012861015236600461161f565b610204565b6101286101653660046116d2565b610387565b34801561017657600080fd5b5061017f61054d565b60405161018c9190611781565b60405180910390f35b3480156101a157600080fd5b5061017f610571565b3480156101b657600080fd5b5061017f610595565b6101286101cd3660046114e8565b6105b9565b3480156101de57600080fd5b506101286101ed3660046116fd565b6106d6565b4715610202576102023347610a73565b565b60006040518060600160405280836000015173ffffffffffffffffffffffffffffffffffffffff168152602001836020015173ffffffffffffffffffffffffffffffffffffffff168152602001836040015162ffffff168152509050600061028c7f000000000000000000000000000000000000000000000000000000000000000083610bc1565b90508073ffffffffffffffffffffffffffffffffffffffff1663490e6cbc30856060015186608001516040518060c0016040528089606001518152602001896080015181526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018960a0015162ffffff1681526020018960c0015162ffffff1681525060405160200161032291906118bb565b6040516020818303038152906040526040518563ffffffff1660e01b815260040161035094939291906117a2565b600060405180830381600087803b15801561036a57600080fd5b505af115801561037e573d6000803e3d6000fd5b50505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561041057600080fd5b505afa158015610424573d6000803e3d6000fd5b505050506040513d602081101561043a57600080fd5b50519050828110156104ad57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e742057455448390000000000000000000000000000604482015290519081900360640190fd5b8015610548577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561052657600080fd5b505af115801561053a573d6000803e3d6000fd5b505050506105488282610a73565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561062257600080fd5b505afa158015610636573d6000803e3d6000fd5b505050506040513d602081101561064c57600080fd5b50519050828110156106bf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e7420746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b80156106d0576106d0848383610cf7565b50505050565b60006106e482840184611523565b90506107147f00000000000000000000000000000000000000000000000000000000000000008260600151610ed3565b506060810151805160209091015182516000906107319089610f09565b90506000610743856020015189610f09565b9050610774837f00000000000000000000000000000000000000000000000000000000000000008760200151610f19565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf3896040518061010001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff168152602001896080015162ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815260200142815260200189602001518152602001868152602001600073ffffffffffffffffffffffffffffffffffffffff168152506040518263ffffffff1660e01b815260040161086e919061183f565b602060405180830381600087803b15801561088857600080fd5b505af115801561089c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c091906116ba565b90506108f1857f00000000000000000000000000000000000000000000000000000000000000008860000151610f19565b604080516101008101825273ffffffffffffffffffffffffffffffffffffffff8781168252868116602083015260a08981015162ffffff168385015230606084015242608084015289519083015260c08201859052600060e0830181905292517f414bf3890000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000009091169163414bf389916109ac919060040161183f565b602060405180830381600087803b1580156109c657600080fd5b505af11580156109da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fe91906116ba565b90508315610a1257610a12863033876110ee565b8215610a2457610a24853033866110ee565b83821115610a455760008483039050610a4387308a60400151846110ee565b505b82811115610a665760008382039050610a6486308a60400151846110ee565b505b5050505050505050505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b60208310610aea57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610aad565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610b4c576040519150601f19603f3d011682016040523d82523d6000602084013e610b51565b606091505b505090508061054857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f5354450000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1610610c0357600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251825160009485949389169392918291908083835b60208310610dcc57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610d8f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610e2e576040519150601f19603f3d011682016040523d82523d6000602084013e610e33565b606091505b5091509150818015610e61575080511580610e615750808060200190516020811015610e5e57600080fd5b50515b610ecc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f5354000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b5050505050565b6000610edf8383610bc1565b90503373ffffffffffffffffffffffffffffffffffffffff821614610f0357600080fd5b92915050565b80820182811015610f0357600080fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001781529251825160009485949389169392918291908083835b60208310610fee57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610fb1565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611050576040519150601f19603f3d011682016040523d82523d6000602084013e611055565b606091505b5091509150818015611083575080511580611083575080806020019051602081101561108057600080fd5b50515b610ecc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f5341000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480156111495750804710155b15611292577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156111b657600080fd5b505af11580156111ca573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561126057600080fd5b505af1158015611274573d6000803e3d6000fd5b505050506040513d602081101561128a57600080fd5b506106d09050565b73ffffffffffffffffffffffffffffffffffffffff83163014156112c0576112bb848383610cf7565b6106d0565b6106d0848484846040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000178152925182516000948594938a169392918291908083835b602083106113a457805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611367565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611406576040519150601f19603f3d011682016040523d82523d6000602084013e61140b565b606091505b5091509150818015611439575080511580611439575080806020019051602081101561143657600080fd5b50515b6114a457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f5354460000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b505050505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146114d057600080fd5b919050565b803562ffffff811681146114d057600080fd5b6000806000606084860312156114fc578283fd5b611505846114ac565b92506020840135915061151a604085016114ac565b90509250925092565b6000818303610100811215611536578182fd5b6040805160c0810167ffffffffffffffff828210818311171561155557fe5b81845286358352602087013560208401526115718488016114ac565b8484015260607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0860112156115a4578586fd5b8351945060608501915084821081831117156115bc57fe5b5082526115cb606086016114ac565b83526115d9608086016114ac565b60208401526115ea60a086016114d5565b8284015282606082015261160060c086016114d5565b608082015261161160e086016114d5565b60a082015295945050505050565b600060e08284031215611630578081fd5b60405160e0810181811067ffffffffffffffff8211171561164d57fe5b604052611659836114ac565b8152611667602084016114ac565b6020820152611678604084016114d5565b6040820152606083013560608201526080830135608082015261169d60a084016114d5565b60a08201526116ae60c084016114d5565b60c08201529392505050565b6000602082840312156116cb578081fd5b5051919050565b600080604083850312156116e4578182fd5b823591506116f4602084016114ac565b90509250929050565b60008060008060608587031215611712578081fd5b8435935060208501359250604085013567ffffffffffffffff80821115611737578283fd5b818701915087601f83011261174a578283fd5b813581811115611758578384fd5b886020828501011115611769578384fd5b95989497505060200194505050565b62ffffff169052565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8616825260208581840152846040840152608060608401528351806080850152825b818110156117f75785810183015185820160a0015282016117db565b81811115611808578360a083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160a0019695505050505050565b60006101008201905073ffffffffffffffffffffffffffffffffffffffff80845116835280602085015116602084015262ffffff60408501511660408401528060608501511660608401526080840151608084015260a084015160a084015260c084015160c08401528060e08501511660e08401525092915050565b6000610100820190508251825260208301516020830152604083015173ffffffffffffffffffffffffffffffffffffffff8082166040850152606085015191508082511660608501528060208301511660808501525062ffffff60408201511660a084015250608083015161193360c0840182611778565b5060a083015161194660e0840182611778565b509291505056fea164736f6c6343000706000a";
+
+export class PairFlash__factory extends ContractFactory {
+  constructor(signer?: Signer) {
+    super(_abi, _bytecode, signer);
+  }
+
+  deploy(
+    _swapRouter: string,
+    _factory: string,
+    _WETH9: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<PairFlash> {
+    return super.deploy(
+      _swapRouter,
+      _factory,
+      _WETH9,
+      overrides || {}
+    ) as Promise<PairFlash>;
+  }
+  getDeployTransaction(
+    _swapRouter: string,
+    _factory: string,
+    _WETH9: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): TransactionRequest {
+    return super.getDeployTransaction(
+      _swapRouter,
+      _factory,
+      _WETH9,
+      overrides || {}
+    );
+  }
+  attach(address: string): PairFlash {
+    return super.attach(address) as PairFlash;
+  }
+  connect(signer: Signer): PairFlash__factory {
+    return super.connect(signer) as PairFlash__factory;
+  }
+  static readonly bytecode = _bytecode;
+  static readonly abi = _abi;
+  static createInterface(): PairFlashInterface {
+    return new utils.Interface(_abi) as PairFlashInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): PairFlash {
+    return new Contract(address, _abi, signerOrProvider) as PairFlash;
+  }
+}
diff --git a/lib/sor/types/v3/factories/QuoterV2__factory.ts b/lib/sor/types/v3/factories/QuoterV2__factory.ts
new file mode 100644
index 0000000..12fd845
--- /dev/null
+++ b/lib/sor/types/v3/factories/QuoterV2__factory.ts
@@ -0,0 +1,316 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider, TransactionRequest } from "@ethersproject/providers";
+import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
+import type { QuoterV2, QuoterV2Interface } from "../QuoterV2";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "_factory",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "_WETH9",
+        type: "address",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "constructor",
+  },
+  {
+    inputs: [],
+    name: "WETH9",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factory",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    name: "quoteExactInput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160[]",
+        name: "sqrtPriceX96AfterList",
+        type: "uint160[]",
+      },
+      {
+        internalType: "uint32[]",
+        name: "initializedTicksCrossedList",
+        type: "uint32[]",
+      },
+      {
+        internalType: "uint256",
+        name: "gasEstimate",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "tokenIn",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "tokenOut",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amountIn",
+            type: "uint256",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "uint160",
+            name: "sqrtPriceLimitX96",
+            type: "uint160",
+          },
+        ],
+        internalType: "struct IQuoterV2.QuoteExactInputSingleParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "quoteExactInputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceX96After",
+        type: "uint160",
+      },
+      {
+        internalType: "uint32",
+        name: "initializedTicksCrossed",
+        type: "uint32",
+      },
+      {
+        internalType: "uint256",
+        name: "gasEstimate",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    name: "quoteExactOutput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160[]",
+        name: "sqrtPriceX96AfterList",
+        type: "uint160[]",
+      },
+      {
+        internalType: "uint32[]",
+        name: "initializedTicksCrossedList",
+        type: "uint32[]",
+      },
+      {
+        internalType: "uint256",
+        name: "gasEstimate",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "tokenIn",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "tokenOut",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "amount",
+            type: "uint256",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "uint160",
+            name: "sqrtPriceLimitX96",
+            type: "uint160",
+          },
+        ],
+        internalType: "struct IQuoterV2.QuoteExactOutputSingleParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "quoteExactOutputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceX96After",
+        type: "uint160",
+      },
+      {
+        internalType: "uint32",
+        name: "initializedTicksCrossed",
+        type: "uint32",
+      },
+      {
+        internalType: "uint256",
+        name: "gasEstimate",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "int256",
+        name: "amount0Delta",
+        type: "int256",
+      },
+      {
+        internalType: "int256",
+        name: "amount1Delta",
+        type: "int256",
+      },
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+    ],
+    name: "uniswapV3SwapCallback",
+    outputs: [],
+    stateMutability: "view",
+    type: "function",
+  },
+];
+
+const _bytecode =
+  "0x60c06040523480156200001157600080fd5b506040516200212c3803806200212c833981016040819052620000349162000070565b6001600160601b0319606092831b8116608052911b1660a052620000a7565b80516001600160a01b03811681146200006b57600080fd5b919050565b6000806040838503121562000083578182fd5b6200008e8362000053565b91506200009e6020840162000053565b90509250929050565b60805160601c60a05160601c612051620000db60003980610321525080610577528061095d5280610b9252506120516000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c45a01551161005b578063c45a0155146100e6578063c6a5026a146100ee578063cdca175314610101578063fa461e33146101145761007d565b80632f80bb1d146100825780634aa4a4fc146100ae578063bd21704a146100c3575b600080fd5b610095610090366004611b2b565b610129565b6040516100a59493929190611eac565b60405180910390f35b6100b661031f565b6040516100a59190611def565b6100d66100d1366004611c49565b610343565b6040516100a59493929190611f54565b6100b6610575565b6100d66100fc366004611c49565b610599565b61009561010f366004611b2b565b610754565b610127610122366004611b91565b61092c565b005b6000606080600061013986610ae8565b67ffffffffffffffff8111801561014f57600080fd5b50604051908082528060200260200182016040528015610179578160200160208202803683370190505b50925061018586610ae8565b67ffffffffffffffff8111801561019b57600080fd5b506040519080825280602002602001820160405280156101c5578160200160208202803683370190505b50915060005b60008060006101d98a610b17565b92509250925060008060008061025c6040518060a001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018f81526020018762ffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815250610343565b9350935093509350828b898151811061027157fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818a89815181106102b857fe5b63ffffffff90921660209283029190910190910152929b50968201966001909601958b926102e58e610b48565b156102fa576102f38e610b50565b9d5061030a565b8c9b505050505050505050610316565b505050505050506101cb565b92959194509250565b7f000000000000000000000000000000000000000000000000000000000000000081565b60208101518151606083015160009283928392839273ffffffffffffffffffffffffffffffffffffffff808216908416109284926103819290610b8b565b9050866080015173ffffffffffffffffffffffffffffffffffffffff16600014156103af5760408701516000555b60005a90508173ffffffffffffffffffffffffffffffffffffffff1663128acb0830856103df8c60400151610bc9565b6000038c6080015173ffffffffffffffffffffffffffffffffffffffff1660001461040e578c60800151610434565b8761042d5773fffd8963efd1fc6a506488495d951d5263988d25610434565b6401000276a45b8d602001518e606001518f6000015160405160200161045593929190611d89565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401610484959493929190611e10565b6040805180830381600087803b15801561049d57600080fd5b505af19250505080156104eb575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526104e891810190611b6e565b60015b610568573d808015610519576040519150601f19603f3d011682016040523d82523d6000602084013e61051e565b606091505b505a82039450886080015173ffffffffffffffffffffffffffffffffffffffff166000141561054c57600080555b610557818487610bfb565b97509750975097505050505061056e565b50505050505b9193509193565b7f000000000000000000000000000000000000000000000000000000000000000081565b60208101518151606083015160009283928392839273ffffffffffffffffffffffffffffffffffffffff808216908416109284926105d79290610b8b565b905060005a90508173ffffffffffffffffffffffffffffffffffffffff1663128acb0830856106098c60400151610bc9565b60808d015173ffffffffffffffffffffffffffffffffffffffff1615610633578c60800151610659565b876106525773fffd8963efd1fc6a506488495d951d5263988d25610659565b6401000276a45b8d600001518e606001518f6020015160405160200161067a93929190611d89565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016106a9959493929190611e10565b6040805180830381600087803b1580156106c257600080fd5b505af1925050508015610710575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261070d91810190611b6e565b60015b610568573d80801561073e576040519150601f19603f3d011682016040523d82523d6000602084013e610743565b606091505b505a82039450610557818487610bfb565b6000606080600061076486610ae8565b67ffffffffffffffff8111801561077a57600080fd5b506040519080825280602002602001820160405280156107a4578160200160208202803683370190505b5092506107b086610ae8565b67ffffffffffffffff811180156107c657600080fd5b506040519080825280602002602001820160405280156107f0578160200160208202803683370190505b50915060005b60008060006108048a610b17565b9250925092506000806000806108876040518060a001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018f81526020018762ffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815250610599565b9350935093509350828b898151811061089c57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818a89815181106108e357fe5b63ffffffff90921660209283029190910190910152929b50968201966001909601958b926109108e610b48565b156102fa5761091e8e610b50565b9d50505050505050506107f6565b600083138061093b5750600082135b61094457600080fd5b600080600061095284610b17565b9250925092506109847f0000000000000000000000000000000000000000000000000000000000000000848484610ccf565b5060008060008089136109ca578573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610888a6000036109ff565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161089896000035b9250925092506000610a12878787610b8b565b90506000808273ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610a5d57600080fd5b505afa158015610a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a959190611c6b565b5050505050915091508515610abb57604051848152826020820152816040820152606081fd5b60005415610ad1576000548414610ad157600080fd5b604051858152826020820152816040820152606081fd5b805160177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec909101045b919050565b60008080610b258482610cee565b9250610b32846014610dee565b9050610b3f846017610cee565b91509193909250565b516042111590565b8051606090610b859083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe901610ede565b92915050565b6000610bc17f0000000000000000000000000000000000000000000000000000000000000000610bbc8686866110c5565b611142565b949350505050565b60007f80000000000000000000000000000000000000000000000000000000000000008210610bf757600080fd5b5090565b6000806000806000808773ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610c4a57600080fd5b505afa158015610c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c829190611c6b565b50939650610c9794508d935061127892505050565b91975095509050610cbf73ffffffffffffffffffffffffffffffffffffffff89168383611339565b9350869250505093509350935093565b6000610ce585610ce08686866110c5565b611991565b95945050505050565b600081826014011015610d6257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b8160140183511015610dd557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b600081826003011015610e6257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b8160030183511015610ed557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f011015610f5257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015610fc357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b8183018451101561103557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b60608215801561105457604051915060008252602082016040526110bc565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561108d578051835260209283019201611075565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b6110cd6119fa565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115611105579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015262ffffff169181019190915290565b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161061118457600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b60008060008351606014611318576044845110156112cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c290611e75565b60405180910390fd5b600484019350838060200190518101906112e59190611bdf565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c29190611e62565b8380602001905181019061132c9190611d02565b9250925092509193909250565b60008060008060008060008060088b73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561138d57600080fd5b505afa1580156113a1573d6000803e3d6000fd5b505050506040513d60208110156113b757600080fd5b5051600290810b908c900b816113c957fe5b0560020b901d905060006101008c73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561141c57600080fd5b505afa158015611430573d6000803e3d6000fd5b505050506040513d602081101561144657600080fd5b5051600290810b908d900b8161145857fe5b0560020b8161146357fe5b079050600060088d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b057600080fd5b505afa1580156114c4573d6000803e3d6000fd5b505050506040513d60208110156114da57600080fd5b5051600290810b908d900b816114ec57fe5b0560020b901d905060006101008e73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561153f57600080fd5b505afa158015611553573d6000803e3d6000fd5b505050506040513d602081101561156957600080fd5b5051600290810b908e900b8161157b57fe5b0560020b8161158657fe5b07905060008160ff166001901b8f73ffffffffffffffffffffffffffffffffffffffff16635339c296856040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156115e757600080fd5b505afa1580156115fb573d6000803e3d6000fd5b505050506040513d602081101561161157600080fd5b5051161180156116a457508d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561166257600080fd5b505afa158015611676573d6000803e3d6000fd5b505050506040513d602081101561168c57600080fd5b5051600290810b908d900b8161169e57fe5b0760020b155b80156116b557508b60020b8d60020b135b945060008360ff166001901b8f73ffffffffffffffffffffffffffffffffffffffff16635339c296876040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b15801561171557600080fd5b505afa158015611729573d6000803e3d6000fd5b505050506040513d602081101561173f57600080fd5b5051161180156117d257508d73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561179057600080fd5b505afa1580156117a4573d6000803e3d6000fd5b505050506040513d60208110156117ba57600080fd5b5051600290810b908e900b816117cc57fe5b0760020b155b80156117e357508b60020b8d60020b125b95508160010b8460010b128061180f57508160010b8460010b14801561180f57508060ff168360ff1611155b1561182557839950829750819850809650611832565b8199508097508398508296505b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff87161b9150505b8560010b8760010b13611969578560010b8760010b14156118a3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff858103161c165b6000818c73ffffffffffffffffffffffffffffffffffffffff16635339c2968a6040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b1580156118fa57600080fd5b505afa15801561190e573d6000803e3d6000fd5b505050506040513d602081101561192457600080fd5b5051169050611932816119c1565b61ffff16989098019750506001909501947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61185e565b8115611976576001880397505b8215611983576001880397505b505050505050509392505050565b600061199d8383611142565b90503373ffffffffffffffffffffffffffffffffffffffff821614610b8557600080fd5b6000805b8215610b85577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301909216916001016119c5565b604080516060810182526000808252602082018190529181019190915290565b600082601f830112611a2a578081fd5b8135611a3d611a3882611faf565b611f8b565b818152846020838601011115611a51578283fd5b816020850160208301379081016020019190915292915050565b8051600281900b8114610b1257600080fd5b600060a08284031215611a8e578081fd5b60405160a0810181811067ffffffffffffffff82111715611aab57fe5b6040529050808235611abc8161201f565b81526020830135611acc8161201f565b602082015260408381013590820152606083013562ffffff81168114611af157600080fd5b6060820152611b0260808401611b0e565b60808201525092915050565b8035610b128161201f565b805161ffff81168114610b1257600080fd5b60008060408385031215611b3d578182fd5b823567ffffffffffffffff811115611b53578283fd5b611b5f85828601611a1a565b95602094909401359450505050565b60008060408385031215611b80578182fd5b505080516020909101519092909150565b600080600060608486031215611ba5578081fd5b8335925060208401359150604084013567ffffffffffffffff811115611bc9578182fd5b611bd586828701611a1a565b9150509250925092565b600060208284031215611bf0578081fd5b815167ffffffffffffffff811115611c06578182fd5b8201601f81018413611c16578182fd5b8051611c24611a3882611faf565b818152856020838501011115611c38578384fd5b610ce5826020830160208601611fef565b600060a08284031215611c5a578081fd5b611c648383611a7d565b9392505050565b600080600080600080600060e0888a031215611c85578283fd5b8751611c908161201f565b9650611c9e60208901611a6b565b9550611cac60408901611b19565b9450611cba60608901611b19565b9350611cc860808901611b19565b925060a088015160ff81168114611cdd578283fd5b60c08901519092508015158114611cf2578182fd5b8091505092959891949750929550565b600080600060608486031215611d16578081fd5b835192506020840151611d288161201f565b9150611d3660408501611a6b565b90509250925092565b60008151808452611d57816020860160208601611fef565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b606093841b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a06080830152611e5760a0830184611d3f565b979650505050505050565b600060208252611c646020830184611d3f565b60208082526010908201527f556e6578706563746564206572726f7200000000000000000000000000000000604082015260600190565b600060808201868352602060808185015281875180845260a0860191508289019350845b81811015611f0257845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101611ed0565b505084810360408601528651808252908201925081870190845b81811015611f3e57825163ffffffff1685529383019391830191600101611f1c565b5050505060609290920192909252949350505050565b93845273ffffffffffffffffffffffffffffffffffffffff92909216602084015263ffffffff166040830152606082015260800190565b60405181810167ffffffffffffffff81118282101715611fa757fe5b604052919050565b600067ffffffffffffffff821115611fc357fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b8381101561200a578181015183820152602001611ff2565b83811115612019576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461204157600080fd5b5056fea164736f6c6343000706000a";
+
+export class QuoterV2__factory extends ContractFactory {
+  constructor(signer?: Signer) {
+    super(_abi, _bytecode, signer);
+  }
+
+  deploy(
+    _factory: string,
+    _WETH9: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<QuoterV2> {
+    return super.deploy(_factory, _WETH9, overrides || {}) as Promise<QuoterV2>;
+  }
+  getDeployTransaction(
+    _factory: string,
+    _WETH9: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): TransactionRequest {
+    return super.getDeployTransaction(_factory, _WETH9, overrides || {});
+  }
+  attach(address: string): QuoterV2 {
+    return super.attach(address) as QuoterV2;
+  }
+  connect(signer: Signer): QuoterV2__factory {
+    return super.connect(signer) as QuoterV2__factory;
+  }
+  static readonly bytecode = _bytecode;
+  static readonly abi = _abi;
+  static createInterface(): QuoterV2Interface {
+    return new utils.Interface(_abi) as QuoterV2Interface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): QuoterV2 {
+    return new Contract(address, _abi, signerOrProvider) as QuoterV2;
+  }
+}
diff --git a/lib/sor/types/v3/factories/Quoter__factory.ts b/lib/sor/types/v3/factories/Quoter__factory.ts
new file mode 100644
index 0000000..0410454
--- /dev/null
+++ b/lib/sor/types/v3/factories/Quoter__factory.ts
@@ -0,0 +1,239 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider, TransactionRequest } from "@ethersproject/providers";
+import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
+import type { Quoter, QuoterInterface } from "../Quoter";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "_factory",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "_WETH9",
+        type: "address",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "constructor",
+  },
+  {
+    inputs: [],
+    name: "WETH9",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factory",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    name: "quoteExactInput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenIn",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenOut",
+        type: "address",
+      },
+      {
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceLimitX96",
+        type: "uint160",
+      },
+    ],
+    name: "quoteExactInputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    name: "quoteExactOutput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenIn",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenOut",
+        type: "address",
+      },
+      {
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceLimitX96",
+        type: "uint160",
+      },
+    ],
+    name: "quoteExactOutputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "int256",
+        name: "amount0Delta",
+        type: "int256",
+      },
+      {
+        internalType: "int256",
+        name: "amount1Delta",
+        type: "int256",
+      },
+      {
+        internalType: "bytes",
+        name: "path",
+        type: "bytes",
+      },
+    ],
+    name: "uniswapV3SwapCallback",
+    outputs: [],
+    stateMutability: "view",
+    type: "function",
+  },
+];
+
+const _bytecode =
+  "0x60c060405234801561001057600080fd5b506040516112e53803806112e583398101604081905261002f91610069565b6001600160601b0319606092831b8116608052911b1660a05261009b565b80516001600160a01b038116811461006457600080fd5b919050565b6000806040838503121561007b578182fd5b6100848361004d565b91506100926020840161004d565b90509250929050565b60805160601c60a05160601c6112176100ce60003980610342525080610366528061058652806106d552506112176000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c45a01551161005b578063c45a0155146100d3578063cdca1753146100db578063f7729d43146100ee578063fa461e33146101015761007d565b80632f80bb1d1461008257806330d07f21146100ab5780634aa4a4fc146100be575b600080fd5b610095610090366004610e9e565b610116565b6040516100a29190611148565b60405180910390f35b6100956100b9366004610e30565b61017b565b6100c6610340565b6040516100a29190611084565b6100c6610364565b6100956100e9366004610e9e565b610388565b6100956100fc366004610e30565b6103d6565b61011461010f366004610f04565b610555565b005b60005b600061012484610660565b9050600080600061013487610668565b92509250925061014882848389600061017b565b955083156101605761015987610699565b965061016c565b85945050505050610175565b50505050610119565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff808616878216109083166101a65760008490555b6101b18787876106ce565b73ffffffffffffffffffffffffffffffffffffffff1663128acb0830836101d78861070c565b60000373ffffffffffffffffffffffffffffffffffffffff8816156101fc5787610222565b8561021b5773fffd8963efd1fc6a506488495d951d5263988d25610222565b6401000276a45b8b8b8e6040516020016102379392919061101e565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016102669594939291906110a5565b6040805180830381600087803b15801561027f57600080fd5b505af19250505080156102cd575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526102ca91810190610ee1565b60015b610333573d8080156102fb576040519150601f19603f3d011682016040523d82523d6000602084013e610300565b606091505b5073ffffffffffffffffffffffffffffffffffffffff841661032157600080555b61032a8161073e565b92505050610337565b5050505b95945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005b600061039684610660565b905060008060006103a687610668565b9250925092506103ba8383838960006103d6565b95508315610160576103cb87610699565b96505050505061038b565b600073ffffffffffffffffffffffffffffffffffffffff808616908716106103ff8787876106ce565b73ffffffffffffffffffffffffffffffffffffffff1663128acb0830836104258861070c565b73ffffffffffffffffffffffffffffffffffffffff881615610447578761046d565b856104665773fffd8963efd1fc6a506488495d951d5263988d2561046d565b6401000276a45b8c8b8d6040516020016104829392919061101e565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016104b19594939291906110a5565b6040805180830381600087803b1580156104ca57600080fd5b505af1925050508015610518575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261051591810190610ee1565b60015b610333573d808015610546576040519150601f19603f3d011682016040523d82523d6000602084013e61054b565b606091505b5061032a8161073e565b60008313806105645750600082135b61056d57600080fd5b600080600061057b84610668565b9250925092506105ad7f00000000000000000000000000000000000000000000000000000000000000008484846107ef565b5060008060008089136105f3578573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610888a600003610628565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161089896000035b925092509250821561063f57604051818152602081fd5b6000541561065557600054811461065557600080fd5b604051828152602081fd5b516042111590565b600080806106768482610805565b9250610683846014610905565b9050610690846017610805565b91509193909250565b80516060906101759083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9016109f5565b60006107047f00000000000000000000000000000000000000000000000000000000000000006106ff868686610bdc565b610c59565b949350505050565b60007f8000000000000000000000000000000000000000000000000000000000000000821061073a57600080fd5b5090565b600081516020146107db5760448251101561078e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078590611111565b60405180910390fd5b600482019150818060200190518101906107a89190610f52565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078591906110f7565b818060200190518101906101759190610fbc565b600061033785610800868686610bdc565b610d8f565b60008182601401101561087957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b81601401835110156108ec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b60008182600301101561097957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b81600301835110156109ec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f011015610a6957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015610ada57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b81830184511015610b4c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b606082158015610b6b5760405191506000825260208201604052610bd3565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610ba4578051835260209283019201610b8c565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b610be4610dbf565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115610c1c579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015262ffffff169181019190915290565b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1610610c9b57600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b6000610d9b8383610c59565b90503373ffffffffffffffffffffffffffffffffffffffff82161461017557600080fd5b604080516060810182526000808252602082018190529181019190915290565b600082601f830112610def578081fd5b8135610e02610dfd82611175565b611151565b818152846020838601011115610e16578283fd5b816020850160208301379081016020019190915292915050565b600080600080600060a08688031215610e47578081fd5b8535610e52816111e5565b94506020860135610e62816111e5565b9350604086013562ffffff81168114610e79578182fd5b9250606086013591506080860135610e90816111e5565b809150509295509295909350565b60008060408385031215610eb0578182fd5b823567ffffffffffffffff811115610ec6578283fd5b610ed285828601610ddf565b95602094909401359450505050565b60008060408385031215610ef3578182fd5b505080516020909101519092909150565b600080600060608486031215610f18578283fd5b8335925060208401359150604084013567ffffffffffffffff811115610f3c578182fd5b610f4886828701610ddf565b9150509250925092565b600060208284031215610f63578081fd5b815167ffffffffffffffff811115610f79578182fd5b8201601f81018413610f89578182fd5b8051610f97610dfd82611175565b818152856020838501011115610fab578384fd5b6103378260208301602086016111b5565b600060208284031215610fcd578081fd5b5051919050565b60008151808452610fec8160208601602086016111b5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b606093841b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a060808301526110ec60a0830184610fd4565b979650505050505050565b60006020825261110a6020830184610fd4565b9392505050565b60208082526010908201527f556e6578706563746564206572726f7200000000000000000000000000000000604082015260600190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561116d57fe5b604052919050565b600067ffffffffffffffff82111561118957fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b838110156111d05781810151838201526020016111b8565b838111156111df576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461120757600080fd5b5056fea164736f6c6343000706000a";
+
+export class Quoter__factory extends ContractFactory {
+  constructor(signer?: Signer) {
+    super(_abi, _bytecode, signer);
+  }
+
+  deploy(
+    _factory: string,
+    _WETH9: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<Quoter> {
+    return super.deploy(_factory, _WETH9, overrides || {}) as Promise<Quoter>;
+  }
+  getDeployTransaction(
+    _factory: string,
+    _WETH9: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): TransactionRequest {
+    return super.getDeployTransaction(_factory, _WETH9, overrides || {});
+  }
+  attach(address: string): Quoter {
+    return super.attach(address) as Quoter;
+  }
+  connect(signer: Signer): Quoter__factory {
+    return super.connect(signer) as Quoter__factory;
+  }
+  static readonly bytecode = _bytecode;
+  static readonly abi = _abi;
+  static createInterface(): QuoterInterface {
+    return new utils.Interface(_abi) as QuoterInterface;
+  }
+  static connect(address: string, signerOrProvider: Signer | Provider): Quoter {
+    return new Contract(address, _abi, signerOrProvider) as Quoter;
+  }
+}
diff --git a/lib/sor/types/v3/factories/SwapRouter__factory.ts b/lib/sor/types/v3/factories/SwapRouter__factory.ts
new file mode 100644
index 0000000..21fa07a
--- /dev/null
+++ b/lib/sor/types/v3/factories/SwapRouter__factory.ts
@@ -0,0 +1,618 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider, TransactionRequest } from "@ethersproject/providers";
+import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
+import type { SwapRouter, SwapRouterInterface } from "../SwapRouter";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "_factory",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "_WETH9",
+        type: "address",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "constructor",
+  },
+  {
+    inputs: [],
+    name: "WETH9",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "bytes",
+            name: "path",
+            type: "bytes",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "deadline",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountIn",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountOutMinimum",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct ISwapRouter.ExactInputParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "exactInput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "tokenIn",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "tokenOut",
+            type: "address",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "deadline",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountIn",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountOutMinimum",
+            type: "uint256",
+          },
+          {
+            internalType: "uint160",
+            name: "sqrtPriceLimitX96",
+            type: "uint160",
+          },
+        ],
+        internalType: "struct ISwapRouter.ExactInputSingleParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "exactInputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountOut",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "bytes",
+            name: "path",
+            type: "bytes",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "deadline",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountOut",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountInMaximum",
+            type: "uint256",
+          },
+        ],
+        internalType: "struct ISwapRouter.ExactOutputParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "exactOutput",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "tokenIn",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "tokenOut",
+            type: "address",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "deadline",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountOut",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amountInMaximum",
+            type: "uint256",
+          },
+          {
+            internalType: "uint160",
+            name: "sqrtPriceLimitX96",
+            type: "uint160",
+          },
+        ],
+        internalType: "struct ISwapRouter.ExactOutputSingleParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "exactOutputSingle",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amountIn",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factory",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes[]",
+        name: "data",
+        type: "bytes[]",
+      },
+    ],
+    name: "multicall",
+    outputs: [
+      {
+        internalType: "bytes[]",
+        name: "results",
+        type: "bytes[]",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "refundETH",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermit",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "nonce",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "expiry",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermitAllowed",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "nonce",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "expiry",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermitAllowedIfNecessary",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermitIfNecessary",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+    ],
+    name: "sweepToken",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "feeBips",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "feeRecipient",
+        type: "address",
+      },
+    ],
+    name: "sweepTokenWithFee",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "int256",
+        name: "amount0Delta",
+        type: "int256",
+      },
+      {
+        internalType: "int256",
+        name: "amount1Delta",
+        type: "int256",
+      },
+      {
+        internalType: "bytes",
+        name: "_data",
+        type: "bytes",
+      },
+    ],
+    name: "uniswapV3SwapCallback",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+    ],
+    name: "unwrapWETH9",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "amountMinimum",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "feeBips",
+        type: "uint256",
+      },
+      {
+        internalType: "address",
+        name: "feeRecipient",
+        type: "address",
+      },
+    ],
+    name: "unwrapWETH9WithFee",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    stateMutability: "payable",
+    type: "receive",
+  },
+];
+
+const _bytecode =
+  "0x60c06040526000196000553480156200001757600080fd5b506040516200302f3803806200302f8339810160408190526200003a9162000076565b6001600160601b0319606092831b8116608052911b1660a052620000ad565b80516001600160a01b03811681146200007157600080fd5b919050565b6000806040838503121562000089578182fd5b620000948362000059565b9150620000a46020840162000059565b90509250929050565b60805160601c60a05160601c612f26620001096000398061012f528061058352806106ad5280610747528061078752806108b15280611c435280611ca35280611d24525080610dc6528061140c5280611e265250612f266000f3fe6080604052600436106101125760003560e01c8063c04b8d59116100a5578063df2ab5bb11610074578063f28c049811610059578063f28c0498146102f5578063f3995c6714610308578063fa461e331461031b576101bd565b8063df2ab5bb146102cf578063e0e189a0146102e2576101bd565b8063c04b8d5914610281578063c2e3140a14610294578063c45a0155146102a7578063db3e2198146102bc576101bd565b80634aa4a4fc116100e15780634aa4a4fc146102195780639b2c0a371461023b578063a4a78f0c1461024e578063ac9650d814610261576101bd565b806312210e8a146101c2578063414bf389146101ca5780634659a494146101f357806349404b7c14610206576101bd565b366101bd573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101bb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742057455448390000000000000000000000000000000000000000000000604482015290519081900360640190fd5b005b600080fd5b6101bb61033b565b6101dd6101d83660046129f8565b61034d565b6040516101ea9190612df1565b60405180910390f35b6101bb610201366004612776565b6104bf565b6101bb610214366004612aff565b61057f565b34801561022557600080fd5b5061022e610745565b6040516101ea9190612c37565b6101bb610249366004612b2e565b610769565b6101bb61025c366004612776565b610981565b61027461026f3660046127d6565b610a56565b6040516101ea9190612caa565b6101dd61028f36600461294d565b610bb0565b6101bb6102a2366004612776565b610d0f565b3480156102b357600080fd5b5061022e610dc4565b6101dd6102ca3660046129f8565b610de8565b6101bb6102dd3660046126d7565b610f78565b6101bb6102f0366004612718565b611095565b6101dd610303366004612a14565b6111fb565b6101bb610316366004612776565b61132f565b34801561032757600080fd5b506101bb610336366004612868565b6113c7565b471561034b5761034b334761150e565b565b600081608001358061035d61165c565b11156103ca57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b61047060a08401356103e260808601606087016126b4565b6103f3610100870160e088016126b4565b604080518082019091528061040b60208a018a6126b4565b61041b60608b0160408c01612adc565b61042b60408c0160208d016126b4565b60405160200161043d93929190612bc1565b60405160208183030381529060405281526020013373ffffffffffffffffffffffffffffffffffffffff16815250611660565b91508260c001358210156104b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090612d72565b60405180910390fd5b50919050565b604080517f8fcbaf0c00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101879052606481018690526001608482015260ff851660a482015260c4810184905260e48101839052905173ffffffffffffffffffffffffffffffffffffffff881691638fcbaf0c9161010480830192600092919082900301818387803b15801561055f57600080fd5b505af1158015610573573d6000803e3d6000fd5b50505050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561060857600080fd5b505afa15801561061c573d6000803e3d6000fd5b505050506040513d602081101561063257600080fd5b50519050828110156106a557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e742057455448390000000000000000000000000000604482015290519081900360640190fd5b8015610740577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561071e57600080fd5b505af1158015610732573d6000803e3d6000fd5b50505050610740828261150e565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008211801561077a575060648211155b61078357600080fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561080c57600080fd5b505afa158015610820573d6000803e3d6000fd5b505050506040513d602081101561083657600080fd5b50519050848110156108a957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e742057455448390000000000000000000000000000604482015290519081900360640190fd5b801561097a577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561092257600080fd5b505af1158015610936573d6000803e3d6000fd5b50505050600061271061095285846117e690919063ffffffff16565b8161095957fe5b049050801561096c5761096c838261150e565b6109788582840361150e565b505b5050505050565b604080517fdd62ed3e00000000000000000000000000000000000000000000000000000000815233600482015230602482015290517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9173ffffffffffffffffffffffffffffffffffffffff89169163dd62ed3e91604480820192602092909190829003018186803b158015610a1657600080fd5b505afa158015610a2a573d6000803e3d6000fd5b505050506040513d6020811015610a4057600080fd5b50511015610978576109788686868686866104bf565b60608167ffffffffffffffff81118015610a6f57600080fd5b50604051908082528060200260200182016040528015610aa357816020015b6060815260200190600190039081610a8e5790505b50905060005b82811015610ba95760008030868685818110610ac157fe5b9050602002810190610ad39190612dfa565b604051610ae1929190612c27565b600060405180830381855af49150503d8060008114610b1c576040519150601f19603f3d011682016040523d82523d6000602084013e610b21565b606091505b509150915081610b8757604481511015610b3a57600080fd5b60048101905080806020019051810190610b5491906128e3565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b09190612d28565b80848481518110610b9457fe5b60209081029190910101525050600101610aa9565b5092915050565b6000816040015180610bc061165c565b1115610c2d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b335b6000610c3e8560000151611810565b9050610c97856060015182610c57578660200151610c59565b305b60006040518060400160405280610c738b6000015161181c565b81526020018773ffffffffffffffffffffffffffffffffffffffff16815250611660565b60608601528015610cb7578451309250610cb09061182b565b8552610cc4565b8460600151935050610cca565b50610c2f565b8360800151831015610d08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090612d72565b5050919050565b604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523360048201523060248201529051869173ffffffffffffffffffffffffffffffffffffffff89169163dd62ed3e91604480820192602092909190829003018186803b158015610d8457600080fd5b505afa158015610d98573d6000803e3d6000fd5b505050506040513d6020811015610dae57600080fd5b505110156109785761097886868686868661132f565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000816080013580610df861165c565b1115610e6557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b610f0e60a0840135610e7d60808601606087016126b4565b610e8e610100870160e088016126b4565b6040518060400160405280886020016020810190610eac91906126b4565b610ebc60608b0160408c01612adc565b610ec960208c018c6126b4565b604051602001610edb93929190612bc1565b60405160208183030381529060405281526020013373ffffffffffffffffffffffffffffffffffffffff16815250611860565b91508260c00135821115610f4e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090612d3b565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600055919050565b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610fe157600080fd5b505afa158015610ff5573d6000803e3d6000fd5b505050506040513d602081101561100b57600080fd5b505190508281101561107e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e7420746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b801561108f5761108f848383611a1c565b50505050565b6000821180156110a6575060648211155b6110af57600080fd5b60008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561111857600080fd5b505afa15801561112c573d6000803e3d6000fd5b505050506040513d602081101561114257600080fd5b50519050848110156111b557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e73756666696369656e7420746f6b656e0000000000000000000000000000604482015290519081900360640190fd5b80156109785760006127106111ca83866117e6565b816111d157fe5b04905080156111e5576111e5878483611a1c565b6111f28786838503611a1c565b50505050505050565b600081604001358061120b61165c565b111561127857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b6112eb606084013561129060408601602087016126b4565b60408051808201909152600090806112a88980612dfa565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525033602090910152611860565b5060005491508260800135821115610f4e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090612d3b565b604080517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c48101839052905173ffffffffffffffffffffffffffffffffffffffff88169163d505accf9160e480830192600092919082900301818387803b15801561055f57600080fd5b60008413806113d65750600083135b6113df57600080fd5b60006113ed82840184612a4c565b905060008060006114018460000151611bf1565b9250925092506114337f0000000000000000000000000000000000000000000000000000000000000000848484611c22565b5060008060008a13611474578473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610896114a5565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16108a5b9150915081156114c4576114bf8587602001513384611c41565b610573565b85516114cf90611810565b156114f45785516114df9061182b565b86526114ee8133600089611860565b50610573565b806000819055508394506105738587602001513384611c41565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b6020831061158557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611548565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146115e7576040519150601f19603f3d011682016040523d82523d6000602084013e6115ec565b606091505b505090508061074057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f5354450000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b4290565b600073ffffffffffffffffffffffffffffffffffffffff8416611681573093505b60008060006116938560000151611bf1565b9194509250905073ffffffffffffffffffffffffffffffffffffffff808316908416106000806116c4868686611e1f565b73ffffffffffffffffffffffffffffffffffffffff1663128acb088b856116ea8f611e5d565b73ffffffffffffffffffffffffffffffffffffffff8e161561170c578d611732565b8761172b5773fffd8963efd1fc6a506488495d951d5263988d25611732565b6401000276a45b8d6040516020016117439190612da9565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401611772959493929190612c58565b6040805180830381600087803b15801561178b57600080fd5b505af115801561179f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c39190612845565b91509150826117d257816117d4565b805b6000039b9a5050505050505050505050565b6000821580611801575050818102818382816117fe57fe5b04145b61180a57600080fd5b92915050565b8051604211155b919050565b606061180a826000602b611e8f565b805160609061180a9083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe901611e8f565b600073ffffffffffffffffffffffffffffffffffffffff8416611881573093505b60008060006118938560000151611bf1565b9194509250905073ffffffffffffffffffffffffffffffffffffffff808416908316106000806118c4858786611e1f565b73ffffffffffffffffffffffffffffffffffffffff1663128acb088b856118ea8f611e5d565b60000373ffffffffffffffffffffffffffffffffffffffff8e161561190f578d611935565b8761192e5773fffd8963efd1fc6a506488495d951d5263988d25611935565b6401000276a45b8d6040516020016119469190612da9565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401611975959493929190612c58565b6040805180830381600087803b15801561198e57600080fd5b505af11580156119a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c69190612845565b915091506000836119db5781836000036119e1565b82826000035b909850905073ffffffffffffffffffffffffffffffffffffffff8a16611a0d578b8114611a0d57600080fd5b50505050505050949350505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251825160009485949389169392918291908083835b60208310611af157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611ab4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611b53576040519150601f19603f3d011682016040523d82523d6000602084013e611b58565b606091505b5091509150818015611b86575080511580611b865750808060200190516020811015611b8357600080fd5b50515b61097a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f5354000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008080611bff8482612076565b9250611c0c846014612176565b9050611c19846017612076565b91509193909250565b6000611c3885611c33868686612266565b6122e3565b95945050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148015611c9c5750804710155b15611de5577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611d0957600080fd5b505af1158015611d1d573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611db357600080fd5b505af1158015611dc7573d6000803e3d6000fd5b505050506040513d6020811015611ddd57600080fd5b5061108f9050565b73ffffffffffffffffffffffffffffffffffffffff8316301415611e1357611e0e848383611a1c565b61108f565b61108f84848484612313565b6000611e557f0000000000000000000000000000000000000000000000000000000000000000611e50868686612266565b6124f0565b949350505050565b60007f80000000000000000000000000000000000000000000000000000000000000008210611e8b57600080fd5b5090565b60608182601f011015611f0357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015611f7457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b81830184511015611fe657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b606082158015612005576040519150600082526020820160405261206d565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561203e578051835260209283019201612026565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b6000818260140110156120ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b816014018351101561215d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b6000818260030110156121ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b816003018351101561225d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b61226e612626565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1611156122a6579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015262ffffff169181019190915290565b60006122ef83836124f0565b90503373ffffffffffffffffffffffffffffffffffffffff82161461180a57600080fd5b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000178152925182516000948594938a169392918291908083835b602083106123f057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016123b3565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612452576040519150601f19603f3d011682016040523d82523d6000602084013e612457565b606091505b5091509150818015612485575080511580612485575080806020019051602081101561248257600080fd5b50515b61097857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f5354460000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161061253257600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b604080516060810182526000808252602082018190529181019190915290565b803561181781612ef4565b600082601f830112612661578081fd5b813561267461266f82612e88565b612e64565b818152846020838601011115612688578283fd5b816020850160208301379081016020019190915292915050565b600061010082840312156104b9578081fd5b6000602082840312156126c5578081fd5b81356126d081612ef4565b9392505050565b6000806000606084860312156126eb578182fd5b83356126f681612ef4565b925060208401359150604084013561270d81612ef4565b809150509250925092565b600080600080600060a0868803121561272f578081fd5b853561273a81612ef4565b945060208601359350604086013561275181612ef4565b925060608601359150608086013561276881612ef4565b809150509295509295909350565b60008060008060008060c0878903121561278e578081fd5b863561279981612ef4565b95506020870135945060408701359350606087013560ff811681146127bc578182fd5b9598949750929560808101359460a0909101359350915050565b600080602083850312156127e8578182fd5b823567ffffffffffffffff808211156127ff578384fd5b818501915085601f830112612812578384fd5b813581811115612820578485fd5b8660208083028501011115612833578485fd5b60209290920196919550909350505050565b60008060408385031215612857578182fd5b505080516020909101519092909150565b6000806000806060858703121561287d578182fd5b8435935060208501359250604085013567ffffffffffffffff808211156128a2578384fd5b818701915087601f8301126128b5578384fd5b8135818111156128c3578485fd5b8860208285010111156128d4578485fd5b95989497505060200194505050565b6000602082840312156128f4578081fd5b815167ffffffffffffffff81111561290a578182fd5b8201601f8101841361291a578182fd5b805161292861266f82612e88565b81815285602083850101111561293c578384fd5b611c38826020830160208601612ec8565b60006020828403121561295e578081fd5b813567ffffffffffffffff80821115612975578283fd5b9083019060a08286031215612988578283fd5b60405160a08101818110838211171561299d57fe5b6040528235828111156129ae578485fd5b6129ba87828601612651565b8252506129c960208401612646565b602082015260408301356040820152606083013560608201526080830135608082015280935050505092915050565b60006101008284031215612a0a578081fd5b6126d083836126a2565b600060208284031215612a25578081fd5b813567ffffffffffffffff811115612a3b578182fd5b820160a081850312156126d0578182fd5b600060208284031215612a5d578081fd5b813567ffffffffffffffff80821115612a74578283fd5b9083019060408286031215612a87578283fd5b604051604081018181108382111715612a9c57fe5b604052823582811115612aad578485fd5b612ab987828601612651565b82525060208301359250612acc83612ef4565b6020810192909252509392505050565b600060208284031215612aed578081fd5b813562ffffff811681146126d0578182fd5b60008060408385031215612b11578182fd5b823591506020830135612b2381612ef4565b809150509250929050565b60008060008060808587031215612b43578182fd5b843593506020850135612b5581612ef4565b9250604085013591506060850135612b6c81612ef4565b939692955090935050565b60008151808452612b8f816020860160208601612ec8565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b606093841b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b6000828483379101908152919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8088168352861515602084015285604084015280851660608401525060a06080830152612c9f60a0830184612b77565b979650505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015612d1b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452612d09858351612b77565b94509285019290850190600101612ccf565b5092979650505050505050565b6000602082526126d06020830184612b77565b60208082526012908201527f546f6f206d756368207265717565737465640000000000000000000000000000604082015260600190565b60208082526013908201527f546f6f206c6974746c6520726563656976656400000000000000000000000000604082015260600190565b600060208252825160406020840152612dc56060840182612b77565b905073ffffffffffffffffffffffffffffffffffffffff60208501511660408401528091505092915050565b90815260200190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612e2e578283fd5b83018035915067ffffffffffffffff821115612e48578283fd5b602001915036819003821315612e5d57600080fd5b9250929050565b60405181810167ffffffffffffffff81118282101715612e8057fe5b604052919050565b600067ffffffffffffffff821115612e9c57fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b83811015612ee3578181015183820152602001612ecb565b8381111561108f5750506000910152565b73ffffffffffffffffffffffffffffffffffffffff81168114612f1657600080fd5b5056fea164736f6c6343000706000a";
+
+export class SwapRouter__factory extends ContractFactory {
+  constructor(signer?: Signer) {
+    super(_abi, _bytecode, signer);
+  }
+
+  deploy(
+    _factory: string,
+    _WETH9: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<SwapRouter> {
+    return super.deploy(
+      _factory,
+      _WETH9,
+      overrides || {}
+    ) as Promise<SwapRouter>;
+  }
+  getDeployTransaction(
+    _factory: string,
+    _WETH9: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): TransactionRequest {
+    return super.getDeployTransaction(_factory, _WETH9, overrides || {});
+  }
+  attach(address: string): SwapRouter {
+    return super.attach(address) as SwapRouter;
+  }
+  connect(signer: Signer): SwapRouter__factory {
+    return super.connect(signer) as SwapRouter__factory;
+  }
+  static readonly bytecode = _bytecode;
+  static readonly abi = _abi;
+  static createInterface(): SwapRouterInterface {
+    return new utils.Interface(_abi) as SwapRouterInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): SwapRouter {
+    return new Contract(address, _abi, signerOrProvider) as SwapRouter;
+  }
+}
diff --git a/lib/sor/types/v3/factories/TickLens__factory.ts b/lib/sor/types/v3/factories/TickLens__factory.ts
new file mode 100644
index 0000000..0a339ca
--- /dev/null
+++ b/lib/sor/types/v3/factories/TickLens__factory.ts
@@ -0,0 +1,88 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider, TransactionRequest } from "@ethersproject/providers";
+import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
+import type { TickLens, TickLensInterface } from "../TickLens";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "pool",
+        type: "address",
+      },
+      {
+        internalType: "int16",
+        name: "tickBitmapIndex",
+        type: "int16",
+      },
+    ],
+    name: "getPopulatedTicksInWord",
+    outputs: [
+      {
+        components: [
+          {
+            internalType: "int24",
+            name: "tick",
+            type: "int24",
+          },
+          {
+            internalType: "int128",
+            name: "liquidityNet",
+            type: "int128",
+          },
+          {
+            internalType: "uint128",
+            name: "liquidityGross",
+            type: "uint128",
+          },
+        ],
+        internalType: "struct ITickLens.PopulatedTick[]",
+        name: "populatedTicks",
+        type: "tuple[]",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+];
+
+const _bytecode =
+  "0x608060405234801561001057600080fd5b50610569806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063351fb47814610030575b600080fd5b61004361003e36600461037c565b610059565b60405161005091906104aa565b60405180910390f35b606060008373ffffffffffffffffffffffffffffffffffffffff16635339c296846040518263ffffffff1660e01b8152600401610096919061051b565b60206040518083038186803b1580156100ae57600080fd5b505afa1580156100c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e69190610492565b90506000805b610100811015610110576001811b831615610108576001909101905b6001016100ec565b5060008573ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561015957600080fd5b505afa15801561016d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019191906103ba565b90508167ffffffffffffffff811180156101aa57600080fd5b506040519080825280602002602001820160405280156101e457816020015b6101d1610328565b8152602001906001900390816101c95790505b50935060005b61010081101561031e576001811b841615610316576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600187900b60020b60081b8201830290600090819073ffffffffffffffffffffffffffffffffffffffff8b169063f30dba9390610266908690600401610529565b6101006040518083038186803b15801561027f57600080fd5b505afa158015610293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b791906103e2565b5050505050509150915060405180606001604052808460020b815260200182600f0b8152602001836fffffffffffffffffffffffffffffffff168152508887600190039750878151811061030757fe5b60200260200101819052505050505b6001016101ea565b5050505092915050565b604080516060810182526000808252602082018190529181019190915290565b8051801515811461035857600080fd5b919050565b805161035881610537565b805163ffffffff8116811461035857600080fd5b6000806040838503121561038e578182fd5b823561039981610537565b91506020830135600181900b81146103af578182fd5b809150509250929050565b6000602082840312156103cb578081fd5b81518060020b81146103db578182fd5b9392505050565b600080600080600080600080610100898b0312156103fe578384fd5b88516fffffffffffffffffffffffffffffffff8116811461041d578485fd5b80985050602089015180600f0b8114610434578485fd5b80975050604089015195506060890151945060808901518060060b8114610459578485fd5b935061046760a08a0161035d565b925061047560c08a01610368565b915061048360e08a01610348565b90509295985092959890939650565b6000602082840312156104a3578081fd5b5051919050565b602080825282518282018190526000919060409081850190868401855b8281101561050e578151805160020b855286810151600f0b878601528501516fffffffffffffffffffffffffffffffff1685850152606090930192908501906001016104c7565b5091979650505050505050565b60019190910b815260200190565b60029190910b815260200190565b73ffffffffffffffffffffffffffffffffffffffff8116811461055957600080fd5b5056fea164736f6c6343000706000a";
+
+export class TickLens__factory extends ContractFactory {
+  constructor(signer?: Signer) {
+    super(_abi, _bytecode, signer);
+  }
+
+  deploy(
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<TickLens> {
+    return super.deploy(overrides || {}) as Promise<TickLens>;
+  }
+  getDeployTransaction(
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): TransactionRequest {
+    return super.getDeployTransaction(overrides || {});
+  }
+  attach(address: string): TickLens {
+    return super.attach(address) as TickLens;
+  }
+  connect(signer: Signer): TickLens__factory {
+    return super.connect(signer) as TickLens__factory;
+  }
+  static readonly bytecode = _bytecode;
+  static readonly abi = _abi;
+  static createInterface(): TickLensInterface {
+    return new utils.Interface(_abi) as TickLensInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): TickLens {
+    return new Contract(address, _abi, signerOrProvider) as TickLens;
+  }
+}
diff --git a/lib/sor/types/v3/factories/UniswapInterfaceMulticall__factory.ts b/lib/sor/types/v3/factories/UniswapInterfaceMulticall__factory.ts
new file mode 100644
index 0000000..eb064a5
--- /dev/null
+++ b/lib/sor/types/v3/factories/UniswapInterfaceMulticall__factory.ts
@@ -0,0 +1,144 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider, TransactionRequest } from "@ethersproject/providers";
+import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
+import type {
+  UniswapInterfaceMulticall,
+  UniswapInterfaceMulticallInterface,
+} from "../UniswapInterfaceMulticall";
+
+const _abi = [
+  {
+    inputs: [],
+    name: "getCurrentBlockTimestamp",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "timestamp",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "addr",
+        type: "address",
+      },
+    ],
+    name: "getEthBalance",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "balance",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "target",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "gasLimit",
+            type: "uint256",
+          },
+          {
+            internalType: "bytes",
+            name: "callData",
+            type: "bytes",
+          },
+        ],
+        internalType: "struct UniswapInterfaceMulticall.Call[]",
+        name: "calls",
+        type: "tuple[]",
+      },
+    ],
+    name: "multicall",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "blockNumber",
+        type: "uint256",
+      },
+      {
+        components: [
+          {
+            internalType: "bool",
+            name: "success",
+            type: "bool",
+          },
+          {
+            internalType: "uint256",
+            name: "gasUsed",
+            type: "uint256",
+          },
+          {
+            internalType: "bytes",
+            name: "returnData",
+            type: "bytes",
+          },
+        ],
+        internalType: "struct UniswapInterfaceMulticall.Result[]",
+        name: "returnData",
+        type: "tuple[]",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+const _bytecode =
+  "0x608060405234801561001057600080fd5b50610567806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630f28c97d146100465780631749e1e3146100645780634d2301cc14610085575b600080fd5b61004e610098565b60405161005b919061041f565b60405180910390f35b6100776100723660046102a7565b61009c565b60405161005b929190610428565b61004e610093366004610286565b610220565b4290565b8051439060609067ffffffffffffffff811180156100b957600080fd5b506040519080825280602002602001820160405280156100f357816020015b6100e061023a565b8152602001906001900390816100d85790505b50905060005b835181101561021a57600080600086848151811061011357fe5b60200260200101516000015187858151811061012b57fe5b60200260200101516020015188868151811061014357fe5b60200260200101516040015192509250925060005a90506000808573ffffffffffffffffffffffffffffffffffffffff1685856040516101839190610403565b60006040518083038160008787f1925050503d80600081146101c1576040519150601f19603f3d011682016040523d82523d6000602084013e6101c6565b606091505b509150915060005a8403905060405180606001604052808415158152602001828152602001838152508989815181106101fb57fe5b60200260200101819052505050505050505080806001019150506100f9565b50915091565b73ffffffffffffffffffffffffffffffffffffffff163190565b604051806060016040528060001515815260200160008152602001606081525090565b803573ffffffffffffffffffffffffffffffffffffffff8116811461028157600080fd5b919050565b600060208284031215610297578081fd5b6102a08261025d565b9392505050565b600060208083850312156102b9578182fd5b823567ffffffffffffffff808211156102d0578384fd5b818501915085601f8301126102e3578384fd5b8135818111156102ef57fe5b6102fc8485830201610506565b81815284810190848601875b848110156103f457813587017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0606081838f03011215610346578a8bfd5b60408051606081018181108b8211171561035c57fe5b8252610369848d0161025d565b8152818401358c82015260608401358a811115610384578d8efd5b8085019450508e603f850112610398578c8dfd5b8b8401358a8111156103a657fe5b6103b68d85601f84011601610506565b93508084528f838287010111156103cb578d8efd5b808386018e86013783018c018d9052908101919091528552509287019290870190600101610308565b50909998505050505050505050565b6000825161041581846020870161052a565b9190910192915050565b90815260200190565b600060408083018584526020828186015281865180845260609350838701915083838202880101838901875b838110156104f6578983037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa001855281518051151584528681015187850152880151888401889052805188850181905260806104b582828801858c0161052a565b96880196601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01694909401909301925090850190600101610454565b50909a9950505050505050505050565b60405181810167ffffffffffffffff8111828210171561052257fe5b604052919050565b60005b8381101561054557818101518382015260200161052d565b83811115610554576000848401525b5050505056fea164736f6c6343000706000a";
+
+export class UniswapInterfaceMulticall__factory extends ContractFactory {
+  constructor(signer?: Signer) {
+    super(_abi, _bytecode, signer);
+  }
+
+  deploy(
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<UniswapInterfaceMulticall> {
+    return super.deploy(overrides || {}) as Promise<UniswapInterfaceMulticall>;
+  }
+  getDeployTransaction(
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): TransactionRequest {
+    return super.getDeployTransaction(overrides || {});
+  }
+  attach(address: string): UniswapInterfaceMulticall {
+    return super.attach(address) as UniswapInterfaceMulticall;
+  }
+  connect(signer: Signer): UniswapInterfaceMulticall__factory {
+    return super.connect(signer) as UniswapInterfaceMulticall__factory;
+  }
+  static readonly bytecode = _bytecode;
+  static readonly abi = _abi;
+  static createInterface(): UniswapInterfaceMulticallInterface {
+    return new utils.Interface(_abi) as UniswapInterfaceMulticallInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): UniswapInterfaceMulticall {
+    return new Contract(
+      address,
+      _abi,
+      signerOrProvider
+    ) as UniswapInterfaceMulticall;
+  }
+}
diff --git a/lib/sor/types/v3/factories/UniswapV3Factory__factory.ts b/lib/sor/types/v3/factories/UniswapV3Factory__factory.ts
new file mode 100644
index 0000000..ac281b1
--- /dev/null
+++ b/lib/sor/types/v3/factories/UniswapV3Factory__factory.ts
@@ -0,0 +1,284 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider, TransactionRequest } from "@ethersproject/providers";
+import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
+import type {
+  UniswapV3Factory,
+  UniswapV3FactoryInterface,
+} from "../UniswapV3Factory";
+
+const _abi = [
+  {
+    inputs: [],
+    stateMutability: "nonpayable",
+    type: "constructor",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+      {
+        indexed: true,
+        internalType: "int24",
+        name: "tickSpacing",
+        type: "int24",
+      },
+    ],
+    name: "FeeAmountEnabled",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "oldOwner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "newOwner",
+        type: "address",
+      },
+    ],
+    name: "OwnerChanged",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "token0",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "token1",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+      {
+        indexed: false,
+        internalType: "int24",
+        name: "tickSpacing",
+        type: "int24",
+      },
+      {
+        indexed: false,
+        internalType: "address",
+        name: "pool",
+        type: "address",
+      },
+    ],
+    name: "PoolCreated",
+    type: "event",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "tokenA",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "tokenB",
+        type: "address",
+      },
+      {
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+    ],
+    name: "createPool",
+    outputs: [
+      {
+        internalType: "address",
+        name: "pool",
+        type: "address",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+      {
+        internalType: "int24",
+        name: "tickSpacing",
+        type: "int24",
+      },
+    ],
+    name: "enableFeeAmount",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint24",
+        name: "",
+        type: "uint24",
+      },
+    ],
+    name: "feeAmountTickSpacing",
+    outputs: [
+      {
+        internalType: "int24",
+        name: "",
+        type: "int24",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+      {
+        internalType: "uint24",
+        name: "",
+        type: "uint24",
+      },
+    ],
+    name: "getPool",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "owner",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "parameters",
+    outputs: [
+      {
+        internalType: "address",
+        name: "factory",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "token0",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "token1",
+        type: "address",
+      },
+      {
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+      {
+        internalType: "int24",
+        name: "tickSpacing",
+        type: "int24",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "_owner",
+        type: "address",
+      },
+    ],
+    name: "setOwner",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+];
+
+const _bytecode =
+  "";
+
+export class UniswapV3Factory__factory extends ContractFactory {
+  constructor(signer?: Signer) {
+    super(_abi, _bytecode, signer);
+  }
+
+  deploy(
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<UniswapV3Factory> {
+    return super.deploy(overrides || {}) as Promise<UniswapV3Factory>;
+  }
+  getDeployTransaction(
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): TransactionRequest {
+    return super.getDeployTransaction(overrides || {});
+  }
+  attach(address: string): UniswapV3Factory {
+    return super.attach(address) as UniswapV3Factory;
+  }
+  connect(signer: Signer): UniswapV3Factory__factory {
+    return super.connect(signer) as UniswapV3Factory__factory;
+  }
+  static readonly bytecode = _bytecode;
+  static readonly abi = _abi;
+  static createInterface(): UniswapV3FactoryInterface {
+    return new utils.Interface(_abi) as UniswapV3FactoryInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): UniswapV3Factory {
+    return new Contract(address, _abi, signerOrProvider) as UniswapV3Factory;
+  }
+}
diff --git a/lib/sor/types/v3/factories/UniswapV3Pool__factory.ts b/lib/sor/types/v3/factories/UniswapV3Pool__factory.ts
new file mode 100644
index 0000000..eba3017
--- /dev/null
+++ b/lib/sor/types/v3/factories/UniswapV3Pool__factory.ts
@@ -0,0 +1,1033 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider, TransactionRequest } from "@ethersproject/providers";
+import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
+import type { UniswapV3Pool, UniswapV3PoolInterface } from "../UniswapV3Pool";
+
+const _abi = [
+  {
+    inputs: [],
+    stateMutability: "nonpayable",
+    type: "constructor",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "int24",
+        name: "tickLower",
+        type: "int24",
+      },
+      {
+        indexed: true,
+        internalType: "int24",
+        name: "tickUpper",
+        type: "int24",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "amount",
+        type: "uint128",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    name: "Burn",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "int24",
+        name: "tickLower",
+        type: "int24",
+      },
+      {
+        indexed: true,
+        internalType: "int24",
+        name: "tickUpper",
+        type: "int24",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "amount0",
+        type: "uint128",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "amount1",
+        type: "uint128",
+      },
+    ],
+    name: "Collect",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "sender",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "amount0",
+        type: "uint128",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "amount1",
+        type: "uint128",
+      },
+    ],
+    name: "CollectProtocol",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "sender",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "paid0",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "paid1",
+        type: "uint256",
+      },
+    ],
+    name: "Flash",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: false,
+        internalType: "uint16",
+        name: "observationCardinalityNextOld",
+        type: "uint16",
+      },
+      {
+        indexed: false,
+        internalType: "uint16",
+        name: "observationCardinalityNextNew",
+        type: "uint16",
+      },
+    ],
+    name: "IncreaseObservationCardinalityNext",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: false,
+        internalType: "uint160",
+        name: "sqrtPriceX96",
+        type: "uint160",
+      },
+      {
+        indexed: false,
+        internalType: "int24",
+        name: "tick",
+        type: "int24",
+      },
+    ],
+    name: "Initialize",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: false,
+        internalType: "address",
+        name: "sender",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "owner",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "int24",
+        name: "tickLower",
+        type: "int24",
+      },
+      {
+        indexed: true,
+        internalType: "int24",
+        name: "tickUpper",
+        type: "int24",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "amount",
+        type: "uint128",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        indexed: false,
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    name: "Mint",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: false,
+        internalType: "uint8",
+        name: "feeProtocol0Old",
+        type: "uint8",
+      },
+      {
+        indexed: false,
+        internalType: "uint8",
+        name: "feeProtocol1Old",
+        type: "uint8",
+      },
+      {
+        indexed: false,
+        internalType: "uint8",
+        name: "feeProtocol0New",
+        type: "uint8",
+      },
+      {
+        indexed: false,
+        internalType: "uint8",
+        name: "feeProtocol1New",
+        type: "uint8",
+      },
+    ],
+    name: "SetFeeProtocol",
+    type: "event",
+  },
+  {
+    anonymous: false,
+    inputs: [
+      {
+        indexed: true,
+        internalType: "address",
+        name: "sender",
+        type: "address",
+      },
+      {
+        indexed: true,
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        indexed: false,
+        internalType: "int256",
+        name: "amount0",
+        type: "int256",
+      },
+      {
+        indexed: false,
+        internalType: "int256",
+        name: "amount1",
+        type: "int256",
+      },
+      {
+        indexed: false,
+        internalType: "uint160",
+        name: "sqrtPriceX96",
+        type: "uint160",
+      },
+      {
+        indexed: false,
+        internalType: "uint128",
+        name: "liquidity",
+        type: "uint128",
+      },
+      {
+        indexed: false,
+        internalType: "int24",
+        name: "tick",
+        type: "int24",
+      },
+    ],
+    name: "Swap",
+    type: "event",
+  },
+  {
+    inputs: [
+      {
+        internalType: "int24",
+        name: "tickLower",
+        type: "int24",
+      },
+      {
+        internalType: "int24",
+        name: "tickUpper",
+        type: "int24",
+      },
+      {
+        internalType: "uint128",
+        name: "amount",
+        type: "uint128",
+      },
+    ],
+    name: "burn",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "int24",
+        name: "tickLower",
+        type: "int24",
+      },
+      {
+        internalType: "int24",
+        name: "tickUpper",
+        type: "int24",
+      },
+      {
+        internalType: "uint128",
+        name: "amount0Requested",
+        type: "uint128",
+      },
+      {
+        internalType: "uint128",
+        name: "amount1Requested",
+        type: "uint128",
+      },
+    ],
+    name: "collect",
+    outputs: [
+      {
+        internalType: "uint128",
+        name: "amount0",
+        type: "uint128",
+      },
+      {
+        internalType: "uint128",
+        name: "amount1",
+        type: "uint128",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "uint128",
+        name: "amount0Requested",
+        type: "uint128",
+      },
+      {
+        internalType: "uint128",
+        name: "amount1Requested",
+        type: "uint128",
+      },
+    ],
+    name: "collectProtocol",
+    outputs: [
+      {
+        internalType: "uint128",
+        name: "amount0",
+        type: "uint128",
+      },
+      {
+        internalType: "uint128",
+        name: "amount1",
+        type: "uint128",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factory",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "fee",
+    outputs: [
+      {
+        internalType: "uint24",
+        name: "",
+        type: "uint24",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "feeGrowthGlobal0X128",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "feeGrowthGlobal1X128",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "flash",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint16",
+        name: "observationCardinalityNext",
+        type: "uint16",
+      },
+    ],
+    name: "increaseObservationCardinalityNext",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint160",
+        name: "sqrtPriceX96",
+        type: "uint160",
+      },
+    ],
+    name: "initialize",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "liquidity",
+    outputs: [
+      {
+        internalType: "uint128",
+        name: "",
+        type: "uint128",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "maxLiquidityPerTick",
+    outputs: [
+      {
+        internalType: "uint128",
+        name: "",
+        type: "uint128",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "int24",
+        name: "tickLower",
+        type: "int24",
+      },
+      {
+        internalType: "int24",
+        name: "tickUpper",
+        type: "int24",
+      },
+      {
+        internalType: "uint128",
+        name: "amount",
+        type: "uint128",
+      },
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "mint",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "amount0",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "amount1",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    name: "observations",
+    outputs: [
+      {
+        internalType: "uint32",
+        name: "blockTimestamp",
+        type: "uint32",
+      },
+      {
+        internalType: "int56",
+        name: "tickCumulative",
+        type: "int56",
+      },
+      {
+        internalType: "uint160",
+        name: "secondsPerLiquidityCumulativeX128",
+        type: "uint160",
+      },
+      {
+        internalType: "bool",
+        name: "initialized",
+        type: "bool",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint32[]",
+        name: "secondsAgos",
+        type: "uint32[]",
+      },
+    ],
+    name: "observe",
+    outputs: [
+      {
+        internalType: "int56[]",
+        name: "tickCumulatives",
+        type: "int56[]",
+      },
+      {
+        internalType: "uint160[]",
+        name: "secondsPerLiquidityCumulativeX128s",
+        type: "uint160[]",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes32",
+        name: "",
+        type: "bytes32",
+      },
+    ],
+    name: "positions",
+    outputs: [
+      {
+        internalType: "uint128",
+        name: "liquidity",
+        type: "uint128",
+      },
+      {
+        internalType: "uint256",
+        name: "feeGrowthInside0LastX128",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "feeGrowthInside1LastX128",
+        type: "uint256",
+      },
+      {
+        internalType: "uint128",
+        name: "tokensOwed0",
+        type: "uint128",
+      },
+      {
+        internalType: "uint128",
+        name: "tokensOwed1",
+        type: "uint128",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "protocolFees",
+    outputs: [
+      {
+        internalType: "uint128",
+        name: "token0",
+        type: "uint128",
+      },
+      {
+        internalType: "uint128",
+        name: "token1",
+        type: "uint128",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "uint8",
+        name: "feeProtocol0",
+        type: "uint8",
+      },
+      {
+        internalType: "uint8",
+        name: "feeProtocol1",
+        type: "uint8",
+      },
+    ],
+    name: "setFeeProtocol",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "slot0",
+    outputs: [
+      {
+        internalType: "uint160",
+        name: "sqrtPriceX96",
+        type: "uint160",
+      },
+      {
+        internalType: "int24",
+        name: "tick",
+        type: "int24",
+      },
+      {
+        internalType: "uint16",
+        name: "observationIndex",
+        type: "uint16",
+      },
+      {
+        internalType: "uint16",
+        name: "observationCardinality",
+        type: "uint16",
+      },
+      {
+        internalType: "uint16",
+        name: "observationCardinalityNext",
+        type: "uint16",
+      },
+      {
+        internalType: "uint8",
+        name: "feeProtocol",
+        type: "uint8",
+      },
+      {
+        internalType: "bool",
+        name: "unlocked",
+        type: "bool",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "int24",
+        name: "tickLower",
+        type: "int24",
+      },
+      {
+        internalType: "int24",
+        name: "tickUpper",
+        type: "int24",
+      },
+    ],
+    name: "snapshotCumulativesInside",
+    outputs: [
+      {
+        internalType: "int56",
+        name: "tickCumulativeInside",
+        type: "int56",
+      },
+      {
+        internalType: "uint160",
+        name: "secondsPerLiquidityInsideX128",
+        type: "uint160",
+      },
+      {
+        internalType: "uint32",
+        name: "secondsInside",
+        type: "uint32",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "recipient",
+        type: "address",
+      },
+      {
+        internalType: "bool",
+        name: "zeroForOne",
+        type: "bool",
+      },
+      {
+        internalType: "int256",
+        name: "amountSpecified",
+        type: "int256",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceLimitX96",
+        type: "uint160",
+      },
+      {
+        internalType: "bytes",
+        name: "data",
+        type: "bytes",
+      },
+    ],
+    name: "swap",
+    outputs: [
+      {
+        internalType: "int256",
+        name: "amount0",
+        type: "int256",
+      },
+      {
+        internalType: "int256",
+        name: "amount1",
+        type: "int256",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "int16",
+        name: "",
+        type: "int16",
+      },
+    ],
+    name: "tickBitmap",
+    outputs: [
+      {
+        internalType: "uint256",
+        name: "",
+        type: "uint256",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "tickSpacing",
+    outputs: [
+      {
+        internalType: "int24",
+        name: "",
+        type: "int24",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "int24",
+        name: "",
+        type: "int24",
+      },
+    ],
+    name: "ticks",
+    outputs: [
+      {
+        internalType: "uint128",
+        name: "liquidityGross",
+        type: "uint128",
+      },
+      {
+        internalType: "int128",
+        name: "liquidityNet",
+        type: "int128",
+      },
+      {
+        internalType: "uint256",
+        name: "feeGrowthOutside0X128",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "feeGrowthOutside1X128",
+        type: "uint256",
+      },
+      {
+        internalType: "int56",
+        name: "tickCumulativeOutside",
+        type: "int56",
+      },
+      {
+        internalType: "uint160",
+        name: "secondsPerLiquidityOutsideX128",
+        type: "uint160",
+      },
+      {
+        internalType: "uint32",
+        name: "secondsOutside",
+        type: "uint32",
+      },
+      {
+        internalType: "bool",
+        name: "initialized",
+        type: "bool",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "token0",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "token1",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+];
+
+const _bytecode =
+  "";
+
+export class UniswapV3Pool__factory extends ContractFactory {
+  constructor(signer?: Signer) {
+    super(_abi, _bytecode, signer);
+  }
+
+  deploy(
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<UniswapV3Pool> {
+    return super.deploy(overrides || {}) as Promise<UniswapV3Pool>;
+  }
+  getDeployTransaction(
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): TransactionRequest {
+    return super.getDeployTransaction(overrides || {});
+  }
+  attach(address: string): UniswapV3Pool {
+    return super.attach(address) as UniswapV3Pool;
+  }
+  connect(signer: Signer): UniswapV3Pool__factory {
+    return super.connect(signer) as UniswapV3Pool__factory;
+  }
+  static readonly bytecode = _bytecode;
+  static readonly abi = _abi;
+  static createInterface(): UniswapV3PoolInterface {
+    return new utils.Interface(_abi) as UniswapV3PoolInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): UniswapV3Pool {
+    return new Contract(address, _abi, signerOrProvider) as UniswapV3Pool;
+  }
+}
diff --git a/lib/sor/types/v3/factories/V3Migrator__factory.ts b/lib/sor/types/v3/factories/V3Migrator__factory.ts
new file mode 100644
index 0000000..44d21c4
--- /dev/null
+++ b/lib/sor/types/v3/factories/V3Migrator__factory.ts
@@ -0,0 +1,412 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+
+import { Provider, TransactionRequest } from "@ethersproject/providers";
+import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
+import type { V3Migrator, V3MigratorInterface } from "../V3Migrator";
+
+const _abi = [
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "_factory",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "_WETH9",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "_nonfungiblePositionManager",
+        type: "address",
+      },
+    ],
+    stateMutability: "nonpayable",
+    type: "constructor",
+  },
+  {
+    inputs: [],
+    name: "WETH9",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token0",
+        type: "address",
+      },
+      {
+        internalType: "address",
+        name: "token1",
+        type: "address",
+      },
+      {
+        internalType: "uint24",
+        name: "fee",
+        type: "uint24",
+      },
+      {
+        internalType: "uint160",
+        name: "sqrtPriceX96",
+        type: "uint160",
+      },
+    ],
+    name: "createAndInitializePoolIfNecessary",
+    outputs: [
+      {
+        internalType: "address",
+        name: "pool",
+        type: "address",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "factory",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        components: [
+          {
+            internalType: "address",
+            name: "pair",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "liquidityToMigrate",
+            type: "uint256",
+          },
+          {
+            internalType: "uint8",
+            name: "percentageToMigrate",
+            type: "uint8",
+          },
+          {
+            internalType: "address",
+            name: "token0",
+            type: "address",
+          },
+          {
+            internalType: "address",
+            name: "token1",
+            type: "address",
+          },
+          {
+            internalType: "uint24",
+            name: "fee",
+            type: "uint24",
+          },
+          {
+            internalType: "int24",
+            name: "tickLower",
+            type: "int24",
+          },
+          {
+            internalType: "int24",
+            name: "tickUpper",
+            type: "int24",
+          },
+          {
+            internalType: "uint256",
+            name: "amount0Min",
+            type: "uint256",
+          },
+          {
+            internalType: "uint256",
+            name: "amount1Min",
+            type: "uint256",
+          },
+          {
+            internalType: "address",
+            name: "recipient",
+            type: "address",
+          },
+          {
+            internalType: "uint256",
+            name: "deadline",
+            type: "uint256",
+          },
+          {
+            internalType: "bool",
+            name: "refundAsETH",
+            type: "bool",
+          },
+        ],
+        internalType: "struct IV3Migrator.MigrateParams",
+        name: "params",
+        type: "tuple",
+      },
+    ],
+    name: "migrate",
+    outputs: [],
+    stateMutability: "nonpayable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "bytes[]",
+        name: "data",
+        type: "bytes[]",
+      },
+    ],
+    name: "multicall",
+    outputs: [
+      {
+        internalType: "bytes[]",
+        name: "results",
+        type: "bytes[]",
+      },
+    ],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [],
+    name: "nonfungiblePositionManager",
+    outputs: [
+      {
+        internalType: "address",
+        name: "",
+        type: "address",
+      },
+    ],
+    stateMutability: "view",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermit",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "nonce",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "expiry",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermitAllowed",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "nonce",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "expiry",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermitAllowedIfNecessary",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    inputs: [
+      {
+        internalType: "address",
+        name: "token",
+        type: "address",
+      },
+      {
+        internalType: "uint256",
+        name: "value",
+        type: "uint256",
+      },
+      {
+        internalType: "uint256",
+        name: "deadline",
+        type: "uint256",
+      },
+      {
+        internalType: "uint8",
+        name: "v",
+        type: "uint8",
+      },
+      {
+        internalType: "bytes32",
+        name: "r",
+        type: "bytes32",
+      },
+      {
+        internalType: "bytes32",
+        name: "s",
+        type: "bytes32",
+      },
+    ],
+    name: "selfPermitIfNecessary",
+    outputs: [],
+    stateMutability: "payable",
+    type: "function",
+  },
+  {
+    stateMutability: "payable",
+    type: "receive",
+  },
+];
+
+const _bytecode =
+  "0x60e06040523480156200001157600080fd5b5060405162001f4238038062001f42833981016040819052620000349162000079565b6001600160601b0319606093841b811660805291831b821660a05290911b1660c052620000c2565b80516001600160a01b03811681146200007457600080fd5b919050565b6000806000606084860312156200008e578283fd5b62000099846200005c565b9250620000a9602085016200005c565b9150620000b9604085016200005c565b90509250925092565b60805160601c60a05160601c60c05160601c611e146200012e6000398061090d5280610c4c5280610c865280610cb05280610e8d52508060d252806106b25280610ee65280610f70528061105852806110e2525080610269528061036452806109e65250611e146000f3fe6080604052600436106100b55760003560e01c8063b44a272211610069578063c45a01551161004e578063c45a0155146101e5578063d44f2bf2146101fa578063f3995c671461021a57610134565b8063b44a2722146101bd578063c2e3140a146101d257610134565b80634aa4a4fc1161009a5780634aa4a4fc14610175578063a4a78f0c1461018a578063ac9650d81461019d57610134565b806313ead562146101395780634659a4941461016257610134565b36610134573373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610132576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012990611c15565b60405180910390fd5b005b600080fd5b61014c610147366004611788565b61022d565b6040516101599190611afb565b60405180910390f35b6101326101703660046117e1565b6105f0565b34801561018157600080fd5b5061014c6106b0565b6101326101983660046117e1565b6106d4565b6101b06101ab36600461183a565b6107b1565b6040516101599190611b4d565b3480156101c957600080fd5b5061014c61090b565b6101326101e03660046117e1565b61092f565b3480156101f157600080fd5b5061014c6109e4565b34801561020657600080fd5b506101326102153660046119b7565b610a08565b6101326102283660046117e1565b611176565b60008373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161061026757600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631698ee828686866040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018262ffffff168152602001935050505060206040518083038186803b15801561031957600080fd5b505afa15801561032d573d6000803e3d6000fd5b505050506040513d602081101561034357600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff81166104d3577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a16712958686866040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018262ffffff1681526020019350505050602060405180830381600087803b15801561041657600080fd5b505af115801561042a573d6000803e3d6000fd5b505050506040513d602081101561044057600080fd5b5051604080517ff637731d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015291519293509083169163f637731d9160248082019260009290919082900301818387803b1580156104b657600080fd5b505af11580156104ca573d6000803e3d6000fd5b505050506105e8565b60008173ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561051b57600080fd5b505afa15801561052f573d6000803e3d6000fd5b505050506040513d60e081101561054557600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff81166105e6578173ffffffffffffffffffffffffffffffffffffffff1663f637731d846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156105cd57600080fd5b505af11580156105e1573d6000803e3d6000fd5b505050505b505b949350505050565b604080517f8fcbaf0c00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101879052606481018690526001608482015260ff851660a482015260c4810184905260e48101839052905173ffffffffffffffffffffffffffffffffffffffff881691638fcbaf0c9161010480830192600092919082900301818387803b15801561069057600080fd5b505af11580156106a4573d6000803e3d6000fd5b50505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b604080517fdd62ed3e00000000000000000000000000000000000000000000000000000000815233600482015230602482015290517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9173ffffffffffffffffffffffffffffffffffffffff89169163dd62ed3e91604480820192602092909190829003018186803b15801561076957600080fd5b505afa15801561077d573d6000803e3d6000fd5b505050506040513d602081101561079357600080fd5b505110156107a9576107a98686868686866105f0565b505050505050565b60608167ffffffffffffffff811180156107ca57600080fd5b506040519080825280602002602001820160405280156107fe57816020015b60608152602001906001900390816107e95790505b50905060005b82811015610904576000803086868581811061081c57fe5b905060200281019061082e9190611d3a565b60405161083c929190611aeb565b600060405180830381855af49150503d8060008114610877576040519150601f19603f3d011682016040523d82523d6000602084013e61087c565b606091505b5091509150816108e25760448151101561089557600080fd5b600481019050808060200190518101906108af9190611902565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101299190611bcb565b808484815181106108ef57fe5b60209081029190910101525050600101610804565b5092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523360048201523060248201529051869173ffffffffffffffffffffffffffffffffffffffff89169163dd62ed3e91604480820192602092909190829003018186803b1580156109a457600080fd5b505afa1580156109b8573d6000803e3d6000fd5b505050506040513d60208110156109ce57600080fd5b505110156107a9576107a9868686868686611176565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610a1a6060830160408401611a5d565b60ff1611610a54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012990611bde565b6064610a666060830160408401611a5d565b60ff161115610aa1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012990611c4c565b610aae6020820182611765565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd33610ad76020850185611765565b84602001356040518463ffffffff1660e01b8152600401610afa93929190611b1c565b602060405180830381600087803b158015610b1457600080fd5b505af1158015610b28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4c91906118c5565b50600080610b5d6020840184611765565b73ffffffffffffffffffffffffffffffffffffffff166389afcb44306040518263ffffffff1660e01b8152600401610b959190611afb565b6040805180830381600087803b158015610bae57600080fd5b505af1158015610bc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be69190611a3a565b909250905060006064610c0c610c026060870160408801611a5d565b859060ff1661120e565b81610c1357fe5b04905060006064610c2d610c026060880160408901611a5d565b81610c3457fe5b049050610c71610c4a6080870160608801611765565b7f000000000000000000000000000000000000000000000000000000000000000084611238565b610cab610c8460a0870160808801611765565b7f000000000000000000000000000000000000000000000000000000000000000083611238565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663883164566040518061016001604052808a6060016020810190610d099190611765565b73ffffffffffffffffffffffffffffffffffffffff168152602001610d3460a08c0160808d01611765565b73ffffffffffffffffffffffffffffffffffffffff168152602001610d5f60c08c0160a08d016119cf565b62ffffff168152602001610d7960e08c0160c08d016118e1565b60020b8152602001610d926101008c0160e08d016118e1565b60020b815260208101889052604081018790526101008b013560608201526101208b0135608082015260a001610dd06101608c016101408d01611765565b73ffffffffffffffffffffffffffffffffffffffff1681526020018a61016001358152506040518263ffffffff1660e01b8152600401610e109190611c83565b608060405180830381600087803b158015610e2a57600080fd5b505af1158015610e3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6291906119e9565b935093505050858210156110025783821015610eb357610eb3610e8b6080890160608a01611765565b7f00000000000000000000000000000000000000000000000000000000000000006000611238565b818603610ec86101a089016101808a016118a9565b8015610f2e575073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016610f1660808a0160608b01611765565b73ffffffffffffffffffffffffffffffffffffffff16145b15610fe6576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90610fa5908490600401611d31565b600060405180830381600087803b158015610fbf57600080fd5b505af1158015610fd3573d6000803e3d6000fd5b50505050610fe13382611414565b611000565b611000610ff960808a0160608b01611765565b3383611567565b505b8481101561116d578281101561102557611025610e8b60a0890160808a01611765565b80850361103a6101a089016101808a016118a9565b80156110a0575073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001661108860a08a0160808b01611765565b73ffffffffffffffffffffffffffffffffffffffff16145b15611158576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90611117908490600401611d31565b600060405180830381600087803b15801561113157600080fd5b505af1158015611145573d6000803e3d6000fd5b505050506111533382611414565b61116b565b61116b610ff960a08a0160808b01611765565b505b50505050505050565b604080517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c48101839052905173ffffffffffffffffffffffffffffffffffffffff88169163d505accf9160e480830192600092919082900301818387803b15801561069057600080fd5b60008215806112295750508181028183828161122657fe5b04145b61123257600080fd5b92915050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001781529251825160009485949389169392918291908083835b6020831061130d57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016112d0565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461136f576040519150601f19603f3d011682016040523d82523d6000602084013e611374565b606091505b50915091508180156113a25750805115806113a2575080806020019051602081101561139f57600080fd5b50515b61140d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f5341000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b5050505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b6020831061148b57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161144e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146114ed576040519150601f19603f3d011682016040523d82523d6000602084013e6114f2565b606091505b505090508061156257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f5354450000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251825160009485949389169392918291908083835b6020831061163c57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016115ff565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461169e576040519150601f19603f3d011682016040523d82523d6000602084013e6116a3565b606091505b50915091508180156116d15750805115806116d157508080602001905160208110156116ce57600080fd5b50515b61140d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f5354000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b803562ffffff8116811461174f57600080fd5b919050565b803560ff8116811461174f57600080fd5b600060208284031215611776578081fd5b813561178181611dd4565b9392505050565b6000806000806080858703121561179d578283fd5b84356117a881611dd4565b935060208501356117b881611dd4565b92506117c66040860161173c565b915060608501356117d681611dd4565b939692955090935050565b60008060008060008060c087890312156117f9578182fd5b863561180481611dd4565b9550602087013594506040870135935061182060608801611754565b92506080870135915060a087013590509295509295509295565b6000806020838503121561184c578182fd5b823567ffffffffffffffff80821115611863578384fd5b818501915085601f830112611876578384fd5b813581811115611884578485fd5b8660208083028501011115611897578485fd5b60209290920196919550909350505050565b6000602082840312156118ba578081fd5b813561178181611df9565b6000602082840312156118d6578081fd5b815161178181611df9565b6000602082840312156118f2578081fd5b81358060020b8114611781578182fd5b600060208284031215611913578081fd5b815167ffffffffffffffff8082111561192a578283fd5b818401915084601f83011261193d578283fd5b81518181111561194957fe5b60405160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116820101818110848211171561198557fe5b60405281815283820160200187101561199c578485fd5b6119ad826020830160208701611da4565b9695505050505050565b60006101a082840312156119c9578081fd5b50919050565b6000602082840312156119e0578081fd5b6117818261173c565b600080600080608085870312156119fe578384fd5b8451935060208501516fffffffffffffffffffffffffffffffff81168114611a24578384fd5b6040860151606090960151949790965092505050565b60008060408385031215611a4c578182fd5b505080516020909101519092909150565b600060208284031215611a6e578081fd5b61178182611754565b73ffffffffffffffffffffffffffffffffffffffff169052565b60008151808452611aa9816020860160208601611da4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60020b9052565b62ffffff169052565b6000828483379101908152919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015611bbe577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611bac858351611a91565b94509285019290850190600101611b72565b5092979650505050505050565b6000602082526117816020830184611a91565b60208082526014908201527f50657263656e7461676520746f6f20736d616c6c000000000000000000000000604082015260600190565b60208082526009908201527f4e6f742057455448390000000000000000000000000000000000000000000000604082015260600190565b60208082526014908201527f50657263656e7461676520746f6f206c61726765000000000000000000000000604082015260600190565b600061016082019050611c97828451611a77565b6020830151611ca96020840182611a77565b506040830151611cbc6040840182611ae2565b506060830151611ccf6060840182611adb565b506080830151611ce26080840182611adb565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151611d2082850182611a77565b505061014092830151919092015290565b90815260200190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611d6e578283fd5b83018035915067ffffffffffffffff821115611d88578283fd5b602001915036819003821315611d9d57600080fd5b9250929050565b60005b83811015611dbf578181015183820152602001611da7565b83811115611dce576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff81168114611df657600080fd5b50565b8015158114611df657600080fdfea164736f6c6343000706000a";
+
+export class V3Migrator__factory extends ContractFactory {
+  constructor(signer?: Signer) {
+    super(_abi, _bytecode, signer);
+  }
+
+  deploy(
+    _factory: string,
+    _WETH9: string,
+    _nonfungiblePositionManager: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): Promise<V3Migrator> {
+    return super.deploy(
+      _factory,
+      _WETH9,
+      _nonfungiblePositionManager,
+      overrides || {}
+    ) as Promise<V3Migrator>;
+  }
+  getDeployTransaction(
+    _factory: string,
+    _WETH9: string,
+    _nonfungiblePositionManager: string,
+    overrides?: Overrides & { from?: string | Promise<string> }
+  ): TransactionRequest {
+    return super.getDeployTransaction(
+      _factory,
+      _WETH9,
+      _nonfungiblePositionManager,
+      overrides || {}
+    );
+  }
+  attach(address: string): V3Migrator {
+    return super.attach(address) as V3Migrator;
+  }
+  connect(signer: Signer): V3Migrator__factory {
+    return super.connect(signer) as V3Migrator__factory;
+  }
+  static readonly bytecode = _bytecode;
+  static readonly abi = _abi;
+  static createInterface(): V3MigratorInterface {
+    return new utils.Interface(_abi) as V3MigratorInterface;
+  }
+  static connect(
+    address: string,
+    signerOrProvider: Signer | Provider
+  ): V3Migrator {
+    return new Contract(address, _abi, signerOrProvider) as V3Migrator;
+  }
+}
diff --git a/lib/sor/types/v3/index.ts b/lib/sor/types/v3/index.ts
new file mode 100644
index 0000000..a8ac590
--- /dev/null
+++ b/lib/sor/types/v3/index.ts
@@ -0,0 +1,89 @@
+/* Autogenerated file. Do not edit manually. */
+/* tslint:disable */
+/* eslint-disable */
+export { IERC1271__factory } from "./factories/IERC1271__factory";
+export { IERC20Metadata__factory } from "./factories/IERC20Metadata__factory";
+export { IERC20Minimal__factory } from "./factories/IERC20Minimal__factory";
+export { IERC20PermitAllowed__factory } from "./factories/IERC20PermitAllowed__factory";
+export { IERC721Permit__factory } from "./factories/IERC721Permit__factory";
+export { IMulticall__factory } from "./factories/IMulticall__factory";
+export { INonfungiblePositionManager__factory } from "./factories/INonfungiblePositionManager__factory";
+export { INonfungibleTokenPositionDescriptor__factory } from "./factories/INonfungibleTokenPositionDescriptor__factory";
+export { IPeripheryImmutableState__factory } from "./factories/IPeripheryImmutableState__factory";
+export { IPeripheryPaymentsWithFee__factory } from "./factories/IPeripheryPaymentsWithFee__factory";
+export { IPeripheryPayments__factory } from "./factories/IPeripheryPayments__factory";
+export { IPoolInitializer__factory } from "./factories/IPoolInitializer__factory";
+export { IQuoterV2__factory } from "./factories/IQuoterV2__factory";
+export { IQuoter__factory } from "./factories/IQuoter__factory";
+export { ISelfPermit__factory } from "./factories/ISelfPermit__factory";
+export { ISwapRouter__factory } from "./factories/ISwapRouter__factory";
+export { ITickLens__factory } from "./factories/ITickLens__factory";
+export { IUniswapV3Factory__factory } from "./factories/IUniswapV3Factory__factory";
+export { IUniswapV3FlashCallback__factory } from "./factories/IUniswapV3FlashCallback__factory";
+export { IUniswapV3MintCallback__factory } from "./factories/IUniswapV3MintCallback__factory";
+export { IUniswapV3PoolActions__factory } from "./factories/IUniswapV3PoolActions__factory";
+export { IUniswapV3PoolDeployer__factory } from "./factories/IUniswapV3PoolDeployer__factory";
+export { IUniswapV3PoolDerivedState__factory } from "./factories/IUniswapV3PoolDerivedState__factory";
+export { IUniswapV3PoolEvents__factory } from "./factories/IUniswapV3PoolEvents__factory";
+export { IUniswapV3PoolImmutables__factory } from "./factories/IUniswapV3PoolImmutables__factory";
+export { IUniswapV3PoolOwnerActions__factory } from "./factories/IUniswapV3PoolOwnerActions__factory";
+export { IUniswapV3PoolState__factory } from "./factories/IUniswapV3PoolState__factory";
+export { IUniswapV3Pool__factory } from "./factories/IUniswapV3Pool__factory";
+export { IUniswapV3SwapCallback__factory } from "./factories/IUniswapV3SwapCallback__factory";
+export { IV3Migrator__factory } from "./factories/IV3Migrator__factory";
+export { IWETH9__factory } from "./factories/IWETH9__factory";
+export { NFTDescriptor__factory } from "./factories/NFTDescriptor__factory";
+export { NonfungiblePositionManager__factory } from "./factories/NonfungiblePositionManager__factory";
+export { NonfungibleTokenPositionDescriptor__factory } from "./factories/NonfungibleTokenPositionDescriptor__factory";
+export { PairFlash__factory } from "./factories/PairFlash__factory";
+export { QuoterV2__factory } from "./factories/QuoterV2__factory";
+export { Quoter__factory } from "./factories/Quoter__factory";
+export { SwapRouter__factory } from "./factories/SwapRouter__factory";
+export { TickLens__factory } from "./factories/TickLens__factory";
+export { UniswapInterfaceMulticall__factory } from "./factories/UniswapInterfaceMulticall__factory";
+export { UniswapV3Factory__factory } from "./factories/UniswapV3Factory__factory";
+export { UniswapV3Pool__factory } from "./factories/UniswapV3Pool__factory";
+export { V3Migrator__factory } from "./factories/V3Migrator__factory";
+export type { IERC1271 } from "./IERC1271";
+export type { IERC20Metadata } from "./IERC20Metadata";
+export type { IERC20Minimal } from "./IERC20Minimal";
+export type { IERC20PermitAllowed } from "./IERC20PermitAllowed";
+export type { IERC721Permit } from "./IERC721Permit";
+export type { IMulticall } from "./IMulticall";
+export type { INonfungiblePositionManager } from "./INonfungiblePositionManager";
+export type { INonfungibleTokenPositionDescriptor } from "./INonfungibleTokenPositionDescriptor";
+export type { IPeripheryImmutableState } from "./IPeripheryImmutableState";
+export type { IPeripheryPayments } from "./IPeripheryPayments";
+export type { IPeripheryPaymentsWithFee } from "./IPeripheryPaymentsWithFee";
+export type { IPoolInitializer } from "./IPoolInitializer";
+export type { IQuoter } from "./IQuoter";
+export type { IQuoterV2 } from "./IQuoterV2";
+export type { ISelfPermit } from "./ISelfPermit";
+export type { ISwapRouter } from "./ISwapRouter";
+export type { ITickLens } from "./ITickLens";
+export type { IUniswapV3Factory } from "./IUniswapV3Factory";
+export type { IUniswapV3FlashCallback } from "./IUniswapV3FlashCallback";
+export type { IUniswapV3MintCallback } from "./IUniswapV3MintCallback";
+export type { IUniswapV3Pool } from "./IUniswapV3Pool";
+export type { IUniswapV3PoolActions } from "./IUniswapV3PoolActions";
+export type { IUniswapV3PoolDeployer } from "./IUniswapV3PoolDeployer";
+export type { IUniswapV3PoolDerivedState } from "./IUniswapV3PoolDerivedState";
+export type { IUniswapV3PoolEvents } from "./IUniswapV3PoolEvents";
+export type { IUniswapV3PoolImmutables } from "./IUniswapV3PoolImmutables";
+export type { IUniswapV3PoolOwnerActions } from "./IUniswapV3PoolOwnerActions";
+export type { IUniswapV3PoolState } from "./IUniswapV3PoolState";
+export type { IUniswapV3SwapCallback } from "./IUniswapV3SwapCallback";
+export type { IV3Migrator } from "./IV3Migrator";
+export type { IWETH9 } from "./IWETH9";
+export type { NFTDescriptor } from "./NFTDescriptor";
+export type { NonfungiblePositionManager } from "./NonfungiblePositionManager";
+export type { NonfungibleTokenPositionDescriptor } from "./NonfungibleTokenPositionDescriptor";
+export type { PairFlash } from "./PairFlash";
+export type { Quoter } from "./Quoter";
+export type { QuoterV2 } from "./QuoterV2";
+export type { SwapRouter } from "./SwapRouter";
+export type { TickLens } from "./TickLens";
+export type { UniswapInterfaceMulticall } from "./UniswapInterfaceMulticall";
+export type { UniswapV3Factory } from "./UniswapV3Factory";
+export type { UniswapV3Pool } from "./UniswapV3Pool";
+export type { V3Migrator } from "./V3Migrator";
diff --git a/lib/sor/util/addresses.ts b/lib/sor/util/addresses.ts
new file mode 100644
index 0000000..48e0ec8
--- /dev/null
+++ b/lib/sor/util/addresses.ts
@@ -0,0 +1,166 @@
+import { CHAIN_TO_ADDRESSES_MAP, ChainId, Token } from '@uniswap/sdk-core';
+import { FACTORY_ADDRESS } from '@uniswap/v3-sdk';
+
+import { NETWORKS_WITH_SAME_UNISWAP_ADDRESSES } from './chains';
+
+export const BNB_TICK_LENS_ADDRESS = CHAIN_TO_ADDRESSES_MAP[ChainId.BNB].tickLensAddress;
+export const BNB_NONFUNGIBLE_POSITION_MANAGER_ADDRESS = CHAIN_TO_ADDRESSES_MAP[ChainId.BNB].nonfungiblePositionManagerAddress;
+// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
+export const BNB_SWAP_ROUTER_02_ADDRESS = CHAIN_TO_ADDRESSES_MAP[ChainId.BNB].swapRouter02Address!;
+export const BNB_V3_MIGRATOR_ADDRESS = CHAIN_TO_ADDRESSES_MAP[ChainId.BNB].v3MigratorAddress;
+
+export const V3_CORE_FACTORY_ADDRESSES: AddressMap = {
+  ...constructSameAddressMap(FACTORY_ADDRESS),
+  [ChainId.CELO]: CHAIN_TO_ADDRESSES_MAP[ChainId.CELO].v3CoreFactoryAddress,
+  [ChainId.CELO_ALFAJORES]: CHAIN_TO_ADDRESSES_MAP[ChainId.CELO_ALFAJORES].v3CoreFactoryAddress,
+  [ChainId.OPTIMISM_GOERLI]: CHAIN_TO_ADDRESSES_MAP[ChainId.OPTIMISM_GOERLI].v3CoreFactoryAddress,
+  [ChainId.SEPOLIA]: CHAIN_TO_ADDRESSES_MAP[ChainId.SEPOLIA].v3CoreFactoryAddress,
+  [ChainId.ARBITRUM_GOERLI]: CHAIN_TO_ADDRESSES_MAP[ChainId.ARBITRUM_GOERLI].v3CoreFactoryAddress,
+  [ChainId.BNB]: CHAIN_TO_ADDRESSES_MAP[ChainId.BNB].v3CoreFactoryAddress,
+  [ChainId.AVALANCHE]: CHAIN_TO_ADDRESSES_MAP[ChainId.AVALANCHE].v3CoreFactoryAddress,
+  [ChainId.BASE_GOERLI]: CHAIN_TO_ADDRESSES_MAP[ChainId.BASE_GOERLI].v3CoreFactoryAddress,
+  [ChainId.BASE]: CHAIN_TO_ADDRESSES_MAP[ChainId.BASE].v3CoreFactoryAddress,
+  // TODO: Gnosis + Moonbeam contracts to be deployed
+};
+
+export const QUOTER_V2_ADDRESSES: AddressMap = {
+  ...constructSameAddressMap('0x61fFE014bA17989E743c5F6cB21bF9697530B21e'),
+  [ChainId.CELO]: CHAIN_TO_ADDRESSES_MAP[ChainId.CELO].quoterAddress,
+  [ChainId.CELO_ALFAJORES]: CHAIN_TO_ADDRESSES_MAP[ChainId.CELO_ALFAJORES].quoterAddress,
+  [ChainId.OPTIMISM_GOERLI]: CHAIN_TO_ADDRESSES_MAP[ChainId.OPTIMISM_GOERLI].quoterAddress,
+  [ChainId.SEPOLIA]: CHAIN_TO_ADDRESSES_MAP[ChainId.SEPOLIA].quoterAddress,
+  [ChainId.ARBITRUM_GOERLI]: CHAIN_TO_ADDRESSES_MAP[ChainId.ARBITRUM_GOERLI].quoterAddress,
+  [ChainId.BNB]: CHAIN_TO_ADDRESSES_MAP[ChainId.BNB].quoterAddress,
+  [ChainId.AVALANCHE]: CHAIN_TO_ADDRESSES_MAP[ChainId.AVALANCHE].quoterAddress,
+  [ChainId.BASE_GOERLI]: CHAIN_TO_ADDRESSES_MAP[ChainId.BASE_GOERLI].quoterAddress,
+  [ChainId.BASE]: CHAIN_TO_ADDRESSES_MAP[ChainId.BASE].quoterAddress,
+  // TODO: Gnosis + Moonbeam contracts to be deployed
+};
+
+export const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = {
+  [ChainId.MAINNET]: CHAIN_TO_ADDRESSES_MAP[ChainId.MAINNET].v1MixedRouteQuoterAddress,
+  [ChainId.GOERLI]: CHAIN_TO_ADDRESSES_MAP[ChainId.GOERLI].v1MixedRouteQuoterAddress,
+};
+
+export const UNISWAP_MULTICALL_ADDRESSES: AddressMap = {
+  ...constructSameAddressMap('0x1F98415757620B543A52E61c46B32eB19261F984'),
+  [ChainId.CELO]: CHAIN_TO_ADDRESSES_MAP[ChainId.CELO].multicallAddress,
+  [ChainId.CELO_ALFAJORES]: CHAIN_TO_ADDRESSES_MAP[ChainId.CELO_ALFAJORES].multicallAddress,
+  [ChainId.OPTIMISM_GOERLI]: CHAIN_TO_ADDRESSES_MAP[ChainId.OPTIMISM_GOERLI].multicallAddress,
+  [ChainId.SEPOLIA]: CHAIN_TO_ADDRESSES_MAP[ChainId.SEPOLIA].multicallAddress,
+  [ChainId.ARBITRUM_GOERLI]: CHAIN_TO_ADDRESSES_MAP[ChainId.ARBITRUM_GOERLI].multicallAddress,
+  [ChainId.BNB]: CHAIN_TO_ADDRESSES_MAP[ChainId.BNB].multicallAddress,
+  [ChainId.AVALANCHE]: CHAIN_TO_ADDRESSES_MAP[ChainId.AVALANCHE].multicallAddress,
+  [ChainId.BASE_GOERLI]: CHAIN_TO_ADDRESSES_MAP[ChainId.BASE_GOERLI].multicallAddress,
+  [ChainId.BASE]: CHAIN_TO_ADDRESSES_MAP[ChainId.BASE].multicallAddress,
+  // TODO: Gnosis + Moonbeam contracts to be deployed
+};
+
+export const SWAP_ROUTER_02_ADDRESSES = (chainId: number) : string => {
+  if (chainId == ChainId.BNB) {
+    return BNB_SWAP_ROUTER_02_ADDRESS;
+  }
+  return '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45';
+};
+
+export const OVM_GASPRICE_ADDRESS =
+  '0x420000000000000000000000000000000000000F';
+export const ARB_GASINFO_ADDRESS = '0x000000000000000000000000000000000000006C';
+export const TICK_LENS_ADDRESS = CHAIN_TO_ADDRESSES_MAP[ChainId.ARBITRUM_ONE].tickLensAddress;
+export const NONFUNGIBLE_POSITION_MANAGER_ADDRESS = CHAIN_TO_ADDRESSES_MAP[ChainId.MAINNET].nonfungiblePositionManagerAddress;
+export const V3_MIGRATOR_ADDRESS = CHAIN_TO_ADDRESSES_MAP[ChainId.MAINNET].v3MigratorAddress;
+export const MULTICALL2_ADDRESS = '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696';
+
+export type AddressMap = { [chainId: number]: string | undefined };
+
+export function constructSameAddressMap<T extends string>(
+  address: T,
+  additionalNetworks: ChainId[] = []
+): { [chainId: number]: T } {
+  return NETWORKS_WITH_SAME_UNISWAP_ADDRESSES.concat(
+    additionalNetworks
+  ).reduce<{
+    [chainId: number]: T;
+  }>((memo, chainId) => {
+    memo[chainId] = address;
+    return memo;
+  }, {});
+}
+
+export const WETH9: {
+  [chainId in Exclude<
+    ChainId,
+    | ChainId.POLYGON
+    | ChainId.POLYGON_MUMBAI
+    | ChainId.CELO
+    | ChainId.CELO_ALFAJORES
+    | ChainId.GNOSIS
+    | ChainId.MOONBEAM
+    | ChainId.BNB
+    | ChainId.AVALANCHE
+  >]: Token;
+} = {
+  [ChainId.MAINNET]: new Token(
+    ChainId.MAINNET,
+    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
+    18,
+    'WETH',
+    'Wrapped Ether'
+  ),
+  [ChainId.GOERLI]: new Token(
+    ChainId.GOERLI,
+    '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',
+    18,
+    'WETH',
+    'Wrapped Ether'
+  ),
+  [ChainId.SEPOLIA]: new Token(
+    ChainId.SEPOLIA,
+    '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',
+    18,
+    'WETH',
+    'Wrapped Ether'
+  ),
+  [ChainId.OPTIMISM]: new Token(
+    ChainId.OPTIMISM,
+    '0x4200000000000000000000000000000000000006',
+    18,
+    'WETH',
+    'Wrapped Ether'
+  ),
+  [ChainId.OPTIMISM_GOERLI]: new Token(
+    ChainId.OPTIMISM_GOERLI,
+    '0x4200000000000000000000000000000000000006',
+    18,
+    'WETH',
+    'Wrapped Ether'
+  ),
+  [ChainId.ARBITRUM_ONE]: new Token(
+    ChainId.ARBITRUM_ONE,
+    '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',
+    18,
+    'WETH',
+    'Wrapped Ether'
+  ),
+  [ChainId.ARBITRUM_GOERLI]: new Token(
+    ChainId.ARBITRUM_GOERLI,
+    '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',
+    18,
+    'WETH',
+    'Wrapped Ether'
+  ),
+  [ChainId.BASE_GOERLI]: new Token(
+    ChainId.BASE_GOERLI,
+    '0x4200000000000000000000000000000000000006',
+    18,
+    'WETH',
+    'Wrapped Ether'
+  ),
+  [ChainId.BASE]: new Token(
+    ChainId.BASE,
+    '0x4200000000000000000000000000000000000006',
+    18,
+    'WETH',
+    'Wrapped Ether'
+  )
+};
diff --git a/lib/sor/util/amounts.ts b/lib/sor/util/amounts.ts
new file mode 100644
index 0000000..0ab53df
--- /dev/null
+++ b/lib/sor/util/amounts.ts
@@ -0,0 +1,47 @@
+import { parseUnits } from '@ethersproject/units';
+import {
+  Currency,
+  CurrencyAmount as CurrencyAmountRaw,
+} from '@uniswap/sdk-core';
+import { FeeAmount } from '@uniswap/v3-sdk';
+import JSBI from 'jsbi';
+
+export class CurrencyAmount extends CurrencyAmountRaw<Currency> {}
+
+export const MAX_UINT160 = '0xffffffffffffffffffffffffffffffffffffffff';
+
+// Try to parse a user entered amount for a given token
+export function parseAmount(value: string, currency: Currency): CurrencyAmount {
+  const typedValueParsed = parseUnits(value, currency.decimals).toString();
+  return CurrencyAmount.fromRawAmount(currency, JSBI.BigInt(typedValueParsed));
+}
+
+export function parseFeeAmount(feeAmountStr: string) {
+  switch (feeAmountStr) {
+    case '10000':
+      return FeeAmount.HIGH;
+    case '3000':
+      return FeeAmount.MEDIUM;
+    case '500':
+      return FeeAmount.LOW;
+    case '100':
+      return FeeAmount.LOWEST;
+    default:
+      throw new Error(`Fee amount ${feeAmountStr} not supported.`);
+  }
+}
+
+export function unparseFeeAmount(feeAmount: FeeAmount) {
+  switch (feeAmount) {
+    case FeeAmount.HIGH:
+      return '10000';
+    case FeeAmount.MEDIUM:
+      return '3000';
+    case FeeAmount.LOW:
+      return '500';
+    case FeeAmount.LOWEST:
+      return '100';
+    default:
+      throw new Error(`Fee amount ${feeAmount} not supported.`);
+  }
+}
diff --git a/lib/sor/util/callData.ts b/lib/sor/util/callData.ts
new file mode 100644
index 0000000..1986e5e
--- /dev/null
+++ b/lib/sor/util/callData.ts
@@ -0,0 +1,3 @@
+// Calldata to max-approve our V3 Router contract
+export const APPROVE_TOKEN_FOR_TRANSFER =
+  '0x095ea7b300000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc45ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';
diff --git a/lib/sor/util/chains.ts b/lib/sor/util/chains.ts
new file mode 100644
index 0000000..183b05b
--- /dev/null
+++ b/lib/sor/util/chains.ts
@@ -0,0 +1,596 @@
+import { ChainId, Currency, Ether, NativeCurrency, Token } from '@uniswap/sdk-core';
+
+// WIP: Gnosis, Moonbeam
+export const SUPPORTED_CHAINS: ChainId[] = [
+  ChainId.MAINNET,
+  ChainId.OPTIMISM,
+  ChainId.OPTIMISM_GOERLI,
+  ChainId.ARBITRUM_ONE,
+  ChainId.ARBITRUM_GOERLI,
+  ChainId.POLYGON,
+  ChainId.POLYGON_MUMBAI,
+  ChainId.GOERLI,
+  ChainId.SEPOLIA,
+  ChainId.CELO_ALFAJORES,
+  ChainId.CELO,
+  ChainId.BNB,
+  ChainId.AVALANCHE,
+  ChainId.BASE,
+  // Gnosis and Moonbeam don't yet have contracts deployed yet
+];
+
+export const V2_SUPPORTED = [
+  ChainId.MAINNET,
+  ChainId.GOERLI,
+  ChainId.SEPOLIA,
+];
+
+export const HAS_L1_FEE = [
+  ChainId.OPTIMISM,
+  ChainId.OPTIMISM_GOERLI,
+  ChainId.ARBITRUM_ONE,
+  ChainId.ARBITRUM_GOERLI,
+  ChainId.BASE,
+  ChainId.BASE_GOERLI,
+];
+
+export const NETWORKS_WITH_SAME_UNISWAP_ADDRESSES = [
+  ChainId.MAINNET,
+  ChainId.GOERLI,
+  ChainId.OPTIMISM,
+  ChainId.ARBITRUM_ONE,
+  ChainId.POLYGON,
+  ChainId.POLYGON_MUMBAI,
+];
+
+export const ID_TO_CHAIN_ID = (id: number): ChainId => {
+  switch (id) {
+    case 1:
+      return ChainId.MAINNET;
+    case 5:
+      return ChainId.GOERLI;
+    case 11155111:
+      return ChainId.SEPOLIA;
+    case 56:
+      return ChainId.BNB;
+    case 10:
+      return ChainId.OPTIMISM;
+    case 420:
+      return ChainId.OPTIMISM_GOERLI;
+    case 42161:
+      return ChainId.ARBITRUM_ONE;
+    case 421613:
+      return ChainId.ARBITRUM_GOERLI;
+    case 137:
+      return ChainId.POLYGON;
+    case 80001:
+      return ChainId.POLYGON_MUMBAI;
+    case 42220:
+      return ChainId.CELO;
+    case 44787:
+      return ChainId.CELO_ALFAJORES;
+    case 100:
+      return ChainId.GNOSIS;
+    case 1284:
+      return ChainId.MOONBEAM;
+    case 43114:
+      return ChainId.AVALANCHE;
+    case 8453:
+      return ChainId.BASE;
+    case 84531:
+      return ChainId.BASE_GOERLI;
+    default:
+      throw new Error(`Unknown chain id: ${id}`);
+  }
+};
+
+export enum ChainName {
+  MAINNET = 'mainnet',
+  GOERLI = 'goerli',
+  SEPOLIA = 'sepolia',
+  OPTIMISM = 'optimism-mainnet',
+  OPTIMISM_GOERLI = 'optimism-goerli',
+  ARBITRUM_ONE = 'arbitrum-mainnet',
+  ARBITRUM_GOERLI = 'arbitrum-goerli',
+  POLYGON = 'polygon-mainnet',
+  POLYGON_MUMBAI = 'polygon-mumbai',
+  CELO = 'celo-mainnet',
+  CELO_ALFAJORES = 'celo-alfajores',
+  GNOSIS = 'gnosis-mainnet',
+  MOONBEAM = 'moonbeam-mainnet',
+  BNB = 'bnb-mainnet',
+  AVALANCHE = 'avalanche-mainnet',
+  BASE = 'base-mainnet',
+  BASE_GOERLI = 'base-goerli',
+}
+
+
+export enum NativeCurrencyName {
+  // Strings match input for CLI
+  ETHER = 'ETH',
+  MATIC = 'MATIC',
+  CELO = 'CELO',
+  GNOSIS = 'XDAI',
+  MOONBEAM = 'GLMR',
+  BNB = 'BNB',
+  AVALANCHE = 'AVAX',
+}
+
+export const NATIVE_NAMES_BY_ID: { [chainId: number]: string[] } = {
+  [ChainId.MAINNET]: [
+    'ETH',
+    'ETHER',
+    '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',
+  ],
+  [ChainId.GOERLI]: [
+    'ETH',
+    'ETHER',
+    '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',
+  ],
+  [ChainId.SEPOLIA]: [
+    'ETH',
+    'ETHER',
+    '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',
+  ],
+  [ChainId.OPTIMISM]: [
+    'ETH',
+    'ETHER',
+    '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',
+  ],
+  [ChainId.OPTIMISM_GOERLI]: [
+    'ETH',
+    'ETHER',
+    '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',
+  ],
+  [ChainId.ARBITRUM_ONE]: [
+    'ETH',
+    'ETHER',
+    '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',
+  ],
+  [ChainId.ARBITRUM_GOERLI]: [
+    'ETH',
+    'ETHER',
+    '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',
+  ],
+  [ChainId.POLYGON]: [
+    'MATIC', '0x0000000000000000000000000000000000001010'
+  ],
+  [ChainId.POLYGON_MUMBAI]: [
+    'MATIC',
+    '0x0000000000000000000000000000000000001010',
+  ],
+  [ChainId.CELO]: ['CELO'],
+  [ChainId.CELO_ALFAJORES]: ['CELO'],
+  [ChainId.GNOSIS]: ['XDAI'],
+  [ChainId.MOONBEAM]: ['GLMR'],
+  [ChainId.BNB]: [
+    'BNB',
+    'BNB',
+    '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',
+  ],
+  [ChainId.AVALANCHE]: [
+    'AVAX',
+    'AVALANCHE',
+    '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',
+  ],
+  [ChainId.BASE]: [
+    'ETH',
+    'ETHER',
+    '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',
+  ]
+};
+
+export const NATIVE_CURRENCY: { [chainId: number]: NativeCurrencyName } = {
+  [ChainId.MAINNET]: NativeCurrencyName.ETHER,
+  [ChainId.GOERLI]: NativeCurrencyName.ETHER,
+  [ChainId.SEPOLIA]: NativeCurrencyName.ETHER,
+  [ChainId.OPTIMISM]: NativeCurrencyName.ETHER,
+  [ChainId.OPTIMISM_GOERLI]: NativeCurrencyName.ETHER,
+  [ChainId.ARBITRUM_ONE]: NativeCurrencyName.ETHER,
+  [ChainId.ARBITRUM_GOERLI]: NativeCurrencyName.ETHER,
+  [ChainId.POLYGON]: NativeCurrencyName.MATIC,
+  [ChainId.POLYGON_MUMBAI]: NativeCurrencyName.MATIC,
+  [ChainId.CELO]: NativeCurrencyName.CELO,
+  [ChainId.CELO_ALFAJORES]: NativeCurrencyName.CELO,
+  [ChainId.GNOSIS]: NativeCurrencyName.GNOSIS,
+  [ChainId.MOONBEAM]: NativeCurrencyName.MOONBEAM,
+  [ChainId.BNB]: NativeCurrencyName.BNB,
+  [ChainId.AVALANCHE]: NativeCurrencyName.AVALANCHE,
+  [ChainId.BASE]: NativeCurrencyName.ETHER,
+};
+
+export const ID_TO_NETWORK_NAME = (id: number): ChainName => {
+  switch (id) {
+    case 1:
+      return ChainName.MAINNET;
+    case 5:
+      return ChainName.GOERLI;
+    case 11155111:
+      return ChainName.SEPOLIA;
+    case 56:
+      return ChainName.BNB;
+    case 10:
+      return ChainName.OPTIMISM;
+    case 420:
+      return ChainName.OPTIMISM_GOERLI;
+    case 42161:
+      return ChainName.ARBITRUM_ONE;
+    case 421613:
+      return ChainName.ARBITRUM_GOERLI;
+    case 137:
+      return ChainName.POLYGON;
+    case 80001:
+      return ChainName.POLYGON_MUMBAI;
+    case 42220:
+      return ChainName.CELO;
+    case 44787:
+      return ChainName.CELO_ALFAJORES;
+    case 100:
+      return ChainName.GNOSIS;
+    case 1284:
+      return ChainName.MOONBEAM;
+    case 43114:
+      return ChainName.AVALANCHE;
+    case 8453:
+      return ChainName.BASE;
+    case 84531:
+      return ChainName.BASE_GOERLI;
+    default:
+      throw new Error(`Unknown chain id: ${id}`);
+  }
+};
+
+export const CHAIN_IDS_LIST = Object.values(ChainId).map((c) =>
+  c.toString()
+) as string[];
+
+export const ID_TO_PROVIDER = (id: ChainId): string => {
+  switch (id) {
+    case ChainId.MAINNET:
+      return process.env.JSON_RPC_PROVIDER!;
+    case ChainId.GOERLI:
+      return process.env.JSON_RPC_PROVIDER_GORLI!;
+    case ChainId.SEPOLIA:
+      return process.env.JSON_RPC_PROVIDER_SEPOLIA!;
+    case ChainId.OPTIMISM:
+      return process.env.JSON_RPC_PROVIDER_OPTIMISM!;
+    case ChainId.OPTIMISM_GOERLI:
+      return process.env.JSON_RPC_PROVIDER_OPTIMISM_GOERLI!;
+    case ChainId.ARBITRUM_ONE:
+      return process.env.JSON_RPC_PROVIDER_ARBITRUM_ONE!;
+    case ChainId.ARBITRUM_GOERLI:
+      return process.env.JSON_RPC_PROVIDER_ARBITRUM_GOERLI!;
+    case ChainId.POLYGON:
+      return process.env.JSON_RPC_PROVIDER_POLYGON!;
+    case ChainId.POLYGON_MUMBAI:
+      return process.env.JSON_RPC_PROVIDER_POLYGON_MUMBAI!;
+    case ChainId.CELO:
+      return process.env.JSON_RPC_PROVIDER_CELO!;
+    case ChainId.CELO_ALFAJORES:
+      return process.env.JSON_RPC_PROVIDER_CELO_ALFAJORES!;
+    case ChainId.BNB:
+      return process.env.JSON_RPC_PROVIDER_BNB!;
+    case ChainId.AVALANCHE:
+      return process.env.JSON_RPC_PROVIDER_AVALANCHE!;
+    case ChainId.BASE:
+      return process.env.JSON_RPC_PROVIDER_BASE!;
+    default:
+      throw new Error(`Chain id: ${id} not supported`);
+  }
+};
+
+export const WRAPPED_NATIVE_CURRENCY: { [chainId in ChainId]: Token } = {
+  [ChainId.MAINNET]: new Token(
+    1,
+    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
+    18,
+    'WETH',
+    'Wrapped Ether'
+  ),
+  [ChainId.GOERLI]: new Token(
+    5,
+    '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',
+    18,
+    'WETH',
+    'Wrapped Ether'
+  ),
+  [ChainId.SEPOLIA]: new Token(
+    11155111,
+    '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',
+    18,
+    'WETH',
+    'Wrapped Ether'
+  ),
+  [ChainId.BNB]: new Token(
+    56,
+    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',
+    18,
+    'WBNB',
+    'Wrapped BNB'
+  ),
+  [ChainId.OPTIMISM]: new Token(
+    ChainId.OPTIMISM,
+    '0x4200000000000000000000000000000000000006',
+    18,
+    'WETH',
+    'Wrapped Ether'
+  ),
+  [ChainId.OPTIMISM_GOERLI]: new Token(
+    ChainId.OPTIMISM_GOERLI,
+    '0x4200000000000000000000000000000000000006',
+    18,
+    'WETH',
+    'Wrapped Ether'
+  ),
+  [ChainId.ARBITRUM_ONE]: new Token(
+    ChainId.ARBITRUM_ONE,
+    '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',
+    18,
+    'WETH',
+    'Wrapped Ether'
+  ),
+  [ChainId.ARBITRUM_GOERLI]: new Token(
+    ChainId.ARBITRUM_GOERLI,
+    '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',
+    18,
+    'WETH',
+    'Wrapped Ether'
+  ),
+  [ChainId.POLYGON]: new Token(
+    ChainId.POLYGON,
+    '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',
+    18,
+    'WMATIC',
+    'Wrapped MATIC'
+  ),
+  [ChainId.POLYGON_MUMBAI]: new Token(
+    ChainId.POLYGON_MUMBAI,
+    '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',
+    18,
+    'WMATIC',
+    'Wrapped MATIC'
+  ),
+
+  // The Celo native currency 'CELO' implements the erc-20 token standard
+  [ChainId.CELO]: new Token(
+    ChainId.CELO,
+    '0x471EcE3750Da237f93B8E339c536989b8978a438',
+    18,
+    'CELO',
+    'Celo native asset'
+  ),
+  [ChainId.CELO_ALFAJORES]: new Token(
+    ChainId.CELO_ALFAJORES,
+    '0xF194afDf50B03e69Bd7D057c1Aa9e10c9954E4C9',
+    18,
+    'CELO',
+    'Celo native asset'
+  ),
+  [ChainId.GNOSIS]: new Token(
+    ChainId.GNOSIS,
+    '0xe91d153e0b41518a2ce8dd3d7944fa863463a97d',
+    18,
+    'WXDAI',
+    'Wrapped XDAI on Gnosis'
+  ),
+  [ChainId.MOONBEAM]: new Token(
+    ChainId.MOONBEAM,
+    '0xAcc15dC74880C9944775448304B263D191c6077F',
+    18,
+    'WGLMR',
+    'Wrapped GLMR'
+  ),
+  [ChainId.AVALANCHE]: new Token(
+    ChainId.AVALANCHE,
+    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',
+    18,
+    'WAVAX',
+    'Wrapped AVAX'
+  ),
+  [ChainId.BASE]: new Token(
+    ChainId.BASE,
+    '0x4200000000000000000000000000000000000006',
+    18,
+    'WETH',
+    'Wrapped Ether'
+  ),
+  [ChainId.BASE_GOERLI]: new Token(
+    ChainId.BASE_GOERLI,
+    '0x4200000000000000000000000000000000000006',
+    18,
+    'WETH',
+    'Wrapped Ether'
+  )
+};
+
+function isMatic(
+  chainId: number
+): chainId is ChainId.POLYGON | ChainId.POLYGON_MUMBAI {
+  return chainId === ChainId.POLYGON_MUMBAI || chainId === ChainId.POLYGON;
+}
+
+class MaticNativeCurrency extends NativeCurrency {
+  equals(other: Currency): boolean {
+    return other.isNative && other.chainId === this.chainId;
+  }
+
+  get wrapped(): Token {
+    if (!isMatic(this.chainId)) throw new Error('Not matic');
+    const nativeCurrency = WRAPPED_NATIVE_CURRENCY[this.chainId];
+    if (nativeCurrency) {
+      return nativeCurrency;
+    }
+    throw new Error(`Does not support this chain ${this.chainId}`);
+  }
+
+  public constructor(chainId: number) {
+    if (!isMatic(chainId)) throw new Error('Not matic');
+    super(chainId, 18, 'MATIC', 'Polygon Matic');
+  }
+}
+
+function isCelo(
+  chainId: number
+): chainId is ChainId.CELO | ChainId.CELO_ALFAJORES {
+  return chainId === ChainId.CELO_ALFAJORES || chainId === ChainId.CELO;
+}
+
+class CeloNativeCurrency extends NativeCurrency {
+  equals(other: Currency): boolean {
+    return other.isNative && other.chainId === this.chainId;
+  }
+
+  get wrapped(): Token {
+    if (!isCelo(this.chainId)) throw new Error('Not celo');
+    const nativeCurrency = WRAPPED_NATIVE_CURRENCY[this.chainId];
+    if (nativeCurrency) {
+      return nativeCurrency;
+    }
+    throw new Error(`Does not support this chain ${this.chainId}`);
+  }
+
+  public constructor(chainId: number) {
+    if (!isCelo(chainId)) throw new Error('Not celo');
+    super(chainId, 18, 'CELO', 'Celo');
+  }
+}
+
+function isGnosis(chainId: number): chainId is ChainId.GNOSIS {
+  return chainId === ChainId.GNOSIS;
+}
+
+class GnosisNativeCurrency extends NativeCurrency {
+  equals(other: Currency): boolean {
+    return other.isNative && other.chainId === this.chainId;
+  }
+
+  get wrapped(): Token {
+    if (!isGnosis(this.chainId)) throw new Error('Not gnosis');
+    const nativeCurrency = WRAPPED_NATIVE_CURRENCY[this.chainId];
+    if (nativeCurrency) {
+      return nativeCurrency;
+    }
+    throw new Error(`Does not support this chain ${this.chainId}`);
+  }
+
+  public constructor(chainId: number) {
+    if (!isGnosis(chainId)) throw new Error('Not gnosis');
+    super(chainId, 18, 'XDAI', 'xDai');
+  }
+}
+
+function isBnb(chainId: number): chainId is ChainId.BNB {
+  return chainId === ChainId.BNB;
+}
+
+class BnbNativeCurrency extends NativeCurrency {
+  equals(other: Currency): boolean {
+    return other.isNative && other.chainId === this.chainId;
+  }
+
+  get wrapped(): Token {
+    if (!isBnb(this.chainId)) throw new Error('Not bnb');
+    const nativeCurrency = WRAPPED_NATIVE_CURRENCY[this.chainId];
+    if (nativeCurrency) {
+      return nativeCurrency;
+    }
+    throw new Error(`Does not support this chain ${this.chainId}`);
+  }
+
+  public constructor(chainId: number) {
+    if (!isBnb(chainId)) throw new Error('Not bnb');
+    super(chainId, 18, 'BNB', 'BNB');
+  }
+}
+
+function isMoonbeam(chainId: number): chainId is ChainId.MOONBEAM {
+  return chainId === ChainId.MOONBEAM;
+}
+
+class MoonbeamNativeCurrency extends NativeCurrency {
+  equals(other: Currency): boolean {
+    return other.isNative && other.chainId === this.chainId;
+  }
+
+  get wrapped(): Token {
+    if (!isMoonbeam(this.chainId)) throw new Error('Not moonbeam');
+    const nativeCurrency = WRAPPED_NATIVE_CURRENCY[this.chainId];
+    if (nativeCurrency) {
+      return nativeCurrency;
+    }
+    throw new Error(`Does not support this chain ${this.chainId}`);
+  }
+
+  public constructor(chainId: number) {
+    if (!isMoonbeam(chainId)) throw new Error('Not moonbeam');
+    super(chainId, 18, 'GLMR', 'Glimmer');
+  }
+}
+
+function isAvax(chainId: number): chainId is ChainId.AVALANCHE {
+  return chainId === ChainId.AVALANCHE;
+}
+
+class AvalancheNativeCurrency extends NativeCurrency {
+  equals(other: Currency): boolean {
+    return other.isNative && other.chainId === this.chainId;
+  }
+
+  get wrapped(): Token {
+    if (!isAvax(this.chainId)) throw new Error('Not avalanche');
+    const nativeCurrency = WRAPPED_NATIVE_CURRENCY[this.chainId];
+    if (nativeCurrency) {
+      return nativeCurrency;
+    }
+    throw new Error(`Does not support this chain ${this.chainId}`);
+  }
+
+  public constructor(chainId: number) {
+    if (!isAvax(chainId)) throw new Error('Not avalanche');
+    super(chainId, 18, 'AVAX', 'Avalanche');
+  }
+}
+
+export class ExtendedEther extends Ether {
+  public get wrapped(): Token {
+    if (this.chainId in WRAPPED_NATIVE_CURRENCY) {
+      return WRAPPED_NATIVE_CURRENCY[this.chainId as ChainId];
+    }
+    throw new Error('Unsupported chain ID');
+  }
+
+  private static _cachedExtendedEther: { [chainId: number]: NativeCurrency } =
+    {};
+
+  public static onChain(chainId: number): ExtendedEther {
+    return (
+      this._cachedExtendedEther[chainId] ??
+      (this._cachedExtendedEther[chainId] = new ExtendedEther(chainId))
+    );
+  }
+}
+
+const cachedNativeCurrency: { [chainId: number]: NativeCurrency } = {};
+
+export function nativeOnChain(chainId: number): NativeCurrency {
+  if (cachedNativeCurrency[chainId] != undefined) {
+    return cachedNativeCurrency[chainId]!;
+  }
+  if (isMatic(chainId)) {
+    cachedNativeCurrency[chainId] = new MaticNativeCurrency(chainId);
+  } else if (isCelo(chainId)) {
+    cachedNativeCurrency[chainId] = new CeloNativeCurrency(chainId);
+  } else if (isGnosis(chainId)) {
+    cachedNativeCurrency[chainId] = new GnosisNativeCurrency(chainId);
+  } else if (isMoonbeam(chainId)) {
+    cachedNativeCurrency[chainId] = new MoonbeamNativeCurrency(chainId);
+  } else if (isBnb(chainId)) {
+    cachedNativeCurrency[chainId] = new BnbNativeCurrency(chainId);
+  } else if (isAvax(chainId)) {
+    cachedNativeCurrency[chainId] = new AvalancheNativeCurrency(chainId);
+  } else {
+    cachedNativeCurrency[chainId] = ExtendedEther.onChain(chainId);
+  }
+
+  return cachedNativeCurrency[chainId]!;
+}
diff --git a/lib/sor/util/gas-factory-helpers.ts b/lib/sor/util/gas-factory-helpers.ts
new file mode 100644
index 0000000..c38c16c
--- /dev/null
+++ b/lib/sor/util/gas-factory-helpers.ts
@@ -0,0 +1,472 @@
+import { BigNumber } from '@ethersproject/bignumber';
+import { Protocol } from '@uniswap/router-sdk';
+import {
+  ChainId,
+  Currency,
+  CurrencyAmount,
+  Token,
+  TradeType,
+} from '@uniswap/sdk-core';
+import { Pair } from '@uniswap/v2-sdk/dist/entities';
+import { FeeAmount, Pool } from '@uniswap/v3-sdk';
+import _ from 'lodash';
+
+import { IV2PoolProvider } from '../providers';
+import { ProviderConfig } from '../providers/provider';
+import {
+  ArbitrumGasData,
+  OptimismGasData,
+} from '../providers/v3/gas-data-provider';
+import { IV3PoolProvider } from '../providers/v3/pool-provider';
+import {
+  MethodParameters,
+  MixedRouteWithValidQuote,
+  SwapRoute,
+  usdGasTokensByChain,
+  V2RouteWithValidQuote,
+  V3RouteWithValidQuote,
+} from '../routers';
+import { log, WRAPPED_NATIVE_CURRENCY } from '../util';
+
+import JSBI from 'jsbi';
+import { buildTrade } from './methodParameters';
+
+export async function getV2NativePool(
+  token: Token,
+  poolProvider: IV2PoolProvider,
+  providerConfig?: ProviderConfig,
+): Promise<Pair | null> {
+  const chainId = token.chainId as ChainId;
+  const weth = WRAPPED_NATIVE_CURRENCY[chainId]!;
+
+  const poolAccessor = await poolProvider.getPools([[weth, token]], providerConfig);
+  const pool = poolAccessor.getPool(weth, token);
+
+  if (!pool || pool.reserve0.equalTo(0) || pool.reserve1.equalTo(0)) {
+    log.error(
+      {
+        weth,
+        token,
+        reserve0: pool?.reserve0.toExact(),
+        reserve1: pool?.reserve1.toExact(),
+      },
+      `Could not find a valid WETH V2 pool with ${token.symbol} for computing gas costs.`
+    );
+
+    return null;
+  }
+
+  return pool;
+}
+
+export async function getHighestLiquidityV3NativePool(
+  token: Token,
+  poolProvider: IV3PoolProvider,
+  providerConfig?: ProviderConfig
+): Promise<Pool | null> {
+  const nativeCurrency = WRAPPED_NATIVE_CURRENCY[token.chainId as ChainId]!;
+
+  const nativePools = _([
+    FeeAmount.HIGH,
+    FeeAmount.MEDIUM,
+    FeeAmount.LOW,
+    FeeAmount.LOWEST,
+  ])
+    .map<[Token, Token, FeeAmount]>((feeAmount) => {
+      return [nativeCurrency, token, feeAmount];
+    })
+    .value();
+
+  const poolAccessor = await poolProvider.getPools(nativePools, providerConfig);
+
+  const pools = _([
+    FeeAmount.HIGH,
+    FeeAmount.MEDIUM,
+    FeeAmount.LOW,
+    FeeAmount.LOWEST,
+  ])
+    .map((feeAmount) => {
+      return poolAccessor.getPool(nativeCurrency, token, feeAmount);
+    })
+    .compact()
+    .value();
+
+  if (pools.length == 0) {
+    log.error(
+      { pools },
+      `Could not find a ${nativeCurrency.symbol} pool with ${token.symbol} for computing gas costs.`
+    );
+
+    return null;
+  }
+
+  const maxPool = pools.reduce((prev, current) => {
+    return JSBI.greaterThan(prev.liquidity, current.liquidity) ? prev : current;
+  });
+
+  return maxPool;
+}
+
+export async function getHighestLiquidityV3USDPool(
+  chainId: ChainId,
+  poolProvider: IV3PoolProvider,
+  providerConfig?: ProviderConfig
+): Promise<Pool> {
+  const usdTokens = usdGasTokensByChain[chainId];
+  const wrappedCurrency = WRAPPED_NATIVE_CURRENCY[chainId]!;
+
+  if (!usdTokens) {
+    throw new Error(
+      `Could not find a USD token for computing gas costs on ${chainId}`
+    );
+  }
+
+  const usdPools = _([
+    FeeAmount.HIGH,
+    FeeAmount.MEDIUM,
+    FeeAmount.LOW,
+    FeeAmount.LOWEST,
+  ])
+    .flatMap((feeAmount) => {
+      return _.map<Token, [Token, Token, FeeAmount]>(usdTokens, (usdToken) => [
+        wrappedCurrency,
+        usdToken,
+        feeAmount,
+      ]);
+    })
+    .value();
+
+  const poolAccessor = await poolProvider.getPools(usdPools, providerConfig);
+
+  const pools = _([
+    FeeAmount.HIGH,
+    FeeAmount.MEDIUM,
+    FeeAmount.LOW,
+    FeeAmount.LOWEST,
+  ])
+    .flatMap((feeAmount) => {
+      const pools = [];
+
+      for (const usdToken of usdTokens) {
+        const pool = poolAccessor.getPool(wrappedCurrency, usdToken, feeAmount);
+        if (pool) {
+          pools.push(pool);
+        }
+      }
+
+      return pools;
+    })
+    .compact()
+    .value();
+
+  if (pools.length == 0) {
+    const message = `Could not find a USD/${wrappedCurrency.symbol} pool for computing gas costs.`;
+    log.error({ pools }, message);
+    throw new Error(message);
+  }
+
+  const maxPool = pools.reduce((prev, current) => {
+    return JSBI.greaterThan(prev.liquidity, current.liquidity) ? prev : current;
+  });
+
+  return maxPool;
+}
+
+export function getGasCostInUSD(
+  usdPool: Pool,
+  costNativeCurrency: CurrencyAmount<Token>
+) {
+  const nativeCurrency = costNativeCurrency.currency;
+  // convert fee into usd
+  const nativeTokenPrice =
+    usdPool.token0.address == nativeCurrency.address
+      ? usdPool.token0Price
+      : usdPool.token1Price;
+
+  const gasCostUSD = nativeTokenPrice.quote(costNativeCurrency);
+  return gasCostUSD;
+}
+
+export function getGasCostInNativeCurrency(
+  nativeCurrency: Token,
+  gasCostInWei: BigNumber
+) {
+  // wrap fee to native currency
+  const costNativeCurrency = CurrencyAmount.fromRawAmount(
+    nativeCurrency,
+    gasCostInWei.toString()
+  );
+  return costNativeCurrency;
+}
+
+export async function getGasCostInQuoteToken(
+  quoteToken: Token,
+  nativePool: Pool | Pair,
+  costNativeCurrency: CurrencyAmount<Token>
+) {
+  const nativeTokenPrice =
+    nativePool.token0.address == quoteToken.address
+      ? nativePool.token1Price
+      : nativePool.token0Price;
+  const gasCostQuoteToken = nativeTokenPrice.quote(costNativeCurrency);
+  return gasCostQuoteToken;
+}
+
+export function calculateArbitrumToL1FeeFromCalldata(
+  calldata: string,
+  gasData: ArbitrumGasData
+): [BigNumber, BigNumber] {
+  const { perL2TxFee, perL1CalldataFee } = gasData;
+  // calculates gas amounts based on bytes of calldata, use 0 as overhead.
+  const l1GasUsed = getL2ToL1GasUsed(calldata, BigNumber.from(0));
+  // multiply by the fee per calldata and add the flat l2 fee
+  let l1Fee = l1GasUsed.mul(perL1CalldataFee);
+  l1Fee = l1Fee.add(perL2TxFee);
+  return [l1GasUsed, l1Fee];
+}
+
+export function calculateOptimismToL1FeeFromCalldata(
+  calldata: string,
+  gasData: OptimismGasData
+): [BigNumber, BigNumber] {
+  const { l1BaseFee, scalar, decimals, overhead } = gasData;
+
+  const l1GasUsed = getL2ToL1GasUsed(calldata, overhead);
+  // l1BaseFee is L1 Gas Price on etherscan
+  const l1Fee = l1GasUsed.mul(l1BaseFee);
+  const unscaled = l1Fee.mul(scalar);
+  // scaled = unscaled / (10 ** decimals)
+  const scaledConversion = BigNumber.from(10).pow(decimals);
+  const scaled = unscaled.div(scaledConversion);
+  return [l1GasUsed, scaled];
+}
+
+// based on the code from the optimism OVM_GasPriceOracle contract
+export function getL2ToL1GasUsed(data: string, overhead: BigNumber): BigNumber {
+  // data is hex encoded
+  const dataArr: string[] = data.slice(2).match(/.{1,2}/g)!;
+  const numBytes = dataArr.length;
+  let count = 0;
+  for (let i = 0; i < numBytes; i += 1) {
+    const byte = parseInt(dataArr[i]!, 16);
+    if (byte == 0) {
+      count += 4;
+    } else {
+      count += 16;
+    }
+  }
+  const unsigned = overhead.add(count);
+  const signedConversion = 68 * 16;
+  return unsigned.add(signedConversion);
+}
+
+export async function calculateGasUsed(
+  chainId: ChainId,
+  route: SwapRoute,
+  simulatedGasUsed: BigNumber,
+  v2PoolProvider: IV2PoolProvider,
+  v3PoolProvider: IV3PoolProvider,
+  l2GasData?: ArbitrumGasData | OptimismGasData,
+  providerConfig?: ProviderConfig
+) {
+  const quoteToken = route.quote.currency.wrapped;
+  const gasPriceWei = route.gasPriceWei;
+  // calculate L2 to L1 security fee if relevant
+  let l2toL1FeeInWei = BigNumber.from(0);
+  if ([ChainId.ARBITRUM_ONE, ChainId.ARBITRUM_GOERLI].includes(chainId)) {
+    l2toL1FeeInWei = calculateArbitrumToL1FeeFromCalldata(
+      route.methodParameters!.calldata,
+      l2GasData as ArbitrumGasData
+    )[1];
+  } else if (
+    [
+      ChainId.OPTIMISM,
+      ChainId.OPTIMISM_GOERLI,
+      ChainId.BASE,
+      ChainId.BASE_GOERLI,
+    ].includes(chainId)
+  ) {
+    l2toL1FeeInWei = calculateOptimismToL1FeeFromCalldata(
+      route.methodParameters!.calldata,
+      l2GasData as OptimismGasData
+    )[1];
+  }
+
+  // add l2 to l1 fee and wrap fee to native currency
+  const gasCostInWei = gasPriceWei.mul(simulatedGasUsed).add(l2toL1FeeInWei);
+  const nativeCurrency = WRAPPED_NATIVE_CURRENCY[chainId];
+  const costNativeCurrency = getGasCostInNativeCurrency(
+    nativeCurrency,
+    gasCostInWei
+  );
+
+  const usdPool: Pool = await getHighestLiquidityV3USDPool(
+    chainId,
+    v3PoolProvider,
+    providerConfig
+  );
+
+  const gasCostUSD = await getGasCostInUSD(usdPool, costNativeCurrency);
+
+  let gasCostQuoteToken = costNativeCurrency;
+  // get fee in terms of quote token
+  if (!quoteToken.equals(nativeCurrency)) {
+    const nativePools = await Promise.all([
+      getHighestLiquidityV3NativePool(
+        quoteToken,
+        v3PoolProvider,
+        providerConfig
+      ),
+      getV2NativePool(quoteToken, v2PoolProvider, providerConfig),
+    ]);
+    const nativePool = nativePools.find((pool) => pool !== null);
+
+    if (!nativePool) {
+      log.info(
+        'Could not find any V2 or V3 pools to convert the cost into the quote token'
+      );
+      gasCostQuoteToken = CurrencyAmount.fromRawAmount(quoteToken, 0);
+    } else {
+      gasCostQuoteToken = await getGasCostInQuoteToken(
+        quoteToken,
+        nativePool,
+        costNativeCurrency
+      );
+    }
+  }
+
+  // Adjust quote for gas fees
+  let quoteGasAdjusted;
+  if (route.trade.tradeType == TradeType.EXACT_OUTPUT) {
+    // Exact output - need more of tokenIn to get the desired amount of tokenOut
+    quoteGasAdjusted = route.quote.add(gasCostQuoteToken);
+  } else {
+    // Exact input - can get less of tokenOut due to fees
+    quoteGasAdjusted = route.quote.subtract(gasCostQuoteToken);
+  }
+
+  return {
+    estimatedGasUsedUSD: gasCostUSD,
+    estimatedGasUsedQuoteToken: gasCostQuoteToken,
+    quoteGasAdjusted: quoteGasAdjusted,
+  };
+}
+
+export function initSwapRouteFromExisting(
+  swapRoute: SwapRoute,
+  v2PoolProvider: IV2PoolProvider,
+  v3PoolProvider: IV3PoolProvider,
+  quoteGasAdjusted: CurrencyAmount<Currency>,
+  estimatedGasUsed: BigNumber,
+  estimatedGasUsedQuoteToken: CurrencyAmount<Currency>,
+  estimatedGasUsedUSD: CurrencyAmount<Currency>
+): SwapRoute {
+  const currencyIn = swapRoute.trade.inputAmount.currency;
+  const currencyOut = swapRoute.trade.outputAmount.currency;
+  const tradeType = swapRoute.trade.tradeType.valueOf()
+    ? TradeType.EXACT_OUTPUT
+    : TradeType.EXACT_INPUT;
+  const routesWithValidQuote = swapRoute.route.map((route) => {
+    switch (route.protocol) {
+      case Protocol.V3:
+        return new V3RouteWithValidQuote({
+          amount: CurrencyAmount.fromFractionalAmount(
+            route.amount.currency,
+            route.amount.numerator,
+            route.amount.denominator
+          ),
+          rawQuote: BigNumber.from(route.rawQuote),
+          sqrtPriceX96AfterList: route.sqrtPriceX96AfterList.map((num) =>
+            BigNumber.from(num)
+          ),
+          initializedTicksCrossedList: [...route.initializedTicksCrossedList],
+          quoterGasEstimate: BigNumber.from(route.gasEstimate),
+          percent: route.percent,
+          route: route.route,
+          gasModel: route.gasModel,
+          quoteToken: new Token(
+            currencyIn.chainId,
+            route.quoteToken.address,
+            route.quoteToken.decimals,
+            route.quoteToken.symbol,
+            route.quoteToken.name
+          ),
+          tradeType: tradeType,
+          v3PoolProvider: v3PoolProvider,
+        });
+      case Protocol.V2:
+        return new V2RouteWithValidQuote({
+          amount: CurrencyAmount.fromFractionalAmount(
+            route.amount.currency,
+            route.amount.numerator,
+            route.amount.denominator
+          ),
+          rawQuote: BigNumber.from(route.rawQuote),
+          percent: route.percent,
+          route: route.route,
+          gasModel: route.gasModel,
+          quoteToken: new Token(
+            currencyIn.chainId,
+            route.quoteToken.address,
+            route.quoteToken.decimals,
+            route.quoteToken.symbol,
+            route.quoteToken.name
+          ),
+          tradeType: tradeType,
+          v2PoolProvider: v2PoolProvider,
+        });
+      case Protocol.MIXED:
+        return new MixedRouteWithValidQuote({
+          amount: CurrencyAmount.fromFractionalAmount(
+            route.amount.currency,
+            route.amount.numerator,
+            route.amount.denominator
+          ),
+          rawQuote: BigNumber.from(route.rawQuote),
+          sqrtPriceX96AfterList: route.sqrtPriceX96AfterList.map((num) =>
+            BigNumber.from(num)
+          ),
+          initializedTicksCrossedList: [...route.initializedTicksCrossedList],
+          quoterGasEstimate: BigNumber.from(route.gasEstimate),
+          percent: route.percent,
+          route: route.route,
+          mixedRouteGasModel: route.gasModel,
+          v2PoolProvider,
+          quoteToken: new Token(
+            currencyIn.chainId,
+            route.quoteToken.address,
+            route.quoteToken.decimals,
+            route.quoteToken.symbol,
+            route.quoteToken.name
+          ),
+          tradeType: tradeType,
+          v3PoolProvider: v3PoolProvider,
+        });
+    }
+  });
+  const trade = buildTrade<typeof tradeType>(
+    currencyIn,
+    currencyOut,
+    tradeType,
+    routesWithValidQuote
+  );
+  return {
+    quote: swapRoute.quote,
+    quoteGasAdjusted,
+    estimatedGasUsed,
+    estimatedGasUsedQuoteToken,
+    estimatedGasUsedUSD,
+    gasPriceWei: BigNumber.from(swapRoute.gasPriceWei),
+    trade,
+    route: routesWithValidQuote,
+    blockNumber: BigNumber.from(swapRoute.blockNumber),
+    methodParameters: swapRoute.methodParameters
+      ? ({
+          calldata: swapRoute.methodParameters.calldata,
+          value: swapRoute.methodParameters.value,
+          to: swapRoute.methodParameters.to,
+        } as MethodParameters)
+      : undefined,
+    simulationStatus: swapRoute.simulationStatus,
+  };
+}
diff --git a/lib/sor/util/index.ts b/lib/sor/util/index.ts
new file mode 100644
index 0000000..b6abf44
--- /dev/null
+++ b/lib/sor/util/index.ts
@@ -0,0 +1,7 @@
+export * from './addresses';
+export * from './amounts';
+export * from './chains';
+export * from './log';
+export * from './metric';
+export * from './protocols';
+export * from './routes';
diff --git a/lib/sor/util/log.ts b/lib/sor/util/log.ts
new file mode 100644
index 0000000..45ce540
--- /dev/null
+++ b/lib/sor/util/log.ts
@@ -0,0 +1,138 @@
+/* eslint-disable */
+
+import Logger from 'bunyan';
+
+class NullLogger implements Logger {
+  private ERROR_MESSAGE =
+    'NullLogger does not support. Instantiate a valid logger using "setGlobalLogger"';
+  addStream(_stream: Logger.Stream): void {
+    throw new Error(this.ERROR_MESSAGE);
+  }
+  addSerializers(_serializers: Logger.Serializers): void {
+    throw new Error(this.ERROR_MESSAGE);
+  }
+  child(_options: Object, _simple?: boolean): Logger {
+    return this;
+  }
+  reopenFileStreams(): void {
+    throw new Error(this.ERROR_MESSAGE);
+  }
+  level(): number;
+  level(value: Logger.LogLevel): void;
+  level(_value?: any): number | void {
+    return;
+  }
+  levels(): number[];
+  levels(name: string | number): number;
+  levels(name: string | number, value: Logger.LogLevel): void;
+  levels(_name?: any, _value?: any): number | void | number[] {
+    return;
+  }
+  fields: any;
+  src = true;
+  trace(): boolean;
+  trace(error: Error, ...params: any[]): void;
+  trace(obj: Object, ...params: any[]): void;
+  trace(format: any, ...params: any[]): void;
+  trace(..._rest: any): boolean | void {
+    return true;
+  }
+  debug(): boolean;
+  debug(error: Error, ...params: any[]): void;
+  debug(obj: Object, ...params: any[]): void;
+  debug(format: any, ...params: any[]): void;
+  debug(..._rest: any): boolean | void {
+    return true;
+  }
+  info(): boolean;
+  info(error: Error, ...params: any[]): void;
+  info(obj: Object, ...params: any[]): void;
+  info(format: any, ...params: any[]): void;
+  info(..._rest: any): boolean | void {
+    return true;
+  }
+  warn(): boolean;
+  warn(error: Error, ...params: any[]): void;
+  warn(obj: Object, ...params: any[]): void;
+  warn(format: any, ...params: any[]): void;
+  warn(..._rest: any): boolean | void {
+    return true;
+  }
+  error(): boolean;
+  error(error: Error, ...params: any[]): void;
+  error(obj: Object, ...params: any[]): void;
+  error(format: any, ...params: any[]): void;
+  error(..._rest: any): boolean | void {
+    return true;
+  }
+  fatal(): boolean;
+  fatal(error: Error, ...params: any[]): void;
+  fatal(obj: Object, ...params: any[]): void;
+  fatal(format: any, ...params: any[]): void;
+  fatal(..._rest: any): boolean | void {
+    return true;
+  }
+  addListener(
+    _event: string | symbol,
+    _listener: (...args: any[]) => void
+  ): this {
+    throw new Error(this.ERROR_MESSAGE);
+  }
+  on(_event: string | symbol, _listener: (...args: any[]) => void): this {
+    throw new Error(this.ERROR_MESSAGE);
+  }
+  once(_event: string | symbol, _listener: (...args: any[]) => void): this {
+    throw new Error(this.ERROR_MESSAGE);
+  }
+  removeListener(
+    _event: string | symbol,
+    _listener: (...args: any[]) => void
+  ): this {
+    throw new Error(this.ERROR_MESSAGE);
+  }
+  off(_event: string | symbol, _listener: (...args: any[]) => void): this {
+    throw new Error(this.ERROR_MESSAGE);
+  }
+  removeAllListeners(_event?: string | symbol): this {
+    throw new Error(this.ERROR_MESSAGE);
+  }
+  setMaxListeners(_n: number): this {
+    throw new Error(this.ERROR_MESSAGE);
+  }
+  getMaxListeners(): number {
+    throw new Error(this.ERROR_MESSAGE);
+  }
+  listeners(_event: string | symbol): Function[] {
+    throw new Error(this.ERROR_MESSAGE);
+  }
+  rawListeners(_event: string | symbol): Function[] {
+    throw new Error(this.ERROR_MESSAGE);
+  }
+  emit(_event: string | symbol, ..._args: any[]): boolean {
+    throw new Error(this.ERROR_MESSAGE);
+  }
+  listenerCount(_event: string | symbol): number {
+    throw new Error(this.ERROR_MESSAGE);
+  }
+  prependListener(
+    _event: string | symbol,
+    _listener: (...args: any[]) => void
+  ): this {
+    throw new Error(this.ERROR_MESSAGE);
+  }
+  prependOnceListener(
+    _event: string | symbol,
+    _listener: (...args: any[]) => void
+  ): this {
+    throw new Error(this.ERROR_MESSAGE);
+  }
+  eventNames(): (string | symbol)[] {
+    throw new Error(this.ERROR_MESSAGE);
+  }
+}
+
+export let log: Logger = new NullLogger();
+
+export const setGlobalLogger = (_log: Logger) => {
+  log = _log;
+};
diff --git a/lib/sor/util/methodParameters.ts b/lib/sor/util/methodParameters.ts
new file mode 100644
index 0000000..054bbcb
--- /dev/null
+++ b/lib/sor/util/methodParameters.ts
@@ -0,0 +1,257 @@
+import {
+  MixedRouteSDK,
+  Protocol,
+  SwapRouter as SwapRouter02,
+  Trade,
+} from '@uniswap/router-sdk';
+import { ChainId, Currency, TradeType } from '@uniswap/sdk-core';
+import {
+  SwapRouter as UniveralRouter,
+  UNIVERSAL_ROUTER_ADDRESS,
+} from '@uniswap/universal-router-sdk';
+import { Route as V2RouteRaw } from '@uniswap/v2-sdk';
+import { Route as V3RouteRaw } from '@uniswap/v3-sdk';
+import _ from 'lodash';
+
+import {
+  CurrencyAmount,
+  MethodParameters,
+  MixedRouteWithValidQuote,
+  RouteWithValidQuote,
+  SWAP_ROUTER_02_ADDRESSES,
+  SwapOptions,
+  SwapType,
+  V2RouteWithValidQuote,
+  V3RouteWithValidQuote,
+} from '..';
+
+export function buildTrade<TTradeType extends TradeType>(
+  tokenInCurrency: Currency,
+  tokenOutCurrency: Currency,
+  tradeType: TTradeType,
+  routeAmounts: RouteWithValidQuote[]
+): Trade<Currency, Currency, TTradeType> {
+  /// Removed partition because of new mixedRoutes
+  const v3RouteAmounts = _.filter(
+    routeAmounts,
+    (routeAmount) => routeAmount.protocol === Protocol.V3
+  );
+  const v2RouteAmounts = _.filter(
+    routeAmounts,
+    (routeAmount) => routeAmount.protocol === Protocol.V2
+  );
+  const mixedRouteAmounts = _.filter(
+    routeAmounts,
+    (routeAmount) => routeAmount.protocol === Protocol.MIXED
+  );
+
+  const v3Routes = _.map<
+    V3RouteWithValidQuote,
+    {
+      routev3: V3RouteRaw<Currency, Currency>;
+      inputAmount: CurrencyAmount;
+      outputAmount: CurrencyAmount;
+    }
+  >(
+    v3RouteAmounts as V3RouteWithValidQuote[],
+    (routeAmount: V3RouteWithValidQuote) => {
+      const { route, amount, quote } = routeAmount;
+
+      // The route, amount and quote are all in terms of wrapped tokens.
+      // When constructing the Trade object the inputAmount/outputAmount must
+      // use native currencies if specified by the user. This is so that the Trade knows to wrap/unwrap.
+      if (tradeType == TradeType.EXACT_INPUT) {
+        const amountCurrency = CurrencyAmount.fromFractionalAmount(
+          tokenInCurrency,
+          amount.numerator,
+          amount.denominator
+        );
+        const quoteCurrency = CurrencyAmount.fromFractionalAmount(
+          tokenOutCurrency,
+          quote.numerator,
+          quote.denominator
+        );
+
+        const routeRaw = new V3RouteRaw(
+          route.pools,
+          amountCurrency.currency,
+          quoteCurrency.currency
+        );
+
+        return {
+          routev3: routeRaw,
+          inputAmount: amountCurrency,
+          outputAmount: quoteCurrency,
+        };
+      } else {
+        const quoteCurrency = CurrencyAmount.fromFractionalAmount(
+          tokenInCurrency,
+          quote.numerator,
+          quote.denominator
+        );
+
+        const amountCurrency = CurrencyAmount.fromFractionalAmount(
+          tokenOutCurrency,
+          amount.numerator,
+          amount.denominator
+        );
+
+        const routeCurrency = new V3RouteRaw(
+          route.pools,
+          quoteCurrency.currency,
+          amountCurrency.currency
+        );
+
+        return {
+          routev3: routeCurrency,
+          inputAmount: quoteCurrency,
+          outputAmount: amountCurrency,
+        };
+      }
+    }
+  );
+
+  const v2Routes = _.map<
+    V2RouteWithValidQuote,
+    {
+      routev2: V2RouteRaw<Currency, Currency>;
+      inputAmount: CurrencyAmount;
+      outputAmount: CurrencyAmount;
+    }
+  >(
+    v2RouteAmounts as V2RouteWithValidQuote[],
+    (routeAmount: V2RouteWithValidQuote) => {
+      const { route, amount, quote } = routeAmount;
+
+      // The route, amount and quote are all in terms of wrapped tokens.
+      // When constructing the Trade object the inputAmount/outputAmount must
+      // use native currencies if specified by the user. This is so that the Trade knows to wrap/unwrap.
+      if (tradeType == TradeType.EXACT_INPUT) {
+        const amountCurrency = CurrencyAmount.fromFractionalAmount(
+          tokenInCurrency,
+          amount.numerator,
+          amount.denominator
+        );
+        const quoteCurrency = CurrencyAmount.fromFractionalAmount(
+          tokenOutCurrency,
+          quote.numerator,
+          quote.denominator
+        );
+
+        const routeV2SDK = new V2RouteRaw(
+          route.pairs,
+          amountCurrency.currency,
+          quoteCurrency.currency
+        );
+
+        return {
+          routev2: routeV2SDK,
+          inputAmount: amountCurrency,
+          outputAmount: quoteCurrency,
+        };
+      } else {
+        const quoteCurrency = CurrencyAmount.fromFractionalAmount(
+          tokenInCurrency,
+          quote.numerator,
+          quote.denominator
+        );
+
+        const amountCurrency = CurrencyAmount.fromFractionalAmount(
+          tokenOutCurrency,
+          amount.numerator,
+          amount.denominator
+        );
+
+        const routeV2SDK = new V2RouteRaw(
+          route.pairs,
+          quoteCurrency.currency,
+          amountCurrency.currency
+        );
+
+        return {
+          routev2: routeV2SDK,
+          inputAmount: quoteCurrency,
+          outputAmount: amountCurrency,
+        };
+      }
+    }
+  );
+
+  const mixedRoutes = _.map<
+    MixedRouteWithValidQuote,
+    {
+      mixedRoute: MixedRouteSDK<Currency, Currency>;
+      inputAmount: CurrencyAmount;
+      outputAmount: CurrencyAmount;
+    }
+  >(
+    mixedRouteAmounts as MixedRouteWithValidQuote[],
+    (routeAmount: MixedRouteWithValidQuote) => {
+      const { route, amount, quote } = routeAmount;
+
+      if (tradeType != TradeType.EXACT_INPUT) {
+        throw new Error(
+          'Mixed routes are only supported for exact input trades'
+        );
+      }
+
+      // The route, amount and quote are all in terms of wrapped tokens.
+      // When constructing the Trade object the inputAmount/outputAmount must
+      // use native currencies if specified by the user. This is so that the Trade knows to wrap/unwrap.
+      const amountCurrency = CurrencyAmount.fromFractionalAmount(
+        tokenInCurrency,
+        amount.numerator,
+        amount.denominator
+      );
+      const quoteCurrency = CurrencyAmount.fromFractionalAmount(
+        tokenOutCurrency,
+        quote.numerator,
+        quote.denominator
+      );
+
+      const routeRaw = new MixedRouteSDK(
+        route.pools,
+        amountCurrency.currency,
+        quoteCurrency.currency
+      );
+
+      return {
+        mixedRoute: routeRaw,
+        inputAmount: amountCurrency,
+        outputAmount: quoteCurrency,
+      };
+    }
+  );
+
+  const trade = new Trade({ v2Routes, v3Routes, mixedRoutes, tradeType });
+
+  return trade;
+}
+
+export function buildSwapMethodParameters(
+  trade: Trade<Currency, Currency, TradeType>,
+  swapConfig: SwapOptions,
+  chainId: ChainId
+): MethodParameters {
+  if (swapConfig.type == SwapType.UNIVERSAL_ROUTER) {
+    return {
+      ...UniveralRouter.swapERC20CallParameters(trade, swapConfig),
+      to: UNIVERSAL_ROUTER_ADDRESS(chainId),
+    };
+  } else if (swapConfig.type == SwapType.SWAP_ROUTER_02) {
+    const { recipient, slippageTolerance, deadline, inputTokenPermit } =
+      swapConfig;
+
+    return {
+      ...SwapRouter02.swapCallParameters(trade, {
+        recipient,
+        slippageTolerance,
+        deadlineOrPreviousBlockhash: deadline,
+        inputTokenPermit,
+      }),
+      to: SWAP_ROUTER_02_ADDRESSES(chainId),
+    };
+  }
+
+  throw new Error(`Unsupported swap type ${swapConfig}`);
+}
diff --git a/lib/sor/util/metric.ts b/lib/sor/util/metric.ts
new file mode 100644
index 0000000..1662499
--- /dev/null
+++ b/lib/sor/util/metric.ts
@@ -0,0 +1,76 @@
+import Logger from 'bunyan';
+
+import { log } from './log';
+
+export enum MetricLoggerUnit {
+  Seconds = 'Seconds',
+  Microseconds = 'Microseconds',
+  Milliseconds = 'Milliseconds',
+  Bytes = 'Bytes',
+  Kilobytes = 'Kilobytes',
+  Megabytes = 'Megabytes',
+  Gigabytes = 'Gigabytes',
+  Terabytes = 'Terabytes',
+  Bits = 'Bits',
+  Kilobits = 'Kilobits',
+  Megabits = 'Megabits',
+  Gigabits = 'Gigabits',
+  Terabits = 'Terabits',
+  Percent = 'Percent',
+  Count = 'Count',
+  BytesPerSecond = 'Bytes/Second',
+  KilobytesPerSecond = 'Kilobytes/Second',
+  MegabytesPerSecond = 'Megabytes/Second',
+  GigabytesPerSecond = 'Gigabytes/Second',
+  TerabytesPerSecond = 'Terabytes/Second',
+  BitsPerSecond = 'Bits/Second',
+  KilobitsPerSecond = 'Kilobits/Second',
+  MegabitsPerSecond = 'Megabits/Second',
+  GigabitsPerSecond = 'Gigabits/Second',
+  TerabitsPerSecond = 'Terabits/Second',
+  CountPerSecond = 'Count/Second',
+  None = 'None',
+}
+
+export abstract class IMetric {
+  abstract setProperty(key: string, value: unknown): void;
+
+  abstract putDimensions(dimensions: Record<string, string>): void;
+
+  abstract putMetric(key: string, value: number, unit?: MetricLoggerUnit): void;
+}
+
+interface MetricContext {
+  chainId: number;
+  networkName: string;
+}
+
+export class MetricLogger extends IMetric {
+  private log: Logger;
+
+  constructor(context?: MetricContext) {
+    super();
+    this.log = log.child(context || {});
+  }
+
+  public setProperty(key: string, value: unknown): void {
+    this.log = this.log.child({ [key]: value });
+  }
+
+  public putDimensions(dimensions: Record<string, string>): void {
+    this.log = this.log.child(dimensions);
+  }
+
+  public putMetric(key: string, value: number, unit?: MetricLoggerUnit): void {
+    this.log.info(
+      { key, value, unit },
+      `[Metric]: ${key}: ${value} | ${unit ? unit : ''}`
+    );
+  }
+}
+
+export let metric: IMetric = new MetricLogger();
+
+export const setGlobalMetric = (_metric: IMetric) => {
+  metric = _metric;
+};
diff --git a/lib/sor/util/protocols.ts b/lib/sor/util/protocols.ts
new file mode 100644
index 0000000..8be4c5c
--- /dev/null
+++ b/lib/sor/util/protocols.ts
@@ -0,0 +1,14 @@
+import { Protocol } from '@uniswap/router-sdk';
+
+export const TO_PROTOCOL = (protocol: string): Protocol => {
+  switch (protocol.toLowerCase()) {
+    case 'v3':
+      return Protocol.V3;
+    case 'v2':
+      return Protocol.V2;
+    case 'mixed':
+      return Protocol.MIXED;
+    default:
+      throw new Error(`Unknown protocol: {id}`);
+  }
+};
diff --git a/lib/sor/util/routes.ts b/lib/sor/util/routes.ts
new file mode 100644
index 0000000..c65f79a
--- /dev/null
+++ b/lib/sor/util/routes.ts
@@ -0,0 +1,88 @@
+import { Protocol } from '@uniswap/router-sdk';
+import { Percent } from '@uniswap/sdk-core';
+import { Pair } from '@uniswap/v2-sdk';
+import { Pool } from '@uniswap/v3-sdk';
+import _ from 'lodash';
+
+import { RouteWithValidQuote } from '../routers/alpha-router';
+import { MixedRoute, V2Route, V3Route } from '../routers/router';
+import { V3_CORE_FACTORY_ADDRESSES } from './addresses';
+
+import { CurrencyAmount } from '.';
+
+export const routeToString = (
+  route: V3Route | V2Route | MixedRoute
+): string => {
+  const routeStr = [];
+  const tokens =
+    route.protocol === Protocol.V3
+      ? route.tokenPath
+      : // MixedRoute and V2Route have path
+        route.path;
+  const tokenPath = _.map(tokens, (token) => `${token.symbol}`);
+  const pools =
+    route.protocol === Protocol.V3 || route.protocol === Protocol.MIXED
+      ? route.pools
+      : route.pairs;
+  const poolFeePath = _.map(pools, (pool) => {
+    return `${
+      pool instanceof Pool
+        ? ` -- ${pool.fee / 10000}% [${Pool.getAddress(
+            pool.token0,
+            pool.token1,
+            pool.fee,
+            undefined,
+            V3_CORE_FACTORY_ADDRESSES[pool.chainId]
+          )}]`
+        : ` -- [${Pair.getAddress(
+            (pool as Pair).token0,
+            (pool as Pair).token1
+          )}]`
+    } --> `;
+  });
+
+  for (let i = 0; i < tokenPath.length; i++) {
+    routeStr.push(tokenPath[i]);
+    if (i < poolFeePath.length) {
+      routeStr.push(poolFeePath[i]);
+    }
+  }
+
+  return routeStr.join('');
+};
+
+export const routeAmountsToString = (
+  routeAmounts: RouteWithValidQuote[]
+): string => {
+  const total = _.reduce(
+    routeAmounts,
+    (total: CurrencyAmount, cur: RouteWithValidQuote) => {
+      return total.add(cur.amount);
+    },
+    CurrencyAmount.fromRawAmount(routeAmounts[0]!.amount.currency, 0)
+  );
+
+  const routeStrings = _.map(routeAmounts, ({ protocol, route, amount }) => {
+    const portion = amount.divide(total);
+    const percent = new Percent(portion.numerator, portion.denominator);
+    /// @dev special case for MIXED routes we want to show user friendly V2+V3 instead
+    return `[${
+      protocol == Protocol.MIXED ? 'V2 + V3' : protocol
+    }] ${percent.toFixed(2)}% = ${routeToString(route)}`;
+  });
+
+  return _.join(routeStrings, ', ');
+};
+
+export const routeAmountToString = (
+  routeAmount: RouteWithValidQuote
+): string => {
+  const { route, amount } = routeAmount;
+  return `${amount.toExact()} = ${routeToString(route)}`;
+};
+
+export const poolToString = (p: Pool | Pair): string => {
+  return `${p.token0.symbol}/${p.token1.symbol}${
+    p instanceof Pool ? `/${p.fee / 10000}%` : ``
+  }`;
+};
diff --git a/lib/sor/util/unsupported-tokens.ts b/lib/sor/util/unsupported-tokens.ts
new file mode 100644
index 0000000..bd643d0
--- /dev/null
+++ b/lib/sor/util/unsupported-tokens.ts
@@ -0,0 +1,1182 @@
+export const UNSUPPORTED_TOKENS = {
+  name: 'Unsupported Token List',
+  timestamp: '2021-01-05T20:47:02.923Z',
+  version: {
+    major: 1,
+    minor: 0,
+    patch: 0,
+  },
+  tags: {},
+  logoURI: 'ipfs://QmNa8mQkrNKp1WEEeGjFezDmDeodkWRevGFN8JCV7b4Xir',
+  keywords: ['uniswap', 'unsupported', 'broken'],
+  tokens: [
+    {
+      name: 'USD Token',
+      address: '0xd233d1f6fd11640081abb8db125f722b5dc729dc',
+      symbol: 'USD',
+      decimals: 9,
+      chainId: 1,
+      logoURI: '',
+    },
+    {
+      name: 'UNI HODL',
+      address: '0x4bf5dc91E2555449293D7824028Eb8Fe5879B689',
+      symbol: 'UniH',
+      decimals: 18,
+      chainId: 1,
+      logoURI: '',
+    },
+    {
+      name: 'Gold Tether',
+      address: '0x4922a015c4407F87432B179bb209e125432E4a2A',
+      symbol: 'XAUt',
+      decimals: 6,
+      chainId: 1,
+      logoURI:
+        'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x4922a015c4407F87432B179bb209e125432E4a2A/logo.png',
+    },
+    {
+      name: 'Grump Cat',
+      address: '0x93B2FfF814FCaEFFB01406e80B4Ecd89Ca6A021b',
+      symbol: 'GRUMPY',
+      decimals: 9,
+      chainId: 1,
+      logoURI:
+        'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x4922a015c4407F87432B179bb209e125432E4a2A/logo.png',
+    },
+    {
+      name: 'apeUSD-UMA Synthetic USD (Dec 2021)',
+      address: '0xfA5e27893aee4805283D86e4283Da64F8c72dd56',
+      symbol: 'apeUSD-UMA-DEC21',
+      decimals: 18,
+      chainId: 1,
+      logoURI: '',
+    },
+    {
+      chainId: 1,
+      address: '0xc6b11850241c5127eab73af4b6c68bc267cbbff4',
+      name: 'oWETHp Put 360 DEC2520',
+      symbol: 'oWETH-360P-12/25/20',
+      decimals: 7,
+    },
+    {
+      chainId: 1,
+      name: 'oYFIp Put 25000 OCT0220',
+      address: '0x452b421be5b30f0c6ad8c3f03c06bdaab4f5c56c',
+      symbol: 'oYFI-25000P-10/02/20',
+      decimals: 7,
+    },
+    {
+      chainId: 1,
+      name: 'oWETHp Put 360 OCT3020',
+      address: '0x0578779e746d7186253a36cf651ea786acfcf087',
+      symbol: 'oWETH-360P-10/30/20',
+      decimals: 7,
+    },
+    {
+      chainId: 1,
+      name: 'ETHc Call 500 OCT3020',
+      address: '0xf9aba2e43fb19184408ea3b572a0fd672946f87b',
+      symbol: 'oETH-500C-10/30/20',
+      decimals: 6,
+    },
+    {
+      chainId: 1,
+      name: 'oBALp Put 22 OCT0220',
+      address: '0xdb0991dfc7e828b5a2837dc82d68e16490562c8d',
+      symbol: 'oBAL-22P-10/02/20',
+      decimals: 7,
+    },
+    {
+      chainId: 1,
+      name: 'oCOMPp Put 150 SEP2520',
+      address: '0xe951ebe6b4420ab3f4844cf36dedd263d095b416',
+      symbol: 'oCOMP-150P-09/25/20',
+      decimals: 7,
+    },
+    {
+      chainId: 1,
+      name: 'oCRVp Put 3 SEP252020',
+      address: '0x9215bd49b59748419eac6bad9dbe247df06ebdb9',
+      symbol: 'oCRV-3P-09/25/20',
+      decimals: 7,
+    },
+    {
+      chainId: 1,
+      name: 'oETHp Put 180 SEP2520',
+      address: '0xE3A2c34Fa2F59ffa95C4ACd1E5663633d45Bc3AD',
+      symbol: 'oETH-180P-09/25/20',
+      decimals: 7,
+    },
+    {
+      chainId: 1,
+      name: 'oETHc Call 400 SEP2520',
+      address: '0x05977EBC26825C0CD6097E0Ad7204721516711Eb',
+      symbol: 'oETH-400C-09/25/20',
+      decimals: 7,
+    },
+    {
+      chainId: 1,
+      name: 'oWETHp Put 380 SEP1820',
+      address: '0x31f88266301b08631f9f0e33fd5c43c2a5d1e5b2',
+      symbol: 'oWETH-380P-09/18/20',
+      decimals: 7,
+    },
+    {
+      chainId: 1,
+      name: 'oYFIp Put 8500 SEP1820',
+      address: '0xd1cec2f67fdc4c60e0963515dfc3343f31e32e47',
+      symbol: 'oYFI-8500P-09/18/20',
+      decimals: 7,
+    },
+    {
+      chainId: 1,
+      name: 'oWETHp Put 370 SEP1120',
+      address: '0x15844029b2c2bf24506e9937739a9a912f1e4354',
+      symbol: 'oWETH-370P-09/11/20',
+      decimals: 7,
+    },
+    {
+      chainId: 1,
+      name: 'oWETHp Put 400 SEP0420',
+      address: '0x5562c33c383f6386be4f6dcdbd35a3a99bbcfde6',
+      symbol: 'oWETH-400P-09/04/20',
+      decimals: 7,
+    },
+    {
+      chainId: 1,
+      name: 'oETHp Put 200 AUG2820',
+      address: '0x3CBFC1397deF0602c2d211c70A1c0c38CEDB5448',
+      symbol: 'oWETH-400P-09/04/20',
+      decimals: 7,
+    },
+    {
+      chainId: 1,
+      name: 'Opyn cDai Insurance',
+      symbol: 'ocDai',
+      address: '0x98cc3bd6af1880fcfda17ac477b2f612980e5e33',
+      decimals: 8,
+    },
+    {
+      chainId: 1,
+      name: 'Opyn cUSDC Insurance',
+      symbol: 'ocUSDC',
+      address: '0x8ED9f862363fFdFD3a07546e618214b6D59F03d4',
+      decimals: 8,
+    },
+    {
+      chainId: 1,
+      address: '0x176C674Ee533C6139B0dc8b458D72A93dCB3e705',
+      symbol: 'iAAVE',
+      name: 'Synth Inverse Aave',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/iAAVE.svg',
+      tags: ['inverse', 'synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x8A8079c7149B8A1611e5C5d978DCA3bE16545F83',
+      symbol: 'iADA',
+      name: 'Synth Inverse Cardano',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/iADA.svg',
+      tags: ['inverse', 'synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xAFD870F32CE54EfdBF677466B612bf8ad164454B',
+      symbol: 'iBNB',
+      name: 'Synth Inverse Binance Coin',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/iBNB.svg',
+      tags: ['inverse', 'synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xD6014EA05BDe904448B743833dDF07c3C7837481',
+      symbol: 'iBTC',
+      name: 'Synth Inverse Bitcoin',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/iBTC.svg',
+      tags: ['inverse', 'synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x336213e1DDFC69f4701Fc3F86F4ef4A160c1159d',
+      symbol: 'iCEX',
+      name: 'Synth Inverse Centralised Exchange Index',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/iCEX.svg',
+      tags: ['index', 'inverse', 'synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x6345728B1ccE16E6f8C509950b5c84FFF88530d9',
+      symbol: 'iCOMP',
+      name: 'Synth Inverse Compound',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/iCOMP.svg',
+      tags: ['inverse', 'synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xCB98f42221b2C251A4E74A1609722eE09f0cc08E',
+      symbol: 'iDASH',
+      name: 'Synth Inverse Dash',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/iDASH.svg',
+      tags: ['inverse', 'synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x14d10003807AC60d07BB0ba82cAeaC8d2087c157',
+      symbol: 'iDEFI',
+      name: 'Synth Inverse DeFi Index',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/iDEFI.svg',
+      tags: ['index', 'inverse', 'synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x46a97629C9C1F58De6EC18C7F536e7E6d6A6ecDe',
+      symbol: 'iDOT',
+      name: 'Synth Inverse Polkadot',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/iDOT.svg',
+      tags: ['inverse', 'synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xF4EebDD0704021eF2a6Bbe993fdf93030Cd784b4',
+      symbol: 'iEOS',
+      name: 'Synth Inverse EOS',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/iEOS.svg',
+      tags: ['inverse', 'synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xd50c1746D835d2770dDA3703B69187bFfeB14126',
+      symbol: 'iETC',
+      name: 'Synth Inverse Ethereum Classic',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/iETC.svg',
+      tags: ['inverse', 'synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xA9859874e1743A32409f75bB11549892138BBA1E',
+      symbol: 'iETH',
+      name: 'Synth Inverse Ether',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/iETH.svg',
+      tags: ['inverse', 'synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x2d7aC061fc3db53c39fe1607fB8cec1B2C162B01',
+      symbol: 'iLINK',
+      name: 'Synth Inverse Chainlink',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/iLINK.svg',
+      tags: ['inverse', 'synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x79da1431150C9b82D2E5dfc1C68B33216846851e',
+      symbol: 'iLTC',
+      name: 'Synth Inverse Litecoin',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/iLTC.svg',
+      tags: ['inverse', 'synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xA5a5DF41883Cdc00c4cCC6E8097130535399d9a3',
+      symbol: 'iOIL',
+      name: 'Synth Inverse Perpetual Oil Futures',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/iOIL.svg',
+      tags: ['inverse', 'synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x0fEd38108bdb8e62ef7b5680E8E0726E2F29e0De',
+      symbol: 'iREN',
+      name: 'Synth Inverse Ren',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/iREN.svg',
+      tags: ['inverse', 'synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xC5807183a9661A533CB08CbC297594a0B864dc12',
+      symbol: 'iTRX',
+      name: 'Synth Inverse TRON',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/iTRX.svg',
+      tags: ['inverse', 'synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x36A00FF9072570eF4B9292117850B8FE08d96cce',
+      symbol: 'iUNI',
+      name: 'Synth Inverse Uniswap',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/iUNI.svg',
+      tags: ['inverse', 'synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x4AdF728E2Df4945082cDD6053869f51278fae196',
+      symbol: 'iXMR',
+      name: 'Synth Inverse Monero',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/iXMR.svg',
+      tags: ['inverse', 'synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x27269b3e45A4D3E79A3D6BFeE0C8fB13d0D711A6',
+      symbol: 'iXRP',
+      name: 'Synth Inverse Ripple',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/iXRP.svg',
+      tags: ['inverse', 'synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x8deef89058090ac5655A99EEB451a4f9183D1678',
+      symbol: 'iXTZ',
+      name: 'Synth Inverse Tezos',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/iXTZ.svg',
+      tags: ['inverse', 'synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x592244301CeA952d6daB2fdC1fE6bd9E53917306',
+      symbol: 'iYFI',
+      name: 'Synth Inverse yearn.finance',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/iYFI.svg',
+      tags: ['inverse', 'synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xcD39b5434a0A92cf47D1F567a7dF84bE356814F0',
+      symbol: 's1INCH',
+      name: 'Synth 1inch',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/s1INCH.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x7537AAe01f3B218DAE75e10d952473823F961B87',
+      symbol: 'sAAPL',
+      name: 'Synth Apple',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sAAPL.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xd2dF355C19471c8bd7D8A3aa27Ff4e26A21b4076',
+      symbol: 'sAAVE',
+      name: 'Synth Aave',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sAAVE.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xe36E2D3c7c34281FA3bC737950a68571736880A1',
+      symbol: 'sADA',
+      name: 'Synth Cardano',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sADA.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x9CF7E61853ea30A41b02169391b393B901eac457',
+      symbol: 'sAMZN',
+      name: 'Synth Amazon',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sAMZN.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xF48e200EAF9906362BB1442fca31e0835773b8B4',
+      symbol: 'sAUD',
+      name: 'Synth Australian Dollars',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sAUD.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x617aeCB6137B5108D1E7D4918e3725C8cEbdB848',
+      symbol: 'sBNB',
+      name: 'Synth Binance Coin',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sBNB.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xfE18be6b3Bd88A2D2A7f928d00292E7a9963CfC6',
+      symbol: 'sBTC',
+      name: 'Synth Bitcoin',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sBTC.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xeABACD844A196D7Faf3CE596edeBF9900341B420',
+      symbol: 'sCEX',
+      name: 'Synth Centralised Exchange Index',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sCEX.svg',
+      tags: ['index', 'synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x0F83287FF768D1c1e17a42F44d644D7F22e8ee1d',
+      symbol: 'sCHF',
+      name: 'Synth Swiss Franc',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sCHF.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x9EeF4CA7aB9fa8bc0650127341C2d3F707a40f8A',
+      symbol: 'sCOIN',
+      name: 'Synth Coinbase',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sCOIN.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xEb029507d3e043DD6C87F2917C4E82B902c35618',
+      symbol: 'sCOMP',
+      name: 'Synth Compound',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sCOMP.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xD38aEb759891882e78E957c80656572503D8c1B1',
+      symbol: 'sCRV',
+      name: 'Synth Curve DAO Token',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sCRV.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xfE33ae95A9f0DA8A845aF33516EDc240DCD711d6',
+      symbol: 'sDASH',
+      name: 'Synth Dash',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sDASH.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xe1aFe1Fd76Fd88f78cBf599ea1846231B8bA3B6B',
+      symbol: 'sDEFI',
+      name: 'Synth DeFi Index',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sDEFI.svg',
+      tags: ['index', 'synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x1715AC0743102BF5Cd58EfBB6Cf2dC2685d967b6',
+      symbol: 'sDOT',
+      name: 'Synth Polkadot',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sDOT.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x88C8Cf3A212c0369698D13FE98Fcb76620389841',
+      symbol: 'sEOS',
+      name: 'Synth EOS',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sEOS.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x22602469d704BfFb0936c7A7cfcD18f7aA269375',
+      symbol: 'sETC',
+      name: 'Synth Ethereum Classic',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sETC.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb',
+      symbol: 'sETH',
+      name: 'Synth Ether',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sETH.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xD71eCFF9342A5Ced620049e616c5035F1dB98620',
+      symbol: 'sEUR',
+      name: 'Synth Euros',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sEUR.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xf50B5e535F62a56A9BD2d8e2434204E726c027Fa',
+      symbol: 'sFB',
+      name: 'Synth Facebook',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sFB.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x23348160D7f5aca21195dF2b70f28Fce2B0be9fC',
+      symbol: 'sFTSE',
+      name: 'Synth FTSE 100 Index',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sFTSE.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x97fe22E7341a0Cd8Db6F6C021A24Dc8f4DAD855F',
+      symbol: 'sGBP',
+      name: 'Synth Pound Sterling',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sGBP.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xC63B8ECCE56aB9C46184eC6aB85e4771fEa4c8AD',
+      symbol: 'sGOOG',
+      name: 'Synth Alphabet',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sGOOG.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xF6b1C627e95BFc3c1b4c9B825a032Ff0fBf3e07d',
+      symbol: 'sJPY',
+      name: 'Synth Japanese Yen',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sJPY.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x269895a3dF4D73b077Fc823dD6dA1B95f72Aaf9B',
+      symbol: 'sKRW',
+      name: 'Synth South Korean Won',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sKRW.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xbBC455cb4F1B9e4bFC4B73970d360c8f032EfEE6',
+      symbol: 'sLINK',
+      name: 'Synth Chainlink',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sLINK.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xC14103C2141E842e228FBaC594579e798616ce7A',
+      symbol: 'sLTC',
+      name: 'Synth Litecoin',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sLTC.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x745a824D6aBBD236AA794b5530062778A6Ad7523',
+      symbol: 'sMSFT',
+      name: 'Synth Microsoft',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sMSFT.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x5A7E3c07604EB515C16b36cd51906a65f021F609',
+      symbol: 'sNFLX',
+      name: 'Synth Netflix',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sNFLX.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x757de3ac6B830a931eF178C6634c5C551773155c',
+      symbol: 'sNIKKEI',
+      name: 'Synth Nikkei 225 Index',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sNIKKEI.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x6d16cF3EC5F763d4d99cB0B0b110eefD93B11B56',
+      symbol: 'sOIL',
+      name: 'Synth Perpetual Oil Futures',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sOIL.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xD31533E8d0f3DF62060e94B3F1318137bB6E3525',
+      symbol: 'sREN',
+      name: 'Synth Ren',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sREN.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x0352557B007A4Aae1511C114409b932F06F9E2f4',
+      symbol: 'sRUNE',
+      name: 'Synth THORChain',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sRUNE.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xf2E08356588EC5cd9E437552Da87C0076b4970B0',
+      symbol: 'sTRX',
+      name: 'Synth TRON',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sTRX.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x918dA91Ccbc32B7a6A0cc4eCd5987bbab6E31e6D',
+      symbol: 'sTSLA',
+      name: 'Synth Tesla',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sTSLA.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x30635297E450b930f8693297eBa160D9e6c8eBcf',
+      symbol: 'sUNI',
+      name: 'Synth Uniswap',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sUNI.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x6A22e5e94388464181578Aa7A6B869e00fE27846',
+      symbol: 'sXAG',
+      name: 'Synth Silver Ounce',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sXAG.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x261EfCdD24CeA98652B9700800a13DfBca4103fF',
+      symbol: 'sXAU',
+      name: 'Synth Gold Ounce',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sXAU.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x5299d6F7472DCc137D7f3C4BcfBBB514BaBF341A',
+      symbol: 'sXMR',
+      name: 'Synth Monero',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sXMR.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0xa2B0fDe6D710e201d0d608e924A484d1A5fEd57c',
+      symbol: 'sXRP',
+      name: 'Synth Ripple',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sXRP.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x2e59005c5c0f0a4D77CcA82653d48b46322EE5Cd',
+      symbol: 'sXTZ',
+      name: 'Synth Tezos',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sXTZ.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x992058B7DB08F9734d84485bfbC243C4ee6954A7',
+      symbol: 'sYFI',
+      name: 'Synth yearn.finance',
+      decimals: 18,
+      logoURI:
+        'https://raw.githubusercontent.com/Synthetixio/synthetix-assets/v2.0.10/synths/sYFI.svg',
+      tags: ['synth'],
+    },
+    {
+      chainId: 1,
+      address: '0x81ab848898b5ffD3354dbbEfb333D5D183eEDcB5',
+      name: 'yUSD Synthetic Expiring 1 September 2020',
+      symbol: 'yUSDSEP20',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0xB2FdD60AD80ca7bA89B9BAb3b5336c2601C020b4',
+      name: 'yUSD Synthetic Expiring 1 October 2020',
+      symbol: 'yUSDOCT20',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x208d174775dc39fe18b1b374972f77ddec6c0f73',
+      name: 'uUSDrBTC Synthetic Expiring 1 Oct 2020',
+      symbol: 'uUSDrBTC-OCT',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0xf06ddacf71e2992e2122a1a0168c6967afdf63ce',
+      name: 'uUSDrBTC Synthetic Expiring 31 Dec 2020',
+      symbol: 'uUSDrBTC-DEC',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0xd16c79c8a39d44b2f3eb45d2019cd6a42b03e2a9',
+      name: 'uUSDwETH Synthetic Expiring 31 Dec 2020',
+      symbol: 'uUSDwETH-DEC',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x3d995510f8d82c2ea341845932b5ddde0bead9a3',
+      name: 'uGAS-JAN21 Token Expiring 31 Jan 2021',
+      symbol: 'uGAS-JAN21',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x90f802c7e8fb5d40b0de583e34c065a3bd2020d8',
+      name: 'YD-ETH-MAR21 Token Expiring 31 Mar 2021',
+      symbol: 'YD-ETH-MAR21',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x002f0b1a71c5730cf2f4da1970a889207bdb6d0d',
+      name: 'YD-BTC-MAR21 Token Expiring 31 Mar 2021',
+      symbol: 'YD-BTC-MAR21',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x1062ad0e59fa67fa0b27369113098cc941dd0d5f',
+      name: 'UMA 35 Call Expirying 30 Apr 2021',
+      symbol: 'UMAc35-0421',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0xf93340b1a3adf7eedcaec25fae8171d4b736e89f',
+      name: 'pxUSD Synthetic USD Expiring 1 April 2021',
+      symbol: 'pxUSD_MAR2021',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x84bd083b1c8bf929f39c98bc17cf518f40154f58',
+      name: 'Mario Cash Synthetic Token Expiring 15 January 2021',
+      symbol: 'Mario Cash-JAN-2021',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x81fab276aec924fbde190cf379783526d413cf70',
+      name: 'uGAS-FEB21 Token Expiring 28 Feb 2021',
+      symbol: 'uGAS-FEB21',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x4e110603e70b0b5f1c403ee543b37e1f1244cf28',
+      name: 'uGAS-MAR21 Token Expiring 31 Mar 2021',
+      symbol: 'uGAS-MAR21',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0xcf55a7f92d5e0c6683debbc1fc20c0a6e056df13',
+      name: 'Zelda Elastic Cash',
+      symbol: 'Zelda Elastic Cash',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x654eebac62240e6c56bab5f6adf7cfa74a894510',
+      name: 'Zelda Spring Nuts Cash',
+      symbol: 'Zelda Spring Nuts Cash',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0xa48920cc1ad85d8ea13af5d7be180c0338c306dd',
+      name: 'Zelda Summer Nuts Cash',
+      symbol: 'Zelda Summer Nuts Cash',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x249a198d59b57fda5dda90630febc86fd8c7594c',
+      name: 'Zelda Whirlwind Cash',
+      symbol: 'Zelda Whirlwind Cash',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x5ed1406873c9eb91f6f9a67ac4e152387c1132e7',
+      name: 'Zelda Reinforced Cash',
+      symbol: 'Zelda Reinforced Cash',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x8104c9f13118320eefe5fbea8a44d600b85981ef',
+      name: 'Mini Mario Summer Cash',
+      symbol: 'Mini Mario Summer Cash',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x69746c719e59674b147df25f50e7cfa0673cb625',
+      name: 'Mini Mario Spring Cash',
+      symbol: 'Mini Mario Spring Cash',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x6b1257641d18791141f025eab36fb567c4b564ff',
+      name: 'Bitcoin Dominance Token 31 March 2021',
+      symbol: 'BTCDOM-MAR2021',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x4e83b6287588a96321b2661c5e041845ff7814af',
+      name: 'Altcoin Dominance Token 31 March 2021',
+      symbol: 'ALTDOM-MAR2021',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x59fec83ec709c893aedd1a144cf1828eb04127cd',
+      name: 'pxGOLD Synthetic GOLD Expiring 31 May 2021',
+      symbol: 'pxGOLD_MAY2021',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x89337BFb7938804c3776C9FB921EccAf5ab76758',
+      name: 'Compound Annualized Rate Future Expiring 28 March 2021',
+      symbol: 'CAR-USDC-MAR21',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0xec58d3aefc9aaa2e0036fa65f70d569f49d9d1ed',
+      name: 'uSTONKS Index Token April 2021',
+      symbol: 'uSTONKS_APR21',
+      decimals: 6,
+    },
+    {
+      chainId: 1,
+      address: '0xa6B9d7E3d76cF23549293Fb22c488E0Ea591A44e',
+      name: 'uGAS-JUN21 Token Expiring 30 Jun 2021',
+      symbol: 'uGAS-JUN21',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0xe813b65da6c38a04591aed3f082d32db7d53c382',
+      name: 'Yield Dollar [WETH Dec 2021]',
+      symbol: 'YD-ETH-DEC21',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x4b606e9eb2228c70f44453afe5a73e1fea258ce1',
+      name: 'pxUSD Synthetic USD Expiring 31 Mar 2022',
+      symbol: 'pxUSD_MAR2022',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x5247c0db4044fb6f97f32c7e1b48758019a5a912',
+      name: 'pxGOLD Synthetic Gold Expiring 31 Mar 2022',
+      symbol: 'pxGOLD_MAR2022',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x56fb1acaff95c0b6ebcd17c8361a63d98b1a5a11',
+      name: 'uForex CNYUSD Synthetic Token April 2021',
+      symbol: 'uCNYUSD-APR',
+      decimals: 6,
+    },
+    {
+      chainId: 1,
+      address: '0xd49fa405dce086c65d66ca1ca41f8e98583812b4',
+      name: 'uForex EURUSD Synthetic Token April 2021',
+      symbol: 'uEURUSD-APR',
+      decimals: 6,
+    },
+    {
+      chainId: 1,
+      address: '0x29dddacba3b231ee8d673dd0f0fa759ea145561b',
+      name: 'DEFI_PULSE_TOTAL_TVL Synthetic Token Expiring 15 April 2021',
+      symbol: 'TVL_ALL_APRIL15',
+      decimals: 6,
+    },
+    {
+      chainId: 1,
+      address: '0xcbe430927370e95b4b10cfc702c6017ec7abefc3',
+      name: 'Yield Dollar [WETH Jun 2021]',
+      symbol: 'YD-ETH-JUN21',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x4b7fb448df91c8ed973494f8c8c4f12daf3a8521',
+      name: 'Yield Dollar [renBTC Jun 2021]',
+      symbol: 'YD-BTC-JUN21',
+      decimals: 8,
+    },
+    {
+      chainId: 1,
+      address: '0x3108c33b6fb38efedaefd8b5f7ca01d5f5c7372d',
+      name: 'Yield Dollar UMA 21',
+      symbol: 'yUMA21',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x0cae9e4d663793c2a2A0b211c1Cf4bBca2B9cAa7',
+      name: 'Mirrored Amazon',
+      symbol: 'MAMZN',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x31c63146a635EB7465e5853020b39713AC356991',
+      name: 'M US Oil',
+      symbol: 'MUSO',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x59A921Db27Dd6d4d974745B7FfC5c33932653442',
+      name: 'M Google',
+      symbol: 'MGOOGL',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0xf72FCd9DCF0190923Fadd44811E240Ef4533fc86',
+      name: 'Mirrored ProShares',
+      symbol: 'MVIXY',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x56aA298a19C93c6801FDde870fA63EF75Cc0aF72',
+      name: 'Mirrored Alibaba',
+      symbol: 'MBABA',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x0e99cC0535BB6251F6679Fa6E65d6d3b430e840B',
+      name: 'Mirrored Facebook',
+      symbol: 'MFB',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x13B02c8dE71680e71F0820c996E4bE43c2F57d15',
+      name: 'Mirrored Invesco QQ',
+      symbol: 'MQQQ',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x41BbEDd7286dAab5910a1f15d12CBda839852BD7',
+      name: 'Mirrored Microsoft',
+      symbol: 'MMSFT',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x9d1555d8cB3C846Bb4f7D5B1B1080872c3166676',
+      name: 'Mirrored iShares Si',
+      symbol: 'MSLV',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x21cA39943E91d704678F5D00b6616650F066fD63',
+      name: 'Mirrored Tesla',
+      symbol: 'MTSLA',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0xe82bbB62fA81d0701643d1675FB50ec52fD3Df92',
+      name: 'DYDX Token',
+      symbol: 'DYDX',
+      decimals: 18,
+    },
+    {
+      chainId: 10,
+      address: '0xE405de8F52ba7559f9df3C368500B6E6ae6Cee49',
+      name: 'sETH',
+      symbol: 'Synth Ether',
+      decimals: 18,
+    },
+    {
+      chainId: 10,
+      address: '0x298B9B95708152ff6968aafd889c6586e9169f1D',
+      name: 'sBTC',
+      symbol: 'Synth Bitcoin',
+      decimals: 18,
+    },
+    {
+      chainId: 10,
+      address: '0xc5Db22719A06418028A40A9B5E9A7c02959D0d08',
+      name: 'sLINK',
+      symbol: 'Synth Link',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x6B60eE11b73230045cF9095E6e43AE9Ea638e172',
+      name: 'Shatner',
+      symbol: 'SHAT',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x7277a44D1325D81Ac58893002a1B40a41bea43fe',
+      name: 'FAANG Index',
+      symbol: 'FAANG',
+      decimals: 18,
+    },
+    {
+      chainId: 1,
+      address: '0x76175599887730786bdA1545D0D7AcE8737fEBB1',
+      name: 'ENS DAO',
+      symbol: 'ENS',
+      decimals: 18,
+    },
+  ],
+};
diff --git a/lib/util/alpha-config-measurement.ts b/lib/util/alpha-config-measurement.ts
index 7c5ac56..9945975 100644
--- a/lib/util/alpha-config-measurement.ts
+++ b/lib/util/alpha-config-measurement.ts
@@ -1,6 +1,6 @@
 import { ChainId, Currency, CurrencyAmount } from '@uniswap/sdk-core'
 import { Protocol } from '@uniswap/router-sdk'
-import { log, metric, MetricLoggerUnit, SwapRoute } from '@uniswap/smart-order-router'
+import { log, metric, MetricLoggerUnit, SwapRoute } from '../sor'
 
 export const getDistribution = (distributionPercent: number) => {
   const percents: Array<number> = new Array<number>()
diff --git a/package-lock.json b/package-lock.json
index 5233fd4..67ce634 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -9,6 +9,9 @@
       "version": "0.1.0",
       "license": "GPL",
       "dependencies": {
+        "@aws-lambda-powertools/logger": "^1.12.1",
+        "@aws-lambda-powertools/metrics": "^1.12.1",
+        "@aws-lambda-powertools/tracer": "^1.12.1",
         "@hapi/joi": "^17.1.1",
         "@middy/core": "^2.4.1",
         "@middy/http-error-handler": "^2.4.1",
@@ -27,7 +30,6 @@
         "@uniswap/permit2-sdk": "^1.2.0",
         "@uniswap/router-sdk": "^1.6.0",
         "@uniswap/sdk-core": "^4.0.3",
-        "@uniswap/smart-order-router": "3.16.6",
         "@uniswap/token-lists": "^1.0.0-beta.33",
         "@uniswap/universal-router-sdk": "^1.5.7",
         "@uniswap/v2-sdk": "^3.2.0",
@@ -65,6 +67,7 @@
         "@jest/globals": "^29.5.0",
         "@nomiclabs/hardhat-ethers": "^2.0.2",
         "@nomiclabs/hardhat-waffle": "^2.0.1",
+        "@types/await-timeout": "^0.3.1",
         "@types/aws-lambda": "^8.10.77",
         "@types/bunyan": "^1.8.6",
         "@types/chai-as-promised": "^7.1.4",
@@ -77,6 +80,7 @@
         "@types/uuid": "^8.3.0",
         "@typescript-eslint/eslint-plugin": "^4.0.1",
         "@typescript-eslint/parser": "^4.0.1",
+        "await-timeout": "^1.1.1",
         "axios-retry": "^3.2.4",
         "chai": "^4.3.4",
         "chai-as-promised": "^7.1.1",
@@ -132,6 +136,53 @@
       "resolved": "https://registry.npmjs.org/@aws-cdk/asset-node-proxy-agent-v5/-/asset-node-proxy-agent-v5-2.0.165.tgz",
       "integrity": "sha512-bsyLQD/vqXQcc9RDmlM1XqiFNO/yewgVFXmkMcQkndJbmE/jgYkzewwYGrBlfL725hGLQipXq19+jwWwdsXQqg=="
     },
+    "node_modules/@aws-lambda-powertools/commons": {
+      "version": "1.12.1",
+      "resolved": "https://registry.npmjs.org/@aws-lambda-powertools/commons/-/commons-1.12.1.tgz",
+      "integrity": "sha512-VChNfDUxxcB5KTfQPkJgxYihEZkrmeOzU9/A9FRBc+3v33EEM59T2pIgBkFy0VoINvGi3MoBEln/wyu2jV0ivA=="
+    },
+    "node_modules/@aws-lambda-powertools/logger": {
+      "version": "1.12.1",
+      "resolved": "https://registry.npmjs.org/@aws-lambda-powertools/logger/-/logger-1.12.1.tgz",
+      "integrity": "sha512-QMBkd6/rN2MniiNcWeCigT4AKqH+NG1X6xN8S+YLszd4qJvXvRqx2EBO01WVrtyctOE8IpLqxicevmw1cJqDIA==",
+      "dependencies": {
+        "@aws-lambda-powertools/commons": "^1.12.1",
+        "lodash.merge": "^4.6.2"
+      }
+    },
+    "node_modules/@aws-lambda-powertools/metrics": {
+      "version": "1.12.1",
+      "resolved": "https://registry.npmjs.org/@aws-lambda-powertools/metrics/-/metrics-1.12.1.tgz",
+      "integrity": "sha512-tdwZBrpm7ouzWe1fWP8dzzuyGI7S1j3kAyXGvIOTQMbQEhN/kkSLohZJyfbpnTT10jLv3ozkgff6ZnWw6mX7fA==",
+      "dependencies": {
+        "@aws-lambda-powertools/commons": "^1.12.1"
+      }
+    },
+    "node_modules/@aws-lambda-powertools/tracer": {
+      "version": "1.12.1",
+      "resolved": "https://registry.npmjs.org/@aws-lambda-powertools/tracer/-/tracer-1.12.1.tgz",
+      "integrity": "sha512-ehaa9JzAfNvoHTbqv/bbu+cJD9RZXPEh22g47vMyQ2qg5e3Xe8wyzecFU35rHLlys9CV3SGLuazlyaTc5K3zmA==",
+      "dependencies": {
+        "@aws-lambda-powertools/commons": "^1.12.1",
+        "aws-xray-sdk-core": "^3.4.1"
+      }
+    },
+    "node_modules/@aws-lambda-powertools/tracer/node_modules/aws-xray-sdk-core": {
+      "version": "3.5.1",
+      "resolved": "https://registry.npmjs.org/aws-xray-sdk-core/-/aws-xray-sdk-core-3.5.1.tgz",
+      "integrity": "sha512-Q3S+K/UkDw/M9NnRZbyXNXsjB3amsv+6XhPdomtfzAdyNkf6q+GOQVuWpaLGHunBz91VzpGBzP9Qg0/elm6Cwg==",
+      "dependencies": {
+        "@aws-sdk/service-error-classification": "^3.4.1",
+        "@aws-sdk/types": "^3.4.1",
+        "@types/cls-hooked": "^4.3.3",
+        "atomic-batcher": "^1.0.2",
+        "cls-hooked": "^4.2.2",
+        "semver": "^7.5.3"
+      },
+      "engines": {
+        "node": ">= 14.x"
+      }
+    },
     "node_modules/@aws-sdk/service-error-classification": {
       "version": "3.186.0",
       "resolved": "https://registry.npmjs.org/@aws-sdk/service-error-classification/-/service-error-classification-3.186.0.tgz",
@@ -3645,6 +3696,12 @@
         "@types/retry": "*"
       }
     },
+    "node_modules/@types/await-timeout": {
+      "version": "0.3.1",
+      "resolved": "https://registry.npmjs.org/@types/await-timeout/-/await-timeout-0.3.1.tgz",
+      "integrity": "sha512-H5PzROT4KuP7XQDua13Iw8did//OCKAZ/3TL15DjvMzDonrk4HvhH1+tLko96f2guU6XaD3AoqRa49ZOwbwNig==",
+      "dev": true
+    },
     "node_modules/@types/aws-lambda": {
       "version": "8.10.107",
       "resolved": "https://registry.npmjs.org/@types/aws-lambda/-/aws-lambda-8.10.107.tgz",
@@ -4309,94 +4366,6 @@
         "node": ">=10"
       }
     },
-    "node_modules/@uniswap/smart-order-router": {
-      "version": "3.16.6",
-      "resolved": "https://registry.npmjs.org/@uniswap/smart-order-router/-/smart-order-router-3.16.6.tgz",
-      "integrity": "sha512-glytS6kW4YZMMvlc0VkkVBKHbOBsCGKfQO+eLrh9R8C2eQx9N7Ajqcdd7Le60mkuCyOIGHGUrhB3B1yiWUds+g==",
-      "dependencies": {
-        "@uniswap/default-token-list": "^11.2.0",
-        "@uniswap/permit2-sdk": "^1.2.0",
-        "@uniswap/router-sdk": "^1.6.0",
-        "@uniswap/sdk-core": "^4.0.6",
-        "@uniswap/swap-router-contracts": "^1.3.0",
-        "@uniswap/token-lists": "^1.0.0-beta.31",
-        "@uniswap/universal-router": "^1.0.1",
-        "@uniswap/universal-router-sdk": "^1.5.7",
-        "@uniswap/v2-sdk": "^3.2.0",
-        "@uniswap/v3-sdk": "^3.10.0",
-        "async-retry": "^1.3.1",
-        "await-timeout": "^1.1.1",
-        "axios": "^0.21.1",
-        "bunyan": "^1.8.15",
-        "bunyan-blackhole": "^1.1.1",
-        "ethers": "^5.7.2",
-        "graphql": "^15.5.0",
-        "graphql-request": "^3.4.0",
-        "lodash": "^4.17.21",
-        "mnemonist": "^0.38.3",
-        "node-cache": "^5.1.2",
-        "stats-lite": "^2.2.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "peerDependencies": {
-        "jsbi": "^3.2.0"
-      }
-    },
-    "node_modules/@uniswap/smart-order-router/node_modules/@openzeppelin/contracts": {
-      "version": "3.4.2-solc-0.7",
-      "resolved": "https://registry.npmjs.org/@openzeppelin/contracts/-/contracts-3.4.2-solc-0.7.tgz",
-      "integrity": "sha512-W6QmqgkADuFcTLzHL8vVoNBtkwjvQRpYIAom7KiUNoLKghyx3FgH0GBjt8NRvigV1ZmMOBllvE1By1C+bi8WpA=="
-    },
-    "node_modules/@uniswap/smart-order-router/node_modules/@uniswap/swap-router-contracts": {
-      "version": "1.3.0",
-      "resolved": "https://registry.npmjs.org/@uniswap/swap-router-contracts/-/swap-router-contracts-1.3.0.tgz",
-      "integrity": "sha512-iKvCuRkHXEe0EMjOf8HFUISTIhlxI57kKFllf3C3PUIE0HmwxrayyoflwAz5u/TRsFGYqJ9IjX2UgzLCsrNa5A==",
-      "dependencies": {
-        "@openzeppelin/contracts": "3.4.2-solc-0.7",
-        "@uniswap/v2-core": "1.0.1",
-        "@uniswap/v3-core": "1.0.0",
-        "@uniswap/v3-periphery": "1.4.1",
-        "dotenv": "^14.2.0",
-        "hardhat-watcher": "^2.1.1"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/@uniswap/smart-order-router/node_modules/@uniswap/v3-periphery": {
-      "version": "1.4.1",
-      "resolved": "https://registry.npmjs.org/@uniswap/v3-periphery/-/v3-periphery-1.4.1.tgz",
-      "integrity": "sha512-Ab0ZCKOQrQMKIcpBTezTsEhWfQjItd0TtkCG8mPhoQu+wC67nPaf4hYUhM6wGHeFUmDiYY5MpEQuokB0ENvoTg==",
-      "dependencies": {
-        "@openzeppelin/contracts": "3.4.2-solc-0.7",
-        "@uniswap/lib": "^4.0.1-alpha",
-        "@uniswap/v2-core": "1.0.1",
-        "@uniswap/v3-core": "1.0.0",
-        "base64-sol": "1.0.1",
-        "hardhat-watcher": "^2.1.1"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/@uniswap/smart-order-router/node_modules/dotenv": {
-      "version": "14.3.2",
-      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-14.3.2.tgz",
-      "integrity": "sha512-vwEppIphpFdvaMCaHfCEv9IgwcxMljMw2TnAQBB4VWPvzXQLTb82jwmdOKzlEVUL3gNFT4l4TPKO+Bn+sqcrVQ==",
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/@uniswap/smart-order-router/node_modules/graphql": {
-      "version": "15.8.0",
-      "resolved": "https://registry.npmjs.org/graphql/-/graphql-15.8.0.tgz",
-      "integrity": "sha512-5gghUc24tP9HRznNpV2+FIoq3xKkj5dTQqf4v0CpdPbFVwFkWoxOM+o+2OC9ZSvjEMTjfmG9QT+gcvggTwW1zw==",
-      "engines": {
-        "node": ">= 10.x"
-      }
-    },
     "node_modules/@uniswap/swap-router-contracts": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/@uniswap/swap-router-contracts/-/swap-router-contracts-1.1.0.tgz",
@@ -5040,6 +5009,7 @@
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/await-timeout/-/await-timeout-1.1.1.tgz",
       "integrity": "sha512-gsDXAS6XVc4Jt+7S92MPX6Noq69bdeXUPEaXd8dk3+yVr629LTDLxNt4j1ycBbrU+AStK2PhKIyNIM+xzWMVOQ==",
+      "dev": true,
       "engines": {
         "node": ">=6"
       }
@@ -5910,17 +5880,6 @@
         "safe-json-stringify": "~1"
       }
     },
-    "node_modules/bunyan-blackhole": {
-      "version": "1.1.1",
-      "resolved": "https://registry.npmjs.org/bunyan-blackhole/-/bunyan-blackhole-1.1.1.tgz",
-      "integrity": "sha512-UwzNPhbbSqbzeJhCbygqjlAY7p0ZUdv1ADXPQvDh3CA7VW3C/rCc1gaQO/8j9QL4vsKQCQZQSQIEwX+lxioPAQ==",
-      "dependencies": {
-        "stream-blackhole": "^1.0.3"
-      },
-      "peerDependencies": {
-        "bunyan": "~1.x.x"
-      }
-    },
     "node_modules/busboy": {
       "version": "1.6.0",
       "resolved": "https://registry.npmjs.org/busboy/-/busboy-1.6.0.tgz",
@@ -19789,8 +19748,7 @@
     "node_modules/lodash.merge": {
       "version": "4.6.2",
       "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
-      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
-      "dev": true
+      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ=="
     },
     "node_modules/lodash.truncate": {
       "version": "4.4.2",
@@ -22474,10 +22432,9 @@
       }
     },
     "node_modules/semver": {
-      "version": "7.3.8",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.8.tgz",
-      "integrity": "sha512-NB1ctGL5rlHrPJtFDVIVzTyQylMLu9N9VICA6HSFJo8MCGVTMW6gfpicwKmmK/dAjTOrqu5l63JJOpDSrAis3A==",
-      "dev": true,
+      "version": "7.5.4",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.5.4.tgz",
+      "integrity": "sha512-1bCSESV6Pv+i21Hvpxp3Dx+pSD8lIPt8uVjRrxAUt/nbswYc+tK6Y2btiULjd4+fnq15PX+nqQDC7Oft7WkwcA==",
       "dependencies": {
         "lru-cache": "^6.0.0"
       },
@@ -22492,7 +22449,6 @@
       "version": "6.0.0",
       "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
       "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
-      "dev": true,
       "dependencies": {
         "yallist": "^4.0.0"
       },
@@ -22503,8 +22459,7 @@
     "node_modules/semver/node_modules/yallist": {
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
-      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
-      "dev": true
+      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
     },
     "node_modules/serialize-javascript": {
       "version": "5.0.1",
@@ -22875,11 +22830,6 @@
         "node": ">= 0.6"
       }
     },
-    "node_modules/stream-blackhole": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/stream-blackhole/-/stream-blackhole-1.0.3.tgz",
-      "integrity": "sha512-7NWl3dkmCd12mPkEwTbBPGxwvxj7L4O9DTjJudn02Fmk9K+RuPaDF8zeGo3kmjbsffU5E1aGpZ1dTR9AaRg6AQ=="
-    },
     "node_modules/streamsearch": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
@@ -24190,6 +24140,52 @@
       "resolved": "https://registry.npmjs.org/@aws-cdk/asset-node-proxy-agent-v5/-/asset-node-proxy-agent-v5-2.0.165.tgz",
       "integrity": "sha512-bsyLQD/vqXQcc9RDmlM1XqiFNO/yewgVFXmkMcQkndJbmE/jgYkzewwYGrBlfL725hGLQipXq19+jwWwdsXQqg=="
     },
+    "@aws-lambda-powertools/commons": {
+      "version": "1.12.1",
+      "resolved": "https://registry.npmjs.org/@aws-lambda-powertools/commons/-/commons-1.12.1.tgz",
+      "integrity": "sha512-VChNfDUxxcB5KTfQPkJgxYihEZkrmeOzU9/A9FRBc+3v33EEM59T2pIgBkFy0VoINvGi3MoBEln/wyu2jV0ivA=="
+    },
+    "@aws-lambda-powertools/logger": {
+      "version": "1.12.1",
+      "resolved": "https://registry.npmjs.org/@aws-lambda-powertools/logger/-/logger-1.12.1.tgz",
+      "integrity": "sha512-QMBkd6/rN2MniiNcWeCigT4AKqH+NG1X6xN8S+YLszd4qJvXvRqx2EBO01WVrtyctOE8IpLqxicevmw1cJqDIA==",
+      "requires": {
+        "@aws-lambda-powertools/commons": "^1.12.1",
+        "lodash.merge": "^4.6.2"
+      }
+    },
+    "@aws-lambda-powertools/metrics": {
+      "version": "1.12.1",
+      "resolved": "https://registry.npmjs.org/@aws-lambda-powertools/metrics/-/metrics-1.12.1.tgz",
+      "integrity": "sha512-tdwZBrpm7ouzWe1fWP8dzzuyGI7S1j3kAyXGvIOTQMbQEhN/kkSLohZJyfbpnTT10jLv3ozkgff6ZnWw6mX7fA==",
+      "requires": {
+        "@aws-lambda-powertools/commons": "^1.12.1"
+      }
+    },
+    "@aws-lambda-powertools/tracer": {
+      "version": "1.12.1",
+      "resolved": "https://registry.npmjs.org/@aws-lambda-powertools/tracer/-/tracer-1.12.1.tgz",
+      "integrity": "sha512-ehaa9JzAfNvoHTbqv/bbu+cJD9RZXPEh22g47vMyQ2qg5e3Xe8wyzecFU35rHLlys9CV3SGLuazlyaTc5K3zmA==",
+      "requires": {
+        "@aws-lambda-powertools/commons": "^1.12.1",
+        "aws-xray-sdk-core": "^3.4.1"
+      },
+      "dependencies": {
+        "aws-xray-sdk-core": {
+          "version": "3.5.1",
+          "resolved": "https://registry.npmjs.org/aws-xray-sdk-core/-/aws-xray-sdk-core-3.5.1.tgz",
+          "integrity": "sha512-Q3S+K/UkDw/M9NnRZbyXNXsjB3amsv+6XhPdomtfzAdyNkf6q+GOQVuWpaLGHunBz91VzpGBzP9Qg0/elm6Cwg==",
+          "requires": {
+            "@aws-sdk/service-error-classification": "^3.4.1",
+            "@aws-sdk/types": "^3.4.1",
+            "@types/cls-hooked": "^4.3.3",
+            "atomic-batcher": "^1.0.2",
+            "cls-hooked": "^4.2.2",
+            "semver": "^7.5.3"
+          }
+        }
+      }
+    },
     "@aws-sdk/service-error-classification": {
       "version": "3.186.0",
       "resolved": "https://registry.npmjs.org/@aws-sdk/service-error-classification/-/service-error-classification-3.186.0.tgz",
@@ -26810,6 +26806,12 @@
         "@types/retry": "*"
       }
     },
+    "@types/await-timeout": {
+      "version": "0.3.1",
+      "resolved": "https://registry.npmjs.org/@types/await-timeout/-/await-timeout-0.3.1.tgz",
+      "integrity": "sha512-H5PzROT4KuP7XQDua13Iw8did//OCKAZ/3TL15DjvMzDonrk4HvhH1+tLko96f2guU6XaD3AoqRa49ZOwbwNig==",
+      "dev": true
+    },
     "@types/aws-lambda": {
       "version": "8.10.107",
       "resolved": "https://registry.npmjs.org/@types/aws-lambda/-/aws-lambda-8.10.107.tgz",
@@ -27385,78 +27387,6 @@
         "toformat": "^2.0.0"
       }
     },
-    "@uniswap/smart-order-router": {
-      "version": "3.16.6",
-      "resolved": "https://registry.npmjs.org/@uniswap/smart-order-router/-/smart-order-router-3.16.6.tgz",
-      "integrity": "sha512-glytS6kW4YZMMvlc0VkkVBKHbOBsCGKfQO+eLrh9R8C2eQx9N7Ajqcdd7Le60mkuCyOIGHGUrhB3B1yiWUds+g==",
-      "requires": {
-        "@uniswap/default-token-list": "^11.2.0",
-        "@uniswap/permit2-sdk": "^1.2.0",
-        "@uniswap/router-sdk": "^1.6.0",
-        "@uniswap/sdk-core": "^4.0.6",
-        "@uniswap/swap-router-contracts": "^1.3.0",
-        "@uniswap/token-lists": "^1.0.0-beta.31",
-        "@uniswap/universal-router": "^1.0.1",
-        "@uniswap/universal-router-sdk": "^1.5.7",
-        "@uniswap/v2-sdk": "^3.2.0",
-        "@uniswap/v3-sdk": "^3.10.0",
-        "async-retry": "^1.3.1",
-        "await-timeout": "^1.1.1",
-        "axios": "^0.21.1",
-        "bunyan": "^1.8.15",
-        "bunyan-blackhole": "^1.1.1",
-        "ethers": "^5.7.2",
-        "graphql": "^15.5.0",
-        "graphql-request": "^3.4.0",
-        "lodash": "^4.17.21",
-        "mnemonist": "^0.38.3",
-        "node-cache": "^5.1.2",
-        "stats-lite": "^2.2.0"
-      },
-      "dependencies": {
-        "@openzeppelin/contracts": {
-          "version": "3.4.2-solc-0.7",
-          "resolved": "https://registry.npmjs.org/@openzeppelin/contracts/-/contracts-3.4.2-solc-0.7.tgz",
-          "integrity": "sha512-W6QmqgkADuFcTLzHL8vVoNBtkwjvQRpYIAom7KiUNoLKghyx3FgH0GBjt8NRvigV1ZmMOBllvE1By1C+bi8WpA=="
-        },
-        "@uniswap/swap-router-contracts": {
-          "version": "1.3.0",
-          "resolved": "https://registry.npmjs.org/@uniswap/swap-router-contracts/-/swap-router-contracts-1.3.0.tgz",
-          "integrity": "sha512-iKvCuRkHXEe0EMjOf8HFUISTIhlxI57kKFllf3C3PUIE0HmwxrayyoflwAz5u/TRsFGYqJ9IjX2UgzLCsrNa5A==",
-          "requires": {
-            "@openzeppelin/contracts": "3.4.2-solc-0.7",
-            "@uniswap/v2-core": "1.0.1",
-            "@uniswap/v3-core": "1.0.0",
-            "@uniswap/v3-periphery": "1.4.1",
-            "dotenv": "^14.2.0",
-            "hardhat-watcher": "^2.1.1"
-          }
-        },
-        "@uniswap/v3-periphery": {
-          "version": "1.4.1",
-          "resolved": "https://registry.npmjs.org/@uniswap/v3-periphery/-/v3-periphery-1.4.1.tgz",
-          "integrity": "sha512-Ab0ZCKOQrQMKIcpBTezTsEhWfQjItd0TtkCG8mPhoQu+wC67nPaf4hYUhM6wGHeFUmDiYY5MpEQuokB0ENvoTg==",
-          "requires": {
-            "@openzeppelin/contracts": "3.4.2-solc-0.7",
-            "@uniswap/lib": "^4.0.1-alpha",
-            "@uniswap/v2-core": "1.0.1",
-            "@uniswap/v3-core": "1.0.0",
-            "base64-sol": "1.0.1",
-            "hardhat-watcher": "^2.1.1"
-          }
-        },
-        "dotenv": {
-          "version": "14.3.2",
-          "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-14.3.2.tgz",
-          "integrity": "sha512-vwEppIphpFdvaMCaHfCEv9IgwcxMljMw2TnAQBB4VWPvzXQLTb82jwmdOKzlEVUL3gNFT4l4TPKO+Bn+sqcrVQ=="
-        },
-        "graphql": {
-          "version": "15.8.0",
-          "resolved": "https://registry.npmjs.org/graphql/-/graphql-15.8.0.tgz",
-          "integrity": "sha512-5gghUc24tP9HRznNpV2+FIoq3xKkj5dTQqf4v0CpdPbFVwFkWoxOM+o+2OC9ZSvjEMTjfmG9QT+gcvggTwW1zw=="
-        }
-      }
-    },
     "@uniswap/swap-router-contracts": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/@uniswap/swap-router-contracts/-/swap-router-contracts-1.1.0.tgz",
@@ -27931,7 +27861,8 @@
     "await-timeout": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/await-timeout/-/await-timeout-1.1.1.tgz",
-      "integrity": "sha512-gsDXAS6XVc4Jt+7S92MPX6Noq69bdeXUPEaXd8dk3+yVr629LTDLxNt4j1ycBbrU+AStK2PhKIyNIM+xzWMVOQ=="
+      "integrity": "sha512-gsDXAS6XVc4Jt+7S92MPX6Noq69bdeXUPEaXd8dk3+yVr629LTDLxNt4j1ycBbrU+AStK2PhKIyNIM+xzWMVOQ==",
+      "dev": true
     },
     "aws-cdk-lib": {
       "version": "2.85.0",
@@ -28559,14 +28490,6 @@
         "safe-json-stringify": "~1"
       }
     },
-    "bunyan-blackhole": {
-      "version": "1.1.1",
-      "resolved": "https://registry.npmjs.org/bunyan-blackhole/-/bunyan-blackhole-1.1.1.tgz",
-      "integrity": "sha512-UwzNPhbbSqbzeJhCbygqjlAY7p0ZUdv1ADXPQvDh3CA7VW3C/rCc1gaQO/8j9QL4vsKQCQZQSQIEwX+lxioPAQ==",
-      "requires": {
-        "stream-blackhole": "^1.0.3"
-      }
-    },
     "busboy": {
       "version": "1.6.0",
       "resolved": "https://registry.npmjs.org/busboy/-/busboy-1.6.0.tgz",
@@ -39142,8 +39065,7 @@
     "lodash.merge": {
       "version": "4.6.2",
       "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
-      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
-      "dev": true
+      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ=="
     },
     "lodash.truncate": {
       "version": "4.4.2",
@@ -41099,10 +41021,9 @@
       }
     },
     "semver": {
-      "version": "7.3.8",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.8.tgz",
-      "integrity": "sha512-NB1ctGL5rlHrPJtFDVIVzTyQylMLu9N9VICA6HSFJo8MCGVTMW6gfpicwKmmK/dAjTOrqu5l63JJOpDSrAis3A==",
-      "dev": true,
+      "version": "7.5.4",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.5.4.tgz",
+      "integrity": "sha512-1bCSESV6Pv+i21Hvpxp3Dx+pSD8lIPt8uVjRrxAUt/nbswYc+tK6Y2btiULjd4+fnq15PX+nqQDC7Oft7WkwcA==",
       "requires": {
         "lru-cache": "^6.0.0"
       },
@@ -41111,7 +41032,6 @@
           "version": "6.0.0",
           "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
           "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
-          "dev": true,
           "requires": {
             "yallist": "^4.0.0"
           }
@@ -41119,8 +41039,7 @@
         "yallist": {
           "version": "4.0.0",
           "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
-          "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
-          "dev": true
+          "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
         }
       }
     },
@@ -41432,11 +41351,6 @@
       "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
       "integrity": "sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA=="
     },
-    "stream-blackhole": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/stream-blackhole/-/stream-blackhole-1.0.3.tgz",
-      "integrity": "sha512-7NWl3dkmCd12mPkEwTbBPGxwvxj7L4O9DTjJudn02Fmk9K+RuPaDF8zeGo3kmjbsffU5E1aGpZ1dTR9AaRg6AQ=="
-    },
     "streamsearch": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
diff --git a/package.json b/package.json
index afd6a46..36c7e05 100644
--- a/package.json
+++ b/package.json
@@ -23,6 +23,7 @@
     "@jest/globals": "^29.5.0",
     "@nomiclabs/hardhat-ethers": "^2.0.2",
     "@nomiclabs/hardhat-waffle": "^2.0.1",
+    "@types/await-timeout": "^0.3.1",
     "@types/aws-lambda": "^8.10.77",
     "@types/bunyan": "^1.8.6",
     "@types/chai-as-promised": "^7.1.4",
@@ -35,6 +36,7 @@
     "@types/uuid": "^8.3.0",
     "@typescript-eslint/eslint-plugin": "^4.0.1",
     "@typescript-eslint/parser": "^4.0.1",
+    "await-timeout": "^1.1.1",
     "axios-retry": "^3.2.4",
     "chai": "^4.3.4",
     "chai-as-promised": "^7.1.1",
@@ -62,6 +64,9 @@
     "typescript": "^4.2.3"
   },
   "dependencies": {
+    "@aws-lambda-powertools/logger": "^1.12.1",
+    "@aws-lambda-powertools/metrics": "^1.12.1",
+    "@aws-lambda-powertools/tracer": "^1.12.1",
     "@hapi/joi": "^17.1.1",
     "@middy/core": "^2.4.1",
     "@middy/http-error-handler": "^2.4.1",
@@ -80,7 +85,6 @@
     "@uniswap/permit2-sdk": "^1.2.0",
     "@uniswap/router-sdk": "^1.6.0",
     "@uniswap/sdk-core": "^4.0.3",
-    "@uniswap/smart-order-router": "3.16.6",
     "@uniswap/token-lists": "^1.0.0-beta.33",
     "@uniswap/universal-router-sdk": "^1.5.7",
     "@uniswap/v2-sdk": "^3.2.0",
diff --git a/test/jest/unit/dashboards/cached-routes-widgets-factory.test.ts b/test/jest/unit/dashboards/cached-routes-widgets-factory.test.ts
deleted file mode 100644
index 44c4e5a..0000000
--- a/test/jest/unit/dashboards/cached-routes-widgets-factory.test.ts
+++ /dev/null
@@ -1,12 +0,0 @@
-import { CachedRoutesWidgetsFactory } from '../../../../lib/dashboards/cached-routes-widgets-factory'
-import { describe, it, expect } from '@jest/globals'
-
-const widgetsFactory = new CachedRoutesWidgetsFactory('Uniswap', 'us-west-1', 'lambda')
-
-describe('CachedRoutesWidgetsFactory', () => {
-  it('works', () => {
-    const widgets = widgetsFactory.generateWidgets()
-    // It's hard to write a meaningful test here.
-    expect(widgets.length).toBeGreaterThan(0)
-  })
-})
diff --git a/test/jest/unit/dashboards/quote-amounts-widgets-factory.test.ts b/test/jest/unit/dashboards/quote-amounts-widgets-factory.test.ts
deleted file mode 100644
index 6103ce2..0000000
--- a/test/jest/unit/dashboards/quote-amounts-widgets-factory.test.ts
+++ /dev/null
@@ -1,12 +0,0 @@
-import { QuoteAmountsWidgetsFactory } from '../../../../lib/dashboards/quote-amounts-widgets-factory'
-import { describe, it, expect } from '@jest/globals'
-
-const quoteAmountsWidgets = new QuoteAmountsWidgetsFactory('Uniswap', 'us-west-1')
-
-describe('Test widgets', () => {
-  it('works', () => {
-    const widgets = quoteAmountsWidgets.generateWidgets()
-    // It's hard to write a meaningful test here.
-    expect(widgets.length).toBeGreaterThan(0)
-  })
-})
diff --git a/test/jest/unit/handlers/router-entities/route-caching/cached-routes-configuration.test.ts b/test/jest/unit/handlers/router-entities/route-caching/cached-routes-configuration.test.ts
deleted file mode 100644
index b1175db..0000000
--- a/test/jest/unit/handlers/router-entities/route-caching/cached-routes-configuration.test.ts
+++ /dev/null
@@ -1,77 +0,0 @@
-import { ChainId, CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core'
-import { describe, it, expect } from '@jest/globals'
-import {
-  CACHED_ROUTES_CONFIGURATION,
-  PairTradeTypeChainId,
-} from '../../../../../../lib/handlers/router-entities/route-caching'
-
-describe('CachedRoutesConfiguration', () => {
-  const WETH = new Token(ChainId.MAINNET, '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2', 18, 'WETH')
-
-  it('can find the strategy for a pair with configuration', () => {
-    const pairToLookup = new PairTradeTypeChainId({
-      tokenIn: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2', // WETH
-      tokenOut: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', // USDC
-      tradeType: TradeType.EXACT_INPUT,
-      chainId: ChainId.MAINNET,
-    })
-
-    const fetchedStrategy = CACHED_ROUTES_CONFIGURATION.get(pairToLookup.toString())
-
-    expect(fetchedStrategy).toBeDefined()
-
-    const currencyAmount = CurrencyAmount.fromRawAmount(WETH, 1 * 10 ** WETH.decimals)
-    const cachingParameters = fetchedStrategy?.getCachingBucket(currencyAmount)
-
-    expect(cachingParameters?.bucket).toBe(1)
-  })
-
-  it('can find the strategy, even if token has different capitalization', () => {
-    const pairToLookup = new PairTradeTypeChainId({
-      tokenIn: '0xC02AAA39b223fe8d0a0e5c4f27EAD9083c756cc2', // WETH
-      tokenOut: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', // USDC
-      tradeType: TradeType.EXACT_INPUT,
-      chainId: ChainId.MAINNET,
-    })
-
-    const fetchedStrategy = CACHED_ROUTES_CONFIGURATION.get(pairToLookup.toString())
-
-    expect(fetchedStrategy).toBeDefined()
-
-    const currencyAmount = CurrencyAmount.fromRawAmount(WETH, 1 * 10 ** WETH.decimals)
-    const cachingParameters = fetchedStrategy?.getCachingBucket(currencyAmount)
-
-    expect(cachingParameters?.bucket).toBe(1)
-  })
-
-  it('can find the strategy using a different amount', () => {
-    const pairToLookup = new PairTradeTypeChainId({
-      tokenIn: '0xC02AAA39b223fe8d0a0e5c4f27EAD9083c756cc2', // WETH
-      tokenOut: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', // USDC
-      tradeType: TradeType.EXACT_INPUT,
-      chainId: ChainId.MAINNET,
-    })
-
-    const fetchedStrategy = CACHED_ROUTES_CONFIGURATION.get(pairToLookup.toString())
-
-    expect(fetchedStrategy).toBeDefined()
-
-    const currencyAmount = CurrencyAmount.fromRawAmount(WETH, 5 * 10 ** WETH.decimals)
-    const cachingParameters = fetchedStrategy?.getCachingBucket(currencyAmount)
-
-    expect(cachingParameters?.bucket).toBe(5)
-  })
-
-  it('returns undefined when strategy doesnt exist', () => {
-    const pairToLookup = new PairTradeTypeChainId({
-      tokenIn: '0xC02AAA39b223fe8d0a0e5c4f27EAD9083c756cc2', // WETH
-      tokenOut: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', // USDC
-      tradeType: TradeType.EXACT_OUTPUT,
-      chainId: ChainId.MAINNET,
-    })
-
-    const fetchedStrategy = CACHED_ROUTES_CONFIGURATION.get(pairToLookup.toString())
-
-    expect(fetchedStrategy).toBeUndefined()
-  })
-})
diff --git a/test/jest/unit/handlers/router-entities/route-caching/model/cached-routes-strategy.test.ts b/test/jest/unit/handlers/router-entities/route-caching/model/cached-routes-strategy.test.ts
deleted file mode 100644
index 0e6c91b..0000000
--- a/test/jest/unit/handlers/router-entities/route-caching/model/cached-routes-strategy.test.ts
+++ /dev/null
@@ -1,61 +0,0 @@
-import { CacheMode } from '@uniswap/smart-order-router'
-import { ChainId, CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core'
-import {
-  CachedRoutesBucket,
-  CachedRoutesStrategy,
-} from '../../../../../../../lib/handlers/router-entities/route-caching'
-import { describe, it, expect } from '@jest/globals'
-
-describe('CachedRoutesStrategy', () => {
-  const WETH = new Token(ChainId.MAINNET, '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2', 18, 'WETH')
-  let strategy: CachedRoutesStrategy
-
-  beforeEach(() => {
-    strategy = new CachedRoutesStrategy({
-      pair: 'WETH/USD',
-      tradeType: TradeType.EXACT_INPUT,
-      chainId: ChainId.MAINNET,
-      buckets: [
-        new CachedRoutesBucket({ bucket: 1, blocksToLive: 2, cacheMode: CacheMode.Tapcompare }),
-        new CachedRoutesBucket({ bucket: 5, blocksToLive: 2, cacheMode: CacheMode.Tapcompare }),
-        new CachedRoutesBucket({ bucket: 10, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
-        new CachedRoutesBucket({ bucket: 50, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
-        new CachedRoutesBucket({ bucket: 100, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
-        new CachedRoutesBucket({ bucket: 500, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
-      ],
-    })
-  })
-
-  describe('#getCachingBucket', () => {
-    it('find the first bucket that fits the amount', () => {
-      const currencyAmount = CurrencyAmount.fromRawAmount(WETH, 1 * 10 ** WETH.decimals)
-      const cachingParameters = strategy.getCachingBucket(currencyAmount)
-
-      expect(cachingParameters).toBeDefined()
-      expect(cachingParameters?.bucket).toBe(1)
-    })
-
-    it('find the bucket, searching in the middle amounts', () => {
-      const currencyAmount = CurrencyAmount.fromRawAmount(WETH, 42 * 10 ** WETH.decimals)
-      const cachingParameters = strategy.getCachingBucket(currencyAmount)
-
-      expect(cachingParameters).toBeDefined()
-      expect(cachingParameters?.bucket).toBe(50)
-    })
-
-    it('looks for bucket in higher amounts', () => {
-      const currencyAmount = CurrencyAmount.fromRawAmount(WETH, 500 * 10 ** WETH.decimals)
-      const cachingParameters = strategy.getCachingBucket(currencyAmount)
-
-      expect(cachingParameters).toBeDefined()
-      expect(cachingParameters?.bucket).toBe(500)
-    })
-
-    it('returns undefined once we are out of range', () => {
-      const currencyAmount = CurrencyAmount.fromRawAmount(WETH, 501 * 10 ** WETH.decimals)
-      const cachingParameters = strategy.getCachingBucket(currencyAmount)
-
-      expect(cachingParameters).toBeUndefined()
-    })
-  })
-})
diff --git a/test/jest/unit/handlers/router-entities/route-caching/model/pair-trade-type-chain-id.test.ts b/test/jest/unit/handlers/router-entities/route-caching/model/pair-trade-type-chain-id.test.ts
deleted file mode 100644
index 05b6d6e..0000000
--- a/test/jest/unit/handlers/router-entities/route-caching/model/pair-trade-type-chain-id.test.ts
+++ /dev/null
@@ -1,62 +0,0 @@
-import { PairTradeTypeChainId } from '../../../../../../../lib/handlers/router-entities/route-caching'
-import { ChainId, TradeType } from '@uniswap/sdk-core'
-import { describe, it, expect } from '@jest/globals'
-
-describe('PairTradeTypeChainId', () => {
-  const WETH = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
-  const USDC = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'
-
-  describe('toString', () => {
-    it('returns a stringified version of the object', () => {
-      const pairTradeTypeChainId = new PairTradeTypeChainId({
-        tokenIn: WETH,
-        tokenOut: USDC,
-        tradeType: TradeType.EXACT_INPUT,
-        chainId: ChainId.MAINNET,
-      })
-
-      expect(pairTradeTypeChainId.toString()).toBe(
-        `${WETH.toLowerCase()}/${USDC.toLowerCase()}/${TradeType.EXACT_INPUT}/${ChainId.MAINNET}`
-      )
-    })
-
-    it('token addresses are converted to lowercase', () => {
-      const pairTradeTypeChainId = new PairTradeTypeChainId({
-        tokenIn: WETH.toUpperCase(),
-        tokenOut: USDC.toUpperCase(),
-        tradeType: TradeType.EXACT_INPUT,
-        chainId: ChainId.MAINNET,
-      })
-
-      expect(pairTradeTypeChainId.toString()).toBe(
-        `${WETH.toLowerCase()}/${USDC.toLowerCase()}/${TradeType.EXACT_INPUT}/${ChainId.MAINNET}`
-      )
-    })
-
-    it('works with ExactOutput too', () => {
-      const pairTradeTypeChainId = new PairTradeTypeChainId({
-        tokenIn: WETH.toUpperCase(),
-        tokenOut: USDC.toUpperCase(),
-        tradeType: TradeType.EXACT_OUTPUT,
-        chainId: ChainId.MAINNET,
-      })
-
-      expect(pairTradeTypeChainId.toString()).toBe(
-        `${WETH.toLowerCase()}/${USDC.toLowerCase()}/${TradeType.EXACT_OUTPUT}/${ChainId.MAINNET}`
-      )
-    })
-
-    it('works with other chains', () => {
-      const pairTradeTypeChainId = new PairTradeTypeChainId({
-        tokenIn: WETH.toUpperCase(),
-        tokenOut: USDC.toUpperCase(),
-        tradeType: TradeType.EXACT_OUTPUT,
-        chainId: ChainId.ARBITRUM_ONE,
-      })
-
-      expect(pairTradeTypeChainId.toString()).toBe(
-        `${WETH.toLowerCase()}/${USDC.toLowerCase()}/${TradeType.EXACT_OUTPUT}/${ChainId.ARBITRUM_ONE}`
-      )
-    })
-  })
-})
diff --git a/test/jest/unit/handlers/router-entities/route-caching/model/protocols-bucket-block-number.test.ts b/test/jest/unit/handlers/router-entities/route-caching/model/protocols-bucket-block-number.test.ts
deleted file mode 100644
index 07e4a7e..0000000
--- a/test/jest/unit/handlers/router-entities/route-caching/model/protocols-bucket-block-number.test.ts
+++ /dev/null
@@ -1,67 +0,0 @@
-import { ProtocolsBucketBlockNumber } from '../../../../../../../lib/handlers/router-entities/route-caching/model/protocols-bucket-block-number'
-import { Protocol } from '@uniswap/router-sdk'
-import { describe, it, expect } from '@jest/globals'
-
-describe('ProtocolsBucketBlockNumber', () => {
-  describe('#fullKey', () => {
-    it('returns a string-ified version of the object', () => {
-      const protocolsBucketBlockNumber = new ProtocolsBucketBlockNumber({
-        protocols: [Protocol.MIXED, Protocol.V2, Protocol.V3],
-        bucket: 5,
-        blockNumber: 12345,
-      })
-
-      expect(protocolsBucketBlockNumber.fullKey()).toBe('MIXED,V2,V3/5/12345')
-    })
-
-    it('protocols are sorted, even if the original array is not', () => {
-      const protocolsBucketBlockNumber = new ProtocolsBucketBlockNumber({
-        protocols: [Protocol.V3, Protocol.MIXED, Protocol.V2],
-        bucket: 5,
-        blockNumber: 12345,
-      })
-
-      expect(protocolsBucketBlockNumber.fullKey()).toBe('MIXED,V2,V3/5/12345')
-    })
-
-    it('throws an error when the bucketNumber is undefined', () => {
-      const protocolsBucketBlockNumber = new ProtocolsBucketBlockNumber({
-        protocols: [Protocol.V3, Protocol.MIXED, Protocol.V2],
-        bucket: 5,
-      })
-
-      expect(() => protocolsBucketBlockNumber.fullKey()).toThrow('BlockNumber is necessary to create a fullKey')
-    })
-  })
-
-  describe('#protocolsBucketPartialKey', () => {
-    it('returns a string-ified version of the object without the blockNumber', () => {
-      const protocolsBucketBlockNumber = new ProtocolsBucketBlockNumber({
-        protocols: [Protocol.MIXED, Protocol.V2, Protocol.V3],
-        bucket: 5,
-        blockNumber: 12345,
-      })
-
-      expect(protocolsBucketBlockNumber.protocolsBucketPartialKey()).toBe('MIXED,V2,V3/5/')
-    })
-
-    it('protocols are sorted, even if the original array is not, without the blockNumber', () => {
-      const protocolsBucketBlockNumber = new ProtocolsBucketBlockNumber({
-        protocols: [Protocol.V3, Protocol.MIXED, Protocol.V2],
-        bucket: 5,
-        blockNumber: 12345,
-      })
-
-      expect(protocolsBucketBlockNumber.protocolsBucketPartialKey()).toBe('MIXED,V2,V3/5/')
-    })
-
-    it('returns the partial key even if blockNumber is undefined', () => {
-      const protocolsBucketBlockNumber = new ProtocolsBucketBlockNumber({
-        protocols: [Protocol.V3, Protocol.MIXED, Protocol.V2],
-        bucket: 5,
-      })
-
-      expect(protocolsBucketBlockNumber.protocolsBucketPartialKey()).toBe('MIXED,V2,V3/5/')
-    })
-  })
-})
diff --git a/test/mocha/dbSetup.ts b/test/mocha/dbSetup.ts
deleted file mode 100644
index a90464d..0000000
--- a/test/mocha/dbSetup.ts
+++ /dev/null
@@ -1,40 +0,0 @@
-import { DynamoDB } from 'aws-sdk'
-import { dbConnectionSetup } from './dynamoDBLocalFixture'
-
-const createTable = async (table: DynamoDB.Types.CreateTableInput) => {
-  const ddb = getDdbOrDie()
-
-  await ddb.createTable(table).promise()
-}
-
-const getDdbOrDie = (): DynamoDB => {
-  const ddb = (global as any)['__DYNAMODB_CLIENT__'] as DynamoDB
-
-  if (ddb === undefined) {
-    throw new Error()
-  }
-
-  return ddb
-}
-
-export const deleteAllTables = async () => {
-  const ddb = getDdbOrDie()
-  const { TableNames: tableNames } = await ddb.listTables().promise()
-
-  if (tableNames === undefined) {
-    return
-  }
-
-  await Promise.all(tableNames.map((t) => ddb.deleteTable({ TableName: t }).promise()))
-}
-
-export const setupTables = (...tables: DynamoDB.Types.CreateTableInput[]) => {
-  dbConnectionSetup()
-  beforeEach(async () => {
-    await Promise.all(tables.map(createTable))
-  })
-
-  afterEach(async () => {
-    await deleteAllTables()
-  })
-}
diff --git a/test/mocha/dynamoDBLocalFixture.ts b/test/mocha/dynamoDBLocalFixture.ts
deleted file mode 100644
index 49300a5..0000000
--- a/test/mocha/dynamoDBLocalFixture.ts
+++ /dev/null
@@ -1,56 +0,0 @@
-import AWS, { DynamoDB } from 'aws-sdk'
-import { ChildProcess } from 'child_process'
-import DDBLocal from 'dynamodb-local'
-import { deleteAllTables } from './dbSetup'
-
-process.env.AWS_ACCESS_KEY_ID = 'myaccesskey'
-process.env.AWS_SECRET_ACCESS_KEY = 'mysecretkey'
-
-const dbPort = Number(process.env.DYNAMODB_LOCAL_PORT || 8000)
-
-let dbInstance: ChildProcess | undefined
-;(global as any)['__DYNAMODB_LOCAL__'] = true
-
-export const mochaGlobalSetup = async () => {
-  try {
-    console.log('Starting DynamoDB')
-    dbInstance = await DDBLocal.launch(dbPort, null)
-    console.log('Started DynamoDB')
-
-    const ddb = new DynamoDB({
-      endpoint: `localhost:${dbPort}`,
-      sslEnabled: false,
-      region: 'local',
-    })
-
-    dbConnectionSetup()
-
-    exportDDBInstance(ddb)
-
-    await deleteAllTables()
-  } catch (e) {
-    console.log('Error instantiating DynamoDB', e)
-  }
-}
-
-// Overrides the default config to use the local instance of DynamoDB in tests
-export const dbConnectionSetup = () => {
-  const config: any = AWS.config
-
-  const dynamoLocalPort = Number(process.env.DYNAMODB_LOCAL_PORT || 8000)
-  config.endpoint = `localhost:${dynamoLocalPort}`
-  config.sslEnabled = false
-  config.region = 'local'
-}
-
-const exportDDBInstance = (ddb: DynamoDB) => {
-  ;(global as any)['__DYNAMODB_CLIENT__'] = ddb
-}
-
-export const mochaGlobalTeardown = async () => {
-  console.log('Stopping DynamoDB')
-  if (dbInstance !== undefined) {
-    await DDBLocal.stopChild(dbInstance)
-  }
-  console.log('Stopped DynamoDB')
-}
diff --git a/test/mocha/integ/quote.test.ts b/test/mocha/integ/quote.test.ts
deleted file mode 100644
index e8d8533..0000000
--- a/test/mocha/integ/quote.test.ts
+++ /dev/null
@@ -1,2063 +0,0 @@
-import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/signers'
-import { AllowanceTransfer, PermitSingle } from '@uniswap/permit2-sdk'
-import { ChainId, Currency, CurrencyAmount, Ether, Fraction, Token, WETH9 } from '@uniswap/sdk-core'
-import {
-  CEUR_CELO,
-  CEUR_CELO_ALFAJORES,
-  CUSD_CELO,
-  CUSD_CELO_ALFAJORES,
-  DAI_MAINNET,
-  ID_TO_NETWORK_NAME,
-  NATIVE_CURRENCY,
-  parseAmount,
-  SWAP_ROUTER_02_ADDRESSES,
-  USDC_MAINNET,
-  USDT_MAINNET,
-  WBTC_MAINNET,
-} from '@uniswap/smart-order-router'
-import {
-  PERMIT2_ADDRESS,
-  UNIVERSAL_ROUTER_ADDRESS as UNIVERSAL_ROUTER_ADDRESS_BY_CHAIN,
-} from '@uniswap/universal-router-sdk'
-import { MethodParameters } from '@uniswap/smart-order-router'
-import { fail } from 'assert'
-import axiosStatic, { AxiosResponse } from 'axios'
-import axiosRetry from 'axios-retry'
-import chai, { expect } from 'chai'
-import chaiAsPromised from 'chai-as-promised'
-import chaiSubset from 'chai-subset'
-import { BigNumber, providers, Wallet } from 'ethers'
-import hre from 'hardhat'
-import _ from 'lodash'
-import qs from 'qs'
-import { SUPPORTED_CHAINS } from '../../../lib/handlers/injector-sor'
-import { QuoteQueryParams } from '../../../lib/handlers/quote/schema/quote-schema'
-import { QuoteResponse } from '../../../lib/handlers/schema'
-import { Permit2__factory } from '../../../lib/types/ext'
-import { resetAndFundAtBlock } from '../../utils/forkAndFund'
-import { getBalance, getBalanceAndApprove } from '../../utils/getBalanceAndApprove'
-import { DAI_ON, getAmount, getAmountFromToken, UNI_MAINNET, USDC_ON, USDT_ON, WNATIVE_ON } from '../../utils/tokens'
-
-const { ethers } = hre
-
-chai.use(chaiAsPromised)
-chai.use(chaiSubset)
-
-const UNIVERSAL_ROUTER_ADDRESS = UNIVERSAL_ROUTER_ADDRESS_BY_CHAIN(1)
-
-if (!process.env.UNISWAP_ROUTING_API || !process.env.ARCHIVE_NODE_RPC) {
-  throw new Error('Must set UNISWAP_ROUTING_API and ARCHIVE_NODE_RPC env variables for integ tests. See README')
-}
-
-const API = `${process.env.UNISWAP_ROUTING_API!}quote`
-
-const SLIPPAGE = '5'
-const LARGE_SLIPPAGE = '10'
-
-const axios = axiosStatic.create()
-axiosRetry(axios, {
-  retries: 10,
-  retryCondition: (err) => err.response?.status == 429,
-  retryDelay: axiosRetry.exponentialDelay,
-})
-
-const callAndExpectFail = async (quoteReq: Partial<QuoteQueryParams>, resp: { status: number; data: any }) => {
-  const queryParams = qs.stringify(quoteReq)
-  try {
-    await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-    fail()
-  } catch (err: any) {
-    expect(err.response).to.containSubset(resp)
-  }
-}
-
-const checkQuoteToken = (
-  before: CurrencyAmount<Currency>,
-  after: CurrencyAmount<Currency>,
-  tokensQuoted: CurrencyAmount<Currency>
-) => {
-  // Check which is bigger to support exactIn and exactOut
-  const tokensSwapped = after.greaterThan(before) ? after.subtract(before) : before.subtract(after)
-
-  const tokensDiff = tokensQuoted.greaterThan(tokensSwapped)
-    ? tokensQuoted.subtract(tokensSwapped)
-    : tokensSwapped.subtract(tokensQuoted)
-  const percentDiff = tokensDiff.asFraction.divide(tokensQuoted.asFraction)
-  expect(percentDiff.lessThan(new Fraction(parseInt(SLIPPAGE), 100))).to.be.true
-}
-
-let warnedTesterPK = false
-const isTesterPKEnvironmentSet = (): boolean => {
-  const isSet = !!process.env.TESTER_PK
-  if (!isSet && !warnedTesterPK) {
-    console.log('Skipping tests requiring real PK since env variables for TESTER_PK is not set.')
-    warnedTesterPK = true
-  }
-  return isSet
-}
-
-const MAX_UINT160 = '0xffffffffffffffffffffffffffffffffffffffff'
-
-describe('quote', function () {
-  // Help with test flakiness by retrying.
-  this.retries(0)
-
-  this.timeout('500s')
-
-  let alice: SignerWithAddress
-  let block: number
-  let curNonce: number = 0
-  let nextPermitNonce: () => string = () => {
-    const nonce = curNonce.toString()
-    curNonce = curNonce + 1
-    return nonce
-  }
-
-  const executeSwap = async (
-    methodParameters: MethodParameters,
-    currencyIn: Currency,
-    currencyOut: Currency,
-    permit?: boolean,
-    chainId = ChainId.MAINNET
-  ): Promise<{
-    tokenInAfter: CurrencyAmount<Currency>
-    tokenInBefore: CurrencyAmount<Currency>
-    tokenOutAfter: CurrencyAmount<Currency>
-    tokenOutBefore: CurrencyAmount<Currency>
-  }> => {
-    const permit2 = Permit2__factory.connect(PERMIT2_ADDRESS, alice)
-
-    // Approve Permit2
-    const tokenInBefore = await getBalanceAndApprove(alice, PERMIT2_ADDRESS, currencyIn)
-    const tokenOutBefore = await getBalance(alice, currencyOut)
-
-    // Approve SwapRouter02 in case we request calldata for it instead of Universal Router
-    await getBalanceAndApprove(alice, SWAP_ROUTER_02_ADDRESSES(chainId), currencyIn)
-
-    // If not using permit do a regular approval allowing narwhal max balance.
-    if (!permit) {
-      const approveNarwhal = await permit2.approve(
-        currencyIn.wrapped.address,
-        UNIVERSAL_ROUTER_ADDRESS,
-        MAX_UINT160,
-        100000000000000
-      )
-      await approveNarwhal.wait()
-    }
-
-    const transaction = {
-      data: methodParameters.calldata,
-      to: methodParameters.to,
-      value: BigNumber.from(methodParameters.value),
-      from: alice.address,
-      gasPrice: BigNumber.from(2000000000000),
-      type: 1,
-    }
-
-    const transactionResponse: providers.TransactionResponse = await alice.sendTransaction(transaction)
-    await transactionResponse.wait()
-
-    const tokenInAfter = await getBalance(alice, currencyIn)
-    const tokenOutAfter = await getBalance(alice, currencyOut)
-
-    return {
-      tokenInAfter,
-      tokenInBefore,
-      tokenOutAfter,
-      tokenOutBefore,
-    }
-  }
-
-  before(async function () {
-    this.timeout(40000)
-    ;[alice] = await ethers.getSigners()
-
-    // Make a dummy call to the API to get a block number to fork from.
-    const quoteReq: QuoteQueryParams = {
-      tokenInAddress: 'USDC',
-      tokenInChainId: 1,
-      tokenOutAddress: 'USDT',
-      tokenOutChainId: 1,
-      amount: await getAmount(1, 'exactIn', 'USDC', 'USDT', '100'),
-      type: 'exactIn',
-    }
-
-    const {
-      data: { blockNumber },
-    } = await axios.get<QuoteResponse>(`${API}?${qs.stringify(quoteReq)}`)
-
-    block = parseInt(blockNumber) - 10
-
-    alice = await resetAndFundAtBlock(alice, block, [
-      parseAmount('8000000', USDC_MAINNET),
-      parseAmount('5000000', USDT_MAINNET),
-      parseAmount('10', WBTC_MAINNET),
-      parseAmount('1000', UNI_MAINNET),
-      parseAmount('4000', WETH9[1]),
-      parseAmount('5000000', DAI_MAINNET),
-    ])
-  })
-
-  for (const algorithm of ['alpha']) {
-    for (const type of ['exactIn', 'exactOut']) {
-      describe(`${ID_TO_NETWORK_NAME(1)} ${algorithm} ${type} 2xx`, () => {
-        describe(`+ Execute Swap`, () => {
-          it(`erc20 -> erc20`, async () => {
-            const quoteReq: QuoteQueryParams = {
-              tokenInAddress: 'USDC',
-              tokenInChainId: 1,
-              tokenOutAddress: 'USDT',
-              tokenOutChainId: 1,
-              amount: await getAmount(1, type, 'USDC', 'USDT', '100'),
-              type,
-              recipient: alice.address,
-              slippageTolerance: SLIPPAGE,
-              deadline: '360',
-              algorithm,
-              enableUniversalRouter: true,
-            }
-
-            const queryParams = qs.stringify(quoteReq)
-
-            const response: AxiosResponse<QuoteResponse> = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-            const {
-              data: { quote, quoteDecimals, quoteGasAdjustedDecimals, methodParameters },
-              status,
-            } = response
-
-            expect(status).to.equal(200)
-            expect(parseFloat(quoteDecimals)).to.be.greaterThan(90)
-            expect(parseFloat(quoteDecimals)).to.be.lessThan(110)
-
-            if (type == 'exactIn') {
-              expect(parseFloat(quoteGasAdjustedDecimals)).to.be.lessThanOrEqual(parseFloat(quoteDecimals))
-            } else {
-              expect(parseFloat(quoteGasAdjustedDecimals)).to.be.greaterThanOrEqual(parseFloat(quoteDecimals))
-            }
-
-            expect(methodParameters).to.not.be.undefined
-            expect(methodParameters?.to).to.equal(UNIVERSAL_ROUTER_ADDRESS)
-
-            const { tokenInBefore, tokenInAfter, tokenOutBefore, tokenOutAfter } = await executeSwap(
-              methodParameters!,
-              USDC_MAINNET,
-              USDT_MAINNET
-            )
-
-            if (type == 'exactIn') {
-              expect(tokenInBefore.subtract(tokenInAfter).toExact()).to.equal('100')
-              checkQuoteToken(tokenOutBefore, tokenOutAfter, CurrencyAmount.fromRawAmount(USDT_MAINNET, quote))
-            } else {
-              expect(tokenOutAfter.subtract(tokenOutBefore).toExact()).to.equal('100')
-              checkQuoteToken(tokenInBefore, tokenInAfter, CurrencyAmount.fromRawAmount(USDC_MAINNET, quote))
-            }
-          })
-
-          it(`erc20 -> erc20 swaprouter02`, async () => {
-            const quoteReq: QuoteQueryParams = {
-              tokenInAddress: 'USDC',
-              tokenInChainId: 1,
-              tokenOutAddress: 'USDT',
-              tokenOutChainId: 1,
-              amount: await getAmount(1, type, 'USDC', 'USDT', '100'),
-              type,
-              recipient: alice.address,
-              slippageTolerance: SLIPPAGE,
-              deadline: '360',
-              algorithm,
-            }
-
-            const queryParams = qs.stringify(quoteReq)
-
-            const response: AxiosResponse<QuoteResponse> = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-            const {
-              data: { quote, quoteDecimals, quoteGasAdjustedDecimals, methodParameters },
-              status,
-            } = response
-
-            expect(status).to.equal(200)
-            expect(parseFloat(quoteDecimals)).to.be.greaterThan(90)
-            expect(parseFloat(quoteDecimals)).to.be.lessThan(110)
-
-            if (type == 'exactIn') {
-              expect(parseFloat(quoteGasAdjustedDecimals)).to.be.lessThanOrEqual(parseFloat(quoteDecimals))
-            } else {
-              expect(parseFloat(quoteGasAdjustedDecimals)).to.be.greaterThanOrEqual(parseFloat(quoteDecimals))
-            }
-
-            expect(methodParameters).to.not.be.undefined
-            expect(methodParameters?.to).to.equal(SWAP_ROUTER_02_ADDRESSES(ChainId.MAINNET))
-
-            const { tokenInBefore, tokenInAfter, tokenOutBefore, tokenOutAfter } = await executeSwap(
-              methodParameters!,
-              USDC_MAINNET,
-              USDT_MAINNET
-            )
-
-            if (type == 'exactIn') {
-              expect(tokenInBefore.subtract(tokenInAfter).toExact()).to.equal('100')
-              checkQuoteToken(tokenOutBefore, tokenOutAfter, CurrencyAmount.fromRawAmount(USDT_MAINNET, quote))
-            } else {
-              expect(tokenOutAfter.subtract(tokenOutBefore).toExact()).to.equal('100')
-              checkQuoteToken(tokenInBefore, tokenInAfter, CurrencyAmount.fromRawAmount(USDC_MAINNET, quote))
-            }
-          })
-
-          it(`erc20 -> erc20 with permit`, async () => {
-            const amount = await getAmount(1, type, 'USDC', 'USDT', '10')
-
-            const nonce = nextPermitNonce()
-
-            const permit: PermitSingle = {
-              details: {
-                token: USDC_MAINNET.address,
-                amount: '15000000', // For exact out we don't know the exact amount needed to permit, so just specify a large amount.
-                expiration: Math.floor(new Date().getTime() / 1000 + 10000000).toString(),
-                nonce,
-              },
-              spender: UNIVERSAL_ROUTER_ADDRESS,
-              sigDeadline: Math.floor(new Date().getTime() / 1000 + 10000000).toString(),
-            }
-
-            const { domain, types, values } = AllowanceTransfer.getPermitData(permit, PERMIT2_ADDRESS, 1)
-
-            const signature = await alice._signTypedData(domain, types, values)
-
-            const quoteReq: QuoteQueryParams = {
-              tokenInAddress: 'USDC',
-              tokenInChainId: 1,
-              tokenOutAddress: 'USDT',
-              tokenOutChainId: 1,
-              amount,
-              type,
-              recipient: alice.address,
-              slippageTolerance: SLIPPAGE,
-              deadline: '360',
-              algorithm,
-              permitSignature: signature,
-              permitAmount: permit.details.amount.toString(),
-              permitExpiration: permit.details.expiration.toString(),
-              permitSigDeadline: permit.sigDeadline.toString(),
-              permitNonce: permit.details.nonce.toString(),
-              enableUniversalRouter: true,
-            }
-
-            const queryParams = qs.stringify(quoteReq)
-
-            const response: AxiosResponse<QuoteResponse> = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-            const {
-              data: { quote, quoteDecimals, quoteGasAdjustedDecimals, methodParameters },
-              status,
-            } = response
-
-            expect(status).to.equal(200)
-            expect(parseFloat(quoteDecimals)).to.be.greaterThan(9)
-            expect(parseFloat(quoteDecimals)).to.be.lessThan(11)
-
-            if (type == 'exactIn') {
-              expect(parseFloat(quoteGasAdjustedDecimals)).to.be.lessThanOrEqual(parseFloat(quoteDecimals))
-            } else {
-              expect(parseFloat(quoteGasAdjustedDecimals)).to.be.greaterThanOrEqual(parseFloat(quoteDecimals))
-            }
-
-            expect(methodParameters).to.not.be.undefined
-            expect(methodParameters?.to).to.equal(UNIVERSAL_ROUTER_ADDRESS)
-
-            const { tokenInBefore, tokenInAfter, tokenOutBefore, tokenOutAfter } = await executeSwap(
-              methodParameters!,
-              USDC_MAINNET,
-              USDT_MAINNET,
-              true
-            )
-
-            if (type == 'exactIn') {
-              expect(tokenInBefore.subtract(tokenInAfter).toExact()).to.equal('10')
-              checkQuoteToken(tokenOutBefore, tokenOutAfter, CurrencyAmount.fromRawAmount(USDT_MAINNET, quote))
-            } else {
-              expect(tokenOutAfter.subtract(tokenOutBefore).toExact()).to.equal('10')
-              checkQuoteToken(tokenInBefore, tokenInAfter, CurrencyAmount.fromRawAmount(USDC_MAINNET, quote))
-            }
-          })
-
-          it(`erc20 -> eth`, async () => {
-            const quoteReq: QuoteQueryParams = {
-              tokenInAddress: 'USDC',
-              tokenInChainId: 1,
-              tokenOutAddress: 'ETH',
-              tokenOutChainId: 1,
-              amount: await getAmount(1, type, 'USDC', 'ETH', type == 'exactIn' ? '1000000' : '10'),
-              type,
-              recipient: alice.address,
-              slippageTolerance: SLIPPAGE,
-              deadline: '360',
-              algorithm,
-              enableUniversalRouter: true,
-            }
-
-            const queryParams = qs.stringify(quoteReq)
-
-            const response = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-            const {
-              data: { quote, methodParameters },
-              status,
-            } = response
-
-            expect(status).to.equal(200)
-            expect(methodParameters).to.not.be.undefined
-
-            const { tokenInBefore, tokenInAfter, tokenOutBefore, tokenOutAfter } = await executeSwap(
-              methodParameters!,
-              USDC_MAINNET,
-              Ether.onChain(1)
-            )
-
-            if (type == 'exactIn') {
-              expect(tokenInBefore.subtract(tokenInAfter).toExact()).to.equal('1000000')
-              checkQuoteToken(tokenOutBefore, tokenOutAfter, CurrencyAmount.fromRawAmount(Ether.onChain(1), quote))
-            } else {
-              // Hard to test ETH balance due to gas costs for approval and swap. Just check tokenIn changes
-              checkQuoteToken(tokenInBefore, tokenInAfter, CurrencyAmount.fromRawAmount(USDC_MAINNET, quote))
-            }
-          })
-
-          it(`erc20 -> eth large trade`, async () => {
-            // Trade of this size almost always results in splits.
-            const quoteReq: QuoteQueryParams = {
-              tokenInAddress: 'USDC',
-              tokenInChainId: 1,
-              tokenOutAddress: 'ETH',
-              tokenOutChainId: 1,
-              amount:
-                type == 'exactIn'
-                  ? await getAmount(1, type, 'USDC', 'ETH', '1000000')
-                  : await getAmount(1, type, 'USDC', 'ETH', '100'),
-              type,
-              recipient: alice.address,
-              slippageTolerance: SLIPPAGE,
-              deadline: '360',
-              algorithm,
-              enableUniversalRouter: true,
-            }
-
-            const queryParams = qs.stringify(quoteReq)
-
-            const response = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-            const { data, status } = response
-
-            expect(status).to.equal(200)
-            expect(data.methodParameters).to.not.be.undefined
-
-            expect(data.route).to.not.be.undefined
-
-            const amountInEdgesTotal = _(data.route)
-              .flatMap((route) => route[0]!)
-              .filter((pool) => !!pool.amountIn)
-              .map((pool) => BigNumber.from(pool.amountIn))
-              .reduce((cur, total) => total.add(cur), BigNumber.from(0))
-            const amountIn = BigNumber.from(data.quote)
-            expect(amountIn.eq(amountInEdgesTotal))
-
-            const amountOutEdgesTotal = _(data.route)
-              .flatMap((route) => route[0]!)
-              .filter((pool) => !!pool.amountOut)
-              .map((pool) => BigNumber.from(pool.amountOut))
-              .reduce((cur, total) => total.add(cur), BigNumber.from(0))
-            const amountOut = BigNumber.from(data.quote)
-            expect(amountOut.eq(amountOutEdgesTotal))
-
-            const { tokenInBefore, tokenInAfter, tokenOutBefore, tokenOutAfter } = await executeSwap(
-              data.methodParameters!,
-              USDC_MAINNET,
-              Ether.onChain(1)
-            )
-
-            if (type == 'exactIn') {
-              expect(tokenInBefore.subtract(tokenInAfter).toExact()).to.equal('1000000')
-              checkQuoteToken(tokenOutBefore, tokenOutAfter, CurrencyAmount.fromRawAmount(Ether.onChain(1), data.quote))
-            } else {
-              // Hard to test ETH balance due to gas costs for approval and swap. Just check tokenIn changes
-              checkQuoteToken(tokenInBefore, tokenInAfter, CurrencyAmount.fromRawAmount(USDC_MAINNET, data.quote))
-            }
-          })
-
-          it(`erc20 -> eth large trade with permit`, async () => {
-            const nonce = nextPermitNonce()
-
-            const amount =
-              type == 'exactIn'
-                ? await getAmount(1, type, 'USDC', 'ETH', '1000000')
-                : await getAmount(1, type, 'USDC', 'ETH', '100')
-
-            const permit: PermitSingle = {
-              details: {
-                token: USDC_MAINNET.address,
-                amount: '1500000000000', // For exact out we don't know the exact amount needed to permit, so just specify a large amount.
-                expiration: Math.floor(new Date().getTime() / 1000 + 10000000).toString(),
-                nonce,
-              },
-              spender: UNIVERSAL_ROUTER_ADDRESS,
-              sigDeadline: Math.floor(new Date().getTime() / 1000 + 10000000).toString(),
-            }
-
-            const { domain, types, values } = AllowanceTransfer.getPermitData(permit, PERMIT2_ADDRESS, 1)
-
-            const signature = await alice._signTypedData(domain, types, values)
-
-            // Trade of this size almost always results in splits.
-            const quoteReq: QuoteQueryParams = {
-              tokenInAddress: 'USDC',
-              tokenInChainId: 1,
-              tokenOutAddress: 'ETH',
-              tokenOutChainId: 1,
-              amount,
-              type,
-              recipient: alice.address,
-              slippageTolerance: SLIPPAGE,
-              deadline: '360',
-              algorithm,
-              permitSignature: signature,
-              permitAmount: permit.details.amount.toString(),
-              permitExpiration: permit.details.expiration.toString(),
-              permitSigDeadline: permit.sigDeadline.toString(),
-              permitNonce: permit.details.nonce.toString(),
-              enableUniversalRouter: true,
-            }
-
-            const queryParams = qs.stringify(quoteReq)
-
-            const response = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-            const { data, status } = response
-
-            expect(status).to.equal(200)
-            expect(data.methodParameters).to.not.be.undefined
-            expect(data.route).to.not.be.undefined
-
-            const { tokenInBefore, tokenInAfter, tokenOutBefore, tokenOutAfter } = await executeSwap(
-              data.methodParameters!,
-              USDC_MAINNET,
-              Ether.onChain(1),
-              true
-            )
-
-            if (type == 'exactIn') {
-              expect(tokenInBefore.subtract(tokenInAfter).toExact()).to.equal('1000000')
-              checkQuoteToken(tokenOutBefore, tokenOutAfter, CurrencyAmount.fromRawAmount(Ether.onChain(1), data.quote))
-            } else {
-              // Hard to test ETH balance due to gas costs for approval and swap. Just check tokenIn changes
-              checkQuoteToken(tokenInBefore, tokenInAfter, CurrencyAmount.fromRawAmount(USDC_MAINNET, data.quote))
-            }
-          })
-
-          it(`eth -> erc20`, async () => {
-            const quoteReq: QuoteQueryParams = {
-              tokenInAddress: 'ETH',
-              tokenInChainId: 1,
-              tokenOutAddress: 'UNI',
-              tokenOutChainId: 1,
-              amount:
-                type == 'exactIn'
-                  ? await getAmount(1, type, 'ETH', 'UNI', '10')
-                  : await getAmount(1, type, 'ETH', 'UNI', '10000'),
-              type,
-              recipient: alice.address,
-              slippageTolerance: SLIPPAGE,
-              deadline: '360',
-              algorithm,
-              enableUniversalRouter: true,
-            }
-
-            const queryParams = qs.stringify(quoteReq)
-
-            const response = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-            const { data, status } = response
-
-            expect(status).to.equal(200)
-            expect(data.methodParameters).to.not.be.undefined
-
-            const { tokenInBefore, tokenInAfter, tokenOutBefore, tokenOutAfter } = await executeSwap(
-              data.methodParameters!,
-              Ether.onChain(1),
-              UNI_MAINNET
-            )
-
-            if (type == 'exactIn') {
-              // We've swapped 10 ETH + gas costs
-              expect(tokenInBefore.subtract(tokenInAfter).greaterThan(parseAmount('10', Ether.onChain(1)))).to.be.true
-              checkQuoteToken(tokenOutBefore, tokenOutAfter, CurrencyAmount.fromRawAmount(UNI_MAINNET, data.quote))
-            } else {
-              expect(tokenOutAfter.subtract(tokenOutBefore).toExact()).to.equal('10000')
-              // Can't easily check slippage for ETH due to gas costs effecting ETH balance.
-            }
-          })
-
-          it(`eth -> erc20 swaprouter02`, async () => {
-            const quoteReq: QuoteQueryParams = {
-              tokenInAddress: 'ETH',
-              tokenInChainId: 1,
-              tokenOutAddress: 'UNI',
-              tokenOutChainId: 1,
-              amount:
-                type == 'exactIn'
-                  ? await getAmount(1, type, 'ETH', 'UNI', '10')
-                  : await getAmount(1, type, 'ETH', 'UNI', '10000'),
-              type,
-              recipient: alice.address,
-              slippageTolerance: type == 'exactOut' ? LARGE_SLIPPAGE : SLIPPAGE,
-              deadline: '360',
-              algorithm,
-              enableUniversalRouter: false,
-            }
-
-            const queryParams = qs.stringify(quoteReq)
-
-            const response = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-            const { data, status } = response
-
-            expect(status).to.equal(200)
-            expect(data.methodParameters).to.not.be.undefined
-            expect(data.methodParameters?.to).to.equal(SWAP_ROUTER_02_ADDRESSES(ChainId.MAINNET))
-
-            const { tokenInBefore, tokenInAfter, tokenOutBefore, tokenOutAfter } = await executeSwap(
-              data.methodParameters!,
-              Ether.onChain(1),
-              UNI_MAINNET
-            )
-
-            if (type == 'exactIn') {
-              // We've swapped 10 ETH + gas costs
-              expect(tokenInBefore.subtract(tokenInAfter).greaterThan(parseAmount('10', Ether.onChain(1)))).to.be.true
-              checkQuoteToken(tokenOutBefore, tokenOutAfter, CurrencyAmount.fromRawAmount(UNI_MAINNET, data.quote))
-            } else {
-              expect(tokenOutAfter.subtract(tokenOutBefore).toExact()).to.equal('10000')
-              // Can't easily check slippage for ETH due to gas costs effecting ETH balance.
-            }
-          })
-
-          it(`weth -> erc20`, async () => {
-            const quoteReq: QuoteQueryParams = {
-              tokenInAddress: 'WETH',
-              tokenInChainId: 1,
-              tokenOutAddress: 'DAI',
-              tokenOutChainId: 1,
-              amount: await getAmount(1, type, 'WETH', 'DAI', '100'),
-              type,
-              recipient: alice.address,
-              slippageTolerance: SLIPPAGE,
-              deadline: '360',
-              algorithm,
-              enableUniversalRouter: true,
-            }
-
-            const queryParams = qs.stringify(quoteReq)
-
-            const response = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-            const { data, status } = response
-
-            expect(status).to.equal(200)
-            expect(data.methodParameters).to.not.be.undefined
-
-            const { tokenInBefore, tokenInAfter, tokenOutBefore, tokenOutAfter } = await executeSwap(
-              data.methodParameters!,
-              WETH9[1]!,
-              DAI_MAINNET
-            )
-
-            if (type == 'exactIn') {
-              expect(tokenInBefore.subtract(tokenInAfter).toExact()).to.equal('100')
-              checkQuoteToken(tokenOutBefore, tokenOutAfter, CurrencyAmount.fromRawAmount(DAI_MAINNET, data.quote))
-            } else {
-              expect(tokenOutAfter.subtract(tokenOutBefore).toExact()).to.equal('100')
-              checkQuoteToken(tokenInBefore, tokenInAfter, CurrencyAmount.fromRawAmount(WETH9[1]!, data.quote))
-            }
-          })
-
-          it(`erc20 -> weth`, async () => {
-            const quoteReq: QuoteQueryParams = {
-              tokenInAddress: 'USDC',
-              tokenInChainId: 1,
-              tokenOutAddress: 'WETH',
-              tokenOutChainId: 1,
-              amount: await getAmount(1, type, 'USDC', 'WETH', '100'),
-              type,
-              recipient: alice.address,
-              slippageTolerance: SLIPPAGE,
-              deadline: '360',
-              algorithm,
-              enableUniversalRouter: true,
-            }
-
-            const queryParams = qs.stringify(quoteReq)
-
-            const response = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-            const { data, status } = response
-
-            expect(status).to.equal(200)
-            expect(data.methodParameters).to.not.be.undefined
-
-            const { tokenInBefore, tokenInAfter, tokenOutBefore, tokenOutAfter } = await executeSwap(
-              data.methodParameters!,
-              USDC_MAINNET,
-              WETH9[1]!
-            )
-
-            if (type == 'exactIn') {
-              expect(tokenInBefore.subtract(tokenInAfter).toExact()).to.equal('100')
-              checkQuoteToken(tokenOutBefore, tokenOutAfter, CurrencyAmount.fromRawAmount(WETH9[1], data.quote))
-            } else {
-              expect(tokenOutAfter.subtract(tokenOutBefore).toExact()).to.equal('100')
-              checkQuoteToken(tokenInBefore, tokenInAfter, CurrencyAmount.fromRawAmount(USDC_MAINNET, data.quote))
-            }
-          })
-
-          if (algorithm == 'alpha') {
-            it(`erc20 -> erc20 v3 only`, async () => {
-              const quoteReq: QuoteQueryParams = {
-                tokenInAddress: 'USDC',
-                tokenInChainId: 1,
-                tokenOutAddress: 'USDT',
-                tokenOutChainId: 1,
-                amount: await getAmount(1, type, 'USDC', 'USDT', '100'),
-                type,
-                recipient: alice.address,
-                slippageTolerance: SLIPPAGE,
-                deadline: '360',
-                algorithm: 'alpha',
-                protocols: 'v3',
-                enableUniversalRouter: true,
-              }
-
-              const queryParams = qs.stringify(quoteReq)
-
-              const response: AxiosResponse<QuoteResponse> = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-              const {
-                data: { quote, quoteDecimals, quoteGasAdjustedDecimals, methodParameters, route },
-                status,
-              } = response
-
-              expect(status).to.equal(200)
-              expect(parseFloat(quoteDecimals)).to.be.greaterThan(90)
-              expect(parseFloat(quoteDecimals)).to.be.lessThan(110)
-
-              if (type == 'exactIn') {
-                expect(parseFloat(quoteGasAdjustedDecimals)).to.be.lessThanOrEqual(parseFloat(quoteDecimals))
-              } else {
-                expect(parseFloat(quoteGasAdjustedDecimals)).to.be.greaterThanOrEqual(parseFloat(quoteDecimals))
-              }
-
-              expect(methodParameters).to.not.be.undefined
-
-              for (const r of route) {
-                for (const pool of r) {
-                  expect(pool.type).to.equal('v3-pool')
-                }
-              }
-
-              const { tokenInBefore, tokenInAfter, tokenOutBefore, tokenOutAfter } = await executeSwap(
-                response.data.methodParameters!,
-                USDC_MAINNET,
-                USDT_MAINNET!
-              )
-
-              if (type == 'exactIn') {
-                expect(tokenInBefore.subtract(tokenInAfter).toExact()).to.equal('100')
-                checkQuoteToken(tokenOutBefore, tokenOutAfter, CurrencyAmount.fromRawAmount(USDT_MAINNET, quote))
-              } else {
-                expect(tokenOutAfter.subtract(tokenOutBefore).toExact()).to.equal('100')
-                checkQuoteToken(tokenInBefore, tokenInAfter, CurrencyAmount.fromRawAmount(USDC_MAINNET, quote))
-              }
-            })
-
-            it(`erc20 -> erc20 v2 only`, async () => {
-              const quoteReq: QuoteQueryParams = {
-                tokenInAddress: 'USDC',
-                tokenInChainId: 1,
-                tokenOutAddress: 'USDT',
-                tokenOutChainId: 1,
-                amount: await getAmount(1, type, 'USDC', 'USDT', '100'),
-                type,
-                recipient: alice.address,
-                slippageTolerance: SLIPPAGE,
-                deadline: '360',
-                algorithm: 'alpha',
-                protocols: 'v2',
-                enableUniversalRouter: true,
-              }
-
-              const queryParams = qs.stringify(quoteReq)
-
-              const response: AxiosResponse<QuoteResponse> = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-              const {
-                data: { quote, quoteDecimals, quoteGasAdjustedDecimals, methodParameters, route },
-                status,
-              } = response
-
-              expect(status).to.equal(200)
-              expect(parseFloat(quoteDecimals)).to.be.greaterThan(90)
-              expect(parseFloat(quoteDecimals)).to.be.lessThan(110)
-
-              if (type == 'exactIn') {
-                expect(parseFloat(quoteGasAdjustedDecimals)).to.be.lessThanOrEqual(parseFloat(quoteDecimals))
-              } else {
-                expect(parseFloat(quoteGasAdjustedDecimals)).to.be.greaterThanOrEqual(parseFloat(quoteDecimals))
-              }
-
-              expect(methodParameters).to.not.be.undefined
-
-              for (const r of route) {
-                for (const pool of r) {
-                  expect(pool.type).to.equal('v2-pool')
-                }
-              }
-
-              const { tokenInBefore, tokenInAfter, tokenOutBefore, tokenOutAfter } = await executeSwap(
-                response.data.methodParameters!,
-                USDC_MAINNET,
-                USDT_MAINNET!
-              )
-
-              if (type == 'exactIn') {
-                expect(tokenInBefore.subtract(tokenInAfter).toExact()).to.equal('100')
-                checkQuoteToken(tokenOutBefore, tokenOutAfter, CurrencyAmount.fromRawAmount(USDT_MAINNET, quote))
-              } else {
-                expect(tokenOutAfter.subtract(tokenOutBefore).toExact()).to.equal('100')
-                checkQuoteToken(tokenInBefore, tokenInAfter, CurrencyAmount.fromRawAmount(USDC_MAINNET, quote))
-              }
-            })
-
-            it(`erc20 -> erc20 forceCrossProtocol`, async () => {
-              const quoteReq: QuoteQueryParams = {
-                tokenInAddress: 'USDC',
-                tokenInChainId: 1,
-                tokenOutAddress: 'USDT',
-                tokenOutChainId: 1,
-                amount: await getAmount(1, type, 'USDC', 'USDT', '100'),
-                type,
-                recipient: alice.address,
-                slippageTolerance: SLIPPAGE,
-                deadline: '360',
-                algorithm: 'alpha',
-                forceCrossProtocol: true,
-                enableUniversalRouter: true,
-              }
-
-              const queryParams = qs.stringify(quoteReq)
-
-              const response: AxiosResponse<QuoteResponse> = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-              const {
-                data: { quote, quoteDecimals, quoteGasAdjustedDecimals, methodParameters, route },
-                status,
-              } = response
-
-              expect(status).to.equal(200)
-              expect(parseFloat(quoteDecimals)).to.be.greaterThan(90)
-              expect(parseFloat(quoteDecimals)).to.be.lessThan(110)
-
-              if (type == 'exactIn') {
-                expect(parseFloat(quoteGasAdjustedDecimals)).to.be.lessThanOrEqual(parseFloat(quoteDecimals))
-              } else {
-                expect(parseFloat(quoteGasAdjustedDecimals)).to.be.greaterThanOrEqual(parseFloat(quoteDecimals))
-              }
-
-              expect(methodParameters).to.not.be.undefined
-
-              let hasV3Pool = false
-              let hasV2Pool = false
-              for (const r of route) {
-                for (const pool of r) {
-                  if (pool.type == 'v3-pool') {
-                    hasV3Pool = true
-                  }
-                  if (pool.type == 'v2-pool') {
-                    hasV2Pool = true
-                  }
-                }
-              }
-
-              expect(hasV3Pool && hasV2Pool).to.be.true
-
-              const { tokenInBefore, tokenInAfter, tokenOutBefore, tokenOutAfter } = await executeSwap(
-                response.data.methodParameters!,
-                USDC_MAINNET,
-                USDT_MAINNET!
-              )
-
-              if (type == 'exactIn') {
-                expect(tokenInBefore.subtract(tokenInAfter).toExact()).to.equal('100')
-                checkQuoteToken(tokenOutBefore, tokenOutAfter, CurrencyAmount.fromRawAmount(USDT_MAINNET, quote))
-              } else {
-                expect(tokenOutAfter.subtract(tokenOutBefore).toExact()).to.equal('100')
-                checkQuoteToken(tokenInBefore, tokenInAfter, CurrencyAmount.fromRawAmount(USDC_MAINNET, quote))
-              }
-            })
-
-            /// Tests for routes likely to result in MixedRoutes being returned
-            if (type === 'exactIn') {
-              it(`erc20 -> erc20 forceMixedRoutes not specified for v2,v3 does not return mixed route even when it is better`, async () => {
-                const quoteReq: QuoteQueryParams = {
-                  tokenInAddress: 'BOND',
-                  tokenInChainId: 1,
-                  tokenOutAddress: 'APE',
-                  tokenOutChainId: 1,
-                  amount: await getAmount(1, type, 'BOND', 'APE', '10000'),
-                  type,
-                  recipient: alice.address,
-                  slippageTolerance: SLIPPAGE,
-                  deadline: '360',
-                  algorithm: 'alpha',
-                  protocols: 'v2,v3',
-                  enableUniversalRouter: true,
-                }
-
-                const queryParams = qs.stringify(quoteReq)
-
-                const response: AxiosResponse<QuoteResponse> = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-                const {
-                  data: { quoteDecimals, quoteGasAdjustedDecimals, methodParameters, routeString },
-                  status,
-                } = response
-
-                expect(status).to.equal(200)
-
-                if (type == 'exactIn') {
-                  expect(parseFloat(quoteGasAdjustedDecimals)).to.be.lessThanOrEqual(parseFloat(quoteDecimals))
-                } else {
-                  expect(parseFloat(quoteGasAdjustedDecimals)).to.be.greaterThanOrEqual(parseFloat(quoteDecimals))
-                }
-
-                expect(methodParameters).to.not.be.undefined
-
-                expect(!routeString.includes('[V2 + V3]'))
-              })
-
-              it(`erc20 -> erc20 forceMixedRoutes true for v2,v3`, async () => {
-                const quoteReq: QuoteQueryParams = {
-                  tokenInAddress: 'BOND',
-                  tokenInChainId: 1,
-                  tokenOutAddress: 'APE',
-                  tokenOutChainId: 1,
-                  amount: await getAmount(1, type, 'BOND', 'APE', '10000'),
-                  type,
-                  recipient: alice.address,
-                  slippageTolerance: SLIPPAGE,
-                  deadline: '360',
-                  algorithm: 'alpha',
-                  forceMixedRoutes: true,
-                  protocols: 'v2,v3',
-                  enableUniversalRouter: true,
-                }
-
-                await callAndExpectFail(quoteReq, {
-                  status: 404,
-                  data: {
-                    detail: 'No route found',
-                    errorCode: 'NO_ROUTE',
-                  },
-                })
-              })
-
-              it.skip(`erc20 -> erc20 forceMixedRoutes true for all protocols specified`, async () => {
-                const quoteReq: QuoteQueryParams = {
-                  tokenInAddress: 'BOND',
-                  tokenInChainId: 1,
-                  tokenOutAddress: 'APE',
-                  tokenOutChainId: 1,
-                  amount: await getAmount(1, type, 'BOND', 'APE', '10000'),
-                  type,
-                  recipient: alice.address,
-                  slippageTolerance: SLIPPAGE,
-                  deadline: '360',
-                  algorithm: 'alpha',
-                  forceMixedRoutes: true,
-                  protocols: 'v2,v3,mixed',
-                  enableUniversalRouter: true,
-                }
-
-                const queryParams = qs.stringify(quoteReq)
-
-                const response: AxiosResponse<QuoteResponse> = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-                const {
-                  data: { quoteDecimals, quoteGasAdjustedDecimals, methodParameters, routeString },
-                  status,
-                } = response
-
-                expect(status).to.equal(200)
-
-                if (type == 'exactIn') {
-                  expect(parseFloat(quoteGasAdjustedDecimals)).to.be.lessThanOrEqual(parseFloat(quoteDecimals))
-                } else {
-                  expect(parseFloat(quoteGasAdjustedDecimals)).to.be.greaterThanOrEqual(parseFloat(quoteDecimals))
-                }
-
-                expect(methodParameters).to.not.be.undefined
-
-                /// since we only get the routeString back, we can check if there's V3 + V2
-                expect(routeString.includes('[V2 + V3]'))
-              })
-            }
-          }
-        })
-
-        if (algorithm == 'alpha') {
-          describe(`+ Simulate Swap + Execute Swap`, () => {
-            it(`erc20 -> erc20`, async () => {
-              const quoteReq: QuoteQueryParams = {
-                tokenInAddress: 'USDC',
-                tokenInChainId: 1,
-                tokenOutAddress: 'USDT',
-                tokenOutChainId: 1,
-                amount: await getAmount(1, type, 'USDC', 'USDT', '100'),
-                type,
-                recipient: alice.address,
-                slippageTolerance: SLIPPAGE,
-                deadline: '360',
-                algorithm,
-                simulateFromAddress: '0xf584f8728b874a6a5c7a8d4d387c9aae9172d621',
-                enableUniversalRouter: true,
-              }
-
-              const queryParams = qs.stringify(quoteReq)
-
-              const response: AxiosResponse<QuoteResponse> = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-              const {
-                data: { quote, quoteDecimals, quoteGasAdjustedDecimals, methodParameters, simulationError },
-                status,
-              } = response
-
-              expect(status).to.equal(200)
-              expect(simulationError).to.equal(false)
-              expect(parseFloat(quoteDecimals)).to.be.greaterThan(90)
-              expect(parseFloat(quoteDecimals)).to.be.lessThan(110)
-
-              if (type == 'exactIn') {
-                expect(parseFloat(quoteGasAdjustedDecimals)).to.be.lessThanOrEqual(parseFloat(quoteDecimals))
-              } else {
-                expect(parseFloat(quoteGasAdjustedDecimals)).to.be.greaterThanOrEqual(parseFloat(quoteDecimals))
-              }
-
-              expect(methodParameters).to.not.be.undefined
-
-              const { tokenInBefore, tokenInAfter, tokenOutBefore, tokenOutAfter } = await executeSwap(
-                methodParameters!,
-                USDC_MAINNET,
-                USDT_MAINNET
-              )
-
-              if (type == 'exactIn') {
-                expect(tokenInBefore.subtract(tokenInAfter).toExact()).to.equal('100')
-                checkQuoteToken(tokenOutBefore, tokenOutAfter, CurrencyAmount.fromRawAmount(USDT_MAINNET, quote))
-              } else {
-                expect(tokenOutAfter.subtract(tokenOutBefore).toExact()).to.equal('100')
-                checkQuoteToken(tokenInBefore, tokenInAfter, CurrencyAmount.fromRawAmount(USDC_MAINNET, quote))
-              }
-            })
-
-            it(`erc20 -> erc20 swaprouter02`, async () => {
-              const quoteReq: QuoteQueryParams = {
-                tokenInAddress: 'USDC',
-                tokenInChainId: 1,
-                tokenOutAddress: 'USDT',
-                tokenOutChainId: 1,
-                amount: await getAmount(1, type, 'USDC', 'USDT', '100'),
-                type,
-                recipient: alice.address,
-                slippageTolerance: SLIPPAGE,
-                deadline: '360',
-                algorithm,
-                simulateFromAddress: '0xf584f8728b874a6a5c7a8d4d387c9aae9172d621',
-              }
-
-              const queryParams = qs.stringify(quoteReq)
-
-              const response: AxiosResponse<QuoteResponse> = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-              const {
-                data: { quote, quoteDecimals, quoteGasAdjustedDecimals, methodParameters, simulationError },
-                status,
-              } = response
-
-              expect(status).to.equal(200)
-              expect(simulationError).to.equal(false)
-              expect(parseFloat(quoteDecimals)).to.be.greaterThan(90)
-              expect(parseFloat(quoteDecimals)).to.be.lessThan(110)
-
-              if (type == 'exactIn') {
-                expect(parseFloat(quoteGasAdjustedDecimals)).to.be.lessThanOrEqual(parseFloat(quoteDecimals))
-              } else {
-                expect(parseFloat(quoteGasAdjustedDecimals)).to.be.greaterThanOrEqual(parseFloat(quoteDecimals))
-              }
-
-              expect(methodParameters).to.not.be.undefined
-              expect(methodParameters!.to).to.equal(SWAP_ROUTER_02_ADDRESSES(ChainId.MAINNET))
-
-              const { tokenInBefore, tokenInAfter, tokenOutBefore, tokenOutAfter } = await executeSwap(
-                methodParameters!,
-                USDC_MAINNET,
-                USDT_MAINNET
-              )
-
-              if (type == 'exactIn') {
-                expect(tokenInBefore.subtract(tokenInAfter).toExact()).to.equal('100')
-                checkQuoteToken(tokenOutBefore, tokenOutAfter, CurrencyAmount.fromRawAmount(USDT_MAINNET, quote))
-              } else {
-                expect(tokenOutAfter.subtract(tokenOutBefore).toExact()).to.equal('100')
-                checkQuoteToken(tokenInBefore, tokenInAfter, CurrencyAmount.fromRawAmount(USDC_MAINNET, quote))
-              }
-            })
-
-            if (isTesterPKEnvironmentSet()) {
-              it(`erc20 -> erc20 with permit with tester pk`, async () => {
-                // This test requires a private key with at least 10 USDC
-                // at FORK_BLOCK time.
-                const amount = await getAmount(1, type, 'USDC', 'USDT', '10')
-
-                const nonce = '0'
-
-                const permit: PermitSingle = {
-                  details: {
-                    token: USDC_MAINNET.address,
-                    amount: amount,
-                    expiration: Math.floor(new Date().getTime() / 1000 + 10000000).toString(),
-                    nonce,
-                  },
-                  spender: UNIVERSAL_ROUTER_ADDRESS,
-                  sigDeadline: Math.floor(new Date().getTime() / 1000 + 10000000).toString(),
-                }
-
-                const wallet = new Wallet(process.env.TESTER_PK!)
-
-                const { domain, types, values } = AllowanceTransfer.getPermitData(permit, PERMIT2_ADDRESS, 1)
-
-                const signature = await wallet._signTypedData(domain, types, values)
-
-                const quoteReq: QuoteQueryParams = {
-                  tokenInAddress: 'USDC',
-                  tokenInChainId: 1,
-                  tokenOutAddress: 'USDT',
-                  tokenOutChainId: 1,
-                  amount,
-                  type,
-                  recipient: wallet.address,
-                  slippageTolerance: SLIPPAGE,
-                  deadline: '360',
-                  algorithm,
-                  simulateFromAddress: wallet.address,
-                  permitSignature: signature,
-                  permitAmount: permit.details.amount.toString(),
-                  permitExpiration: permit.details.expiration.toString(),
-                  permitSigDeadline: permit.sigDeadline.toString(),
-                  permitNonce: permit.details.nonce.toString(),
-                  enableUniversalRouter: true,
-                }
-
-                const queryParams = qs.stringify(quoteReq)
-
-                const response: AxiosResponse<QuoteResponse> = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-                const {
-                  data: { quoteDecimals, quoteGasAdjustedDecimals, methodParameters, simulationError },
-                  status,
-                } = response
-                expect(status).to.equal(200)
-
-                expect(simulationError).to.equal(false)
-
-                expect(parseFloat(quoteDecimals)).to.be.greaterThan(9)
-                expect(parseFloat(quoteDecimals)).to.be.lessThan(11)
-
-                if (type == 'exactIn') {
-                  expect(parseFloat(quoteGasAdjustedDecimals)).to.be.lessThanOrEqual(parseFloat(quoteDecimals))
-                } else {
-                  expect(parseFloat(quoteGasAdjustedDecimals)).to.be.greaterThanOrEqual(parseFloat(quoteDecimals))
-                }
-
-                expect(methodParameters).to.not.be.undefined
-              })
-            }
-
-            it(`erc20 -> eth`, async () => {
-              const quoteReq: QuoteQueryParams = {
-                tokenInAddress: 'USDC',
-                tokenInChainId: 1,
-                tokenOutAddress: 'ETH',
-                tokenOutChainId: 1,
-                amount: await getAmount(1, type, 'USDC', 'ETH', type == 'exactIn' ? '1000000' : '10'),
-                type,
-                recipient: alice.address,
-                slippageTolerance: SLIPPAGE,
-                deadline: '360',
-                algorithm,
-                simulateFromAddress: '0xf584f8728b874a6a5c7a8d4d387c9aae9172d621',
-                enableUniversalRouter: true,
-              }
-
-              const queryParams = qs.stringify(quoteReq)
-
-              const response = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-              const {
-                data: { quote, methodParameters, simulationError },
-                status,
-              } = response
-
-              expect(status).to.equal(200)
-              expect(simulationError).to.equal(false)
-              expect(methodParameters).to.not.be.undefined
-
-              const { tokenInBefore, tokenInAfter, tokenOutBefore, tokenOutAfter } = await executeSwap(
-                methodParameters!,
-                USDC_MAINNET,
-                Ether.onChain(1)
-              )
-
-              if (type == 'exactIn') {
-                expect(tokenInBefore.subtract(tokenInAfter).toExact()).to.equal('1000000')
-                checkQuoteToken(tokenOutBefore, tokenOutAfter, CurrencyAmount.fromRawAmount(Ether.onChain(1), quote))
-              } else {
-                // Hard to test ETH balance due to gas costs for approval and swap. Just check tokenIn changes
-                checkQuoteToken(tokenInBefore, tokenInAfter, CurrencyAmount.fromRawAmount(USDC_MAINNET, quote))
-              }
-            })
-
-            it(`erc20 -> eth large trade`, async () => {
-              // Trade of this size almost always results in splits.
-              const quoteReq: QuoteQueryParams = {
-                tokenInAddress: 'USDC',
-                tokenInChainId: 1,
-                tokenOutAddress: 'ETH',
-                tokenOutChainId: 1,
-                amount:
-                  type == 'exactIn'
-                    ? await getAmount(1, type, 'USDC', 'ETH', '1000000')
-                    : await getAmount(1, type, 'USDC', 'ETH', '100'),
-                type,
-                recipient: alice.address,
-                slippageTolerance: SLIPPAGE,
-                deadline: '360',
-                algorithm,
-                simulateFromAddress: '0xf584f8728b874a6a5c7a8d4d387c9aae9172d621',
-                enableUniversalRouter: true,
-              }
-
-              const queryParams = qs.stringify(quoteReq)
-
-              const response = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-              const { data, status } = response
-
-              expect(status).to.equal(200)
-              expect(data.simulationError).to.equal(false)
-              expect(data.methodParameters).to.not.be.undefined
-
-              expect(data.route).to.not.be.undefined
-
-              const amountInEdgesTotal = _(data.route)
-                .flatMap((route) => route[0]!)
-                .filter((pool) => !!pool.amountIn)
-                .map((pool) => BigNumber.from(pool.amountIn))
-                .reduce((cur, total) => total.add(cur), BigNumber.from(0))
-              const amountIn = BigNumber.from(data.quote)
-              expect(amountIn.eq(amountInEdgesTotal))
-
-              const amountOutEdgesTotal = _(data.route)
-                .flatMap((route) => route[0]!)
-                .filter((pool) => !!pool.amountOut)
-                .map((pool) => BigNumber.from(pool.amountOut))
-                .reduce((cur, total) => total.add(cur), BigNumber.from(0))
-              const amountOut = BigNumber.from(data.quote)
-              expect(amountOut.eq(amountOutEdgesTotal))
-
-              const { tokenInBefore, tokenInAfter, tokenOutBefore, tokenOutAfter } = await executeSwap(
-                data.methodParameters!,
-                USDC_MAINNET,
-                Ether.onChain(1)
-              )
-
-              if (type == 'exactIn') {
-                expect(tokenInBefore.subtract(tokenInAfter).toExact()).to.equal('1000000')
-                checkQuoteToken(
-                  tokenOutBefore,
-                  tokenOutAfter,
-                  CurrencyAmount.fromRawAmount(Ether.onChain(1), data.quote)
-                )
-              } else {
-                // Hard to test ETH balance due to gas costs for approval and swap. Just check tokenIn changes
-                checkQuoteToken(tokenInBefore, tokenInAfter, CurrencyAmount.fromRawAmount(USDC_MAINNET, data.quote))
-              }
-            })
-
-            it(`eth -> erc20`, async () => {
-              const quoteReq: QuoteQueryParams = {
-                tokenInAddress: 'ETH',
-                tokenInChainId: 1,
-                tokenOutAddress: 'UNI',
-                tokenOutChainId: 1,
-                amount:
-                  type == 'exactIn'
-                    ? await getAmount(1, type, 'ETH', 'UNI', '10')
-                    : await getAmount(1, type, 'ETH', 'UNI', '10000'),
-                type,
-                recipient: alice.address,
-                slippageTolerance: type == 'exactOut' ? LARGE_SLIPPAGE : SLIPPAGE, // for exact out somehow the liquidation wasn't sufficient, hence higher slippage
-                deadline: '360',
-                algorithm,
-                simulateFromAddress: '0x0716a17FBAeE714f1E6aB0f9d59edbC5f09815C0',
-                enableUniversalRouter: true,
-              }
-
-              const queryParams = qs.stringify(quoteReq)
-
-              const response = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-              const { data, status } = response
-              expect(status).to.equal(200)
-              expect(data.simulationError).to.equal(false)
-              expect(data.methodParameters).to.not.be.undefined
-
-              const { tokenInBefore, tokenInAfter, tokenOutBefore, tokenOutAfter } = await executeSwap(
-                data.methodParameters!,
-                Ether.onChain(1),
-                UNI_MAINNET
-              )
-
-              if (type == 'exactIn') {
-                // We've swapped 10 ETH + gas costs
-                expect(tokenInBefore.subtract(tokenInAfter).greaterThan(parseAmount('10', Ether.onChain(1)))).to.be.true
-                checkQuoteToken(tokenOutBefore, tokenOutAfter, CurrencyAmount.fromRawAmount(UNI_MAINNET, data.quote))
-              } else {
-                expect(tokenOutAfter.subtract(tokenOutBefore).toExact()).to.equal('10000')
-                // Can't easily check slippage for ETH due to gas costs effecting ETH balance.
-              }
-            })
-
-            it(`eth -> erc20 swaprouter02`, async () => {
-              const quoteReq: QuoteQueryParams = {
-                tokenInAddress: 'ETH',
-                tokenInChainId: 1,
-                tokenOutAddress: 'UNI',
-                tokenOutChainId: 1,
-                amount:
-                  type == 'exactIn'
-                    ? await getAmount(1, type, 'ETH', 'UNI', '10')
-                    : await getAmount(1, type, 'ETH', 'UNI', '10000'),
-                type,
-                recipient: alice.address,
-                slippageTolerance: type == 'exactOut' ? LARGE_SLIPPAGE : SLIPPAGE, // for exact out somehow the liquidation wasn't sufficient, hence higher slippage,
-                deadline: '360',
-                algorithm,
-                simulateFromAddress: '0x0716a17FBAeE714f1E6aB0f9d59edbC5f09815C0',
-                enableUniversalRouter: false,
-              }
-
-              const queryParams = qs.stringify(quoteReq)
-
-              const response = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-              const { data, status } = response
-              expect(status).to.equal(200)
-              expect(data.simulationError).to.equal(false)
-              expect(data.methodParameters).to.not.be.undefined
-
-              const { tokenInBefore, tokenInAfter, tokenOutBefore, tokenOutAfter } = await executeSwap(
-                data.methodParameters!,
-                Ether.onChain(1),
-                UNI_MAINNET
-              )
-
-              if (type == 'exactIn') {
-                // We've swapped 10 ETH + gas costs
-                expect(tokenInBefore.subtract(tokenInAfter).greaterThan(parseAmount('10', Ether.onChain(1)))).to.be.true
-                checkQuoteToken(tokenOutBefore, tokenOutAfter, CurrencyAmount.fromRawAmount(UNI_MAINNET, data.quote))
-              } else {
-                expect(tokenOutAfter.subtract(tokenOutBefore).toExact()).to.equal('10000')
-                // Can't easily check slippage for ETH due to gas costs effecting ETH balance.
-              }
-            })
-
-            it(`weth -> erc20`, async () => {
-              const quoteReq: QuoteQueryParams = {
-                tokenInAddress: 'WETH',
-                tokenInChainId: 1,
-                tokenOutAddress: 'DAI',
-                tokenOutChainId: 1,
-                amount: await getAmount(1, type, 'WETH', 'DAI', '100'),
-                type,
-                recipient: alice.address,
-                slippageTolerance: SLIPPAGE,
-                deadline: '360',
-                algorithm,
-                simulateFromAddress: '0xf04a5cc80b1e94c69b48f5ee68a08cd2f09a7c3e',
-                enableUniversalRouter: true,
-              }
-
-              const queryParams = qs.stringify(quoteReq)
-
-              const response = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-              const { data, status } = response
-              expect(status).to.equal(200)
-              expect(data.simulationError).to.equal(false)
-              expect(data.methodParameters).to.not.be.undefined
-
-              const { tokenInBefore, tokenInAfter, tokenOutBefore, tokenOutAfter } = await executeSwap(
-                data.methodParameters!,
-                WETH9[1]!,
-                DAI_MAINNET
-              )
-
-              if (type == 'exactIn') {
-                expect(tokenInBefore.subtract(tokenInAfter).toExact()).to.equal('100')
-                checkQuoteToken(tokenOutBefore, tokenOutAfter, CurrencyAmount.fromRawAmount(DAI_MAINNET, data.quote))
-              } else {
-                expect(tokenOutAfter.subtract(tokenOutBefore).toExact()).to.equal('100')
-                checkQuoteToken(tokenInBefore, tokenInAfter, CurrencyAmount.fromRawAmount(WETH9[1]!, data.quote))
-              }
-            })
-
-            it(`erc20 -> weth`, async () => {
-              const quoteReq: QuoteQueryParams = {
-                tokenInAddress: 'USDC',
-                tokenInChainId: 1,
-                tokenOutAddress: 'WETH',
-                tokenOutChainId: 1,
-                amount: await getAmount(1, type, 'USDC', 'WETH', '100'),
-                type,
-                recipient: alice.address,
-                slippageTolerance: SLIPPAGE,
-                deadline: '360',
-                algorithm,
-                simulateFromAddress: '0xf584f8728b874a6a5c7a8d4d387c9aae9172d621',
-                enableUniversalRouter: true,
-              }
-
-              const queryParams = qs.stringify(quoteReq)
-
-              const response = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-              const { data, status } = response
-              expect(status).to.equal(200)
-              expect(data.simulationError).to.equal(false)
-              expect(data.methodParameters).to.not.be.undefined
-
-              const { tokenInBefore, tokenInAfter, tokenOutBefore, tokenOutAfter } = await executeSwap(
-                data.methodParameters!,
-                USDC_MAINNET,
-                WETH9[1]!
-              )
-
-              if (type == 'exactIn') {
-                expect(tokenInBefore.subtract(tokenInAfter).toExact()).to.equal('100')
-                checkQuoteToken(tokenOutBefore, tokenOutAfter, CurrencyAmount.fromRawAmount(WETH9[1], data.quote))
-              } else {
-                expect(tokenOutAfter.subtract(tokenOutBefore).toExact()).to.equal('100')
-                checkQuoteToken(tokenInBefore, tokenInAfter, CurrencyAmount.fromRawAmount(USDC_MAINNET, data.quote))
-              }
-            })
-          })
-        }
-        it(`erc20 -> erc20 no recipient/deadline/slippage`, async () => {
-          const quoteReq: QuoteQueryParams = {
-            tokenInAddress: 'USDC',
-            tokenInChainId: 1,
-            tokenOutAddress: 'USDT',
-            tokenOutChainId: 1,
-            amount: await getAmount(1, type, 'USDC', 'USDT', '100'),
-            type,
-            algorithm,
-            enableUniversalRouter: true,
-          }
-
-          const queryParams = qs.stringify(quoteReq)
-
-          const response: AxiosResponse<QuoteResponse> = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-          const {
-            data: { quoteDecimals, quoteGasAdjustedDecimals, methodParameters },
-            status,
-          } = response
-
-          expect(status).to.equal(200)
-          expect(parseFloat(quoteDecimals)).to.be.greaterThan(90)
-          expect(parseFloat(quoteDecimals)).to.be.lessThan(110)
-
-          if (type == 'exactIn') {
-            expect(parseFloat(quoteGasAdjustedDecimals)).to.be.lessThanOrEqual(parseFloat(quoteDecimals))
-          } else {
-            expect(parseFloat(quoteGasAdjustedDecimals)).to.be.greaterThanOrEqual(parseFloat(quoteDecimals))
-          }
-
-          expect(methodParameters).to.be.undefined
-        })
-
-        it(`erc20 -> erc20 gas price specified`, async () => {
-          const quoteReq: QuoteQueryParams = {
-            tokenInAddress: 'USDC',
-            tokenInChainId: 1,
-            tokenOutAddress: 'USDT',
-            tokenOutChainId: 1,
-            amount: await getAmount(1, type, 'USDC', 'USDT', '100'),
-            type,
-            algorithm,
-            gasPriceWei: '60000000000',
-            enableUniversalRouter: true,
-          }
-
-          const queryParams = qs.stringify(quoteReq)
-
-          const response: AxiosResponse<QuoteResponse> = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-          const {
-            data: { quoteDecimals, quoteGasAdjustedDecimals, methodParameters, gasPriceWei },
-            status,
-          } = response
-
-          expect(status).to.equal(200)
-
-          if (algorithm == 'alpha') {
-            expect(gasPriceWei).to.equal('60000000000')
-          }
-
-          expect(parseFloat(quoteDecimals)).to.be.greaterThan(90)
-          expect(parseFloat(quoteDecimals)).to.be.lessThan(110)
-
-          if (type == 'exactIn') {
-            expect(parseFloat(quoteGasAdjustedDecimals)).to.be.lessThanOrEqual(parseFloat(quoteDecimals))
-          } else {
-            expect(parseFloat(quoteGasAdjustedDecimals)).to.be.greaterThanOrEqual(parseFloat(quoteDecimals))
-          }
-
-          expect(methodParameters).to.be.undefined
-        })
-
-        it(`erc20 -> erc20 by address`, async () => {
-          const quoteReq: QuoteQueryParams = {
-            tokenInAddress: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
-            tokenInChainId: 1, // DAI
-            tokenOutAddress: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',
-            tokenOutChainId: 1, // USDC
-            amount: await getAmount(1, type, 'DAI', 'USDC', '100'),
-            type,
-            recipient: alice.address,
-            slippageTolerance: SLIPPAGE,
-            deadline: '360',
-            algorithm,
-            enableUniversalRouter: true,
-          }
-
-          const queryParams = qs.stringify(quoteReq)
-
-          const response: AxiosResponse<QuoteResponse> = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-
-          const {
-            data: { quoteDecimals, quoteGasAdjustedDecimals },
-            status,
-          } = response
-
-          expect(status).to.equal(200)
-          expect(parseFloat(quoteDecimals)).to.be.greaterThan(90)
-
-          if (type == 'exactIn') {
-            expect(parseFloat(quoteGasAdjustedDecimals)).to.be.lessThanOrEqual(parseFloat(quoteDecimals))
-          } else {
-            expect(parseFloat(quoteGasAdjustedDecimals)).to.be.greaterThanOrEqual(parseFloat(quoteDecimals))
-          }
-
-          expect(parseFloat(quoteDecimals)).to.be.lessThan(110)
-        })
-
-        it(`erc20 -> erc20 one by address one by symbol`, async () => {
-          const quoteReq: QuoteQueryParams = {
-            tokenInAddress: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
-            tokenInChainId: 1,
-            tokenOutAddress: 'USDC',
-            tokenOutChainId: 1,
-            amount: await getAmount(1, type, 'DAI', 'USDC', '100'),
-            type,
-            recipient: alice.address,
-            slippageTolerance: SLIPPAGE,
-            deadline: '360',
-            algorithm,
-            enableUniversalRouter: true,
-          }
-
-          const queryParams = qs.stringify(quoteReq)
-
-          const response: AxiosResponse<QuoteResponse> = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-          const {
-            data: { quoteDecimals, quoteGasAdjustedDecimals },
-            status,
-          } = response
-
-          expect(status).to.equal(200)
-          expect(parseFloat(quoteDecimals)).to.be.greaterThan(90)
-
-          if (type == 'exactIn') {
-            expect(parseFloat(quoteGasAdjustedDecimals)).to.be.lessThanOrEqual(parseFloat(quoteDecimals))
-          } else {
-            expect(parseFloat(quoteGasAdjustedDecimals)).to.be.greaterThanOrEqual(parseFloat(quoteDecimals))
-          }
-
-          expect(parseFloat(quoteDecimals)).to.be.lessThan(110)
-        })
-      })
-
-      describe(`${ID_TO_NETWORK_NAME(1)} ${algorithm} ${type} 4xx`, () => {
-        it(`field is missing in body`, async () => {
-          const quoteReq: Partial<QuoteQueryParams> = {
-            tokenOutAddress: 'USDT',
-            tokenInChainId: 1,
-            tokenOutChainId: 1,
-            amount: await getAmount(1, type, 'USDC', 'USDT', '100'),
-            type,
-            recipient: alice.address,
-            slippageTolerance: SLIPPAGE,
-            deadline: '360',
-            algorithm,
-            enableUniversalRouter: true,
-          }
-
-          await callAndExpectFail(quoteReq, {
-            status: 400,
-            data: {
-              detail: '"tokenInAddress" is required',
-              errorCode: 'VALIDATION_ERROR',
-            },
-          })
-        })
-
-        it.skip(`amount is too big to find route`, async () => {
-          const quoteReq: QuoteQueryParams = {
-            tokenInAddress: 'UNI',
-            tokenInChainId: 1,
-            tokenOutAddress: 'KNC',
-            tokenOutChainId: 1,
-            amount: await getAmount(1, type, 'UNI', 'KNC', '9999999999999999999999999999999999999999999999999'),
-            type,
-            recipient: '0x88fc765949a27405480F374Aa49E20dcCD3fCfb8',
-            slippageTolerance: SLIPPAGE,
-            deadline: '360',
-            algorithm,
-            enableUniversalRouter: true,
-          }
-
-          await callAndExpectFail(quoteReq, {
-            status: 400,
-            data: {
-              detail: 'No route found',
-              errorCode: 'NO_ROUTE',
-            },
-          })
-        })
-
-        it(`amount is too big for uint256`, async () => {
-          const quoteReq: QuoteQueryParams = {
-            tokenInAddress: 'USDC',
-            tokenInChainId: 1,
-            tokenOutAddress: 'USDT',
-            tokenOutChainId: 1,
-            amount: await getAmount(
-              1,
-              type,
-              'USDC',
-              'USDT',
-              '100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
-            ),
-            type,
-            recipient: alice.address,
-            slippageTolerance: SLIPPAGE,
-            deadline: '360',
-            algorithm,
-          }
-
-          await callAndExpectFail(quoteReq, {
-            status: 400,
-            data: {
-              detail: '"amount" length must be less than or equal to 77 characters long',
-              errorCode: 'VALIDATION_ERROR',
-            },
-          })
-        })
-
-        it(`amount is negative`, async () => {
-          const quoteReq: QuoteQueryParams = {
-            tokenInAddress: 'USDC',
-            tokenInChainId: 1,
-            tokenOutAddress: 'USDT',
-            tokenOutChainId: 1,
-            amount: '-10000000000',
-            type,
-            recipient: alice.address,
-            slippageTolerance: SLIPPAGE,
-            deadline: '360',
-            algorithm,
-            enableUniversalRouter: true,
-          }
-
-          await callAndExpectFail(quoteReq, {
-            status: 400,
-            data: {
-              detail: '"amount" with value "-10000000000" fails to match the required pattern: /^[0-9]+$/',
-              errorCode: 'VALIDATION_ERROR',
-            },
-          })
-        })
-
-        it(`amount is decimal`, async () => {
-          const quoteReq: QuoteQueryParams = {
-            tokenInAddress: 'USDC',
-            tokenInChainId: 1,
-            tokenOutAddress: 'USDT',
-            tokenOutChainId: 1,
-            amount: '1000000000.25',
-            type,
-            recipient: alice.address,
-            slippageTolerance: SLIPPAGE,
-            deadline: '360',
-            algorithm,
-            enableUniversalRouter: true,
-          }
-
-          await callAndExpectFail(quoteReq, {
-            status: 400,
-            data: {
-              detail: '"amount" with value "1000000000.25" fails to match the required pattern: /^[0-9]+$/',
-              errorCode: 'VALIDATION_ERROR',
-            },
-          })
-        })
-
-        it(`symbol doesnt exist`, async () => {
-          const quoteReq: QuoteQueryParams = {
-            tokenInAddress: 'USDC',
-            tokenInChainId: 1,
-            tokenOutAddress: 'NONEXISTANTTOKEN',
-            tokenOutChainId: 1,
-            amount: await getAmount(1, type, 'USDC', 'USDT', '100'),
-            type,
-            recipient: alice.address,
-            slippageTolerance: SLIPPAGE,
-            deadline: '360',
-            algorithm,
-          }
-
-          await callAndExpectFail(quoteReq, {
-            status: 400,
-            data: {
-              detail: 'Could not find token with address "NONEXISTANTTOKEN"',
-              errorCode: 'TOKEN_OUT_INVALID',
-            },
-          })
-        })
-
-        it(`tokens are the same symbol`, async () => {
-          const quoteReq: QuoteQueryParams = {
-            tokenInAddress: 'USDT',
-            tokenInChainId: 1,
-            tokenOutAddress: 'USDT',
-            tokenOutChainId: 1,
-            amount: await getAmount(1, type, 'USDC', 'USDT', '100'),
-            type,
-            recipient: alice.address,
-            slippageTolerance: SLIPPAGE,
-            deadline: '360',
-            algorithm,
-            enableUniversalRouter: true,
-          }
-
-          await callAndExpectFail(quoteReq, {
-            status: 400,
-            data: {
-              detail: 'tokenIn and tokenOut must be different',
-              errorCode: 'TOKEN_IN_OUT_SAME',
-            },
-          })
-        })
-
-        it(`tokens are the same symbol and address`, async () => {
-          const quoteReq: QuoteQueryParams = {
-            tokenInAddress: 'USDT',
-            tokenInChainId: 1,
-            tokenOutAddress: '0xdAC17F958D2ee523a2206206994597C13D831ec7',
-            tokenOutChainId: 1,
-            amount: await getAmount(1, type, 'USDT', 'USDT', '100'),
-            type,
-            recipient: alice.address,
-            slippageTolerance: SLIPPAGE,
-            deadline: '360',
-            algorithm,
-            enableUniversalRouter: true,
-          }
-
-          await callAndExpectFail(quoteReq, {
-            status: 400,
-            data: {
-              detail: 'tokenIn and tokenOut must be different',
-              errorCode: 'TOKEN_IN_OUT_SAME',
-            },
-          })
-        })
-
-        it(`tokens are the same address`, async () => {
-          const quoteReq: QuoteQueryParams = {
-            tokenInAddress: '0xdAC17F958D2ee523a2206206994597C13D831ec7',
-            tokenInChainId: 1,
-            tokenOutAddress: '0xdAC17F958D2ee523a2206206994597C13D831ec7',
-            tokenOutChainId: 1,
-            amount: await getAmount(1, type, 'USDT', 'USDT', '100'),
-            type,
-            recipient: alice.address,
-            slippageTolerance: SLIPPAGE,
-            deadline: '360',
-            algorithm,
-            enableUniversalRouter: true,
-          }
-          await callAndExpectFail(quoteReq, {
-            status: 400,
-            data: {
-              detail: 'tokenIn and tokenOut must be different',
-              errorCode: 'TOKEN_IN_OUT_SAME',
-            },
-          })
-        })
-
-        it(`one of recipient/deadline/slippage is missing`, async () => {
-          const quoteReq: QuoteQueryParams = {
-            tokenInAddress: 'USDC',
-            tokenInChainId: 1,
-            tokenOutAddress: 'USDT',
-            tokenOutChainId: 1,
-            amount: await getAmount(1, type, 'USDC', 'USDT', '100'),
-            type,
-            slippageTolerance: SLIPPAGE,
-            deadline: '360',
-            algorithm,
-            enableUniversalRouter: true,
-          }
-          await callAndExpectFail(quoteReq, {
-            status: 400,
-            data: {
-              detail: '"value" contains [slippageTolerance, deadline] without its required peers [recipient]',
-              errorCode: 'VALIDATION_ERROR',
-            },
-          })
-        })
-
-        it(`recipient is an invalid address`, async () => {
-          const quoteReq: QuoteQueryParams = {
-            tokenInAddress: 'USDT',
-            tokenInChainId: 1,
-            tokenOutAddress: 'USDC',
-            tokenOutChainId: 1,
-            amount: await getAmount(1, type, 'USDT', 'USDC', '100'),
-            type,
-            recipient: '0xAb5801a7D398351b8bE11C439e05C5B3259aZZZZZZZ',
-            slippageTolerance: SLIPPAGE,
-            deadline: '360',
-            algorithm,
-            enableUniversalRouter: true,
-          }
-
-          await callAndExpectFail(quoteReq, {
-            status: 400,
-            data: {
-              detail:
-                '"recipient" with value "0xAb5801a7D398351b8bE11C439e05C5B3259aZZZZZZZ" fails to match the required pattern: /^0x[a-fA-F0-9]{40}$/',
-              errorCode: 'VALIDATION_ERROR',
-            },
-          })
-        })
-
-        it(`unsupported chain`, async () => {
-          const quoteReq: QuoteQueryParams = {
-            tokenInAddress: 'USDC',
-            tokenInChainId: 70,
-            tokenOutAddress: 'USDT',
-            tokenOutChainId: 70,
-            amount: '10000000000',
-            type,
-            recipient: alice.address,
-            slippageTolerance: SLIPPAGE,
-            deadline: '360',
-            algorithm,
-            enableUniversalRouter: true,
-          }
-
-          const chains = SUPPORTED_CHAINS.values()
-          const chainStr = [...chains].toString().split(',').join(', ')
-
-          await callAndExpectFail(quoteReq, {
-            status: 400,
-            data: {
-              detail: `"tokenInChainId" must be one of [${chainStr}]`,
-              errorCode: 'VALIDATION_ERROR',
-            },
-          })
-        })
-      })
-    }
-  }
-
-  const TEST_ERC20_1: { [chainId in ChainId]: () => null | Token } = {
-    [ChainId.MAINNET]: () => USDC_ON(1),
-    [ChainId.GOERLI]: () => USDC_ON(ChainId.GOERLI),
-    [ChainId.SEPOLIA]: () => USDC_ON(ChainId.SEPOLIA),
-    [ChainId.OPTIMISM]: () => USDC_ON(ChainId.OPTIMISM),
-    [ChainId.OPTIMISM_GOERLI]: () => USDC_ON(ChainId.OPTIMISM_GOERLI),
-    [ChainId.ARBITRUM_ONE]: () => USDC_ON(ChainId.ARBITRUM_ONE),
-    [ChainId.POLYGON]: () => USDC_ON(ChainId.POLYGON),
-    [ChainId.POLYGON_MUMBAI]: () => USDC_ON(ChainId.POLYGON_MUMBAI),
-    [ChainId.CELO]: () => CUSD_CELO,
-    [ChainId.CELO_ALFAJORES]: () => CUSD_CELO_ALFAJORES,
-    [ChainId.MOONBEAM]: () => null,
-    [ChainId.GNOSIS]: () => null,
-    [ChainId.ARBITRUM_GOERLI]: () => null,
-    [ChainId.BNB]: () => USDC_ON(ChainId.BNB),
-    [ChainId.AVALANCHE]: () => USDC_ON(ChainId.AVALANCHE),
-    [ChainId.BASE_GOERLI]: () => USDC_ON(ChainId.BASE_GOERLI),
-    [ChainId.BASE]: () => USDC_ON(ChainId.BASE),
-  }
-
-  const TEST_ERC20_2: { [chainId in ChainId]: () => Token | null } = {
-    [ChainId.MAINNET]: () => DAI_ON(1),
-    [ChainId.GOERLI]: () => DAI_ON(ChainId.GOERLI),
-    [ChainId.SEPOLIA]: () => DAI_ON(ChainId.SEPOLIA),
-    [ChainId.OPTIMISM]: () => DAI_ON(ChainId.OPTIMISM),
-    [ChainId.OPTIMISM_GOERLI]: () => DAI_ON(ChainId.OPTIMISM_GOERLI),
-    [ChainId.ARBITRUM_ONE]: () => DAI_ON(ChainId.ARBITRUM_ONE),
-    [ChainId.POLYGON]: () => DAI_ON(ChainId.POLYGON),
-    [ChainId.POLYGON_MUMBAI]: () => DAI_ON(ChainId.POLYGON_MUMBAI),
-    [ChainId.CELO]: () => CEUR_CELO,
-    [ChainId.CELO_ALFAJORES]: () => CEUR_CELO_ALFAJORES,
-    [ChainId.MOONBEAM]: () => null,
-    [ChainId.GNOSIS]: () => null,
-    [ChainId.ARBITRUM_GOERLI]: () => null,
-    [ChainId.BNB]: () => USDT_ON(ChainId.BNB),
-    [ChainId.AVALANCHE]: () => DAI_ON(ChainId.AVALANCHE),
-    [ChainId.BASE_GOERLI]: () => WNATIVE_ON(ChainId.BASE_GOERLI),
-    [ChainId.BASE]: () => WNATIVE_ON(ChainId.BASE),
-  }
-
-  // TODO: Find valid pools/tokens on optimistic kovan and polygon mumbai. We skip those tests for now.
-  for (const chain of _.filter(
-    SUPPORTED_CHAINS,
-    (c) =>
-      c != ChainId.POLYGON_MUMBAI &&
-      c != ChainId.ARBITRUM_GOERLI &&
-      c != ChainId.CELO_ALFAJORES &&
-      c != ChainId.GOERLI &&
-      c != ChainId.SEPOLIA
-  )) {
-    for (const type of ['exactIn', 'exactOut']) {
-      const erc1 = TEST_ERC20_1[chain]()
-      const erc2 = TEST_ERC20_2[chain]()
-
-      // This is for Gnosis and Moonbeam which we don't have RPC Providers yet
-      if (erc1 == null || erc2 == null) continue
-
-      describe(`${ID_TO_NETWORK_NAME(chain)} ${type} 2xx`, function () {
-        // Help with test flakiness by retrying.
-        this.retries(0)
-        const wrappedNative = WNATIVE_ON(chain)
-
-        it(`${wrappedNative.symbol} -> erc20`, async () => {
-          const quoteReq: QuoteQueryParams = {
-            tokenInAddress: wrappedNative.address,
-            tokenInChainId: chain,
-            tokenOutAddress: erc1.address,
-            tokenOutChainId: chain,
-            amount: await getAmountFromToken(type, wrappedNative, erc1, '1'),
-            type,
-            enableUniversalRouter: true,
-          }
-
-          const queryParams = qs.stringify(quoteReq)
-
-          try {
-            const response: AxiosResponse<QuoteResponse> = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-            const { status } = response
-
-            expect(status).to.equal(200)
-          } catch (err: any) {
-            fail(JSON.stringify(err.response.data))
-          }
-        })
-
-        it(`erc20 -> erc20`, async () => {
-          const quoteReq: QuoteQueryParams = {
-            tokenInAddress: erc1.address,
-            tokenInChainId: chain,
-            tokenOutAddress: erc2.address,
-            tokenOutChainId: chain,
-            amount: await getAmountFromToken(type, erc1, erc2, '1'),
-            type,
-          }
-
-          const queryParams = qs.stringify(quoteReq)
-
-          try {
-            const response: AxiosResponse<QuoteResponse> = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-            const { status } = response
-
-            expect(status).to.equal(200)
-          } catch (err: any) {
-            fail(JSON.stringify(err.response.data))
-          }
-        })
-        const native = NATIVE_CURRENCY[chain]
-        it(`${native} -> erc20`, async () => {
-          // TODO ROUTE-64: Remove this once smart-order-router supports ETH native currency on BASE
-          // see https://uniswapteam.slack.com/archives/C021SU4PMR7/p1691593679108459?thread_ts=1691532336.742419&cid=C021SU4PMR7
-          const baseErc20 = chain == ChainId.BASE ? USDC_ON(ChainId.BASE) : erc2
-
-          const quoteReq: QuoteQueryParams = {
-            tokenInAddress: native,
-            tokenInChainId: chain,
-            tokenOutAddress: baseErc20.address,
-            tokenOutChainId: chain,
-            amount: await getAmountFromToken(type, WNATIVE_ON(chain), baseErc20, '1'),
-            type,
-            enableUniversalRouter: true,
-          }
-
-          const queryParams = qs.stringify(quoteReq)
-          try {
-            const response: AxiosResponse<QuoteResponse> = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-            const { status } = response
-
-            expect(status).to.equal(200, JSON.stringify(response.data))
-          } catch (err: any) {
-            fail(JSON.stringify(err.response.data))
-          }
-        })
-        it(`has quoteGasAdjusted values`, async () => {
-          const quoteReq: QuoteQueryParams = {
-            tokenInAddress: erc1.address,
-            tokenInChainId: chain,
-            tokenOutAddress: erc2.address,
-            tokenOutChainId: chain,
-            amount: await getAmountFromToken(type, erc1, erc2, '1'),
-            type,
-          }
-
-          const queryParams = qs.stringify(quoteReq)
-
-          try {
-            const response: AxiosResponse<QuoteResponse> = await axios.get<QuoteResponse>(`${API}?${queryParams}`)
-            const {
-              data: { quoteDecimals, quoteGasAdjustedDecimals },
-              status,
-            } = response
-
-            expect(status).to.equal(200)
-
-            // check for quotes to be gas adjusted
-            if (type == 'exactIn') {
-              expect(parseFloat(quoteGasAdjustedDecimals)).to.be.lessThanOrEqual(parseFloat(quoteDecimals))
-            } else {
-              expect(parseFloat(quoteGasAdjustedDecimals)).to.be.greaterThanOrEqual(parseFloat(quoteDecimals))
-            }
-          } catch (err: any) {
-            fail(JSON.stringify(err.response.data))
-          }
-        })
-      })
-    }
-  }
-})
-
-describe('alpha only quote', function () {
-  this.timeout(5000)
-
-  for (const type of ['exactIn', 'exactOut']) {
-    describe(`${type} 2xx`, () => {})
-  }
-})
diff --git a/test/mocha/unit/handlers/pools/pool-caching/v3/dynamo-caching-pool-provider.test.ts b/test/mocha/unit/handlers/pools/pool-caching/v3/dynamo-caching-pool-provider.test.ts
deleted file mode 100644
index 9cc7e27..0000000
--- a/test/mocha/unit/handlers/pools/pool-caching/v3/dynamo-caching-pool-provider.test.ts
+++ /dev/null
@@ -1,94 +0,0 @@
-import { setupTables } from '../../../../../dbSetup'
-import { DynamoDBCachingV3PoolProvider } from '../../../../../../../lib/handlers/pools/pool-caching/v3/dynamo-caching-pool-provider'
-import { getMockedV3PoolProvider, TEST_ROUTE_TABLE } from '../../../../../../test-utils/mocked-dependencies'
-import { SUPPORTED_POOLS } from '../../../../../../test-utils/mocked-data'
-import { ChainId, Token } from '@uniswap/sdk-core'
-import { FeeAmount, Pool } from '@uniswap/v3-sdk'
-import { ProviderConfig } from '@uniswap/smart-order-router/build/main/providers/provider'
-import { expect } from 'chai'
-import { DynamoCachingV3Pool } from '../../../../../../../lib/handlers/pools/pool-caching/v3/cache-dynamo-pool'
-import { log } from '@uniswap/smart-order-router'
-
-describe('DynamoDBCachingV3PoolProvider', async () => {
-  setupTables(TEST_ROUTE_TABLE)
-
-  it('caches pools properly with a given block number', async () => {
-    const dynamoPoolCache = new DynamoDBCachingV3PoolProvider(
-      ChainId.GOERLI,
-      getMockedV3PoolProvider(),
-      TEST_ROUTE_TABLE.TableName
-    )
-    const dynamoCache = new DynamoCachingV3Pool({ tableName: TEST_ROUTE_TABLE.TableName })
-
-    const providerConfig: ProviderConfig = { blockNumber: 111 }
-    const blockNumber = await providerConfig.blockNumber
-
-    // First ensure the dynamo cache doesn't have the pools yet
-    for (const pool of SUPPORTED_POOLS) {
-      const poolAddress = getMockedV3PoolProvider().getPoolAddress(pool.token0, pool.token1, pool.fee).poolAddress
-      const hasCachedPool = await dynamoCache.get(`pool-${ChainId.GOERLI}-${poolAddress}`, blockNumber)
-      expect(hasCachedPool).to.not.exist
-    }
-
-    const tokenPairs: [Token, Token, FeeAmount][] = SUPPORTED_POOLS.map((pool: Pool) => {
-      return [pool.token0, pool.token1, pool.fee]
-    })
-    await dynamoPoolCache.getPools(tokenPairs, providerConfig)
-
-    // Then ensure the dynamo cache has the pools yet
-    for (const pool of SUPPORTED_POOLS) {
-      const poolAddress = getMockedV3PoolProvider().getPoolAddress(pool.token0, pool.token1, pool.fee).poolAddress
-      const hasCachedPool = await dynamoCache.get(`pool-${ChainId.GOERLI}-${poolAddress}`, blockNumber)
-      expect(hasCachedPool).to.exist
-
-      expect(hasCachedPool?.token0.chainId).equals(pool.token0.chainId)
-      expect(hasCachedPool?.token0.decimals).equals(pool.token0.decimals)
-      expect(hasCachedPool?.token0.address).equals(pool.token0.address)
-
-      expect(hasCachedPool?.token1.chainId).equals(pool.token1.chainId)
-      expect(hasCachedPool?.token1.decimals).equals(pool.token1.decimals)
-      expect(hasCachedPool?.token1.address).equals(pool.token1.address)
-
-      expect(hasCachedPool?.fee).equals(pool.fee)
-
-      expect(hasCachedPool?.sqrtRatioX96.toString()).equals(pool.sqrtRatioX96.toString())
-
-      expect(hasCachedPool?.liquidity.toString()).equals(pool.liquidity.toString())
-
-      expect(hasCachedPool?.tickCurrent).equals(pool.tickCurrent)
-    }
-  })
-
-  it('caches do not cache when no block number', async () => {
-    const dynamoPoolCache = new DynamoDBCachingV3PoolProvider(
-      ChainId.GOERLI,
-      getMockedV3PoolProvider(),
-      TEST_ROUTE_TABLE.TableName
-    )
-    const dynamoCache = new DynamoCachingV3Pool({ tableName: TEST_ROUTE_TABLE.TableName })
-
-    const providerConfig: ProviderConfig = { blockNumber: undefined }
-    const blockNumber = await providerConfig.blockNumber
-
-    // First ensure the dynamo cache doesn't have the pools yet
-    for (const pool of SUPPORTED_POOLS) {
-      const poolAddress = getMockedV3PoolProvider().getPoolAddress(pool.token0, pool.token1, pool.fee).poolAddress
-      log.info(`check if pool pool-${ChainId.GOERLI}-${poolAddress} block ${blockNumber} contains the cache`)
-      const hasCachedPool = await dynamoCache.get(`pool-${ChainId.GOERLI}-${poolAddress}`, blockNumber)
-      expect(hasCachedPool).to.not.exist
-    }
-
-    const tokenPairs: [Token, Token, FeeAmount][] = SUPPORTED_POOLS.map((pool: Pool) => {
-      return [pool.token0, pool.token1, pool.fee]
-    })
-    await dynamoPoolCache.getPools(tokenPairs, providerConfig)
-
-    // Then ensure the dynamo cache won't have the pools
-    for (const pool of SUPPORTED_POOLS) {
-      const poolAddress = getMockedV3PoolProvider().getPoolAddress(pool.token0, pool.token1, pool.fee).poolAddress
-      log.info(`check if pool pool-${ChainId.GOERLI}-${poolAddress} block ${blockNumber} contains the cache`)
-      const hasCachedPool = await dynamoCache.get(`pool-${ChainId.GOERLI}-${poolAddress}`, blockNumber)
-      expect(hasCachedPool).to.not.equals
-    }
-  })
-})
diff --git a/test/mocha/unit/handlers/pools/provider-migration/traffic-switch-pool-provider.test.ts b/test/mocha/unit/handlers/pools/provider-migration/traffic-switch-pool-provider.test.ts
deleted file mode 100644
index 3960efb..0000000
--- a/test/mocha/unit/handlers/pools/provider-migration/traffic-switch-pool-provider.test.ts
+++ /dev/null
@@ -1,158 +0,0 @@
-import { TrafficSwitchV3PoolProvider } from '../../../../../../lib/handlers/pools/provider-migration/v3/traffic-switch-v3-pool-provider'
-import { DynamoDBCachingV3PoolProvider } from '../../../../../../lib/handlers/pools/pool-caching/v3/dynamo-caching-pool-provider'
-import { getMockedV3PoolProvider, TEST_ROUTE_TABLE } from '../../../../../test-utils/mocked-dependencies'
-import { CachingV3PoolProvider, MetricLoggerUnit, NodeJSCache } from '@uniswap/smart-order-router'
-import NodeCache from 'node-cache'
-import sinon from 'sinon'
-import { ChainId, Token } from '@uniswap/sdk-core'
-import { encodeSqrtRatioX96, FeeAmount, Pool } from '@uniswap/v3-sdk'
-import {
-  DAI_USDT_LOW,
-  SUPPORTED_POOLS,
-  USDC_DAI_MEDIUM,
-  USDC_WETH_LOW,
-  WETH9_USDT_LOW,
-} from '../../../../../test-utils/mocked-data'
-import { ProviderConfig } from '@uniswap/smart-order-router/build/main/providers/provider'
-import { metric } from '@uniswap/smart-order-router/build/main/util/metric'
-import { setupTables } from '../../../../dbSetup'
-import {
-  DAI_MAINNET as DAI,
-  USDC_MAINNET as USDC,
-} from '@uniswap/smart-order-router/build/main/providers/token-provider'
-
-describe('TrafficSwitchV3PoolProvider', async () => {
-  setupTables(TEST_ROUTE_TABLE)
-  const spy = sinon.spy(metric, 'putMetric')
-
-  it('switch traffic and sample pools with accurate pricing and liquidity', async () => {
-    spy.withArgs('V3_POOL_PROVIDER_POOL_CURRENT_QUOTE_MATCH', 1, MetricLoggerUnit.None)
-    spy.withArgs('V3_POOL_PROVIDER_POOL_CURRENT_LIQUIDITY_MATCH', 1, MetricLoggerUnit.None)
-    spy.withArgs('V3_POOL_PROVIDER_POOL_CURRENT_ACCURACY_MATCH', 1, MetricLoggerUnit.None)
-    spy.withArgs('V3_POOL_PROVIDER_POOL_TARGET_QUOTE_MATCH', 1, MetricLoggerUnit.None)
-    spy.withArgs('V3_POOL_PROVIDER_POOL_TARGET_LIQUIDITY_MATCH', 1, MetricLoggerUnit.None)
-    spy.withArgs('V3_POOL_PROVIDER_POOL_TARGET_ACCURACY_MATCH', 1, MetricLoggerUnit.None)
-    spy.withArgs('V3_POOL_PROVIDER_POOL_TRAFFIC_SAMPLING', 1, MetricLoggerUnit.None)
-    spy.withArgs('V3_POOL_PROVIDER_POOL_TRAFFIC_TOTAL', 1, MetricLoggerUnit.None)
-
-    const underlyingPool = getMockedV3PoolProvider()
-    const inMemoryPoolCache = new CachingV3PoolProvider(
-      ChainId.GOERLI,
-      underlyingPool,
-      new NodeJSCache(new NodeCache({ stdTTL: 15, useClones: false }))
-    )
-    const dynamoPoolCache = new DynamoDBCachingV3PoolProvider(
-      ChainId.GOERLI,
-      underlyingPool,
-      TEST_ROUTE_TABLE.TableName
-    )
-    const trafficSwitchProvider = new (class SwitchTrafficSwitchV3PoolProvider extends TrafficSwitchV3PoolProvider {
-      override readonly SHOULD_SWITCH_TRAFFIC = () => true
-      override readonly SHOULD_SAMPLE_TRAFFIC = () => true
-    })({
-      currentPoolProvider: inMemoryPoolCache,
-      targetPoolProvider: dynamoPoolCache,
-      sourceOfTruthPoolProvider: underlyingPool,
-    })
-
-    const tokenPairs: [Token, Token, FeeAmount][] = SUPPORTED_POOLS.map((pool: Pool) => {
-      return [pool.token0, pool.token1, pool.fee]
-    })
-    const providerConfig: ProviderConfig = { blockNumber: 111 }
-    await trafficSwitchProvider.getPools(tokenPairs, providerConfig)
-
-    sinon.assert.called(spy)
-  })
-
-  it('not switch traffic and sample pools with inaccurate pricing and inaccurate liquidity', async () => {
-    const USDC_DAI_LOW_INACCURATE = new Pool(USDC, DAI, FeeAmount.LOW, encodeSqrtRatioX96(2, 2), 9, 0)
-
-    spy.withArgs('V3_POOL_PROVIDER_POOL_CURRENT_QUOTE_MISMATCH', 1, MetricLoggerUnit.None)
-    spy.withArgs('V3_POOL_PROVIDER_POOL_CURRENT_LIQUIDITY_MISMATCH', 1, MetricLoggerUnit.None)
-    spy.withArgs('V3_POOL_PROVIDER_POOL_CURRENT_ACCURACY_MISMATCH', 1, MetricLoggerUnit.None)
-    spy.withArgs('V3_POOL_PROVIDER_POOL_TARGET_QUOTE_MISMATCH', 1, MetricLoggerUnit.None)
-    spy.withArgs('V3_POOL_PROVIDER_POOL_TARGET_LIQUIDITY_MISMATCH', 1, MetricLoggerUnit.None)
-    spy.withArgs('V3_POOL_PROVIDER_POOL_TARGET_ACCURACY_MISMATCH', 1, MetricLoggerUnit.None)
-    spy.withArgs('V3_POOL_PROVIDER_POOL_TRAFFIC_TOTAL', 1, MetricLoggerUnit.None)
-
-    const underlyingPool = getMockedV3PoolProvider([
-      USDC_DAI_LOW_INACCURATE,
-      USDC_DAI_MEDIUM,
-      USDC_WETH_LOW,
-      WETH9_USDT_LOW,
-      DAI_USDT_LOW,
-    ])
-    const inMemoryPoolCache = new CachingV3PoolProvider(
-      ChainId.GOERLI,
-      underlyingPool,
-      new NodeJSCache(new NodeCache({ stdTTL: 15, useClones: false }))
-    )
-    const dynamoPoolCache = new DynamoDBCachingV3PoolProvider(
-      ChainId.GOERLI,
-      underlyingPool,
-      TEST_ROUTE_TABLE.TableName
-    )
-    const trafficSwitchProvider = new (class SwitchTrafficSwitchV3PoolProvider extends TrafficSwitchV3PoolProvider {
-      override readonly SHOULD_SWITCH_TRAFFIC = () => false
-      override readonly SHOULD_SAMPLE_TRAFFIC = () => true
-    })({
-      currentPoolProvider: inMemoryPoolCache,
-      targetPoolProvider: dynamoPoolCache,
-      sourceOfTruthPoolProvider: underlyingPool,
-    })
-
-    const tokenPairs: [Token, Token, FeeAmount][] = SUPPORTED_POOLS.map((pool: Pool) => {
-      return [pool.token0, pool.token1, pool.fee]
-    })
-    const providerConfig: ProviderConfig = { blockNumber: 111 }
-    await trafficSwitchProvider.getPools(tokenPairs, providerConfig)
-
-    sinon.assert.called(spy)
-  })
-
-  it('not switch traffic and sample pools with inaccurate pricing but accurate liquidity', async () => {
-    const USDC_DAI_LOW_INACCURATE = new Pool(USDC, DAI, FeeAmount.LOW, encodeSqrtRatioX96(2, 2), 10, 0)
-
-    spy.withArgs('V3_POOL_PROVIDER_POOL_CURRENT_QUOTE_MISMATCH', 1, MetricLoggerUnit.None)
-    spy.withArgs('V3_POOL_PROVIDER_POOL_CURRENT_LIQUIDITY_MATCH', 1, MetricLoggerUnit.None)
-    spy.withArgs('V3_POOL_PROVIDER_POOL_CURRENT_ACCURACY_MISMATCH', 1, MetricLoggerUnit.None)
-    spy.withArgs('V3_POOL_PROVIDER_POOL_TARGET_QUOTE_MISMATCH', 1, MetricLoggerUnit.None)
-    spy.withArgs('V3_POOL_PROVIDER_POOL_TARGET_LIQUIDITY_MATCH', 1, MetricLoggerUnit.None)
-    spy.withArgs('V3_POOL_PROVIDER_POOL_TARGET_ACCURACY_MISMATCH', 1, MetricLoggerUnit.None)
-    spy.withArgs('V3_POOL_PROVIDER_POOL_TRAFFIC_TOTAL', 1, MetricLoggerUnit.None)
-
-    const underlyingPool = getMockedV3PoolProvider([
-      USDC_DAI_LOW_INACCURATE,
-      USDC_DAI_MEDIUM,
-      USDC_WETH_LOW,
-      WETH9_USDT_LOW,
-      DAI_USDT_LOW,
-    ])
-    const inMemoryPoolCache = new CachingV3PoolProvider(
-      ChainId.GOERLI,
-      underlyingPool,
-      new NodeJSCache(new NodeCache({ stdTTL: 15, useClones: false }))
-    )
-    const dynamoPoolCache = new DynamoDBCachingV3PoolProvider(
-      ChainId.GOERLI,
-      underlyingPool,
-      TEST_ROUTE_TABLE.TableName
-    )
-    const trafficSwitchProvider = new (class SwitchTrafficSwitchV3PoolProvider extends TrafficSwitchV3PoolProvider {
-      override readonly SHOULD_SWITCH_TRAFFIC = () => false
-      override readonly SHOULD_SAMPLE_TRAFFIC = () => true
-    })({
-      currentPoolProvider: inMemoryPoolCache,
-      targetPoolProvider: dynamoPoolCache,
-      sourceOfTruthPoolProvider: underlyingPool,
-    })
-
-    const tokenPairs: [Token, Token, FeeAmount][] = SUPPORTED_POOLS.map((pool: Pool) => {
-      return [pool.token0, pool.token1, pool.fee]
-    })
-    const providerConfig: ProviderConfig = { blockNumber: 111 }
-    await trafficSwitchProvider.getPools(tokenPairs, providerConfig)
-
-    sinon.assert.called(spy)
-  })
-})
diff --git a/test/mocha/unit/handlers/router-entities/route-caching/dynamo-route-caching-provider.test.ts b/test/mocha/unit/handlers/router-entities/route-caching/dynamo-route-caching-provider.test.ts
deleted file mode 100644
index 290539c..0000000
--- a/test/mocha/unit/handlers/router-entities/route-caching/dynamo-route-caching-provider.test.ts
+++ /dev/null
@@ -1,259 +0,0 @@
-import chai, { expect } from 'chai'
-import chaiAsPromised from 'chai-as-promised'
-import 'reflect-metadata'
-import { setupTables } from '../../../../dbSetup'
-import {
-  DynamoRouteCachingProvider,
-  PairTradeTypeChainId,
-} from '../../../../../../lib/handlers/router-entities/route-caching'
-import { Protocol } from '@uniswap/router-sdk'
-import { ChainId, CurrencyAmount, TradeType } from '@uniswap/sdk-core'
-import JSBI from 'jsbi'
-import { FeeAmount, Pool } from '@uniswap/v3-sdk'
-import { CachedRoutesMarshaller } from '../../../../../../lib/handlers/router-entities/route-caching'
-import { WNATIVE_ON } from '../../../../../utils/tokens'
-import { CacheMode, CachedRoute, CachedRoutes, UNI_MAINNET, USDC_MAINNET, V3Route } from '@uniswap/smart-order-router'
-import { SECONDS_PER_BLOCK_BY_CHAIN_ID } from '../../../../../../lib/handlers/shared'
-import { DynamoDBTableProps } from '../../../../../../bin/stacks/routing-database-stack'
-
-chai.use(chaiAsPromised)
-
-const TEST_ROUTE_TABLE = {
-  TableName: 'RouteCachingDB',
-  KeySchema: [
-    {
-      AttributeName: 'pairTradeTypeChainId',
-      KeyType: 'HASH',
-    },
-    {
-      AttributeName: 'protocolsBucketBlockNumber',
-      KeyType: 'RANGE',
-    },
-  ],
-  AttributeDefinitions: [
-    {
-      AttributeName: 'pairTradeTypeChainId',
-      AttributeType: 'S',
-    },
-    {
-      AttributeName: 'protocolsBucketBlockNumber',
-      AttributeType: 'S',
-    },
-  ],
-  ProvisionedThroughput: {
-    ReadCapacityUnits: 1,
-    WriteCapacityUnits: 1,
-  },
-}
-
-const WETH = WNATIVE_ON(ChainId.MAINNET)
-
-const TEST_WETH_USDC_POOL = new Pool(
-  WETH,
-  USDC_MAINNET,
-  FeeAmount.HIGH,
-  /* sqrtRatio */ '2437312313659959819381354528',
-  /* liquidity */ '10272714736694327408',
-  /* tickCurrent */ -69633
-)
-
-const TEST_USDC_WETH_POOL = new Pool(
-  USDC_MAINNET,
-  WETH,
-  FeeAmount.HIGH,
-  /* sqrtRatio */ '2437312313659959819381354528',
-  /* liquidity */ '10272714736694327408',
-  /* tickCurrent */ -69633
-)
-
-const TEST_UNI_USDC_POOL = new Pool(
-  UNI_MAINNET,
-  USDC_MAINNET,
-  FeeAmount.HIGH,
-  /* sqrtRatio */ '2437312313659959819381354528',
-  /* liquidity */ '10272714736694327408',
-  /* tickCurrent */ -69633
-)
-
-const TEST_WETH_USDC_V3_ROUTE = new V3Route([TEST_WETH_USDC_POOL], WETH, USDC_MAINNET)
-const TEST_USDC_WETH_V3_ROUTE = new V3Route([TEST_USDC_WETH_POOL], USDC_MAINNET, WETH)
-const TEST_UNI_USDC_ROUTE = new V3Route([TEST_UNI_USDC_POOL], UNI_MAINNET, USDC_MAINNET)
-
-const TEST_CACHED_ROUTE = new CachedRoute({ route: TEST_WETH_USDC_V3_ROUTE, percent: 100 })
-const TEST_CACHED_ROUTES = new CachedRoutes({
-  routes: [TEST_CACHED_ROUTE],
-  chainId: TEST_CACHED_ROUTE.route.chainId,
-  tokenIn: WETH,
-  tokenOut: USDC_MAINNET,
-  protocolsCovered: [TEST_CACHED_ROUTE.protocol],
-  blockNumber: 0,
-  tradeType: TradeType.EXACT_INPUT,
-  originalAmount: '1',
-  blocksToLive: 5,
-})
-
-const TEST_CACHED_ROUTE_2 = new CachedRoute({ route: TEST_USDC_WETH_V3_ROUTE, percent: 100 })
-const TEST_CACHED_ROUTES_2 = new CachedRoutes({
-  routes: [TEST_CACHED_ROUTE_2],
-  chainId: TEST_CACHED_ROUTE_2.route.chainId,
-  tokenIn: USDC_MAINNET,
-  tokenOut: WETH,
-  protocolsCovered: [TEST_CACHED_ROUTE_2.protocol],
-  blockNumber: 0,
-  tradeType: TradeType.EXACT_OUTPUT,
-  originalAmount: '1',
-  blocksToLive: 5,
-})
-
-const TEST_UNCACHED_ROUTE = new CachedRoute({ route: TEST_UNI_USDC_ROUTE, percent: 100 })
-const TEST_UNCACHED_ROUTES = new CachedRoutes({
-  routes: [TEST_UNCACHED_ROUTE],
-  chainId: TEST_UNCACHED_ROUTE.route.chainId,
-  tokenIn: UNI_MAINNET,
-  tokenOut: USDC_MAINNET,
-  protocolsCovered: [TEST_UNCACHED_ROUTE.protocol],
-  blockNumber: 0,
-  tradeType: TradeType.EXACT_INPUT,
-  originalAmount: '1',
-  blocksToLive: 5,
-})
-
-describe('DynamoRouteCachingProvider', async () => {
-  setupTables(TEST_ROUTE_TABLE)
-  const dynamoRouteCache = new DynamoRouteCachingProvider({
-    cachedRoutesTableName: TEST_ROUTE_TABLE.TableName,
-    cachingQuoteLambdaName: 'test',
-    cachingRequestFlagTableName: DynamoDBTableProps.CachingRequestFlagDynamoDbTable.Name,
-  })
-
-  it('Generates cached route db entry properly with ttl based on chain id and blocks to live', async () => {
-    const currencyAmount = CurrencyAmount.fromRawAmount(WETH, JSBI.BigInt(1 * 10 ** WETH.decimals))
-    const timeNow = Math.floor(Date.now() / 1000)
-    const cachedRouteDbEntry = dynamoRouteCache.generateCachedRouteDbEntry(TEST_CACHED_ROUTES, currencyAmount)
-    expect(cachedRouteDbEntry).to.not.be.null
-
-    if (cachedRouteDbEntry) {
-      const ttlSeconds =
-        timeNow + (SECONDS_PER_BLOCK_BY_CHAIN_ID[ChainId.MAINNET] as number) * TEST_CACHED_ROUTES.blocksToLive
-      const marshalledCachedRoutes = CachedRoutesMarshaller.marshal(TEST_CACHED_ROUTES)
-      const jsonCachedRoutes = JSON.stringify(marshalledCachedRoutes)
-      const binaryCachedRoutes = Buffer.from(jsonCachedRoutes)
-
-      expect(cachedRouteDbEntry.Item.ttl).to.equal(ttlSeconds)
-      expect(cachedRouteDbEntry.TableName).to.equal('RouteCachingDB')
-      expect(cachedRouteDbEntry.Item.pairTradeTypeChainId).to.equal(
-        PairTradeTypeChainId.fromCachedRoutes(TEST_CACHED_ROUTES).toString()
-      )
-      expect(cachedRouteDbEntry.Item.protocolsBucketBlockNumber).to.equal('V3/1/0')
-      expect(cachedRouteDbEntry.Item.item).to.deep.equal(binaryCachedRoutes)
-    }
-  })
-
-  it('Caches routes properly for a token pair that has its cache configured to Livemode', async () => {
-    const currencyAmount = CurrencyAmount.fromRawAmount(WETH, JSBI.BigInt(1 * 10 ** WETH.decimals))
-    const cacheMode = await dynamoRouteCache.getCacheMode(
-      ChainId.MAINNET,
-      currencyAmount,
-      USDC_MAINNET,
-      TradeType.EXACT_INPUT,
-      [Protocol.V3]
-    )
-    expect(cacheMode).to.equal(CacheMode.Livemode)
-
-    const insertedIntoCache = await dynamoRouteCache.setCachedRoute(TEST_CACHED_ROUTES, currencyAmount)
-    expect(insertedIntoCache).to.be.true
-
-    const cacheModeFromCachedRoutes = await dynamoRouteCache.getCacheModeFromCachedRoutes(
-      TEST_CACHED_ROUTES,
-      currencyAmount
-    )
-    expect(cacheModeFromCachedRoutes).to.equal(CacheMode.Livemode)
-
-    // Fetches route successfully from cache when it has been cached.
-    const route = await dynamoRouteCache.getCachedRoute(
-      ChainId.MAINNET,
-      currencyAmount,
-      USDC_MAINNET,
-      TradeType.EXACT_INPUT,
-      [Protocol.V3],
-      TEST_CACHED_ROUTES.blockNumber
-    )
-    expect(route).to.not.be.undefined
-  })
-
-  it('Caches routes properly for a token pair that has its cache configured to Tapcompare', async () => {
-    const currencyAmount = CurrencyAmount.fromRawAmount(WETH, JSBI.BigInt(100 * 10 ** WETH.decimals))
-    const cacheMode = await dynamoRouteCache.getCacheMode(
-      ChainId.MAINNET,
-      currencyAmount,
-      USDC_MAINNET,
-      TradeType.EXACT_OUTPUT,
-      [Protocol.V3]
-    )
-    expect(cacheMode).to.equal(CacheMode.Tapcompare)
-
-    const insertedIntoCache = await dynamoRouteCache.setCachedRoute(TEST_CACHED_ROUTES_2, currencyAmount)
-    expect(insertedIntoCache).to.be.true
-
-    const cacheModeFromCachedRoutes = await dynamoRouteCache.getCacheModeFromCachedRoutes(
-      TEST_CACHED_ROUTES_2,
-      currencyAmount
-    )
-    expect(cacheModeFromCachedRoutes).to.equal(CacheMode.Tapcompare)
-
-    // Fetches route successfully from cache, since cache is active in Tapcompare mode.
-    const route = await dynamoRouteCache.getCachedRoute(
-      ChainId.MAINNET,
-      currencyAmount,
-      USDC_MAINNET,
-      TradeType.EXACT_OUTPUT,
-      [Protocol.V3],
-      TEST_CACHED_ROUTES_2.blockNumber
-    )
-    expect(route).to.not.be.undefined
-  })
-
-  it('Does not cache routes for a token pair that has its cache configured in the default Darkmode', async () => {
-    const currencyAmount = CurrencyAmount.fromRawAmount(UNI_MAINNET, JSBI.BigInt(1 * 10 ** UNI_MAINNET.decimals))
-    const cacheMode = await dynamoRouteCache.getCacheMode(
-      ChainId.MAINNET,
-      currencyAmount,
-      USDC_MAINNET,
-      TradeType.EXACT_INPUT,
-      [Protocol.V3]
-    )
-    expect(cacheMode).to.equal(CacheMode.Darkmode)
-
-    const insertedIntoCache = await dynamoRouteCache.setCachedRoute(TEST_UNCACHED_ROUTES, currencyAmount)
-    expect(insertedIntoCache).to.be.false
-
-    const cacheModeFromCachedRoutes = await dynamoRouteCache.getCacheModeFromCachedRoutes(
-      TEST_UNCACHED_ROUTES,
-      currencyAmount
-    )
-    expect(cacheModeFromCachedRoutes).to.equal(CacheMode.Darkmode)
-
-    // Fetches nothing from the cache since cache is in Darkmode.
-    const route = await dynamoRouteCache.getCachedRoute(
-      ChainId.MAINNET,
-      currencyAmount,
-      USDC_MAINNET,
-      TradeType.EXACT_INPUT,
-      [Protocol.V3],
-      TEST_CACHED_ROUTES.blockNumber
-    )
-    expect(route).to.be.undefined
-  })
-
-  it('Finds the CacheMode from a wildcard exact output configuration', async () => {
-    const currencyAmount = CurrencyAmount.fromRawAmount(WETH, JSBI.BigInt(100 * 10 ** WETH.decimals))
-    const cacheMode = await dynamoRouteCache.getCacheMode(
-      ChainId.MAINNET,
-      currencyAmount,
-      USDC_MAINNET,
-      TradeType.EXACT_OUTPUT,
-      [Protocol.V3]
-    )
-    expect(cacheMode).to.equal(CacheMode.Tapcompare)
-  })
-})
diff --git a/test/test-utils/mocked-data.ts b/test/test-utils/mocked-data.ts
deleted file mode 100644
index 192d90c..0000000
--- a/test/test-utils/mocked-data.ts
+++ /dev/null
@@ -1,41 +0,0 @@
-import { encodeSqrtRatioX96, Pool } from '@uniswap/v3-sdk'
-import { FeeAmount } from '../utils/ticks'
-import {
-  DAI_MAINNET as DAI,
-  USDC_MAINNET as USDC,
-  USDT_MAINNET as USDT,
-  WRAPPED_NATIVE_CURRENCY,
-} from '@uniswap/smart-order-router/build/main/index'
-import { V3PoolAccessor } from '@uniswap/smart-order-router/build/main/providers/v3/pool-provider'
-import _ from 'lodash'
-
-export const USDC_DAI_LOW = new Pool(USDC, DAI, FeeAmount.LOW, encodeSqrtRatioX96(1, 1), 10, 0)
-export const USDC_DAI_MEDIUM = new Pool(USDC, DAI, FeeAmount.MEDIUM, encodeSqrtRatioX96(1, 1), 8, 0)
-export const USDC_WETH_LOW = new Pool(
-  USDC,
-  WRAPPED_NATIVE_CURRENCY[1]!,
-  FeeAmount.LOW,
-  encodeSqrtRatioX96(1, 1),
-  500,
-  0
-)
-export const WETH9_USDT_LOW = new Pool(
-  WRAPPED_NATIVE_CURRENCY[1]!,
-  USDT,
-  FeeAmount.LOW,
-  encodeSqrtRatioX96(1, 1),
-  200,
-  0
-)
-export const DAI_USDT_LOW = new Pool(DAI, USDT, FeeAmount.LOW, encodeSqrtRatioX96(1, 1), 10, 0)
-export const SUPPORTED_POOLS: Pool[] = [USDC_DAI_LOW, USDC_DAI_MEDIUM, USDC_WETH_LOW, WETH9_USDT_LOW, DAI_USDT_LOW]
-
-export const buildMockV3PoolAccessor: (pools: Pool[]) => V3PoolAccessor = (pools: Pool[]) => {
-  return {
-    getAllPools: () => pools,
-    getPoolByAddress: (address: string) =>
-      _.find(pools, (p) => Pool.getAddress(p.token0, p.token1, p.fee).toLowerCase() == address.toLowerCase()),
-    getPool: (tokenA, tokenB, fee) =>
-      _.find(pools, (p) => Pool.getAddress(p.token0, p.token1, p.fee) == Pool.getAddress(tokenA, tokenB, fee)),
-  }
-}
diff --git a/test/test-utils/mocked-dependencies.ts b/test/test-utils/mocked-dependencies.ts
deleted file mode 100644
index 0e27176..0000000
--- a/test/test-utils/mocked-dependencies.ts
+++ /dev/null
@@ -1,54 +0,0 @@
-import { V3PoolProvider } from '@uniswap/smart-order-router'
-import { Pool } from '@uniswap/v3-sdk'
-import {
-  buildMockV3PoolAccessor,
-  DAI_USDT_LOW,
-  USDC_DAI_LOW,
-  USDC_DAI_MEDIUM,
-  USDC_WETH_LOW,
-  WETH9_USDT_LOW,
-} from './mocked-data'
-import sinon from 'sinon'
-
-export function getMockedV3PoolProvider(
-  pools: Pool[] = [USDC_DAI_LOW, USDC_DAI_MEDIUM, USDC_WETH_LOW, WETH9_USDT_LOW, DAI_USDT_LOW]
-): V3PoolProvider {
-  const mockV3PoolProvider = sinon.createStubInstance(V3PoolProvider)
-
-  mockV3PoolProvider.getPools.resolves(buildMockV3PoolAccessor(pools))
-  mockV3PoolProvider.getPoolAddress.callsFake((tA, tB, fee) => ({
-    poolAddress: Pool.getAddress(tA, tB, fee),
-    token0: tA,
-    token1: tB,
-  }))
-
-  return mockV3PoolProvider
-}
-
-export const TEST_ROUTE_TABLE = {
-  TableName: 'PoolCachingV3',
-  KeySchema: [
-    {
-      AttributeName: 'poolAddress',
-      KeyType: 'HASH',
-    },
-    {
-      AttributeName: 'blockNumber',
-      KeyType: 'RANGE',
-    },
-  ],
-  AttributeDefinitions: [
-    {
-      AttributeName: 'poolAddress',
-      AttributeType: 'S',
-    },
-    {
-      AttributeName: 'blockNumber',
-      AttributeType: 'N',
-    },
-  ],
-  ProvisionedThroughput: {
-    ReadCapacityUnits: 1,
-    WriteCapacityUnits: 1,
-  },
-}
diff --git a/test/utils/absoluteValue.ts b/test/utils/absoluteValue.ts
deleted file mode 100644
index 52dd92a..0000000
--- a/test/utils/absoluteValue.ts
+++ /dev/null
@@ -1,12 +0,0 @@
-import { Fraction } from '@uniswap/sdk-core'
-import JSBI from 'jsbi'
-
-export function absoluteValue(fraction: Fraction): Fraction {
-  const numeratorAbs = JSBI.lessThan(fraction.numerator, JSBI.BigInt(0))
-    ? JSBI.unaryMinus(fraction.numerator)
-    : fraction.numerator
-  const denominatorAbs = JSBI.lessThan(fraction.denominator, JSBI.BigInt(0))
-    ? JSBI.unaryMinus(fraction.denominator)
-    : fraction.denominator
-  return new Fraction(numeratorAbs, denominatorAbs)
-}
diff --git a/test/utils/forkAndFund.ts b/test/utils/forkAndFund.ts
deleted file mode 100644
index da163dc..0000000
--- a/test/utils/forkAndFund.ts
+++ /dev/null
@@ -1,78 +0,0 @@
-import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/signers'
-import { Currency, CurrencyAmount } from '@uniswap/sdk-core'
-import hre from 'hardhat'
-import { Erc20, Erc20__factory } from '../../lib/types/ext'
-
-const WHALES = [
-  '0xBE0eB53F46cd790Cd13851d5EFf43D12404d33E8',
-  '0x6555e1cc97d3cba6eaddebbcd7ca51d75771e0b8',
-  '0x08638ef1a205be6762a8b935f5da9b700cf7322c',
-  '0xe8e8f41ed29e46f34e206d7d2a7d6f735a3ff2cb',
-  '0x72a53cdbbcc1b9efa39c834a540550e23463aacb',
-  '0xbebc44782c7db0a1a60cb6fe97d0b483032ff1c7',
-  '0x40ec5b33f54e0e8a33a975908c5ba1c14e5bbbdf',
-  '0x8eb8a3b98659cce290402893d0123abb75e3ab28',
-  '0x1e3d6eab4bcf24bcd04721caa11c478a2e59852d',
-  '0x28C6c06298d514Db089934071355E5743bf21d60',
-  '0xF977814e90dA44bFA03b6295A0616a897441aceC',
-  '0x5d3a536e4d6dbd6114cc1ead35777bab948e3643',
-  '0x2775b1c75658be0f640272ccb8c72ac986009e38',
-  '0x28c6c06298d514db089934071355e5743bf21d60',
-  '0x47ac0fb4f2d84898e4d9e7b4dab3c24507a6d503',
-  '0x06601571aa9d3e8f5f7cdd5b993192618964bab5',
-]
-
-const { ethers } = hre
-
-export const resetAndFundAtBlock = async (
-  alice: SignerWithAddress,
-  blockNumber: number,
-  currencyAmounts: CurrencyAmount<Currency>[]
-): Promise<SignerWithAddress> => {
-  await hre.network.provider.request({
-    method: 'hardhat_reset',
-    params: [
-      {
-        forking: {
-          jsonRpcUrl: process.env.ARCHIVE_NODE_RPC,
-          blockNumber,
-        },
-      },
-    ],
-  })
-
-  for (const whale of WHALES) {
-    await hre.network.provider.request({
-      method: 'hardhat_impersonateAccount',
-      params: [whale],
-    })
-  }
-
-  for (const currencyAmount of currencyAmounts) {
-    const currency = currencyAmount.currency
-    const amount = currencyAmount.toExact()
-
-    if (currency.isNative) {
-      // Requested funding was for ETH. Hardhat prefunds Alice with 1000 Eth.
-      return alice
-    }
-
-    for (let i = 0; i < WHALES.length; i++) {
-      const whale = WHALES[i]
-      const whaleAccount = ethers.provider.getSigner(whale)
-      try {
-        const whaleToken: Erc20 = Erc20__factory.connect(currency.wrapped.address, whaleAccount)
-
-        await whaleToken.transfer(alice.address, ethers.utils.parseUnits(amount, currency.decimals))
-
-        break
-      } catch (err) {
-        if (i == WHALES.length - 1) {
-          throw new Error(`Could not fund ${amount} ${currency.symbol} from any whales.`)
-        }
-      }
-    }
-  }
-
-  return alice
-}
diff --git a/test/utils/getBalanceAndApprove.ts b/test/utils/getBalanceAndApprove.ts
deleted file mode 100644
index 68ebeb1..0000000
--- a/test/utils/getBalanceAndApprove.ts
+++ /dev/null
@@ -1,43 +0,0 @@
-import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/signers'
-import { Currency, CurrencyAmount, Token } from '@uniswap/sdk-core'
-import { constants } from 'ethers'
-import { Erc20 } from '../../lib/types/ext/Erc20'
-import { Erc20__factory } from '../../lib/types/ext/factories/Erc20__factory'
-
-export const getBalance = async (alice: SignerWithAddress, currency: Currency): Promise<CurrencyAmount<Currency>> => {
-  if (!currency.isToken) {
-    return CurrencyAmount.fromRawAmount(currency, (await alice.getBalance()).toString())
-  }
-
-  const aliceTokenIn: Erc20 = Erc20__factory.connect(currency.address, alice)
-
-  return CurrencyAmount.fromRawAmount(currency, (await aliceTokenIn.balanceOf(alice.address)).toString())
-}
-
-export const getBalanceOfAddress = async (
-  alice: SignerWithAddress,
-  address: string,
-  currency: Token
-): Promise<CurrencyAmount<Token>> => {
-  // tokens / WETH only.
-  const token: Erc20 = Erc20__factory.connect(currency.address, alice)
-
-  return CurrencyAmount.fromRawAmount(currency, (await token.balanceOf(address)).toString())
-}
-
-export const getBalanceAndApprove = async (
-  alice: SignerWithAddress,
-  approveTarget: string,
-  currency: Currency
-): Promise<CurrencyAmount<Currency>> => {
-  if (currency.isToken) {
-    const aliceTokenIn: Erc20 = Erc20__factory.connect(currency.address, alice)
-
-    if (currency.symbol == 'USDT') {
-      await (await aliceTokenIn.approve(approveTarget, 0)).wait()
-    }
-    await (await aliceTokenIn.approve(approveTarget, constants.MaxUint256)).wait()
-  }
-
-  return getBalance(alice, currency)
-}
diff --git a/test/utils/minimumAmountOut.ts b/test/utils/minimumAmountOut.ts
deleted file mode 100644
index b56b2f5..0000000
--- a/test/utils/minimumAmountOut.ts
+++ /dev/null
@@ -1,15 +0,0 @@
-import { Currency, CurrencyAmount, Fraction, Percent } from '@uniswap/sdk-core'
-import JSBI from 'jsbi'
-import invariant from 'tiny-invariant'
-
-export const minimumAmountOut = (
-  slippageTolerance: Percent,
-  amountOut: CurrencyAmount<Currency>
-): CurrencyAmount<Currency> => {
-  invariant(!slippageTolerance.lessThan(JSBI.BigInt(0)), 'SLIPPAGE_TOLERANCE')
-  const slippageAdjustedAmountOut = new Fraction(JSBI.BigInt(1))
-    .add(slippageTolerance)
-    .invert()
-    .multiply(amountOut.quotient).quotient
-  return CurrencyAmount.fromRawAmount(amountOut.currency, slippageAdjustedAmountOut)
-}
diff --git a/test/utils/parseEvents.ts b/test/utils/parseEvents.ts
deleted file mode 100644
index 8de388c..0000000
--- a/test/utils/parseEvents.ts
+++ /dev/null
@@ -1,162 +0,0 @@
-import { Currency, CurrencyAmount, Token, WETH9 } from '@uniswap/sdk-core'
-import { providers } from 'ethers'
-import hre from 'hardhat'
-import JSBI from 'jsbi'
-const { ethers } = hre
-
-const NFT_POSITION_MANAGER = '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'
-
-const GENERIC_INTERFACE = new ethers.utils.Interface([
-  'event Transfer(address indexed from, address indexed to, uint256 value)',
-  'event Approval(address indexed owner, address indexed spender, uint256 value)',
-  'event Initialize(uint160 sqrtPriceX96, int24 tick)',
-  'event Mint(address sender, address indexed owner, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount, uint256 amount0, uint256 amount1)',
-  'event Collect(address indexed owner, address recipient, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount0, uint128 amount1)',
-  'event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick)',
-])
-
-const WETH_INTERFACE = new ethers.utils.Interface([
-  'event Approval(address indexed src, address indexed guy, uint wad)',
-  'event Transfer(address indexed src, address indexed dst, uint wad)',
-  'event Deposit(address indexed dst, uint wad)',
-  'event Withdrawal(address indexed src, uint wad)',
-])
-
-const NFT_INTERFACE = new ethers.utils.Interface([
-  'event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1)',
-  'event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1)',
-  'event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1)',
-  'event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)',
-  'event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)',
-  'event ApprovalForAll(address indexed owner, address indexed _operator, bool approved)',
-])
-
-export function parseEvents(txReceipt: providers.TransactionReceipt, addressFilter?: string[]) {
-  if (!!addressFilter) {
-    addressFilter = addressFilter.map((str) => str.toLowerCase())
-  }
-
-  return txReceipt.logs
-    .map((log) => {
-      // transfer/approval needs own interface since parameters are named differently (ERC721)
-      if (log.address === NFT_POSITION_MANAGER) {
-        return {
-          origin: log.address,
-          ...NFT_INTERFACE.parseLog(log),
-        }
-
-        // transfer/approval needs own interface because params are named differently (wad/guy *eye-roll*)
-      } else if (log.address === WETH9[1].address) {
-        return {
-          origin: log.address,
-          ...WETH_INTERFACE.parseLog(log),
-        }
-
-        // all other possible interfaces
-      } else if (!addressFilter || addressFilter.includes(log.address.toLowerCase())) {
-        return {
-          origin: log.address,
-          ...GENERIC_INTERFACE.parseLog(log),
-        }
-      } else {
-        return null
-      }
-    })
-    .filter((n) => n)
-}
-
-export type OnChainPosition = {
-  owner: string
-  tokenId: number
-  tickLower: number
-  tickUpper: number
-  liquidity: number
-  amount0: CurrencyAmount<Currency>
-  amount1: CurrencyAmount<Currency>
-  newMint: boolean
-}
-
-export type SwapAndAddEventTestParams = {
-  // total amounts transferred from user including anything sent back as dust
-  amount0TransferredFromAlice: CurrencyAmount<Currency>
-  amount1TransferredFromAlice: CurrencyAmount<Currency>
-
-  // amounts swapped through position's target pool. Positive if traded into pool,
-  // negative if traded out of pool
-  amount0SwappedInPool: CurrencyAmount<Currency>
-  amount1SwappedInPool: CurrencyAmount<Currency>
-
-  // attributes of the on-chain position
-  onChainPosition: OnChainPosition
-}
-
-export function getTestParamsFromEvents(
-  events: any[],
-  token0: Token,
-  token1: Token,
-  aliceAddr: string,
-  poolAddr: string
-): SwapAndAddEventTestParams {
-  const zeroToken0 = CurrencyAmount.fromRawAmount(token0, JSBI.BigInt('0'))
-  const zeroToken1 = CurrencyAmount.fromRawAmount(token1, JSBI.BigInt('0'))
-
-  let amount0TransferredFromAlice = zeroToken0
-  let amount1TransferredFromAlice = zeroToken1
-  let amount0SwappedInPool = CurrencyAmount.fromRawAmount(token0, JSBI.BigInt('0'))
-  let amount1SwappedInPool = CurrencyAmount.fromRawAmount(token1, JSBI.BigInt('0'))
-  let onChainPosition: OnChainPosition = {
-    owner: '0',
-    tokenId: 0,
-    tickLower: 0,
-    tickUpper: 0,
-    liquidity: 0,
-    amount0: zeroToken0,
-    amount1: zeroToken1,
-    newMint: false,
-  }
-
-  events.forEach((event) => {
-    // get the sum of all tokens transferred from Alice
-    if (event.name === 'Transfer' && event.args.value && event.args.from.toLowerCase() === aliceAddr.toLowerCase()) {
-      if (event.origin.toLowerCase() === token0.address.toLowerCase()) {
-        amount0TransferredFromAlice = amount0TransferredFromAlice.add(
-          CurrencyAmount.fromRawAmount(token0, JSBI.BigInt(event.args.value))
-        )
-      } else if (event.origin.toLowerCase() === token1.address.toLowerCase()) {
-        amount1TransferredFromAlice = amount1TransferredFromAlice.add(
-          CurrencyAmount.fromRawAmount(token1, JSBI.BigInt(event.args.value))
-        )
-      }
-
-      // get position details from 'IncreaseLiquidity'
-    } else if (event.name === 'IncreaseLiquidity') {
-      onChainPosition.tokenId = event.args.tokenId
-      onChainPosition.liquidity = event.args.liquidity
-      onChainPosition.amount0 = CurrencyAmount.fromRawAmount(token0, JSBI.BigInt(event.args.amount0))
-      onChainPosition.amount1 = CurrencyAmount.fromRawAmount(token1, JSBI.BigInt(event.args.amount1))
-
-      // get position owner from nft 'Mint'
-    } else if (event.name === 'Transfer' && event.args.tokenId) {
-      onChainPosition.owner = event.args.to
-      onChainPosition.newMint = true
-
-      // get position bounds from pool 'Mint'
-    } else if (event.name === 'Mint') {
-      onChainPosition.tickLower = event.args.tickLower
-      onChainPosition.tickUpper = event.args.tickUpper
-
-      // get amounts swapped inside target pool
-    } else if (event.name === 'Swap' && event.origin === poolAddr) {
-      amount0SwappedInPool = CurrencyAmount.fromRawAmount(token0, JSBI.BigInt(event.args.amount0))
-      amount1SwappedInPool = CurrencyAmount.fromRawAmount(token1, JSBI.BigInt(event.args.amount1))
-    }
-  })
-
-  return {
-    amount0TransferredFromAlice,
-    amount1TransferredFromAlice,
-    amount0SwappedInPool,
-    amount1SwappedInPool,
-    onChainPosition,
-  }
-}
diff --git a/test/utils/ticks.ts b/test/utils/ticks.ts
deleted file mode 100644
index 07b9a1c..0000000
--- a/test/utils/ticks.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-export enum FeeAmount {
-  LOW = 500,
-  MEDIUM = 3000,
-  HIGH = 10000,
-}
-
-export const TICK_SPACINGS: { [amount in FeeAmount]: number } = {
-  [FeeAmount.LOW]: 10,
-  [FeeAmount.MEDIUM]: 60,
-  [FeeAmount.HIGH]: 200,
-}
-
-export const getMinTick = (tickSpacing: number) => Math.ceil(-887272 / tickSpacing) * tickSpacing
-export const getMaxTick = (tickSpacing: number) => Math.floor(887272 / tickSpacing) * tickSpacing
diff --git a/test/utils/tokens.ts b/test/utils/tokens.ts
deleted file mode 100644
index 56c8389..0000000
--- a/test/utils/tokens.ts
+++ /dev/null
@@ -1,142 +0,0 @@
-import DEFAULT_TOKEN_LIST from '@uniswap/default-token-list'
-import { ChainId, Token } from '@uniswap/sdk-core'
-import {
-  CachingTokenListProvider,
-  DAI_ARBITRUM,
-  DAI_AVAX,
-  DAI_BNB,
-  DAI_GOERLI,
-  DAI_MAINNET,
-  DAI_OPTIMISM,
-  DAI_OPTIMISM_GOERLI,
-  DAI_POLYGON,
-  DAI_POLYGON_MUMBAI,
-  DAI_SEPOLIA,
-  log,
-  NodeJSCache,
-  USDC_ARBITRUM,
-  USDC_AVAX,
-  USDC_BNB,
-  USDC_GOERLI,
-  USDC_MAINNET,
-  USDC_OPTIMISM,
-  USDC_OPTIMISM_GOERLI,
-  USDC_POLYGON,
-  USDC_POLYGON_MUMBAI,
-  USDC_SEPOLIA,
-  USDT_ARBITRUM,
-  USDT_BNB,
-  USDT_GOERLI,
-  USDT_MAINNET,
-  USDT_OPTIMISM,
-  WRAPPED_NATIVE_CURRENCY,
-  USDC_BASE,
-  USDC_BASE_GOERLI,
-} from '@uniswap/smart-order-router'
-import { ethers } from 'ethers'
-import NodeCache from 'node-cache'
-
-export const getTokenListProvider = (id: ChainId) => {
-  return new CachingTokenListProvider(id, DEFAULT_TOKEN_LIST, new NodeJSCache(new NodeCache()))
-}
-
-export const getAmount = async (id: ChainId, type: string, symbolIn: string, symbolOut: string, amount: string) => {
-  const tokenListProvider = getTokenListProvider(id)
-  const decimals = (await tokenListProvider.getTokenBySymbol(type == 'exactIn' ? symbolIn : symbolOut))!.decimals
-  log.info(decimals)
-  return ethers.utils.parseUnits(amount, decimals).toString()
-}
-
-export const getAmountFromToken = async (type: string, tokenIn: Token, tokenOut: Token, amount: string) => {
-  const decimals = (type == 'exactIn' ? tokenIn : tokenOut).decimals
-  return ethers.utils.parseUnits(amount, decimals).toString()
-}
-
-export const UNI_MAINNET = new Token(
-  ChainId.MAINNET,
-  '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',
-  18,
-  'UNI',
-  'Uniswap'
-)
-
-export const UNI_GORLI = new Token(ChainId.GOERLI, '0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', 18, 'UNI', 'Uni token')
-
-export const DAI_ON = (chainId: ChainId): Token => {
-  switch (chainId) {
-    case ChainId.MAINNET:
-      return DAI_MAINNET
-    case ChainId.GOERLI:
-      return DAI_GOERLI
-    case ChainId.SEPOLIA:
-      return DAI_SEPOLIA
-    case ChainId.OPTIMISM:
-      return DAI_OPTIMISM
-    case ChainId.OPTIMISM_GOERLI:
-      return DAI_OPTIMISM_GOERLI
-    case ChainId.ARBITRUM_ONE:
-      return DAI_ARBITRUM
-    case ChainId.POLYGON:
-      return DAI_POLYGON
-    case ChainId.POLYGON_MUMBAI:
-      return DAI_POLYGON_MUMBAI
-    case ChainId.BNB:
-      return DAI_BNB
-    case ChainId.AVALANCHE:
-      return DAI_AVAX
-    default:
-      throw new Error(`Chain id: ${chainId} not supported`)
-  }
-}
-
-export const USDT_ON = (chainId: ChainId): Token => {
-  switch (chainId) {
-    case ChainId.MAINNET:
-      return USDT_MAINNET
-    case ChainId.GOERLI:
-      return USDT_GOERLI
-    case ChainId.OPTIMISM:
-      return USDT_OPTIMISM
-    case ChainId.ARBITRUM_ONE:
-      return USDT_ARBITRUM
-    case ChainId.BNB:
-      return USDT_BNB
-    default:
-      throw new Error(`Chain id: ${chainId} not supported`)
-  }
-}
-
-export const USDC_ON = (chainId: ChainId): Token => {
-  switch (chainId) {
-    case ChainId.MAINNET:
-      return USDC_MAINNET
-    case ChainId.GOERLI:
-      return USDC_GOERLI
-    case ChainId.SEPOLIA:
-      return USDC_SEPOLIA
-    case ChainId.OPTIMISM:
-      return USDC_OPTIMISM
-    case ChainId.OPTIMISM_GOERLI:
-      return USDC_OPTIMISM_GOERLI
-    case ChainId.ARBITRUM_ONE:
-      return USDC_ARBITRUM
-    case ChainId.POLYGON:
-      return USDC_POLYGON
-    case ChainId.POLYGON_MUMBAI:
-      return USDC_POLYGON_MUMBAI
-    case ChainId.BNB:
-      return USDC_BNB
-    case ChainId.AVALANCHE:
-      return USDC_AVAX
-    case ChainId.BASE:
-      return USDC_BASE
-    case ChainId.BASE_GOERLI:
-      return USDC_BASE_GOERLI
-    default:
-      throw new Error(`Chain id: ${chainId} not supported`)
-  }
-}
-
-export const WNATIVE_ON = (chainId: ChainId): Token => {
-  return WRAPPED_NATIVE_CURRENCY[chainId]
-}
